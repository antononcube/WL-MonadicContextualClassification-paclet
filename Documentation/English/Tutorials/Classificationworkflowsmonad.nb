(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   2903006,      54953]
NotebookOptionsPosition[   2862996,      54092]
NotebookOutlinePosition[   2864037,      54123]
CellTagsIndexPosition[   2863914,      54117]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Classification workflows monad", "Title",
 CellID->165712792,ExpressionUUID->"9474c70f-ea41-4bab-915c-5703a8faaaec"],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.7299623392389307`*^9, 3.729962345932851*^9}},
 CellID->1984562501,ExpressionUUID->"f0f2ea4e-61df-4878-a7a6-aa4b79bab3ab"],

Cell["\<\
In this document we describe the design and implementation of a (software \
programming) monad for classification workflows specification and execution. \
The design and implementation are done with Mathematica / Wolfram Language \
(WL).\
\>", "Text",
 CellChangeTimes->{{3.729963069656266*^9, 3.729963077282846*^9}, {
  3.729963173392886*^9, 3.7299632301500397`*^9}, {3.734605693822016*^9, 
  3.734605736525889*^9}, {3.7353248385612926`*^9, 3.735324838583312*^9}},
 CellID->1973432750,ExpressionUUID->"89c0e883-a178-4082-ba9c-85485d89c52c"],

Cell["\<\
The goal of the monad design is to make the specification of classification \
workflows (relatively) easy, straightforward, by following a certain main \
scenario and specifying variations over that scenario.\
\>", "Text",
 CellChangeTimes->{{3.733424346363296*^9, 3.733424479284396*^9}, {
  3.7346057562607937`*^9, 3.734605759982778*^9}},
 CellID->1746784982,ExpressionUUID->"aaf144a9-49c9-4a59-97f8-a22ad1df81cb"],

Cell[TextData[{
 "The monad is named ",
 StyleBox["ClCon", "Program"],
 " and it is based on the State monad package ",
 ButtonBox["\[OpenCurlyDoubleQuote]StateMonadCodeGenerator.m\
\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"],
 ", [",
 ButtonBox["AAp1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/StateMonadCodeGenerator.m"],
 ", ",
 ButtonBox["AA1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Monad-code-generation-and-extension.md"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Monad-code-generation-and-extension.md"],
 "], the classifier ensembles package ",
 ButtonBox["\[OpenCurlyDoubleQuote]ClassifierEnsembles.m\
\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"],
 ", [",
 ButtonBox["AAp4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"],
 ", ",
 ButtonBox["AA2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/ROC-for-Classifier-Ensembles-Bootstrapping-Damaging-and-\
Interpolation.md"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/ROC-for-Classifier-Ensembles-Bootstrapping-Damaging-and-\
Interpolation.md"],
 "], and the package for ",
 ButtonBox["Receiver Operating Characteristic (ROC)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Receiver_operating_characteristic"], 
    None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Receiver_operating_characteristic"],
 " functions calculation and plotting ",
 ButtonBox["\[OpenCurlyDoubleQuote]ROCFunctions.m\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ROCFunctions.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ROCFunctions.m"],
 ", [",
 ButtonBox["AAp5",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ROCFunctions.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ROCFunctions.m"],
 ", ",
 ButtonBox["AA2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/ROC-for-Classifier-Ensembles-Bootstrapping-Damaging-and-\
Interpolation.md"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/ROC-for-Classifier-Ensembles-Bootstrapping-Damaging-and-\
Interpolation.md"],
 ", ",
 ButtonBox["Wk2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Receiver_operating_characteristic"], 
    None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Receiver_operating_characteristic"],
 "]."
}], "Text",
 CellChangeTimes->{{3.7299632342784357`*^9, 3.729963293048636*^9}, {
  3.729963565845484*^9, 3.72996363990326*^9}, {3.729963967206873*^9, 
  3.7299639763618526`*^9}, {3.729964780311965*^9, 3.729964847307914*^9}, {
  3.733332657678261*^9, 3.733332664225993*^9}, {3.733812303947192*^9, 
  3.733812382749382*^9}, {3.733812570830401*^9, 3.733812610099595*^9}, {
  3.735275574722394*^9, 3.73527558480377*^9}, {3.7352756207777357`*^9, 
  3.7352756449539347`*^9}, {3.73532491231581*^9, 3.7353249375160303`*^9}},
 CellID->2113737984,ExpressionUUID->"0ef31b06-ff5d-46be-aadc-840234c18933"],

Cell[TextData[{
 "The data for this document is read from WL\[CloseCurlyQuote]s repository \
using the package ",
 ButtonBox["\[OpenCurlyDoubleQuote]GetMachineLearningDataset.m\
\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaVsR/blob/master/Projects/\
ProgressiveMachineLearning/Mathematica/GetMachineLearningDataset.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaVsR/blob/master/Projects/\
ProgressiveMachineLearning/Mathematica/GetMachineLearningDataset.m"],
 ", [",
 ButtonBox["AAp10",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaVsR/blob/master/Projects/\
ProgressiveMachineLearning/Mathematica/GetMachineLearningDataset.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaVsR/blob/master/Projects/\
ProgressiveMachineLearning/Mathematica/GetMachineLearningDataset.m"],
 "]."
}], "Text",
 CellChangeTimes->{{3.733917713661336*^9, 3.7339177452064657`*^9}, {
  3.734605805422374*^9, 3.734605849466728*^9}, {3.734605914851905*^9, 
  3.734605918520626*^9}},
 CellID->1919808414,ExpressionUUID->"93ea4686-904b-4596-af32-e66e128edc2d"],

Cell[TextData[{
 "The monadic programming design is used as a ",
 ButtonBox["Software Design Pattern",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Software_design_pattern"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Software_design_pattern"],
 ". The ",
 StyleBox["ClCon", "Program"],
 " monad can be also seen as a ",
 ButtonBox["Domain Specific Language",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Domain-specific_language"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Domain-specific_language"],
 " (DSL) for the specification and programming of machine learning \
classification workflows.  "
}], "Text",
 CellChangeTimes->{{3.734128085906904*^9, 3.7341282116281776`*^9}, {
  3.734128250857126*^9, 3.734128278453511*^9}, {3.734128532191946*^9, 
  3.734128534407834*^9}, {3.734605928546863*^9, 3.7346059476585484`*^9}},
 CellID->278217923,ExpressionUUID->"a8c809b1-c9c1-424b-8150-11f14fa09af0"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is an example of using the ",
 StyleBox["ClCon", "Program"],
 " monad over the Titanic data:"
}], "Text",
 CellChangeTimes->{{3.733424602697495*^9, 3.733424609256131*^9}, {
  3.733917661944965*^9, 3.73391770510023*^9}},
 CellID->936732342,ExpressionUUID->"cfb7fb14-0a42-4884-9d80-e9086b6b47c0"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TemplateBox[{
       StyleBox[
        TagBox[
         RowBox[{"ClConUnit", "[", "dsTitanic", "]"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* lift the data to the monad *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConSplitData", "[", "0.75`", "]"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* split the data *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{
          "ClConMakeClassifier", "[", "\"\\\"LogisticRegression\\\"\"", "]"}],
          HoldForm], "Input", StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* create a classifier *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox[
         RowBox[{"ClConClassifierMeasurements", "[", 
           RowBox[{"{", 
             
             RowBox[{"\"\\\"Accuracy\\\"\"", ",", "\"\\\"Precision\\\"\"", 
               ",", "\"\\\"Recall\\\"\""}], "}"}], "]"}], HoldForm], "Input", 
        StripOnInput -> False], 
       StyleBox[
       "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
        False]},
      "RowDefault"], 
     StyleBox["\<\"(* compute classifier measurements *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]},
    {
     TemplateBox[{"\"  \"", 
       StyleBox[
        TagBox["ClConEchoValue", HoldForm], "Input", StripOnInput -> False]},
      "RowDefault"], 
     StyleBox["\<\"(* display the current pipeline value *)\"\>",
      StripOnInput->False,
      ShowAutoStyles->False,
      ShowSyntaxStyles->False,
      TranslationOptions->{"Enabled"->False},
      AutoNumberFormatting->False,
      FontWeight->"Normal",
      FontColor->RGBColor[0.27, 0.58, 0.68]]}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.7353253189697847`*^9, 3.735325757318816*^9, 3.735325869836321*^9, 
   3.735325906258284*^9, 3.73532593879351*^9, {3.7353261470608873`*^9, 
   3.735326211696939*^9}, 3.735326247726994*^9},
 CellLabel->"Out[29]=",
 CellID->457855837,ExpressionUUID->"a05d7dd5-7be7-492b-ab42-58f4d8f58a44"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7584097859327217`"}], ",", 
    RowBox[{"\<\"Precision\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"died\"\>", "\[Rule]", "0.8186528497409327`"}], ",", 
       RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6716417910447762`"}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\<\"Recall\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"died\"\>", "\[Rule]", "0.7821782178217822`"}], ",", 
       RowBox[{"\<\"survived\"\>", "\[Rule]", "0.72`"}]}], 
      "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.733918309284479*^9},
 CellID->749145258,ExpressionUUID->"5597764f-5a79-4882-bd3f-08c0e79f5fcd"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " The table above is produced with the ",
 ButtonBox["TraceMonad",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/MonadMakers/ref/TraceMonad.html"], None},
  ButtonNote->
   "https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/MonadMakers/ref/TraceMonad.html"],
 " of the paclet ",
 ButtonBox["\"MonadMakers\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/MonadMakers/"], None},
  ButtonNote->
   "https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/MonadMakers/"],
 " and some of the explanations below also utilize that package."
}], "Text",
 CellChangeTimes->{{3.734605965389032*^9, 3.734606004347516*^9}, {
  3.734606121697858*^9, 3.734606199245494*^9}, {3.73532508224557*^9, 
  3.7353250916384783`*^9}, {3.735325138885953*^9, 3.735325138889399*^9}, {
  3.932505985332405*^9, 3.932506047287444*^9}, {3.932506081134336*^9, 
  3.93250609769346*^9}},
 CellID->187728845,ExpressionUUID->"6e88aadf-c525-4d29-ac12-c1b8ffbf3511"],

Cell[TextData[{
 "As it was mentioned above the monad ",
 StyleBox["ClCon", "Program"],
 " can be seen as a DSL. Because of this the monad pipelines made with ",
 StyleBox["ClCon", "Program"],
 " are sometimes called \[OpenCurlyDoubleQuote]specifications\
\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{{3.734606383613448*^9, 3.734606446219247*^9}, {
  3.735374865796884*^9, 3.735374865930313*^9}},
 CellID->505220472,ExpressionUUID->"79ced15c-85d8-4a5e-afe3-992123d1944b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Paclet load", "Section",
 CellChangeTimes->{{3.734128402576953*^9, 3.734128407121316*^9}, {
  3.7346056573491297`*^9, 3.734605658956362*^9}, {3.9325058697105093`*^9, 
  3.932505872669098*^9}},
 CellID->90132666,ExpressionUUID->"32aa507b-6103-40f5-b148-bdcf8d1110d3"],

Cell[TextData[{
 "The following commands load the packages [",
 ButtonBox["AAp1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MonadicProgramming/MonadicContextualClassification.m"],
 "--AAp10, AAp12]:"
}], "Text",
 CellChangeTimes->{{3.7299638255635138`*^9, 3.729963835812889*^9}, {
  3.729964920263391*^9, 3.729964928484428*^9}, {3.729964970714044*^9, 
  3.729964970717979*^9}, {3.733332668106379*^9, 3.7333326716498137`*^9}, {
  3.73340954221803*^9, 3.733409562603696*^9}, {3.7334236119085073`*^9, 
  3.7334236123121433`*^9}, {3.733812430325061*^9, 3.7338124321584387`*^9}, {
  3.7338126410009336`*^9, 3.733812641943575*^9}, {3.7352060128547173`*^9, 
  3.735206016026758*^9}, {3.735325019491962*^9, 3.735325042576253*^9}},
 CellID->883746327,ExpressionUUID->"f7874c5c-d68b-4abe-ad9d-4410d01ebd1e"],

Cell[CellGroupData[{

Cell["Load the paclet", "MathCaption",
 CellChangeTimes->{{3.9325058777316437`*^9, 3.932505898623266*^9}},
 CellID->1788954511,ExpressionUUID->"ae5b5193-8fce-4c74-8280-8c807e1b84f1"],

Cell[BoxData[
 RowBox[{"Needs", "[", 
  "\"\<AntonAntonov`MonadicContextualClassification`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.93250590127887*^9, 3.932505923553713*^9}},
 CellLabel->"In[12]:=",
 CellID->1836101776,ExpressionUUID->"449c599e-9c5d-4936-8a8b-05e37c7021d9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data load", "Section",
 CellChangeTimes->{{3.734127982686112*^9, 3.7341279840253067`*^9}, {
  3.734524968068388*^9, 3.734524976160231*^9}},
 CellID->812892736,ExpressionUUID->"d7119f5c-9a3e-4ffa-907d-e801a2292568"],

Cell["\<\
In this section we load data that is used in the rest of the document. The \
\[OpenCurlyDoubleQuote]quick\[CloseCurlyDoubleQuote] data is created in order \
to specify quick, illustrative computations. \
\>", "Text",
 CellChangeTimes->{{3.7346055327412453`*^9, 3.734605619851153*^9}, 
   3.734605664750949*^9, {3.7346062228606443`*^9, 3.734606276949911*^9}, {
   3.734606355805208*^9, 3.734606371484831*^9}, {3.734635493505104*^9, 
   3.734635510737652*^9}, {3.734637271590427*^9, 3.734637297735574*^9}, 
   3.7348686062609577`*^9},
 CellID->2144735385,ExpressionUUID->"a9f7f3be-b3e0-437e-be5c-1381365882cf"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " In all datasets the classification labels are in the last column."
}], "Text",
 CellChangeTimes->{{3.734868608405525*^9, 3.7348686143784533`*^9}},
 CellID->1054600800,ExpressionUUID->"a1786243-d9b8-4120-bff3-f9f8eac4c57f"],

Cell[TextData[{
 "The summarization of the data is done through ",
 StyleBox["ClCon", "Program"],
 ", which in turn uses the function ",
 StyleBox["RecordsSummary", "Program"],
 " from the paclet ",
 ButtonBox["\"DataReshapers\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/DataReshapers/"], None},
  ButtonNote->
   "https://resources.wolframcloud.com/PacletRepository/resources/\
AntonAntonov/DataReshapers/"],
 "."
}], "Text",
 CellChangeTimes->{{3.734608951963566*^9, 3.734609005366984*^9}, {
  3.734609042381068*^9, 3.734609057671172*^9}, {3.734609107239017*^9, 
  3.7346091147087383`*^9}, {3.932506108073207*^9, 3.932506158019973*^9}},
 CellID->1493106909,ExpressionUUID->"218a529c-1b5b-425f-9d70-d2e5fcd69e09"],

Cell[CellGroupData[{

Cell["WL resources data", "Subsection",
 CellChangeTimes->{{3.7345249902912397`*^9, 3.734524996716469*^9}},
 CellID->1301404368,ExpressionUUID->"dafa2903-3cbf-4323-afdc-48578b7858b4"],

Cell[CellGroupData[{

Cell[TextData[{
 "The following commands produce datasets using the package [",
 ButtonBox["AAp10",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaVsR/blob/master/Projects/\
ProgressiveMachineLearning/Mathematica/GetMachineLearningDataset.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaVsR/blob/master/Projects/\
ProgressiveMachineLearning/Mathematica/GetMachineLearningDataset.m"],
 "] (that utilizes ",
 StyleBox["ExampleData", "Program"],
 "):"
}], "Text",
 CellChangeTimes->{{3.734127995128888*^9, 3.734128048538787*^9}, {
  3.735326362888472*^9, 3.7353263628919287`*^9}},
 CellID->582268281,ExpressionUUID->"9f9d8d17-f071-4cf5-aedb-8346cf5d41c6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"dsTitanic", "=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<ExampleDataset\>\"", "]"}], "[", 
    RowBox[{"{", 
     RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Titanic\>\""}], "}"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dsMushroom", "=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<ExampleDataset\>\"", "]"}], "[", 
    RowBox[{"{", 
     RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<Mushroom\>\""}], "}"}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"dsWineQuality", "=", 
   RowBox[{
    RowBox[{"ResourceFunction", "[", "\"\<ExampleDataset\>\"", "]"}], "[", 
    RowBox[{"{", 
     RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<WineQuality\>\""}], "}"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dsWineQuality", "=", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"KeyDrop", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"{", "\"\<wine quality (score between 1-10)\>\"", "}"}]}], 
         "]"}], ",", 
        RowBox[{"Association", "[", 
         RowBox[{"\"\<wineQuality\>\"", "\[Rule]", 
          RowBox[{
          "#1", "[", "\"\<wine quality (score between 1-10)\>\"", "]"}]}], 
         "]"}]}], "]"}], "&"}], ")"}], "/@", "dsWineQuality"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.733917192105412*^9, 3.733917211836124*^9}, 
   3.7341279924432163`*^9, {3.932505369802216*^9, 3.932505457109816*^9}, {
   3.932509291658845*^9, 3.932509294302555*^9}},
 CellLabel->"In[81]:=",
 CellID->100019388,ExpressionUUID->"f5d51a05-e5ea-4a3c-bb71-dbb0b5f6e801"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Here is are the dimensions of the datasets:", "Text",
 CellChangeTimes->{{3.734605516098584*^9, 3.7346055305585423`*^9}},
 CellID->1693642162,ExpressionUUID->"d029c6c8-0dbd-42af-93ee-0adbc72efc41"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", 
  RowBox[{
   RowBox[{"Dataset", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"Dimensions", "[", 
          RowBox[{"ToExpression", "[", "#", "]"}], "]"}], ",", "#"}], "]"}], 
       "&"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "\"\<dsTitanic\>\"", ",", "\"\<dsMushroom\>\"", ",", 
        "\"\<dsWineQuality\>\""}], "}"}]}], "]"}], "]"}], "[", 
   RowBox[{"All", ",", 
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<name\>\"", ",", "\"\<rows\>\"", ",", "\"\<columns\>\""}],
         "}"}], ",", "#"}], "]"}], "&"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.7345311877229156`*^9, 3.73453138949045*^9}, {
  3.734531504863031*^9, 3.7345315340555353`*^9}},
 CellLabel->"In[85]:=",
 CellID->148075749,ExpressionUUID->"490eda8c-cfab-4128-9eb4-d9b2e2cf1131"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "name" -> "dsTitanic", "rows" -> 1309, "columns" -> 4|>, <|
       "name" -> "dsMushroom", "rows" -> 8124, "columns" -> 23|>, <|
       "name" -> "dsWineQuality", "rows" -> 4898, "columns" -> 12|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "name"} -> 1, {All, "rows"} -> 
        1, {All, "columns"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "name" -> TypeSystem`PackageScope`AtomShape[145.60000000000002`], 
            "rows" -> TypeSystem`PackageScope`AtomShape[34], "columns" -> 
            TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 3, {All}]], 3, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"name", "rows", "columns"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer]}], 3], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "name"} -> 1, {All, "rows"} -> 
        1, {All, "columns"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "name" -> TypeSystem`PackageScope`AtomShape[145.60000000000002`], 
            "rows" -> TypeSystem`PackageScope`AtomShape[34], "columns" -> 
            TypeSystem`PackageScope`AtomShape[34]|>], 
          DirectedInfinity[1], 3, {All}]], 3, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"name", "rows", "columns"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer]}], 3], "Path" -> {}, "DisplayedRowCount" -> 
     3, "DisplayedColumnCount" -> 3, "DataRowCount" -> 3, "DataColumnCount" -> 
     3, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["rows", 
                  Style[
                  "rows", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "rows"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "rows"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["columns", 
                  Style[
                  "columns", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "columns"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "columns"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["dsTitanic", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1309"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["rows"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["columns"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["dsMushroom", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8124"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["rows"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["23"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["columns"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["dsWineQuality", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4898"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["rows"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["12"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["columns"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{
       275.1650000000001, {63.812713623046875`, 70.42648315429688}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{
      275.1650000000001, {63.812713623046875`, 70.42648315429688}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.932506605661717*^9, {3.9325091447937927`*^9, 3.932509168856223*^9}, 
   3.93250930090807*^9},
 CellLabel->"Out[85]=",
 CellID->60020212,ExpressionUUID->"21a2711d-0bc7-493b-a4cf-0a345da40d02"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is the summary of ",
 StyleBox["dsTitanic", "Program"],
 ":"
}], "Text",
 CellChangeTimes->{{3.7345315474079227`*^9, 3.7345315565888643`*^9}},
 CellID->1076109769,ExpressionUUID->"a025e85d-2b3d-4b70-9069-b20b0271e6f8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClConUnit", "[", "dsTitanic", "]"}], "\[DoubleLongRightArrow]", 
   RowBox[{"ClConSummarizeData", "[", 
    RowBox[{"\"\<MaxTallies\>\"", "\[Rule]", "12"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.734531100845096*^9, 3.734531109911931*^9}, {
  3.932505487507504*^9, 3.9325054896426573`*^9}, {3.932505546835794*^9, 
  3.932505560224964*^9}},
 CellLabel->"In[86]:=",
 CellID->69612549,ExpressionUUID->"d094a1e3-f196-4434-868f-da52f12e3cf0"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"Anonymous", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      TagBox[GridBox[{
         {
          StyleBox["\<\"1 passenger class\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"3rd\"\>", "709"},
             {"\<\"1st\"\>", "323"},
             {"\<\"2nd\"\>", "277"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"2 passenger age\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"Min\"\>", "0.1667`"},
             {"\<\"1st Qu\"\>", "21.`"},
             {"\<\"Median\"\>", "28.`"},
             {"\<\"Mean\"\>", "29.8811345124283`"},
             {"\<\"3rd Qu\"\>", "39.`"},
             {"\<\"Max\"\>", "80.`"},
             {"\<\"Missing[___]\"\>", "263"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"3 passenger sex\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"male\"\>", "843"},
             {"\<\"female\"\>", "466"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"4 passenger survival\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"died\"\>", "809"},
             {"\<\"survived\"\>", "500"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"]}], "}"}]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.93250930096577*^9},
 CellID->1589872641,ExpressionUUID->"39163e5b-7f4c-466f-8671-a28ae4967561"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is the summary of ",
 StyleBox["dsMushroom", "Program"],
 " in long form:"
}], "Text",
 CellChangeTimes->{{3.734531562316587*^9, 3.734531592071001*^9}},
 CellID->1551487741,ExpressionUUID->"c26635c5-6794-4381-8c95-60e1fa1c7f1f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClConUnit", "[", "dsMushroom", "]"}], "\[DoubleLongRightArrow]", 
   RowBox[{"ClConSummarizeDataLongForm", "[", 
    RowBox[{"\"\<MaxTallies\>\"", "\[Rule]", "12"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{
  3.734531034889114*^9, {3.734531085997457*^9, 3.734531087696159*^9}, {
   3.9325054991942253`*^9, 3.932505507525955*^9}},
 CellLabel->"In[87]:=",
 CellID->1108021113,ExpressionUUID->"011c9304-3635-41a6-910a-5936be9928c6"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"Anonymous", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      TagBox[GridBox[{
         {
          StyleBox["\<\"1 RowID\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"1\"\>", "23"},
             {"\<\"10\"\>", "23"},
             {"\<\"100\"\>", "23"},
             {"\<\"1000\"\>", "23"},
             {"\<\"1001\"\>", "23"},
             {"\<\"1002\"\>", "23"},
             {"\<\"1003\"\>", "23"},
             {"\<\"1004\"\>", "23"},
             {"\<\"1005\"\>", "23"},
             {"\<\"1006\"\>", "23"},
             {"\<\"1007\"\>", "23"},
             {"\<\"(Other)\"\>", "129559"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"2 Variable\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"bruises?\"\>", "5644"},
             {"\<\"cap-color\"\>", "5644"},
             {"\<\"cap-shape\"\>", "5644"},
             {"\<\"cap-surface\"\>", "5644"},
             {"\<\"edibility of mushroom (either edible or poisonous)\"\>", 
              "5644"},
             {"\<\"gill-attachment\"\>", "5644"},
             {"\<\"gill-color\"\>", "5644"},
             {"\<\"gill-size\"\>", "5644"},
             {"\<\"gill-spacing\"\>", "5644"},
             {"\<\"habitat\"\>", "5644"},
             {"\<\"odor\"\>", "5644"},
             {"\<\"(Other)\"\>", "67728"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"3 Value\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"white\"\>", "13854"},
             {"\<\"smooth\"\>", "8540"},
             {"\<\"partial\"\>", "5644"},
             {"\<\"free\"\>", "5626"},
             {"\<\"one\"\>", "5488"},
             {"\<\"brown\"\>", "5012"},
             {"\<\"broad\"\>", "4940"},
             {"\<\"close\"\>", "4620"},
             {"\<\"bulbous\"\>", "3776"},
             {"\<\"gray\"\>", "3504"},
             {"\<\"pink\"\>", "3496"},
             {"\<\"(Other)\"\>", "65312"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"]}], "}"}]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.932509301140378*^9},
 CellID->1997941313,ExpressionUUID->"46ce4e71-10ae-49dd-a073-44e94515ab23"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Here is the summary of ",
 StyleBox["dsWineQuality", "Program"],
 " in long form:"
}], "Text",
 CellChangeTimes->{{3.7345315994907713`*^9, 3.734531606918828*^9}},
 CellID->901834175,ExpressionUUID->"65631125-c033-4b2d-ab40-6d309757b216"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClConUnit", "[", "dsWineQuality", "]"}], 
   "\[DoubleLongRightArrow]", 
   RowBox[{"ClConSummarizeDataLongForm", "[", 
    RowBox[{"\"\<MaxTallies\>\"", "\[Rule]", "12"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.734531001135297*^9, 3.734531080099641*^9}},
 CellLabel->"In[88]:=",
 CellID->187398699,ExpressionUUID->"035b4718-48ae-488e-a089-984761b1a492"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"Anonymous", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      TagBox[GridBox[{
         {
          StyleBox["\<\"1 RowID\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"1\"\>", "12"},
             {"\<\"10\"\>", "12"},
             {"\<\"100\"\>", "12"},
             {"\<\"1000\"\>", "12"},
             {"\<\"1001\"\>", "12"},
             {"\<\"1002\"\>", "12"},
             {"\<\"1003\"\>", "12"},
             {"\<\"1004\"\>", "12"},
             {"\<\"1005\"\>", "12"},
             {"\<\"1006\"\>", "12"},
             {"\<\"1007\"\>", "12"},
             {"\<\"(Other)\"\>", "58625"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"2 Variable\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"alcohol\"\>", "4898"},
             {"\<\"chlorides\"\>", "4898"},
             {"\<\"density\"\>", "4898"},
             {"\<\"fixed acidity\"\>", "4898"},
             {"\<\"free sulfur dioxide\"\>", "4898"},
             {"\<\"pH\"\>", "4898"},
             {"\<\"residual sugar\"\>", "4898"},
             {"\<\"sulphates\"\>", "4898"},
             {"\<\"total sulfur dioxide\"\>", "4898"},
             {"\<\"volatile acidity\"\>", "4898"},
             {"\<\"wineQuality\"\>", "4898"},
             {"\<\"citric acid\"\>", "4879"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"3 Value\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"Min\"\>", "0.009`"},
             {"\<\"1st Qu\"\>", "0.42`"},
             {"\<\"Median\"\>", "3.22`"},
             {"\<\"3rd Qu\"\>", "9.4`"},
             {"\<\"Mean\"\>", "17.392077775754373`"},
             {"\<\"Max\"\>", "440.`"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"]}], "}"}]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.932509301230196*^9},
 CellID->1345343099,ExpressionUUID->"fd59ae36-1848-454f-8324-f4d65aa09759"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[OpenCurlyDoubleQuote]Quick\[CloseCurlyDoubleQuote] data", "Subsection",
 CellChangeTimes->{{3.734525002393546*^9, 3.7345250099542*^9}},
 CellID->788914581,ExpressionUUID->"909da40b-4fc5-4124-abe3-4bc98eee6a5e"],

Cell[CellGroupData[{

Cell["\<\
In this subsection we make up some data that is used for illustrative \
purposes.\
\>", "Text",
 CellChangeTimes->{{3.734525051399338*^9, 3.734525105005721*^9}, {
   3.734525139522822*^9, 3.734525145089698*^9}, 3.7346056685760593`*^9, {
   3.7348691812680197`*^9, 3.734869183898295*^9}},
 CellID->723326289,ExpressionUUID->"f1dd0f81-7f56-4da2-bfc4-44be2797ca16"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "212", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dsData", "=", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1000"}], "}"}], ",", 
     RowBox[{"{", "100", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dsData", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{"Transpose", "[", 
     RowBox[{"{", 
      RowBox[{"dsData", ",", 
       RowBox[{"Mod", "[", 
        RowBox[{"dsData", ",", "3"}], "]"}], ",", 
       RowBox[{
        RowBox[{"Last", "@*", "IntegerDigits"}], "/@", "dsData"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"ToString", "[", 
          RowBox[{"Mod", "[", 
           RowBox[{"#", ",", "3"}], "]"}], "]"}], "&"}], "/@", "dsData"}]}], 
      "}"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dsData", "=", 
   RowBox[{"Dataset", "[", 
    RowBox[{"dsData", "[", 
     RowBox[{"All", ",", 
      RowBox[{
       RowBox[{"AssociationThread", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<number\>\"", ",", "\"\<feature1\>\"", ",", "\"\<feature2\>\"", 
           ",", "\"\<label\>\""}], "}"}], ",", "#"}], "]"}], "&"}]}], "]"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Dimensions", "[", "dsData", "]"}]}], "Input",
 CellChangeTimes->{{3.733424611498386*^9, 3.733424613780158*^9}, {
   3.73342466511635*^9, 3.733424914062495*^9}, {3.733425961825121*^9, 
   3.7334260163656273`*^9}, {3.733426048024684*^9, 3.733426110866231*^9}, 
   3.733426229806901*^9, {3.733490670444372*^9, 3.733490672332964*^9}, {
   3.733490783790266*^9, 3.733490784181769*^9}, 3.733871018932397*^9, {
   3.733871514366919*^9, 3.733871515265712*^9}, {3.733871548771123*^9, 
   3.733871568760068*^9}, {3.73426652281143*^9, 3.734266540955665*^9}, 
   3.734525117926757*^9, {3.734531669982628*^9, 3.734531699474715*^9}, {
   3.7351614881506443`*^9, 3.7351614882828617`*^9}, {3.735161720148328*^9, 
   3.7351617326558237`*^9}, {3.735161765420549*^9, 3.735161788503685*^9}, {
   3.735162119848975*^9, 3.735162120026393*^9}, {3.735331043401717*^9, 
   3.735331047314328*^9}, {3.735331089358383*^9, 3.735331089817545*^9}},
 CellLabel->"In[20]:=",
 CellID->40013556,ExpressionUUID->"68587907-f9fb-4959-9ca0-b39bbb4f5ed1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["RandomGeneratorState",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"ExtendedCA\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"State hash: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["7456130942861299876", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"ExtendedCA\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"State hash: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["7456130942861299876", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  RandomGeneratorState[{
   "ExtendedCA", {80, 4, 0}}, {{
    RawArray["UnsignedInteger64",{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0}], 0, 20, 20}, {CompressedData["
1:eJw9lc2KXkUQhoO4cBv1BryAQP1X9dLlgAuJeAERk5DNCElAvHuf/ronzPBx
Tp/T1fX+1Ht++euftx++e/Xq1Zcf+Hn77t9fP39+998fr7n58/nLp4/P7/9+
ev76/uP7zxUfft/vfc/Pb5++fH36mYs3ZTOZaWtlW64pl/PAo6ergoepJeZL
n37iga8Sj+pUWZpV1v70I+s9UrWyzHeVllynTlBIqzW8F0WW9amzJCysQ1Mm
Q0rSzgajaoiItUj3aHvcVtM4xF111EOlX3aURKXPSOt4cYrb44g3CbSmdxWu
Aih9NgwHeA/otCa1M/yxIReLMz25gDieVvcE1rPY0ilevYDz2KA9xoExGqkW
ku5ng7bRjdLKWu0jUnPYA066LjBrcP0N9e40qW/msO0NjvMgIYFFOIwlKxBC
nra6cBG2PIEGsILuXX9m0z21a6SbycrHuqk7L5brjK1GvluezjURPmjepKCq
H3Iut4XE2hHtLj51+ufN4RAskSgEwMsQ9WEtwUnvaRM61xYNPeij8Oz75jAt
6I+6SwzGpWWuNLit6BoINF9SCHf9iKXCF3/sWhWwdyQw9F29Eq7dhn7zRbPC
nVgl8SnY4e62Oq6gjVxr9sWso370o3m4xn2SMKV3gyKXhVJ9m94xz3mwmeGW
7rFqLlx/K2ErozFdLDJCXrdSArUYMWyBlXPM5xpvaSmaK6OygUhcu6y9oC17
GDUw5ZWNyqJJtxiPgeklx/IRMEH90lUYkqvDEvIES/iEiVr5ckAxH4lTtsqw
HQ17rx9cMJ2au0fZzriA2VcZ+zRkEGMg66FyUcDBmYE2aljnmCh2rlRB36ZB
XL913zbZOEAX6IiOx/vb0dPCQBEK6D/HvFAzJXuZfYoz57LA7MnWT5s42uTN
ySJmCFrwLCYTpeIBa6D1PfR7BIKW/GXGKI0w6CFN+YSkO01s38YZwWVd+O46
wspwo+AksoQX6ppuqWDMnYq1c6W8Ls/Q2bVD1BvQe4aOU/ACM0M6YhjAcODR
kZTZOzimY5XaTd+gkMsOF7xT2473YObX8DsBhEvwIpC+DRRtePnwM5TLczIm
kEh6B6xREMtezdAQfw55liBWeXEow0qkLcIoGIdrOONgpqz2uZRhnu1IINm9
o4+cQxgm/CXOSPZQxnjncZBoV0sqRBhpZzsxN4DD3OyvBxJakdfVJMlNNDKI
sdA99cLkrfGbdGBywAE3MK7pNV0T+vxjNybG9sfgqm/Eou30LmUE0ajrfj5w
LuByT7DspD2JwxePPMQyKLOcMb/Z+PAQXqVO81UD+Hl/Gwoymg8tbAxkrZs3
fBHZkRxOpvGk/getsmZd
     "], 4, 0}}, RawArray["UnsignedInteger64",{7456130942861299876, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9325066061608143`*^9, 3.932509169188486*^9},
 CellLabel->"Out[20]=",
 CellID->155282141,ExpressionUUID->"90f45692-99d5-4794-980d-c099dc59c70a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"100", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.9325066061608143`*^9, 3.93250916918961*^9},
 CellLabel->"Out[24]=",
 CellID->634312682,ExpressionUUID->"405135c7-da4d-46aa-a13c-5b3519885504"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Here is a sample of the data:", "Text",
 CellChangeTimes->{{3.734525131319406*^9, 3.734525136066742*^9}},
 CellID->1400122226,ExpressionUUID->"575ae709-f0b8-4f92-912c-6970931a17c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"dsData", ",", "6"}], "]"}]], "Input",
 CellChangeTimes->{{3.734525120496766*^9, 3.734525127303831*^9}, 
   3.734531702195037*^9},
 CellLabel->"In[25]:=",
 CellID->1875932203,ExpressionUUID->"ef527797-614c-4e6b-8051-feb6ba1ef224"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "number" -> 199, "feature1" -> 1, "feature2" -> 9, "label" -> "1"|>, <|
       "number" -> 288, "feature1" -> 0, "feature2" -> 8, "label" -> "0"|>, <|
       "number" -> 96, "feature1" -> 0, "feature2" -> 6, "label" -> "0"|>, <|
       "number" -> 990, "feature1" -> 0, "feature2" -> 0, "label" -> "0"|>, <|
       "number" -> 705, "feature1" -> 0, "feature2" -> 5, "label" -> "0"|>, <|
       "number" -> 565, "feature1" -> 1, "feature2" -> 5, "label" -> "1"|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "number"} -> 
        1, {All, "feature1"} -> 1, {All, "feature2"} -> 1, {All, "label"} -> 
        1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "number" -> TypeSystem`PackageScope`AtomShape[34], "feature1" -> 
            TypeSystem`PackageScope`AtomShape[34], "feature2" -> 
            TypeSystem`PackageScope`AtomShape[34], "label" -> 
            TypeSystem`PackageScope`AtomShape[31.5]|>], 
          DirectedInfinity[1], 4, {All}]], 6, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"number", "feature1", "feature2", "label"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["0", "1"]]}], 6], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "number"} -> 
        1, {All, "feature1"} -> 1, {All, "feature2"} -> 1, {All, "label"} -> 
        1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "number" -> TypeSystem`PackageScope`AtomShape[34], "feature1" -> 
            TypeSystem`PackageScope`AtomShape[34], "feature2" -> 
            TypeSystem`PackageScope`AtomShape[34], "label" -> 
            TypeSystem`PackageScope`AtomShape[31.5]|>], 
          DirectedInfinity[1], 4, {All}]], 6, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"number", "feature1", "feature2", "label"}, {
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["0", "1"]]}], 6], "Path" -> {}, 
     "DisplayedRowCount" -> 6, "DisplayedColumnCount" -> 4, "DataRowCount" -> 
     6, "DataColumnCount" -> 4, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["number", 
                  Style[
                  "number", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "number"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "number"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["feature1", 
                  Style[
                  "feature1", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "feature1"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "feature1"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["feature2", 
                  Style[
                  "feature2", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "feature2"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "feature2"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["label", 
                  Style[
                  "label", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "label"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "label"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["199"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["number"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["feature1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["feature2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["label"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["288"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["number"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["feature1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["feature2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["0", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["label"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["96"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["number"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["feature1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["feature2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["0", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["label"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["990"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["number"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["feature1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["feature2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["0", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["label"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["705"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["number"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["feature1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["feature2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["0", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["label"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["565"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["number"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["feature1"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["feature2"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["label"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{258.425, {113.68366241455078`, 120.29743194580078`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{258.425, {113.68366241455078`, 120.29743194580078`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9325066061860943`*^9, 3.932509169223075*^9},
 CellLabel->"Out[25]=",
 CellID->784422666,ExpressionUUID->"d6f5106e-ace1-4aa0-b1cf-a21a64c3de09"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Here is a summary of the data:", "Text",
 CellChangeTimes->{{3.734525156464959*^9, 3.734525170672564*^9}},
 CellID->1479953663,ExpressionUUID->"3c273c89-b0a5-4f1b-a6e0-18882fe65506"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClConUnit", "[", "dsData", "]"}], "\[DoubleLongRightArrow]", 
   "ClConSummarizeData"}], ";"}]], "Input",
 CellChangeTimes->{{3.733424611498386*^9, 3.733424613780158*^9}, {
   3.73342466511635*^9, 3.733424914062495*^9}, {3.733425961825121*^9, 
   3.7334260163656273`*^9}, {3.733426048024684*^9, 3.733426110866231*^9}, 
   3.733426229806901*^9, {3.733490670444372*^9, 3.733490672332964*^9}, {
   3.733490783790266*^9, 3.733490784181769*^9}, 3.733871018932397*^9, {
   3.733871514366919*^9, 3.733871515265712*^9}, {3.733871548771123*^9, 
   3.733871568760068*^9}, {3.73426652281143*^9, 3.734266540955665*^9}, 
   3.734525117926757*^9, 3.7345317151315928`*^9, {3.734608903513383*^9, 
   3.7346089168171873`*^9}},
 CellLabel->"In[26]:=",
 CellID->1425614487,ExpressionUUID->"2941dd7f-935b-47e8-90c2-a5b38c9fa856"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"Anonymous", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      TagBox[GridBox[{
         {
          StyleBox["\<\"1 number\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"Min\"\>", "20"},
             {"\<\"1st Qu\"\>", "278"},
             {"\<\"Mean\"\>", "531.17`"},
             {"\<\"Median\"\>", "531.5`"},
             {"\<\"3rd Qu\"\>", "801.5`"},
             {"\<\"Max\"\>", "998"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"2 feature1\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"1st Qu\"\>", "0"},
             {"\<\"Min\"\>", "0"},
             {"\<\"Mean\"\>", "0.92`"},
             {"\<\"Median\"\>", "1"},
             {"\<\"3rd Qu\"\>", "2"},
             {"\<\"Max\"\>", "2"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"3 feature2\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"Min\"\>", "0"},
             {"\<\"1st Qu\"\>", "2"},
             {"\<\"Mean\"\>", "4.27`"},
             {"\<\"Median\"\>", "4.5`"},
             {"\<\"3rd Qu\"\>", "6"},
             {"\<\"Max\"\>", "9"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"4 label\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"0\"\>", "40"},
             {"\<\"2\"\>", "32"},
             {"\<\"1\"\>", "28"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"]}], "}"}]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.9325091692800837`*^9},
 CellID->389638529,ExpressionUUID->"cffb270d-e14c-40cf-8d6b-97d05658a4e5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Here we convert the data into a list of record-label rules (and show the \
summary):\
\>", "Text",
 CellChangeTimes->{{3.734530935734426*^9, 3.734530974144422*^9}},
 CellID->783476391,ExpressionUUID->"323d8581-e140-45b5-b3fa-200bd6428740"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"mlrData", "=", 
   RowBox[{"ClConToNormalClassifierData", "[", "dsData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ClConUnit", "[", "mlrData", "]"}], "\[DoubleLongRightArrow]", 
   "ClConSummarizeData"}], ";"}]}], "Input",
 CellChangeTimes->{{3.734287159074461*^9, 3.734287207583577*^9}, 
   3.734531719385775*^9, {3.734608923065411*^9, 3.7346089342804527`*^9}},
 CellLabel->"In[27]:=",
 CellID->1665463780,ExpressionUUID->"8ead3f34-6c33-4806-a512-b3d08898dd8a"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"Anonymous", "\[Rule]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[GridBox[{
          {
           StyleBox["\<\"1 column 1\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"Min\"\>", "20"},
              {"\<\"1st Qu\"\>", "278"},
              {"\<\"Mean\"\>", "531.17`"},
              {"\<\"Median\"\>", "531.5`"},
              {"\<\"3rd Qu\"\>", "801.5`"},
              {"\<\"Max\"\>", "998"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], ",", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"2 column 2\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"1st Qu\"\>", "0"},
              {"\<\"Min\"\>", "0"},
              {"\<\"Mean\"\>", "0.92`"},
              {"\<\"Median\"\>", "1"},
              {"\<\"3rd Qu\"\>", "2"},
              {"\<\"Max\"\>", "2"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], ",", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"3 column 3\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"Min\"\>", "0"},
              {"\<\"1st Qu\"\>", "2"},
              {"\<\"Mean\"\>", "4.27`"},
              {"\<\"Median\"\>", "4.5`"},
              {"\<\"3rd Qu\"\>", "6"},
              {"\<\"Max\"\>", "9"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"]}], "}"}], "\[Rule]", 
     RowBox[{"{", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"1 column 1\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"0\"\>", "40"},
             {"\<\"2\"\>", "32"},
             {"\<\"1\"\>", "28"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], "}"}]}]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.93250916930245*^9},
 CellID->977117200,ExpressionUUID->"f5fc1f9a-f2a2-4d02-9d16-be6aa69b8882"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finally, we make the array version of the dataset:", "Text",
 CellChangeTimes->{{3.734531744468273*^9, 3.7345317595313673`*^9}, {
  3.734531796321067*^9, 3.734531811934556*^9}, {3.73516180787597*^9, 
  3.735161817135619*^9}},
 CellID->1833428833,ExpressionUUID->"5ae61193-f7a9-41cc-8f6b-bee6cb4a7eb5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"arrData", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"dsData", "[", 
     RowBox[{"All", ",", "Values"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.734531760965096*^9, 3.734531791571719*^9}},
 CellLabel->"In[29]:=",
 CellID->195545428,ExpressionUUID->"4c005d67-7b2f-4b0c-96ad-f66ebbe36055"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Design considerations", "Section",
 CellChangeTimes->{{3.7299626857668667`*^9, 3.72996269088453*^9}, {
   3.7299638677412786`*^9, 3.72996387516634*^9}, 3.733916202055888*^9},
 CellID->882028486,ExpressionUUID->"1505f505-dd39-4491-8065-3416e6932e9d"],

Cell["\<\
The steps of the main classification workflow addressed in this document \
follow.\
\>", "Text",
 CellChangeTimes->{{3.7339076803071613`*^9, 3.7339076933041573`*^9}, {
  3.7339081574541693`*^9, 3.733908176229418*^9}, {3.734129060124765*^9, 
  3.734129071577346*^9}, {3.734129126209996*^9, 3.734129131248242*^9}},
 CellID->173148961,ExpressionUUID->"d71dc80d-5a2f-4e09-91ad-6c69d36f7bae"],

Cell["Retrieving data from a data repository.", "ItemNumbered",
 CellChangeTimes->{{3.733907700065312*^9, 3.733907745642332*^9}, {
  3.7339165363928947`*^9, 3.733916556762083*^9}},
 CellID->274245842,ExpressionUUID->"240c6439-7812-4ce3-9034-04873b6c5506"],

Cell["Optionally, transform the data.", "ItemNumbered",
 CellChangeTimes->{{3.733907700065312*^9, 3.733907745642332*^9}, {
  3.7339165363928947`*^9, 3.733916585506267*^9}, {3.733916682393058*^9, 
  3.7339166848698683`*^9}},
 CellID->749960032,ExpressionUUID->"22bdfd2a-a63c-4079-9fec-3d5c7caae4c5"],

Cell[CellGroupData[{

Cell["Split data into training and test parts. ", "ItemNumbered",
 CellChangeTimes->{{3.733907700065312*^9, 3.733907745642332*^9}},
 CellID->996733581,ExpressionUUID->"74515520-960c-47be-9e86-730a29805888"],

Cell["\<\
Optionally, split training data into training and validation parts.\
\>", "SubitemNumbered",
 CellChangeTimes->{{3.733907700065312*^9, 3.733907772955723*^9}, {
  3.733916670787984*^9, 3.733916689459959*^9}},
 CellID->1728849267,ExpressionUUID->"23b517dc-c415-4273-b590-087c15af64ef"]
}, Open  ]],

Cell["Make a classifier with the training data.", "ItemNumbered",
 CellChangeTimes->{{3.733907700065312*^9, 3.7339078235702257`*^9}, {
  3.733916594046283*^9, 3.7339165948667793`*^9}},
 CellID->1315886559,ExpressionUUID->"d14f81af-f989-466a-aefa-c19a5f4c8165"],

Cell[CellGroupData[{

Cell["Test the classifier over the test data.", "ItemNumbered",
 CellChangeTimes->{{3.733907700065312*^9, 3.733907742534182*^9}, {
  3.7339078007656918`*^9, 3.7339078313775873`*^9}},
 CellID->1318800307,ExpressionUUID->"6ee529e7-2779-4a04-9c33-1c640c1d6476"],

Cell["Computation of different measures including ROC.", "SubitemNumbered",
 CellChangeTimes->{{3.733907700065312*^9, 3.733907742534182*^9}, {
  3.7339078007656918`*^9, 3.7339078878572474`*^9}},
 CellID->898039062,ExpressionUUID->"6a52c352-408a-4798-955b-79d072cedbc4"]
}, Open  ]],

Cell["The following diagram shows the steps:", "Text",
 CellChangeTimes->{{3.7339162619182034`*^9, 3.7339162849691153`*^9}, {
  3.7339163885058603`*^9, 3.733916388797142*^9}, {3.932506209052413*^9, 
  3.932506209748973*^9}},
 CellID->827443918,ExpressionUUID->"70a4ea86-eb57-4e8b-8ce7-3b5f685e0bdf"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
DPqBFUj68wuek6OI6mF3XD8i8ZmPGXTw4saH1aG16f4bd6zET9vzWafeiWBz
w+Ks6upq68gGAABSQi2qCYW+KHGbk5vB3pDX2/Hbey58/L6fJDaaIhj81yfT
hhx9+Dv1D1vpMs2+we3Xnd2lb6DizQ8WPlaTd5s6O0h0mf69PnvQkQf+sfo+
cWesCf7PesfAIw4ILJsknnCfPfdQ3YkpZrypMruZ85uT3n3p0VHDj4m9NvF1
xZ8eK5oyWsSbIi5O93vVuXTL6y1Topg5NysrZ0aY3ATQlRV6qPCzscHOuRko
jgaLDW+ulVWq1waePofc5u/PP+XEw99r+a0a/RONxepF4+65aeRpJx0ZWj5J
3Fnvuvsno4bom7LNA4IcWU9cI1qExpJ71JPUFtz5y1tHiRv1rnsuGXmC3iHv
FK2AeNjAI37Q4L5XVf7R3pj0aqtFJfxSC4DFbdmyayrn5srYtbdX1QIAkFSy
s9HSXG8eSysnN0U3I13tYyzR9t9W/2H4aQN+P+YnsfybX7Q9d8XFJz9w20jR
em5eny3jTV++6kLIU4bMMu3Jn4kuRIP7F+LxX3067djBh3jfnWg+ba4IGw89
5IC/rHxB3Olb+ox6TnnnYQeKX7G5PddaTyvjzWvk/k2zX3H80YeJx4gb5599
bHnWzTLY1JxffTx15FnHvPvib79eL+LNPe3tPIXp74/1mNfbL3NuzqvKWd76
vsEZhAC2Svf7/WXufHNys1xUHbpM4BvbLNDrZvfEC7OSUsnEWPknn3DEDw7c
9/CD9j34oP0OPXS/S84fMnXcVZvbc1QVvaU95/rLTx12yuBfXH/2iOFH50+6
vmDKaPHITe8+I+LKwPLJZwwdPPLM41tfflw87MyTB901esQ5w44qmPzzoimj
DzlgX/Gwzo1UJhU5YhCU+Zfbl0ydXeXpng8LAIDkUQOboVDI5XaqnZuGCE/S
HjeZhzx882nOg7+44JhBB59z1jHnn33cEYfun/PUteEN8lz3LRuz1XlBkY2O
n1+m+gZnib6B0+wbqC6E+Nd5rjtGnX3sFRcNveG/hp06ZMACz30iRJ3nuuvc
4Udd/uMf3vBfZ55y4pELPPeLfpRM6LmHtSF0ytirJj9+uRokP/5oM2L15X++
fMrFFxw3ctjRP7/itJHDjhJ9FfGv//lUxJt7m72d9L9j3Yt5mmKxHij0Ls2t
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
E5q3XX/22AcujmySa30/efPJU38o+hJPiB+3mvjPciNavuwqDD1K3L+5PWef
PfeQg+Ed+VPGXjP5d5epeUm5f3PZZDUC/Ju7L7jrxpHftMuZVrOPMXjNG78X
T37u8KOcz9+ge2VguOndZw4//ADxgqMdjsKJ1vymaM3V/lDVZXrwnvPuvmGk
6quIfsXVl578/NgrRMz+5UfT9tprT9HH+OfaKeKRovsx4szBc4ruMKx0LT1k
i/t+xWGvOnZ5l+ZWV5SHI3QtAGxLY8NcM+dmqZVzMyXBpgqLRDUoKtiBR+4n
qk15jwjE1rwwM+cWcfubz6bvsccef2582AqgzKry4vNOWlhz/7o3xp920kAV
bKpS77pbRKmfvf3MsYMPEdGfeirxVfx4teP2/9uQI+JNVVc/P+4qcz2tvG3u
5RfxZv5nbz8lf7A9K7Yt4p2mhz15t4sqfdyvLtmywcq0JcrZpx+1bMGj4skL
nrt+3JiL1fNs2ZDbf89+1vMMOmzzhunq8YY396+rXxhw+EF/Wz1F/IH9+vUT
D4j97a4pN4ggNxnvavztNfNhyZybqziWFgCQBi3N9a/WT7Bzbia9j9FlFm/j
kqcHHXHAV+umqm//bvcxvv40SzTKVh/DTOEd8eeJPsbL1bE+huxLqDMJ6133
jLl1lNVVWJ8dO6tnsd3H2GfP/ur5p4y96tnfXxHrY3jfe1o8WP3gZtU5MYvq
nIjw8/EHLwlvdMSe0Opj+PPzRR/jV5eoCFH0MdSYufU8n6lZS9kzEX2MIw/Z
X/xRX32UZfUx7KW2oo/x4N0/Vn2n2PPv2s6G2cco6X4sLT0NYHdm5T2RN3Vr
+15UTW7mxXNupmwZbULV9/zvrxRV6EN3XeDJu3XjkgkqVBTx5p799hAxYOKP
iEdOHXf1bOcd5ww7Kuepa2NFVMvDTx00p/Cue24aaW4G6TRYGj87LuB8YbyI
N6+MtQX+954RN8QP3nvzqB5fpIhqP1j4WPnUG5986NKbrhl28EH7qeZJxJtj
H7hYHXYUmz+1XoB90Lqair3swqHv1D8s4s399u2f+Mxzi+6++4ZzduH5tPHT
h3z2Qeh+14bFWdXV1daRDQAApIRaVBMKfVHiNic3gynK6y2L1z5awWwQn33s
ctXHmJV/+6bFT6vHfPNZluxjrM9W039qb4uIFkUfo7bgznOHH92lj3HWaYPj
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
2ddecfqZJx8lKu1zzzgu79mfFz1/48GH7C9+KvDB86edPFC0QSIs3bxBNlsq
r9bXH029dfQw8QJuu/7sU4cMePS+i0SALJ5f3H/gAfup+FQ2E+b85j2jR+7i
91O1AqJNDxZ/ukTm3GS8EQCQYmrnpsvt3OwtM7TSqFe0TUXqRPfkFnU2u5m8
W90j+ga1xXeefdbRl//4hzdec9ppJwxcWPVLI1D09frp++63558bHxZN+ejL
z/jxeUNEX2LjkmciZh8jtOIF0cc4b/jR11459Jxhg/MnXa9yjf3rk2l3jD77
zJNFEz/85OOPnDL+apmee0O2WuMkygvjr5j8+GXqtprfVGur/vnJVNE5OfOH
g2+/bviJxx/+/DjRx5B5335+xRnDhh511+gRI08/rnjy6MIXbjr4oP073psY
/GDSqUMHiG7P6tfGW30MM+6TnZzrzhR9jFuvG6b6GN9ulEuqzPnNfWPdAEOd
EXHTuYY1Fu1M3MG0M6VzXu+ov2zT8pzKmRVhfYtMtRpltw6AnjXUz1GTm0ag
RNS99u7FfOP7L/XfkfhI5bSKep3B9yevf+dpdeqs2ltxwD79ZaLkDY7Vr4/9
y8rnDTM+NZN25UU0ucvyH2un+96bHPXlqr3z8nB1c5L060+z1rz+xD8/+YPa
QSknbbWCaHxk1TzH2+sUJWJvtFR1svila18fJ2JPeymOw0yP8vSqReO+/PgF
M51l/PGyBfk4K9KRLUdTrcUwDjXqKJ5n3RvjN7fnGIm7PDSzwlcnxZmbOHbt
JLJ9NoJsDsRlra1ybG1y02AoEgCQTC3Nda81qj5GsR4oSmnXIlgQD6/sc3UC
yyevf+upLV7rZHs5pr1vf9EKb2mfvvbN8X9Z8Zz58uzjc832+h9rp3UsmWg2
+rnxfZfmz374muxj2LGYM37urrfQivjUElbzHH7VzxF3iiBX9DFE7CkCQLMn
IH9Ee3/S6lef+Opj89nky3PEftE/P5wmO0XyCa3nlyty5dSqeAHjZB/D7EWI
TpHaDaT+VT3SGt8OxA52+B7Bfve83iFXbWVua2urLqNNgk0APYvl3LTyYdlV
pZrZTNz7kNziizVAji6/8ev1WfEDXbV4oGcFfZrTrk4Tq1CH2rDf+bcU2rW6
w+gc/Zm3c2KPFE+lHimf05sXf2YzOFXTl/Ha2x6n1RMiVvmq7JTK1rZTu8VJ
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
i6/zQIFPnhRUW+VYvXKNbrb8KiVWuj9xAIA+q0sj09xU92r9E4a/XM5vaoXm
cKhsqnSvwxziZn4z04radSu/Fuqaa26lo7W1NU2fNQCZwe/3l5bKnJsi3gxr
xTJC8aW7KqPsbLGPXzBvB+X55O1LsmqqPXbaZZ1gEwCQEroRtY6l3dJh5vX2
u2LH0sqM3jJdVz7nBWVgcVh5vWXOzVxPZXk4QtcCwLY0NtS92TJJTm6a+bDk
Khcfg40ZW3wF6vKpY4JE4y5zbq7iWFoAQBrIY2nnPWWEZqq83vFc3ppMiUJ/
IxOLlc4mUBwNlHbPuUlPA0AXXq+3vKRQTW7KxbR+lzX8qJa7UL5j8feWdywW
ZsoDADV3+5Ks6upqXSfnJgAg1QKBgKvYPh0iUCqPpfUXyUbK7mbQ38iUovtl
MfsYqsg+hnf5dE+lOpaWbgaAraqvr3+9ZZIR8sj8y/4yeV6cnOU0h620IkpG
FbP+F1cwWCIuovgaDbhrZua2tbWl+1MGANgN6U119f/dMMkIVBjBGZGAbJt0
zWVoxeZGTnlQbbrbzQwr5gRxml+D2VEUpVROblbksnMTwLb5/f7fPfLovMop
zTXZjbXTG2pzmmuymmZlt8yaLm5QvnsR71hT9bQ0v2+zp7fMyhEvo7FqatOc
XHGj2PH07KoKtbKF9S0AgBTSP//887Hjf19XMa1pVla9aB9n54hGSrZTs7Jf
lJ2NrBfNxkt8m/ZGvJcX0btQ3Yw0voDYbfEyxLVrrs0qK3hqZkVpwuRmeDuf
CAC7FT0egKxcvaptxZq2VSvXrF6xZtXqNevWrlmzZvWaFWvXrl6DbVq7dm3s
xh//+MeFCxe2tbWl8fWIi7dqzWph7YdrVrWtXL12zcqVq//z7f8ZBJsAgNSK
RuUJMitWrFje+v6KlW2rVrWtFZ2MtWvMfoa8sUZ9uzaNzWbGEH2MBQsWiDdT
fSsa+tT83tUm0ckRX9etWyduqK/y0q1eI/o8m7/9T5Q+BoCexOoFWUXoUT26
2ZoCM88wl3eJ/7ES/7tRb93s2bMLCwu/+uqrtL+Y6FbqfZoDAEDKxBsdOwlX
NPZtwr/SNn0X8+bNKy4u/tvf/pbi39tpfZQejRdzPEF83RLVzT6jOvyeSwmg
Z/H6X1QdIvY0IuZ3Olu/vyNVwY4bN+6ee+753//93zS/GNUMmEfQJ15BWgEA
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
XEf0DbH2cbedI+jzuKx9+x3Y7n+5ff7PT/dLSI/vGNpQsadGMt5nLtyu9a9/
fTNjZmXV7NrquXOr5szpw0X9gV3+zD75V1fXzqmZI/8uT22te+bMjz5br/eR
/2is/VB1dXNrZ9fMnTO7rpbSd8qc2lmi1FR73nzjNWO3qer//ve/l5bNmDXb
+s921tz6mjl1lD5QxAUVRVzcf3z5Vbo/Zen072/+5amcqWrseXNrxX/j4qu4
vZ0yt1Y8rLqqssRdLB//XX4k5UX8LeqPin3NvPK93+eampp169al+1OWQuZB
A3/76/+bWT5jzuxa8YkWRd74Du/VPPPdnjmjrGJmefovfd8t3+t9Nq9mqbvk
y7//I90ftT5DV925Dz744ImyGfctevv+Re+Ir6Lc+9rb9yx66+5Fb91Dycyi
rqMqd8ypa2hs7jNdd/MP0YsLcj9cWLpuQQml75SX5AX98CVXW3NRmat49xkT
/tMr/z3OXed4bV3+6x+Kr47XPjK/UjKwvL4mdjvvtXW5r63OXfThEyVzFi1a
lOkLRL+PVW0rPaXOxP/YP1qwzdrbrArWvuT+cEHZW9W5zkm/EzfknQvL0l9N
9aWyg++zanPXdrv/7eos0UvvdMn7ygD3NvzpT3+qcz6j3pDVC7/TG752vnzP
P1pQVuucXFf4vHi31y4o/fClzm/yS9/pqSjJep/tD3/uM799fdEb7HPZRay3
cXnbiklVNQ97Qw9vCj7oDT60KfTQpkBieXCj1uUeSi8v4pI92PH5bzqC4rLe
3TS/+aUFfayTU+7KN9YuMMt8UaJrXqRkfnlJfl03/y//M6u8rER1WfrY57Y7
8QeKYOSpihfneCO1PqOmw6juiNZ4DUpGlo747dne6GyvMcsXmVg5//XXXzd2
Y2vW/H/2zgMuiqN9/DSxK9gQFbChICCIgAj2rqh0xIq9JBpbYhR7bxTpoBQp
J4q9RZOo2BtwKGCEuwNUNHnf3z9vokZjgbv7PzOzu7cUUSnxuMx8ns999nZn
Z2fm9p6d7z7PPHMvYV+YPOsYaGzp/RRZ1nHF/70iIVodqffsY9cPBIRsWCrL
PglfQTmgT5xBev8Y3j5WSTlUKpfP7Wd55jEZ/HywnYWeufKsw9J76Cl8Q+CX
cii5jK5WadWNBs/wpz4Wsg53xTHcYx8bh2Qdl2cdkmYeg95OCVp7PHSzPOck
+i+Qc++noN8C9/kXvzHqtnxyP8O9zSqQY/jrEXZICZmPHwzZ8PPP/2q9XdMJ
/WsyhXdXx8R9XfBsnuTXWZKnM/OfTMsvApme/xjER/LIR/KEbFOpKzJDUjRH
/Gx2QdH8/KeTDh87fPLkl77TaibhhXtQiggOQHqeqHpQHZmHqNR5IeOfrGP/
ubJ/b1TEvyG6AtzP0LwLP/38/d6jgCrRIPlS+NyXT6UuCfnJogvk3G8HGzH5
AJtAnXLgzQsXLjC/uKrf0hWmrKysxOhwGAHKco7I7x2X3jtUcu8QfFaqEA7D
cFF2/9SdZD/goJJ7RwkEKY5mJuPPL6216rx8dj/jH+4wjNulmaCuD4HSviXw
O3r4CPdz/0vu8J9++gl4U465Bg1C7qVU1s/oaDLOfAQw50jQuuOh66GrpRh/
yH+B/0mlilKVfi59kwNs5qAXCIeCN6SmXqHBr2omEZUglQkz76+J3jen4Lc5
kidTJU+miJ/4iItApoifThPBnmeTJU9gg0odEvTbFTyemf9sZmGRT8qJo8dO
fOGbrUYTPM72hoaSJ51MeECecVAOn1TqtGQmyzIEsvRkeC78X2pcVEQk+1t/
2Xvtn0iXLl36LvJwbMF7gE1Alb0SWWQ+lTopEZJibhuxp1i2v1D2/d6jqZcu
fOm77Esm4E3BvigYlsuFeFAHGhsGeBkf1AYy4UEAUpkwRZZ1+EZyYNCGJfJ7
J9AYUihA56ITBVCOLFOA8wu+vPqqm/LZ/Uz2ZByU3kuWpwnk9w7CuTBQv3nA
/8iRI/xf/N+AnBcuXDgOvJl1DHqgJLPyccgh9JlxBA1XhMjKdihw3bHgLcgS
B72N/xEy9jkoz/zyN0adlc/tZ3RL49v7EHN7Qwb4eu+I7H7KwZB1Vy+lcqsK
0lSdxCoEaWaGcHVsAsDmtPxfAVUmiR9PFD3yEBd65xXAp6eo0FOCvlKpQzIx
/wl6SyAunFfwq9eho6dPn+YsgyqQ4MaNCt0ju39Cfi8FnphIAFWo1HHBI5yD
sntHfk2N3bc3stTvraKJTEZOTU39bu8RbBqTAqeEi6RU6pZEiLlfTc7tjBSV
YIunbEXUkdTUK0QDy0r+jW/LkX0zdi+wCeKUjBQY70kzBMXC5EpVQTIxPdxO
8gvduAxZ3LIOIhsEPleakSxNT5KnJ8uIfGndVUflc/u5JCMRnZUOsIlYVZZ+
SHYfaeybSbuPHz3G/dz/BtiENl68eBHbNw/Lsw4TkPlQP0vTDqBuRPCeDIMW
6f0jh/esPRa6Fjkn38cDmMxEedqhL34/1HX53H5G+eH+hxs7PQm9684g71UO
o5cw944cCt506eqVf8NM5FpPMkUkZ3gWrNkXMzv/mY8EwaZX3mNP0WPv3CJP
UdHEvCcTRE+88opgJ5U6JPDbTRA/mip5Nj2/aFLKyWOnj3/pG64mE4zZIiNC
mPfkoF7SktAnlbouaYnwsJDeO/TfS7H7ovYiHcX84Co+RL906dLyiKPR+cX7
xJhW8qVhYip1UyQl3HaEGNk3Y/NLkH3z8s/yf8c4vMKUk5WdGBuJ/NmAUzKQ
xpZlJFSiCuCoLBN5O8AQ8ZYA+XmiaVmAOeioABSFHJ0O4BOPtuHzi+uuuilV
6GepMAn9ghn4KLIlHSzJPHhD4Hf8OBpj/EvucPKe8PLlq4x9Mx2RyyeMQ4Bx
ENfAKQcDVx8LWo+mDWak4B5O5v4Rlf81qHyCfHo/J+BRRzw6lJGAb3IBvr3R
W5SUkI3EvvmvuKdrNZElN/GI7n7mvTWxcTORAy0yinmJH7kj+yaiTip1VyaK
Hk0SP56Z/3RCyonjZ8+qxn+GeUkil4cHB6K5fqBS4JGH1MgXV3FUqi3ImyVF
Ljz0a+r+6H1R/57VKC9durwi6giZ9we8GSoqqS0aolJrwv/VyDb8lPCDxkik
30UevnzpCvfa5N9xU5dKwJsJcZFSZDU7xDhqpmNs+bA2kGYABB2Q3ku+lbgz
ZMNi5A5H/BUV6oIOy2tAPqufpUKyjWCTsZAKBdJ7h5B983iZd9oq/pIQ0sXU
C8Ay6L033NWZyZhWPtbhxOcz89iRwLWIVYlXOfpMIKQDOP/FbwlVkE/v5wxB
qZucmDjhL3D/6MGQTZcvX5aznoH/Qr1dG+le1v3VMbEzJJg3RY+98wq/OCtR
qb4Ab8IPCj/rxJRjx0+fUbH/SmRoEJqhj56MAsqbqiICMrHrP6nxeyOjvvQt
9k8k8qdE9s3IFDJzEyDli6MTlRqRCLFsn1gWnS/9fu+x1NSLzC+uYor401JO
DvanZTT2AUwrCbKMyvQ2YRmZMAVYhtjdWA4qfdanDPKp1FY/E//DfyNvwv8Y
9Pbx0PWMn9W9A5X1M4czmGWQr+aeNcdC1zKvX0hvpyVW/o+g8nGpQj+XvbEJ
b6ZIMw8fCsa8SVONpnv37nG8OYmaNVVFyvDml77LajjxeJPaN1VGCG8e+u3S
/lLzN1U9wbjl26jDlDdVTOCnhB8U8+bR1NTUL32XfcmUnY38aXka++PaQEYM
DZmHMAct/qxzqXy6VKef+eeW403VT6C38fzNQ59xZ7IclBK45rPPpfLpUp1+
5lg1eAPlzRpPlDdVUihvUqlrQnmT8qbqCOVNLlHeVFqhvFnlRHlTeYXyprIm
ypsqKZQ3qdQ1obxJeVN1hPImlyhvKq1Q3qxyorypvEJ5U1kT5U2VFMqbVOqa
UN6kvKk6QnmTS5Q3lVYob1Y5Ud5UXqG8qayJ8qZKCuVNKnVNKG9S3lQdobzJ
JcqbSiuUN6ucKG8qr1DeVNZEeVMlhfImlbomlDcpb6qOUN7kEuVNpRXKm1VO
lDeVVyhvKmuivKmSQnmTSl0TypuUN1VHKG9yifKm0grlzSonypvKK5Q3lTVR
3lRJobxJpa4J5U3Km6ojlDe5RHlTaYXyZpUT5U3lFcqbypoob6qkUN6kUteE
8iblTdURyptcoryptEJ5s8qJ8qbyCuVNZU2UN1VSKG9SqWtCeZPypuoI5U0u
Ud5UWqG8WeVEeVN5hfKmsibKmyoplDep1DWhvEl5U3WE8iaXKG8qrVDerHKi
vKm8QnlTWRPlTZUUyptU6ppQ3qS8qTpCeZNLlDeVVihvVjlR3lReobyprIny
pkoK5U0qdU0ob1LeVB2hvMklyptKK5Q3q5wobyqvUN5U1kR5UyWF8iaVuiaU
Nylvqo5Q3uQS5U2lFcqbVU6UN5VXKG8qa6K8qZJCeZNKXRPKm5Q3VUcob3KJ
8qbSCuXNKifKm8orlDeVNVHeVEmhvEmlrgnlTcqbqiOUN7lEeVNphfJmlRPl
TeUVypvKmihvqqRQ3qRS14TyJuVN1RHKm1yivKm0QnmzyonypvIK5U1lTZQ3
VVIob1Kpa0J5k/Km6gjlTS5R3lRaobxZ5UR5U3mF8qayJsqbKimUN6nUNaG8
SXlTdYTyJpcobyqtUN6scqK8qbxCeVNZE+VNlRTKm1TqmlDepLypOkJ5k0uU
N5VWKG9WOVHeVF6hvKmsifKmSgrlTSp1TShvUt5UHaG8ySXKm0orlDernChv
Kq9Q3lTWRHlTJYXyJpW6JpQ3KW+qjlDe5BLlTaUVyptVTpQ3lVcobyproryp
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
j0vs/8VXfLK+OWv5igYXHXs6ZVXHN16/s2XLNmNCycJ7fLK08VPPPLVsxZNJ
qU8mpj2VlEEGnlmxikzcbebctiFjWatEV+lXFL5ZVVS44Vdf+7SXbm1V7G2k
XGEtNoa/8RO7+XbXWZAlKyvUAJXf2XIrrlesqnn5zSu/hHzxJ0a6lwoPJFQ5
5Y9S/EWlNDt5/nHI94i+JL/0eoVKo2I7tMLvlPt1fVX3v+m/vslRQvu0Qkgi
yYxsuV5KOLK6k7wNH5rQdFVwNF421V0wVSN8JrLeTMQiskL5W7Hup4uPEWST
zcgb9pGrn6C6OvcE7iK1GqGXFrkzkjEqjbsWp9hakUv0XJd8B2Xi7N5x+OZ1
oArL07rvwBXzI7mspIesKIg0Xr5MdzlS8Q4sK2fidN/WxPK0ohu6i5qUq7lw
iZ+e8lX+s4RXi8V54t1SSsXmST1nSUFTUVLZFdlrQPfvS4W3i+X+mSXftfIG
4a5eKvxeFOS4dxy+6RGK8k2xUJP0I75aKo/kFF8OCw8qwk9tlvx9SPlFie/D
C7OkXL+DPTwIDwO06k2m8B6GF6kVryX5ouRfhHJdbbLjUHFM1QZ8U6ko2Tel
6L/tu9uaNSOyyQyUWt7gHwpq16nXb82mx5bENB/0cqDYBwqJW+5t/Gw2Fcmu
s+YS3+TT91wac//Al+TLvLlJI+Kbz6//tOfiCD5mpNo49Kj6poYNX9y1n5hs
/c5duNjyv/bb9HnX2fMCWTcrD4WMF7tHsXn94NQE36xAdfkmL/hUJJaDkt3J
hXA/nFz0tFOJn4ZL3ORdl3lGuih9KY6UnnxYXOElobsti4t/CHiBLsE6KzxK
XbTGAtmviVtjq/BXo0b45sV4wzfLNT8rVySumfK85MV+SrvI1Nrlmyq0KcTy
lbztIG6L3EOTpGZ/yrdkK+RGdU53wz56YZi1GlRuGyRhFEvwuoTCsWIe0+25
Yiu7ckHmWyKkOzWov3ldqcLytM5Lvo6Tl9a45B01P7dcVXr5Nsh+QdiTeVbF
Rckro5W7M+eI1dnkrxlzpfutO4NTsdzLRT8rl/6BuHRTKjJjrTBekuKsKyxc
LpuXO87wzWtBSb4pv+xzheyk/CnFfbqzxHT8RQ8wF5ehuuQXTXZ5u5uGEB4e
sqQNcMtpUbb7NYtsdbJ3O/9y36v6OMM3qxOF+6bYsab1vj79Orw5jY8cdkxz
/4AXb2nSlPjm49GqRt17DlXzQrPmTm9Pu7lh48ejE8lwjyXRLYcOo11nqs18
MtZ2EF1mp7dnsMlUQ4uP39LkXiKYfPYXd+yre2f9IUdKAjTWBl0efnT+Qjq9
1jik8HiDTp2fzV1PFtV9aXSrIcPIBEIVTuUdNPgmwgcDvnkV35T+KrUcK5lg
Im885zIz8j/FHfunTp068oFyCxGNsuXDj81Yt4+343pJKZv3nXb2F0f4sLSo
RLVL8sryAiiE6I8uocdMjbtBWikRKa7OxcvT8rqlFQ+CWASXduh5043SZi/T
iNlMbpqaskvsoLAKFy+yK20hmX7ed2qyU3yvVdoy3oRvUoXEKHzTI6q4PxRE
1QV802Oq2Tcr5LLL25nQoiAbdr8Pyb2ku4ktLYjD8r+6W7taLZveXWVYljDN
E7a/3MZUfJVdbmvLWa34kkQaeYluN3OlQuBsgmxe01m3JfromsXy9+GOqzZR
CN9UKgr3TTGMgwuONO3Tt37HTk37vXhHu3bdFi4l/+y/djNxz/v6PndX23bN
Xnq1/kNdus6a+8ic+fXuuGvQt3te3v3j7W3b1u/cpd+WL8hk9/Z5lkzWfNDg
uzp0fHjmnG6z59e9/a5B2/c+FhHXoEOnex5/snn/AXe0av10Ugpf6Sv78hv1
euzOzp3vfZaut+v7s3nPni/vPUiWQxb7/JbPaHNGijxo8E2ErwV88+q+ybOB
xC65cvKCr0lSzo71GEKrXtLqjbSpHKlLyhSiUcf+rlOnHvWpn84/ETj2kqsg
C2zRlfpmklYq2krUzyWsl6UvX50T1Tv0Db5qVcmFJwPCEnRCA0RSQ0OSPEpJ
zCR3VyZuheSt/fAiu4l6d5lY3mqQOJm7+dl4SVE1LuKbdW++jW+hXEvF2qlS
YVpyTMR6prRErlTE1623RDBfnRX9n7A3hXqpeodUw1RWeLhyDQ3BNyXgm4oN
+KbHVLtv8saWK1QulmSw6BJCWl4nxaJKB2Ut5xeK6W+p/YcisZ6y0D4DrQIs
NHrsbhRIbKuBzMsrLLvr1+Sw6jzu0ubC0mRlpS7KtueKpaouqlIqT9MXCPse
NS347eCBwtGTdkpYZual86TwTaWicN8kfscKylp5ydVXCw/3+3Tb0CNa4a9a
S8AJaqMv7tr/wpbPXy08yuU0QG0ZpjEE6iwj1cbBRccDS3grsnSyfls/H1J0
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
YItmbwQNIGPO7Epmvil1YpKTOndc8MDH2Jak8S0hm5E8d9ILvTqTdW2WxVcJ
7xPXI5PdWK+OsINsI4lvHlu7hPkyXezoAf8hvsk3WJqXbDPZeLIE4puC8AoN
H2XlLJgUxBKsZGejpgXT/CbvK5xlYMn0n8VNmz1h8IMP3PfmyBeE41auASL4
pkJRuG8iPAv4JsLXAr55Tb4pFzcSzTs+Omvb4UcHDX995Zdk/JiIzG4DA3mD
tAmshdU777mP+CYZZr5ZK0nWaSYR0rubNOOVGfnSFu8/Vbtunelr94ZEZtHl
SIlFnf2uJk25t3I1k/r0JL6ZqHe+u+Vgo+atVSUXpP40Yw6dvfXuRov3nYwo
/r3eLbfKc5Rk4b1eCZaSktxP392wn0ir1PNIzJG/7rj7nvnbNWR7aMVPjdCU
7jOjptLytFpX9JE/iG/yTZKW3PGZF8bF5bFFZUiHiJgpWdQnu80z1u5v0aWH
/Ei+tyl/yOwoMjB0ZqSU3+RbIvWZEn1YmB2+6RnwTcUGfNNjqjW/SS1PzBWS
49zxAapv9J9s5JiBz2TNm7o3/aPuHVrKn3/ysxbGzBi9asFrgc/1FEfSfjPv
a1R/V8rMH1ctyPhoorRYspbGDe60fK46f2BV3bq1f92RLK4u6/Xhz/HytH/u
zbilHjPBwtx9aR91b9/aJXZcQuJg9sK4GcF8UTfeeKPUAi3ZI+KbR9cs5TO6
xPzm/hXCEoTIz87PWkA2WPJNqUfRnAWT+QaQYPnNgawp2twfsz5J/3CC1B/K
33tX3lO/PtkF97yVOc5XPkfwzeoAvumXAd9E+FrAN6/W/6ZoVbISpI5RC1N7
DQ1p1Ooh3iNnaOzqVo8+SRSSdxry0tuf3NmwSVjsamKgkmaypGRtPnuX3i8O
eusjIVl5/Dzx1vr3NiPCFRqd07o7XQ5fKVnO7Y2ajI3JJcOjw1f1HBbCfVPF
l8k6tezSd1C/SR/wRalK7I8NHfPUyClkPM9RyjtzCY3K7v5KkEordnDJmn6N
Ony2/r1NRa1zzd9puvmO+rGH/2j2YOegect4HdLZXxxp2q4Tz43GHvvr5tvv
6tR70NKD/+OzTEzcRJw3/vi5yENnyF4s2G3gbdLO32m45c4GZFFkm+/v9OiI
+YlJrAQvmYz8c/rqfXynegwdwxvLJaZMZv9kj5H3HLpgp+HGO+sT64RvegZ8
U7EB3/SYavXNm29iFSoFN8zk6ULeyQgZM2rAk1nzJ7qKcnt0bJU4cyx/BDrz
/YoeHVvuXfFh7ieTn+76oNg7SfaCqYH3NLxz9cKpf3yf0bzx3cbP4/lajFuj
G9xx6197MsiUXdo2WzYzhI8/vHZx+7bNgkTflDKtrqLsHh3aLKOro8p5dteK
bg+1IKvjkwn5TfFhrH0rusG8BxYyMdngzHmTyAXTvWOr5TPH8z5TzuxK7tb+
AbIE7ptCZ6OsP1DRN2lZ2VUfTwx96RneI8zZ3anN7m1oYrtA/mn8LO7u228n
h6tCV57wTcUC3/TLgG8ifC3gm1fLb0oNuqrt0pRE0269/baX35pH5Uh7Ifbo
uc59Bt7XtmP3F0c07/jI0JmRQ+fE3nLrXfO+1RMR49U24346xxsOorMX/Uo8
sVnHLo/0H3Jvu04jF6V27vPijLX7ycRkgMhdjxeD7u/QdeisCLKcW2+7a/52
3aK9pfe17vBA5x4ztxbxqqAqDW2bKKboz+6DRpJVPzIgoEmrNs+MmkrElhhr
bNGZerfczDdbcGRirDRHKXQSKrW4GxqZ07xj9wcff/bh54fc06rN1JQtZPwb
WTtub9CoaZvOXfoN7v5y8IRlG7u/MoJnLes3af7uxgPNOnfv/OxgYtnNO3eb
/602UUM73yRK27zjo+2f6EsW1aRV68nLN6lYj5yLfrC17vl0iy6Pduzz8gMd
Hh3yXiTvW3PJntJ72zzUokuPmZsLySaR2YmKtu/V9+H+Q+9p2WrSso3ugw/f
rCTwTcUGfNNjqrO9oBX1BH0TjjP1zTWLeKOs5IcyZMBT2fMmk4FTXyc90639
o+1bDPxP10c7tIx4ayTxsvMHVr30dNeObZoHvfDEo+2aR00Ljp8xpv4dN+u3
xmQumEgk8dnunYf17flgi/u3RL9Naz4W5+5OmdO4/h0dWjd9tU/3kf0f3xL5
VvALvRyFuWRLbryxrkPsCvPkV4nPPPpg9/atyep6PPRA5NsjuOi5CwDn8x4/
c4lvHl8X4SrIYi0L5ZANzpo/WVhCt/bEWwc93bVb+1bRb48gG0x8s/5tNxN/
pN2Ass40Wf3Nx/nuW7+MI7vfvUPL4pyFZPnEprs91Pz57p2G9O3x4ANNNkdO
Z83tenKcr3yO4JvVAXzTLwO+ifC1gG9exTeX6108q5iod0otuyazpn6YTNG8
J28b9uPdlplbiyMLf6OtyxIZNLiWaanW8ZQib801yV0u10WmnPVpMTE4Mtly
rWuZvoynUz/ebSLjyV+TWPOwiXqyaroQsqLo4rO0qxS1nfbjqWWfrMXauCN/
fvDlIWKagiAbiIrSTkZ4gpJ3+pnCUrF07ayXEy6e8ayrF/LXhftK5355POkn
OjFVVIMz8afzc786FlHwa5KmjDg1z+Qmay7QfWcWOX+XduEPJ5M0LrKcBLZM
ujq9Y8H3lg+/+inxOM32ppC/kunpBtDGb+ft0JMBsjTazQrtw5RMQ49DnPoC
n50secHuUjK76oTzqnYJ37wC8E3FBnzTY6rPN8WuSXhyUMxyCpPluqSyo0XZ
djbm1x2pui3RVNYOkWkyaa3JotXmz2IP5YSf+X6FkxWp5flBVyHVVdsXqpKN
kWX7VwnLZH86f2BlyfqI/+1K4ety0j9lOWiGNNOVTyag/aRQsytc8+uOZP2W
WLIWNk0mXexBujGuIqEGKC1wmy9uJ7lIDuawTSJXSy6/Zv67I023NcaVn8lt
1FG0yl6YLeQoyQGha8yW+mehY/Lz/tiRRrt3IUugu5Nr3ZZwYkMU7/CFFdnN
9OQ4X/EcwTerA/imXwZ8E+FrAd+8im/yTBzNCTJh5CVdqaZp7ckaYoJUKml2
jy1HLHxLFTVBXUZn1DuT1VTuEgxO4qG8dic3I16OlE1s53U5hSXohMKufO1k
Odz1JHuly6TWRnvGXE7N0cV9li+E2mXJhQQyUqhPKixKpRVymnwy/il0esKc
kYyJ19n5RpI9IsN8f4khkqVxUSUDKra/xGeT1E5uuySIzLJFuaS+SlW688Is
6jKycBVrC5cYOmsU18W7WWFi7mA5YibObOHJrNsUWqiYWK0evukh8E3FBnzT
Y6rRN4nZFYq+ls9FbKXQVi39J5smP1cqfSoZpYu2B5vLF8gNkdW1zBKqVRbk
CipH10IFjbqk4KFZvPAqf5pyiFviKMoSJihgKc58tgRalTJLrC9JfrXZJuXn
yJ/EqCnzZ7P8bHthJhPnXOfBXGkHyWdZUa6DLY0uVjgIWeKW8KZuc4mKOqjS
EtXlLdBmijvF26QlRpwppF/RPq0vAN/0y4BvInwt4JvX5JtM3AQZTBIrddLM
JhFAnYuPFNKXLN3JhNFF1IlIXzzL/SWWlPHeNnnOkczLm4rlQeZK5mPESqO8
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
+nxekMfKv10qyF/JrYA8Ih7acCAnQvXxdOeRjbzgIh1fkOvIX80mW0tfWLEM
HcKTqOxxJueuME+Yi3zS+/Y656FN+3PDN25c7+IPljXjMid7Su7bGxPmlh3a
yH656O/X5Y6zg6fP2CEl7kPLecbN25Qwn/zYlRXR40++EfYCKq0khGOOqHxU
9jjbC3Ic+WvsbC5yYbO52GSH1roOb1yrmr935x5qSg7pA/xbDhUXfpiaMcV4
KsxgG6Oz8FZqR+ksI7TGYFajU7BOhA+F2jhaaxuvKx1vNAev3eR/vpmSGO86
uoX/AnrbmxCeB1dO4Z+saBb5jTi1M434piwf5Ofs3Lnz3eXrVppcvMmg5boy
Yp0I3wpegJYMLFfbBdnUudIMLnJaZ6Zs4PU3XTU2v3n4WGZGCq0BwStSFa5j
3/rcK90c2N2AKOq+3Jj4j952FW9yN2VTxF5M8TKfV14I4qpRmeNM854F4gEv
pu5JXyAcWU/bp920gd+r/b0GBIemcL/77pvNifP40ROu6ssfZ/paNZ96Ojm8
ZHrWbup8IjXOw+vIMSTWI06Z7SrK8/5V4bNRueNczF4UFAsHnFpnPvtGHFrH
2qddQO7brBxojbtjVwP0GDpdjqKiQ7PTMibprSTCdOYwnTWUWedYrSVUaxVC
Z0H4VJjIqRynt03QWkdt2Lxhy2Y/+wlYnhDnYO+vhJdRhWsQvh/raJvDR9af
2rEqJXmZq2bIJuHbb7/9IHXTSoMr3WCnyml0JusRvhQpWgf5TNXR4GPIeUyj
J9RJTis5uTu303Ynauwb8iNHjuSkL3cd3kyf+ohyHlrHWg26/H27eD15CKR3
+CPrD6yOTpg/g75dPLyR1pUjI4uEydzPhwjPwsPjvE74pA0N0V/hH1ZHb9iw
ycVlk53xmnDrJvftDao55HDZD63nbS5d7jizhNpaXvKWSJDzyOZ18R/SsriH
NtN5yTREhQrXilPmef/C8M2o7HFmyfq19LUJu6SdRezuVLxWym/ydsWdNeUt
SvXhFvYTJ068O/ejpStWLlmRFpmeHpGxMjw9Qx5L09IrjEEoPCLTV0akZdDI
WDkvIZH3h+JPzJv34arkpKwVSdmpJBLIAMLnI3U5/0xfFpegiqN3ef9/QKf3
4QMHDrwza1ZCWnZCWmZiehaJhAyEDwc/g/QzLVOVnvnOzDn5+fnevtK8iVar
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
HbuTMzL42ReUUzYMAAAAAACqHFpzMyHynC7BaV3mssShKVr/CNrckyXcZVFZ
Dy5JT1n2z/mKNTcBYcXKVWO/3cF6QjEHsQ4cvS5ZCKl9YN7eLNHGoBLzaL11
nNb2mu7kS+Onjv3quwkGKy8CHaS7UkqaKqfaNEJjGam1BmvNY/XWSXpzeGzs
2bNnnSLevgYBAAAAAPwZh8u+efPmz3JmOSwJxE2cVhVtKcjbroTwKMKlc0dN
k743iCfnNDd98c49u+m5RpO05fnzzz8jEuImG06G6Y2jDCeJlVzcmwbCK8Fb
/hH0v8Q0XG8O0dDSsON/yO/dt8+bhpNEG4k8BumJThqusBzabq3WNpQYq9oW
pKf5zXFa60dpGcXFxd6++gAAAAAA/B+n0/nzzz+rEiL/VKtc1iSHNdZliEZ+
04fDuJR+0lqcMazPzeiThRErlieWlZ2neRwHUjnlOHr08IK0dLHypnmkjgoO
UpyKCv4GIFhN+9mcrLOOylk/eMb7rxtKJ7D2hIM0pqudL6F253DW+PAYnZX2
irIy+9PPP7vocsDrGAAAAACAqmfz5o2fZs91WeMcliSnJdZuiUY7tL4aRDNZ
FzYuoVXhGKc1cXXGkn17WM1N8p+gm3iuFvjqm6+D0leN15USlxmptQapLQHa
y1YGRHgriHLy1n4m6UsDFi4OiIklvkn+KesJ5XJhlfrlHK4xBmusvFeUMd/v
SV21il8DYnlafCkAAAAAAKqe06dPJybE/qWOdVqXsWZpUZLWx0Nsn5Z1n0pr
brJmac97+0JTKCuzc0K/2UkEJERjCWZ5tOFq80V9OCKuf5Sz/uFaC2/qZ7LB
9uJrb4R++sVknZX2hKKjpWSvujShaC45s1oTW455osYcGR//999/C9cB0v4A
AAAAANXD5s0bt2bNYs0EqahvmpDc9OWQCkLzZmnN8Vfoc7OmwZSiXA6rrKyM
SMcEtUVodkZjYrkw5DcVFVYSIzSWMRrTOL1t0nFdnz593tBapuqsIVpzMGsL
6Fqq3JIzS6SV98JJRHWizrYkbaXQCydkEwAAAADg3+OuuOd+5D59+mSSKvof
rcplSXTQzCZPboZXhwrJNbac0loiLj0xLxdKPstVJpVtmzSeTlNujLB8k3yY
Vkp1miJk8wqLspvLb8DFdVeN5SagCzFV3GBFBD1iwk7xPjdt+UtTUlKQ3KyA
1B6pyWIOX5482WAh5jJa6y6ZifymcoJ2ZaI2jCyh9S4n6a2hX3770qTJU43W
CfpSIptBGlPg1TvfpMHPKTnFZJZQnWWitjRsRdqOHTvcvaGgPC0AAAAAwL9B
1lCM9LzNk5tENnmbtHZmZG7Xq5KQWSFTvxhR1uTmyMTQGiWtl09JPp1GNpdo
fA6zUD9RGMnHmyIlkWQzhkurprvDZhGsk7mt3HbpjGyBtPQp21SnaSlbaXi5
XCEZaVrqPiwKb0+Jbl6s05qYuxLJTTdCT4vixU8GDh74ccaK9Em6k6Gspwza
UhC1EuswDZqoVUIY2ekwsn5MaM+bU/S2kcmpQ+fP5z1vhmjI+bJeo28Gil2r
kKWNUZtDtMbgjZ+tWbveRRtthmkCAAAAAFQl/JH71M+nk1TR53QJxDeJnnBV
sZsjHMaqzm8SX7NGEYnjyyfSR5uyIcOW6IriaaaCSc2O5yKlfKVVzHKawqk/
8sZwzDFsmhimgTHEPemfxMwj+ZPTym003G6KKteKDpNKul5hmXwbwrlrk4XY
zUup6vJp6GTh3JedBvpP5uOXyMl6N6Q0rjBgjSstXJKWnCRPbqKfQdZokl36
59ZPPw/KWRuit47VmoLVpiC1hcum1MIMwntBLXKE1kSMcqjWPFJtHKe3TTbY
hnw4d1TyiikG2lZtiNYcpLMN115TeVqpd5VgtXG01jxOaw09UJC0IsUpux7w
BQEAAAAA+Pfw5yvyZLVl0+atWbPs5jiXLcFhjXXa4lymxVTcqlqmHFaxZKwx
4qU+HZs1ut1uWMpLtPK8JHFALrlENu08B2oOZ83khnNLpRJK5TGW/TXSbg2n
s4ipTFpRkbohdS42QTiXSu5f1GqNEWVmbqzMFs1LHLYIaclUJC0xUhFcqpwW
KRsbTtOs5mi6dlojMkbI/yoxvxkjeL2e7JHKYYrLWxnFk5t4ihYpl8ZyOBzp
WRlhu3aP09rGaE8Fa6xDaFrTiP43lRCsixNjoPYkGR6tOTlabwnVmKfoTz7b
f+CYvHWTjKfDWOc1gSWWay1PK3Zzw7KltKnbiUZbRGzCuXPn8AUBAAAAAKhK
nORJu+z0Lz8nqKL/1qlc1hRWlDTGaWDaYlla9TLFco52c4R+z8zmzRv06tZi
Q0qI6HeLqc0ZIt1FXonxGVnmkWYVY91ZSKMgrVT6iJaaBWFksYQqJ/+nSZBB
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
zM8gU4+mNn15h0reIx/BGSnI8/Pyjxw67HaRAAAAAACAGlJYuGFLwZtOOc0u
ZTmkVOp3V78PbfWwi3Ed7mn51coYh0Vdiakm5qSkI5/Nuq1Z45+L3/9fcaz/
6N49ut7lN6pP5/Yt35n1Ahfh/516L2TMwz26tvMf0btzh+Zvv/wC3wORxx1r
prRp2ZT8asyw7oFj+27KjQga34u46q23NORZSGKdF4zxxGR7dmlHNujb486E
uaNS3xpzW/NbzEVzfjrxfuBY8ort/Eb16tzhdvUVeW9eCx0J2qFDq9hXh3Nf
Tn5r9H1tm9H1nlZ1fGet5IUvGuRQJbV/EVt8muKQM1ctjdtTxFZukv/UL85I
c/45kiQl5uREmiXenJZmBi+/7UzdCNdaSxP1xNs6dX5u1Tr++IQjxc8Xbr17
2AvNOnYYW3Tgb3f18Ly3uoZN8qmsU/Vs8Mmb9E8BwQJxTFvE51+NnjJ9uqV0
kqk0TJADDZJa93v5Z42P4GRlunJE3tKinbv4VQHfBAAAAACoMWVlZZkZqb8a
Uh3yItaWtnaNiVWu0oWZosuS+JJJtrqTSxyxxWNfvPLTyQW09lXtDhTvFBN+
KXn/+Gcv08c1vZKpGF4QFpZ8/dqPxxZwe6XJR9ZNiO2WqS7bs/Xb+Ue3vfx/
J9+rkpRkVbJEdY9+PpO/YuVRSQl2UfdAx9bK/vlOVz8i75G9yP75UdFbKd7D
vmmr7E/LxqfSlZusLe0FT19odRpNKE6UFC/MXxbNhqFcyWQNjwdfvKnqoUlq
1rHTMys/qvpbsbNvQCcf/4vvh+yhz9w3H5gYXm3PHg/im+GCFGOS/VPSnx8/
fir1TSVEUPgpc29je1kfGtktb1EbWLBq22efsmujwqPXJgAAAABA/aawcMPm
5XNZmyA99U1rbSQ33YNXolLltCZUrn/kazYVXtarc1XbaqGr1g+WdxPSUnua
VKrb0GatOrXkVdtGGy3q0t4/vErV47QmrMkI8qEFwOojBWkBy5L8uYq6Hky6
yB5qSTZdd2hbWlv6RWZuAo7DzTcPHjw4Oz8/mpoLL6b1vFjVNKq0ymnWvvPg
leur/Xbsnv0Nb2o0/uBxcn/Uzj13DxvRtH3nFj163t6z11PZy/iWdw8Z2uTu
uxq3adu6b/+hm7aN/Obbu4aNaNK+A9mGxJNLlvry2l3anKc23hev5vUx0ERk
mEmabC4NyM7zemfBFLGUthS+4j8RkJMeamS++dGm9YVbnJjACQAAAABwiVQu
3KuspSwrO52lTz4n6J1Spp1mNlNUv7v2ZuSyWp2T5ys1S1IFMFn77ZWHNiKz
UkIv81DForndu7Tt1qG1ZdccrWj2grCw8iU83ymIq3RlcTKRTWV/fHZ2NpKb
lwL/57GzaFdkbl4EbVL6J75ZrwprRdfR0vWnzTt2Hrxig9tvZZ6mvPWuu4at
/5hsfHv3Hn3mvUOb1hptI7/a1fiOll6HT5L73iXmPm/M6xIaThdvGmx8M59i
oqvyyO1FjVq2HHeomE/wrJ28J11GKtCuQUFGOcxkjTKf9k1N941NnGJW6Fkz
y1fum2p+89PPC1avQyUtAAAAAMCl4tYoRvsSxZObRDZ5T9oKVtrK6kKveZ6u
Motqpe2A1BJQWW0h61RYkS1PfdZ4UaQYz8t0+XwTarWsvFYVT94+yHUMf7UT
V9ZVV26i7WftFtdSTXfBvPYf1+UFfTupDjlzZT6Sm39DNaHYvv0rv7wCNVN2
md1m6ljIrGGOKl/NOnR9dvUanoLk/V19jGZil6379n88I8f7hLFL2CSvk2Zf
kxRA+9BKLR7qPmjdRrZSUuk9Z36X8HDyaYw7IXSNiJxQbPR1TUVp1v3BYWs3
+jClrZ0+QvQtGErp8E2TLdwsR4uSd6zOT58x2SzzlsK+V1bxS94mbxkUseu7
3GUFnrosAQAAAADqNfw79pmzZVn65POmDOKbRE+4qlTY6CrFWtEitSa2QqLl
rBWS+ur8cWpzipsDXn6/XFWc1VJbt/ypJY4nAX+36rTFqn9TQiwlqLpKf4yr
bpd1Qza1AmP1jpxWejAud3GWe3ITyZo/wsagVLbt3fLx1oC1G3g9bZBHG7Fe
YWjOxbvr3Nap87MrPnLLz4q+tIOrrel9nYas3ehHzPSU+MK6wr7z3+0WOe2+
oS80an7HsyvXskyi7ZE35ncLnUTnqggicdKhH33c5523u0ZOumvosMbNWjyz
Yi0XWz/j5Q27vJLwNlqJWkaY5MnW0hGBgb5vvz9FLI00K1o9bY2VM8gohwgK
2VX4wWNLspd69uIEAAAAAKiP8PYX5Dv2po2Fm5fPrbClOZUMu5zqUNKc1liq
YFJtlIa6L8CsrK1VF1Gm0EdElt+s8cHwBkHcPeUkt1ehjsnENkVz0r9dsqrm
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
oOanRz9/mZijky+u/MMTpe/eMnw9u9wc5/4smlR12eIvxXHHvph1TqDzVvii
UVYl+5dHQp47YWQvdW9szWktfQhsNqj6umzmprI/Pjs7G8nNK2fNRxuCtmwj
IlP3fNNV1CpI2q030yver7WaMPLtXSla6oZsrAnt8+MnKNT1aJWsm3USW6TN
aSXtWVq5rPsqTuKbXcIjKqVSfSHRx2D5Y3NaTSd9DJUrQ9njCnlKTdPH/H0p
wSZbhHB6mnh63Muvhq7dyPObQXx4aEnNk628XxDxzSiDlKTXe/p6BAAAAACo
e7g1itH+OM+Tm0Q2eU/aCpZDpMnBWltveDVCTcjSYybOmMSFka7utKr2x3rG
qt5HR4TY6CLHcivZOEV9s3TLWDYxky+91FXpmGTVGsyqNseqef/qeHTLU/0/
TPKnryUmVTnCWgt68KkOOXNlPpKbNcfu1sx346bCwI82cd+88mTZ1Q2fYjFA
KPU5brpn6PNexw09p89q9+iACYdOPBQ1peXDD5No/fizz6/fwr3P+4TxriGD
Rxd9f++IsS37PtK8e4+OAYFeh0/STrMGi3eJ2Ou1eXf06XV7z16tHnnksYUJ
NO9J9VB8rmBNmwEDWz3Sr2nXLh29vMcfPE47BZ2ytu736N2Dn29y9923tm5L
fjt08ye+rv206vNw857dW/ft3/+9BKKWRCe9jxnueX4YOcgeL85q99jA9uMn
DN7wsSae5AA6+wYO3fp5jT8Kf8EaYjxN85uW0nFz5wQvXzXZXKr+lcAo8VTv
RRK+F9uzq5427FhxWhb60wIAAAAAXAzum2fOlmXpk8+bMohvEj3hqkK7sIr1
Mr/pFOPVRZ1clsV4Vu+q42M6XRbGUpNW1uqW+LVNTVPyEZxqZyHNDa26qj8m
V2YqrRc5kpQLxjh6JOzVa20SivYe1TtyWunBuNzFWe7JTRQBXi7kE+PWuXXb
Z4ErVnNz8aua36yV4ZJ/H0TlmrW76/6AkL7vxo7cvvOeESM6h4b6lJi9jZYR
Wz+9rVPnYR9v8zFYJxwrbtyiZfuRY0Z/s5scuX+xtfec+bf37OPL0ovEPTuO
HuN9TCA/jt9/vM1Tj/ecMZPcH3foZOM7bh+zY6+PIHqX2LrHvNhhvI+vUfY+
brqxYQNql7PndQkNJy9Hhc4otw8I7Dx23ISjRvLjmO+Ptn36qe4vzSQv53W0
uMmdd90fGPzIv95/4audfd/6V5dxvjQ1KVi8DdLIr3bf1qFTIHVPuWYfAlHj
IMEaKSiTraXDg0K85r8bY1H4+k0tt1tDk2WVuqGCLeLAiUW5uZ6+MAEAAAAA
6i4ORwW7dWzaWLh5+dwKW5pTybDLqQ4lzWmNpSW1Uq0Ni7xaQcQwrkJKdloW
MtGjYbck0qEk1oRyqo0pbBtmf1ICrRwWaatblt/UMUejaklcm/bYsSaWS/Fk
M00V2YiTBLpnMelSMpUso5rMkpsptThZJoUbscOc5JT0dmva6vwkntyEZtYA
e9VJpdu3f+6f+yHxzRBiNB5qvnpRz7KOP3rqhhtuGJisJ/df2PIFEUz/YsnP
IJPwEmTyeIcJXkS4JhwrIZs9t2KVn/G0F68yNUlt+j/2+OKlw7Z9dmu7duOO
UUnkvyKq2Oj2lmO/PzLyq123tGw15vBRXls7bt/Rvgveo5sdLyG+SXbbd+5b
bP0mFbph275o2q7d+CMGciR8MeaYvcduub3V2H3HyM5vuKHBgKQM8qC/YB13
qLjhHXeM3nuAVvYKUrfpL/V+dY630VozhSevRa1QUMLN8jSz4hufGJCWHmM5
rWalDVeU3yRPpytDib1+vSu/YJUT/6QAAAAAAP4KB/kuXV72w9kMffJvJr1T
zmaSleKwMG0hquXZ4ZuXGVTuRHbMYiwdysmnT9IRKglsNAl5R6naSBQn7+HD
hdqaahf5mk2W7uR5T94F1+o2gZRW2zIHt7LkqS2FbfmXHxHVTCsd2cl2Qvac
UKspTvKidOZminw4fkl25u/n/3zlJgz0EuHWSW6//fbb6MU5kWal7q3fFFm+
VfY6brjxxoZeR0uIr/XTJdzevUfPl9/o9err5Lb3K692iYhs/sADZPsJR4rp
ZscEX8FCVDTAIJLndp/+cveXXh6QkHbfWC+3cSf0ts2Agc8uW0Uc7aHp05q2
vbOTf+BjC3XDt+/iasnzm758/WZoOH9i/yR1P9p4FBJtBz5B9kOkuMENDccd
P0nc0JvmHEXyrB6vzyEH41Ms3nrfPRO+PcjWb/6xj9ClfA70tYIEKxHMKWJp
YEaW98LYKWaqn0GqY9Y8vxlotJJTH2aSQrZuX7l2DXwTAAAAAOCv4K6xia7c
nO+UFjmUNNrIlK9q5N1ypKSL1YvWveBZS+6D2pJJFinkR9pplgmplprkKzRZ
TjNF6zFbWSvLU5lufqrOAGWluZd1VKq61s5iWK7A1mSHLd2pfLA6N7aoaI+d
fS2ulqoDlwX/93LkyJE389X85h/Xb3q6pJZ25hl/tLhh41tYwx9bv/fj2z3x
zMCsJU9k5j6ZlUdun8ha8mzuh2Qznt/0OUkrZomg8c5CPWbOenDq9EdjEzpN
8KWtbt0ygHc+8dQzeQX8DY47dOKp7KXdp89o2qnD/RPDfNlq0AY3NSTa+PC8
t7qER/gxT3w0VsdyqaoG8jvtnnjq2dwCcpANGjV2/7iGffpNs3vae5fYnlyc
d+/QEa6q18sWQ/7GyR2ilkQwiWZOePe9of7+U8yn1b8SGKWaZTZ5kKdPNMnk
Aghav3HTJ1ud+KMNAAAAAMAf0L4elZWV0eSmMZ12CiKySQc1Jmki5nF/vLwQ
E/66AayOpTh1PNXIHJOu3zR8+Ya5aI7T1YpWy2ZqfYfI48Ydbxz74rULxjje
O4g+UWLFt7YkKqQXr6q1JvIX1Vrd1t6nIafa5VTalnZx5vnz56tfAIxavur+
GQiCEJ+bFyn8uW/WhZhwjKqcL6sXHbpmY8sefTRR8hOsz2/Y3GfeO760AtZA
62kL1nDfZO2AlLuffnZgWubzhVub3tfBp1ikHWgFW4BBZMs2W47ds//59VuI
jWqv5XVMaNzqjlE79qr5TUNp7znzu4ZF8N9W2w95ZPzhU2Q/Y3bvI7bboNGt
WodbLstERZ9aknv3sBeI2HI/9at5BlkkZyfMJMVYlNCPNo156dWpFtoviEjo
FU5NJbslp55cAH55H37xxReevh4BAAAAAOoy9o0bN25ePtupZHHfpM2C3MZc
1rYiXXkwYXygY8vbmjVu2eKWVs1vIbfNmjZ+sGvbtLfHapv9eGxB6Ph+bVo2
ffTh+3o/eOedbZrNinyaGaU2tlL3S3FcdMBjbVs16df7nif7dyIbvx7z3G/G
KqNSLh6syW2itr17q6Ja+Bzo2ZT0F5m5Cd+8RCrnb5I7DueZM2eSFi+ONCvq
CE7XZBCPayZXNuabJQ0bN9EevKNX777/ep//imjjHT16DlqxjlgeLbtt2ODO
Z54d990R/tsnspZQPTwpkLdz9+Dnu0VNJZvRKBY7enl3DgjiwnhruztH7fie
73zU13tuat6CvKL3CeMNDW4kjzwan0I25r8lz71r0JAHo6eoP7rtZ9zxEprf
VKeF8iSm+OTivFYP92/avrM3azfka1RHtNQseBfZKPPpSV/tGRU15UXxdIRJ
0U5ZzXdrsE40UXWdmpu/d+9edmmgbAAAAAAA4E84U/ZDRkbiOUHvkLlsetoW
r1SymNmJSd06tdm1bpqT1cESy/vVEPtRdmj7u1tkLhhPtlG+n9elY+tXJj91
wSWP/zv1ns+o3gMfaf+LMZa74X+O/Kt3t3YxQQN/K17IPfHfh/419vmHxj7f
o8ISqzmjWijr+TeeXK2+l8/cPHNAl70488KFck9faP8cyp2OX3/9WZeeQSyG
DXPkQyprsMbwWskm980GjW71LbGyKZbymN37Wj362O09e901aFCLhx58ZM7b
viyhyStaB61Ye1vXrsQKWz7Sj5jpiC938p0QM7135Mg7uj5wz7DRTTt07BwY
4kfbB9GXGJCUfnv3Hm0HPHXvsKHNOnZ6clEOLcc9YST2SjsL7fq+WZcuZFdD
N23zo42ATt49cmyLLl3vfmEk2fj+4BDvEwYqkkdKeBKWDfRUP0DvEpEIb4+Z
r7BUbM1FnqdTeX5zsrk0+sip4SETp5iVSSYlRKC+yXerLVC9eFTz02CjLdRI
+wW9k7vs+PGT/MLAX28AAAAAAKpBviAVFm7YVDCXyKZT0jvlNM9705WFlkx8
sGObXetj2H3XQktr8juzhj43sKtdTpocOGB66JPVRNVuSXzhuQcS5o5iLpn0
eszgoAl93SWO7Pxnw/v33dX8m9VTyU7YKk5awUvXhHpcNumdFPWQbGpy0yHr
C/Jjd+/ejW/CVwvtk0zOyIgyWMPNda6k1t+kKqdPlca5tOPruAPHRn1dRA3L
YNG09Kabb6WjM0vMwz/ePurb/fyJ2rgQH9bDdtjWL31PmYhWk82IpvFlnmSz
Ubu+G7Z1h/cpsjeRvZxLukuozXkdPkmElz1IXl2ZcNQ4fOuXxEnJBl6GSj33
1j49k8Rra4nbjik66G2kU1FoV9saLbSkPXVpi1olVLDFWJTpFnnwc4OmFZui
TcpEozXIKLPXlS/RN6u5Z7BJmmii9bSJS/JsNptnr0kAAAAAgDoLXbmZkXje
lOGQFzmltPrVivavfZMuzOzWqRXLb7p1/rHpNuVOHDPoodP732zapBG5VR8X
WXMh1qV23+aXWt/RpNyq++nkgqbNGpt2zKZFs0RFXTshe962NHLHmil82aZd
1NlpByFP+2bVoO2eJJ1T0sv74vKyF527UH3lJrhS7M4lS/MnFn1HpCPARKWG
W5XHZdPNOktZgk9kxsfuaB2BDBYf6mIW1sa25MbGjX0Mkk+xSBdvGtR8H7sl
CqmaKTVQZpoBQimxrYASG5+EQnbuarwjM7+zEEkkj7geFIlX8jsTSqg8kh/9
S8xcA9luJb5olLsqSxPbBqRk3TN8DD1II+2XWwMf5OHHWtQGCuYQQSFiONVS
OjwqJvKrXdFUFWk+mh6ky7svxTHdfwwSaH4zyiLrMjJ/+eUX9ZrAH3UAAAAA
ANywOysKCws/XjHXLmUQN3HIetopyNOudKVh5ck+XddObXatn2KX1ZazNDV5
KmHo092XpwR+tnxy/97tHbKbJCq8/azOKSa1aNHYXDT3u8IZXdq3dCjkwVSH
NZ5nMGlnWq60UlKdqKGtDJ127tSGSLZ0ck5X5sV+U7SLnmusLbvarFu/IWTz
NiIyYUIpy29y2awzysnUj9z6m2SW8aTBx19SjyuhiUvij+OPGG68uRFVQkEh
iupKNTLTZO/Fz1QaZJS10tYJAhM0Zpp0GxO9DSTaaBQDSuhLECHlw02YoPHs
IR36GSDQ+/TWeJo5psh808JTouQIyYPDv97V/P4uTTt2Gr59hw89WkuVnOnl
BxVbUynxzShz6RSzMvqVV0PWbSR3QgXbREPlmSKfxmXtlrw1tizUOumEKS09
w9NXIgAAAABAXcThcJw9e1afkfiLQe+Us+xyqtOS/A/Ib2oa+GDHNs881slr
WM8Jw3tMeKH38EHdunW647OCcOKPWe+P9R3Z0y7qeBteNrIziU3qTLEr8Q93
v/fTgqhVGcFDn36AdvgRF2rtg1xDRtTX4hNS6krwSaN0FWcKm7mZfPpgQs4H
meXlF2gJqB2pl6sEGylDPtLPvvwqIL8gTKjW7LSu+CZ1QLaA0ZXCE/ngS9aB
tnIUCE1KstZA/iUWrxK62pHmHEtKtf3Q6tkSkb9Brqv8QXZfIRtrMuvLO9wa
LHTwpSBpHwVzWLXaVm09xPZDgjyX7Ny1N/YSJwUf9fO80nwxfVNGyV8Qg010
JMp0S6n3ewv90rOijbZwk+Jv5iXBFq1r7t86pvuPdPimUBpe9F3Ohx+6rgzk
NwEAAAAAqlBYuGFLwZtOOc0uZTmk1AopuZ71of3L0DHfbPVhcsCRz2Yd+3QW
ud276cX3Xh9+313Nrd/O35Qb9lS/zkQ2KyrfbxzVbVtihTWpbasmJdtf37lm
So+u7ahRSupQGK1o9n8nFyrfvU2rcGtnkualhNtYT9ZVOMUhZ65aGrenaDfv
p+padIg0Z01xqDKhrd/ct2/fy0urjOB0a2vj+d5B1O9MqiJRuaPHJvu4qTHr
I1R5zC4PFasev/oUPidF25gPKKE/mjSvFLWd+LqNv9T2w9sWMc20+hrdNhNU
teSrTdXH1dWjonZsly2b6nNlf6PCB2VOMSvjXp8zfGL4FLGUdXmqPFlVF7pe
kntS3zRZAzdvXV+4yYNXJQAAAABAnaWsrCwzI/VXQ6pDXsTa0tb/SlpuW6oV
6rp1alP00ZRqvw0e3/fNGYMtu+fe1qzx/x1fwItvXQWodAPjjldvadzwdyH+
7KF3yJ0zB95iNsdSma5t3p4xaEbYE/x+HTJ0V39aNj6VrtxkbWkvePpC+8di
sVh0Ofnuvlk3g+cT1bJVt7kt1Zq+Vjqdy1L/1PICDNVUWnbTQ81GJZb6tLot
vaxMVmrOyxW42mFU1U/xSsxde3WiluFmOcaihG/eOnbGTCKe5KxVTrGpUb8g
OnzTrPjnfrj9y68rrwnkNwEAAAAAXBQWbti8fC5rE6Snvmn9xyQ31XigY+td
66fw1KQWi9/3ChrXh9zxHddn/kuD1eJbiQ404cNG/Uc//PbM57ljTg15/MWw
p9gTddqH89OJ9zvcc/vXq6ZUflzWOlCHrB0Ab0trS7/IzE1wVfj5558TM7Ki
zGqy7ArnOSKuerhEUg422thIFFvU/mPDJ4ZOtZTyvxIEGbVK4L+3Wm7fXKLJ
6Sb7jBTkeblLjx497OkrEQAAAADAo1Qu3KuspSwrO52lTz4n6J1Spp1mNnly
U3etbKj2Q0oivrlzXQy3QjXpKSV9tHji8091I3fkvW9169TmrZeGnhPU+Zs/
nVwQ7t3v8b4dfilZyB/5f4ff6dXtrpkRT9FHmNCd3v/msCe7Rvj05R8XV1Sn
x7Ocropfp2vmprI/Pjs7G8nNa0161uKII8XhZjlYUAIEuuaxZpMiEdcitDEr
QQZriGCbbJanivILgcGTD5/URnD68p69JRfzTfd0ML8NNtH8JtlJYvYSRVEc
jgp+PSC9CQAAAIDrEbdGMdrSM57cJLLJe9JWWJNpYxwpsQ4tSLzieLBTOzoP
RXI1oWVSdmTrrNZ33PKbMZY88t/j7xHBbNeu6aO97+3b455772zxavQzv5ti
1e2ZSBLTnBI88K42zfr3uuexPh1a39Ek7vUXfhfULrVsVEpyHRqGYmXddOXM
lflIbl4z3P5BrVizNuTzryMsCvHNoMtcA4i4puFndLUhYhNeiCFGm6SpltLn
Ro4KyM4h7hlGtLFYZA2O/ubEqZlN122g0cqHb0abFJ0+HYNtAQAAAAA0uG+e
OVuWpU8+b8ogvkn0hKtKhS2B9mv1uDFdDeei6zH5fSXxD28qwSGqo0xUYbQl
Ct/OLv2OzuIkP3KF1LZnu0qqsMXbds8Rdr5mF+NUrZPqimOqqVWtHFpOKz0Y
l7s4yz256cB34qsE/yS1z/OLL770X7oiwiiHmGlfGn/BiqraOhJ+BlmbJUoM
MdQohQvSdEupT+xCvzR9lEXmSzipbBpKL2sJpz97YrhZnli0d2n+h+j8DAAA
AADA4UVf5Kvypo2Fm5fPrbClOZUMu5zqUNKc1lhaUltnHOrqKBjxRGsSTWtW
+iNdhkkVUkxishlPtqHv3UIV1eF60DVeM4F7HHPSFDp/05pSISU7lWRVOW2V
XYY8muJMoQcpJznM5M3q7da01flJPLkJzbzqVJssc/To8Xfz8ydZ6EiUUEEc
bxBdo0bqylSU6ztknpQk4hlopuWvMZbTQXkFY9+YE2NRwkxSsLHKaJi/C7UB
b4BBDBGobwYUrNm89ZPqlwcAAAAAwHUL+aZsLy/74WyGPvk3k94pZ9NGptYU
h4VpixTv+aY3VyuYOFfY4jWD5gbKxmUm0BWOzCXtxNGocpIPgZgjW4xp0zmk
1MrFmGICf9whx9MBnUQwJZoFJnZJd15lFqcn65DpAZODoTM3U+TD8UuyM38/
/+crN/F9+Mpx/wT/ffaHpMxFk0yloUYpQOAjPzwuWQgeMp8Eyu6LQYItTJAn
m0tjdu0ZHjlpqqU00izRVbclfMu/yW9qTspnehLfjDDJM/Pyvvt2r8OJdZsA
AAAAABTuGpvoys35TmmRQ0mjjUzlJGZhLENHU4GeVsUrDrXlLHNAh+gaSUnM
mtpiElumGkfnm7jKUKljsrWr/BNQPwdthzyPaUvhTkcLbmW6Af/QKk3Wg/2C
VO1NdtjSncoHq3Nji4r28MHzdjumbV4T3LVdv+iDiGKBJ8tczU49rlqIymBV
tUqg0cpa1MrTLfKgQYOiDxydZFLCjBIX0ovX07pkU+0pRNSV5jcFKS17qaIo
rsGs+LcGAAAAgOsX7ctxWVkZTW4a02mnICKbdFBjksvR/hGLNytDx9yQm6Pb
W1OSiSrSlOWfVcBS+5Yq13W6702TSnWBp7XKrzzfMkhOtcuptC3t4szz589X
vwAYtXzV/fNQF2+63SesXfdR0JZttEWtic/XYIYC66wbwSaBqks4QwQbccwX
zaVjXno1dO1G2jLIRAenEp28eFdh94JbfyN9ykSTHFVsSdLrtb/o4F8XAAAA
AIDTad+4cePm5bOdShb3TdosiGXH6spcj6sRF3kLqjBqCVC39aosfenaUq0r
ZpZq1bllQl3PqmtdfNnMTaekv8jMTfjmNWLHjh3RufnhghzCkmjMcVBVWydC
y1ryxkFBgi3CJE+1Kv4JKT5xiTGm02FsrImPwXKRnbj/6cCPjVAJNtFi2pBP
vyxYvabqtWDHvzIAAAAAXM+cKfshIyPxnKB3yFw2PW1JiJpFlewqDT5z88wB
XfbizAsXyj19oV1fWCwWXU5euEA7oAaxZYA+gu1vR2wgajm4J4ab5clmOXzz
1nEzZpA7kyylwYJyKS2FaZ6U5kBlP4HmSYlvTsz98Muvv3K7EOyuAAAAAAC4
HnE4HIWFGzYVzCWy6ZT0TjnN896EqEGoadYU2svI9Qhbh6svyI/dvXs3Miy1
THl5eXK6PspgDWXL+gJYi9qL12ciajPUFrUCrXaOMCmTzaVTTwnPPjc4pliI
ollpSRubcvHwEmRfwRJYIrJmQYouL9doNGqXgQMlBAAAAAC4vqErNzMSz5sy
HPIip5T2z2lFe30HW3Cqc0p6eV9cXvaicxeqr9wE1xpiGavWrQ/+5ItQM52K
4m9UiL+wrqcID0e1XkCBRqKKtihz6XSLPP6llyI3fEzcM8xES2S9S8SL7Uf9
64EYKJSRUxxuUiKNQnJ65u+/V/CEJlseXYHkJgAAAACuW+zOisLCwo9XzLVL
GcRNHLKe9Wv1vC4hLj902rmjpkn/bpBOzunKvNhvinbRc43vvLULMY2inbui
85ZGCkqYIAcZrN50FefF/AVRO0E80b22mc8xiTZZp1pKvZPTvWPjppjpEk6i
kBfNb1au3wwwiMEmiTxl4idfFaxdrV0A/BbtoAEAAABwfUK+CJ09e1afkfiL
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
AAAAAAAAAAAAAAAAAAAAAAAAAOCy+P9fZKhV
    "], {{0, 639}, {1232, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "Exif" -> <|
       "Orientation" -> <|
         "CameraTopOrientation" -> Top, "Mirrored" -> False|>, "ColorSpace" -> 
        "RGBColor", "PixelXDimension" -> 1232, "PixelYDimension" -> 639|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{672.603124999999, Automatic},
  ImageSizeRaw->{1232, 639},
  PlotRange->{{0, 1232}, {0, 639}}]], "Text",
 CellChangeTimes->{3.9325062079647207`*^9},
 CellID->1423964743,ExpressionUUID->"bf6ac28f-7650-47d2-b1b4-22240fff7412"],

Cell[CellGroupData[{

Cell["\<\
Very often the workflow above is too simple in real situations. Often when \
making \[OpenCurlyDoubleQuote]real world\[CloseCurlyDoubleQuote] classifiers \
we have to experiment with different transformations, different classifier \
algorithms, and parameters for both transformations and classifiers. Examine \
the following mind-map that outlines the activities in making competition \
classifiers.\
\>", "Text",
 CellChangeTimes->{{3.932506405569816*^9, 3.932506406505765*^9}},
 CellID->741876774,ExpressionUUID->"5c5d3e7b-1aec-4c83-9c9d-a75280021a34"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3QlQFFuDJ/ov5sWbeBFfr9Pb9DL9er7eXr+Jnn4zPT3d8951u0KxryII
CuIC7riAeHEBFy4ILrjDRUEURBBBEFEREURRlB1EVllFdmqhqqi93oHjPaZV
RVHKUl79/yLDqMo6efLkyaQi6u/JPP957XZX/3/3q1/9KvD/IP+4rtmzZNeu
NSHLfo+8WR4QuGlDgN96m4Agvw1+u/5t7f9GVu7733/1q5J//6tfTbzWAgAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAvzdiYyMpiAV1eN7yaYW3VVRW0qn0h
QbPSvBnSaDRDQ4NkGRkenpUKK8pf0AMM3b9nrreaXZ93asTiMdqBsvHxuWvb
l9wAAAAAAAAAAADQTqaIvKXf0aWhoX6GtVVXVdCqvpAUkR2d+zKHWamw/GUZ
rfCT8sDP22p2fd6puXD+NN0qNydr7tr2JTcAAAAAAAAAAAC0SBE/UX/fuxvp
18jy9Mnjud5qdiFFBAAAAAAAAACAzzYrKeLo6Ah9YTyqYsWmrU2tVk/1KfmI
FBgaGlSrVdNWZUqKqFKpSG06K2UyWX9/n4DPN9ISgzQazWfcPU3aOT4uNVLA
xK4zsqGRU2PkYI2HeORg+fzRgYF+I42XSqWkcolYPG07DXY1UkQAAAAAAAAA
gC+BfopYWlqyxmcFWRIvxbFi79710pXce3KFQsGPR0LdXGzJtstd7ePjzlVW
vNSPqkQiUUR4mKuTDVlPCpNiDa/qaG3XkpO4uwg78IObqx0p5mTPCw7aXl1V
wW1qZ0f7obC9dtZL6C5seIvIXhpfN0x1aLsDt632dmeF6R4FAn5wYAB54b/O
W61WJyb85GhnQQr09/dpJyJKVdr1lLW+XqxPXBytyDEODw/ROuvra2k9p2Ki
6RpWm0IhPxYVTsqTrRztLckhi8VjBrdiPZx3J4f02Pq1q+gTC31WuZOPuIdg
YtfpM+XUGD/Yp08ek724OFmzGJa8Tbp8kW7b2tp85NABe5ulbNsNfqvv5t3m
tuFG+jWyCSvg5eFyJemSSvVR9mvkpBtvAAAAAAAAAAAAzCf9FPFhwX369uTx
SFasu6uTrtzo50vXjAwPs4yOLSw1YlGVSCTy9fbQKbZl0zr64sK5U7RY2fNS
R3tLnWI2vMX37+XRAn3vemnWRPMoGtbRvK65qdHgofmsXK5TIVlGRt43297m
+/NnY9h6miIeCt3L1qzyXOZg+z4l8/RwViqVWkNPOKS12VotDtq1TWdfB/YF
0zI6W7EeDty5lYWibGlpbvqkrtNn4qkxfrAF+ff0e4+moK/q69jJcrLnkdPB
Ctz+ecRgXOxZuoZU6+3lZmWxgL4NP3yAtdP4STfSAAAAAAAAAAAAmGefnSKe
PX2CrvFf513+sqyzsyP12hUWFrGo6lJ8LF3jt9a7uqqis6M96fJFtkcahYlE
Inc3B97kqLnChw/IvrKzMjzcHMkaO+slIyMTNwhnZd6gm9DRaBqN5mZGGl1z
PDrC4KENDgy0tjbTMm4utu/e9ZJFrVbThI001dpyobMD74fgHRHhB/n8UVaY
NGZwcEA7eTfu+jUr6cqamirt1CkizdPOnTn5rPQJS+fILui4vqlSRLJs2+L3
IP9uxo3rnu7O74Oyk9Gmd51BppyaaQ+WvCXddSz6R7omJfkyeSsQ8ElJchR0
5dWkBDq28N7dXJaL0jYsc54YP+niaEVOrnZybOQqr2W0zMBAvykn3UgDAAAA
AAAAAABgnn1eiigbH6eD6Gx4iwYHBlgxll+xFJHejWtlsaCnp5sViwgP40Zh
yVcS6dviooesDAsJEy7GkrekJH0bsmcXnz+qnbwht7S0hCw11ZXTHh33uYgs
91vjs4Lb+JaWptRrV8jy8sVztvLAvmBa+EH+Xa3RFPE258F9bKhkfX2t/las
hz3dndkdvux4g4O2m951+kw8NaYcrHaKxxJm3Uyn27LHIbY0N9Fi3l5u2smE
kL61tlzIJpTp7Gin54s+N9KUkz5VAwAAAAAAAAAAYJ59Xor45k0bfbsjYCO3
tsrKcm5UxeeP0re+3h7cYoUP87lRGBvbdjTi0OmYY3SJCD9IV+7cvlk7GcSx
0XTWlgs3b1x77szJ0tIShUJhytEZTBHz7+fpb6JWq9vb24qLClOvXSFHwXY6
bYrY1trCKgkODKAr6XMOp0oRww78wDapr6uhKzf5+5redfpMPDWmHKzWaIgn
FApInXdys2PPn2YDKWmKSARs3cCuKzdXu4OhITcz0t5y4lBTTrrxBgAAAAAA
AAAAwBzJvX3r7OkTZOnu6qRrTEwRu7o6uCniyxfP6dtDYXu59bMIi0ZVLHuk
yRjzouwZNwpbx5ngQ39Zs9qTblVc9HCtXsmVK1wbXtVNdbzGU8T29jad8mmp
yezpizSuXO5qb2KKyB349+OR0Pcp4lNjKeKJY1PmtCZ2nT4TT40pB6udIsQj
bQsO2s49C/ROZG6KKODzj0WF29t8zy1mZbGAHDKdi9nEk44UEQAAAAAAAABg
/rEBYM9Kn9A1AgGfRTd0Xg+WcR059GEijIaGem7GxSIpNmaMqqmp4kZVsvFx
+tbF0Yo7aDDz5xtXaRS2Z/cO+pasf1H2TGeprCzn7uJtT/ftnKyDoSFsYg4P
N8epjtd4ikifB8jcyc2m61d5LcvOymh4VScWj506GW1qijj4ySmi8XvGTek6
fSaeGlMOVmsoxFMqlas83z/h8FhUeGlpSU9P99DQoE6KSMlkMnLscbFn/dZ6
s8ss9/Yt0086UkQAAAAAAAAAgPkXH3eOZjJJiRfpmrraahbv0Bys7Hkpfeuz
cjnbMDcni5txjY9Lba0W8yZn1KUTiFAJF2N1BryxCTtuZqTRNaOjI95ebtwo
LPbnpIjOnEKpVKpHhQWFD/PpUMPsrIzES3GXE+I1Gg0tMDIy7OJkTTccGho0
eLwsRSQl2cqpUkTSZrqe+6BFlrvOc4poYtfpM/HUmHKwWk6Il3Uzna5panpN
1wTu2MI2bGtt4aaInZ0d5GSRpYqTALPJYmJORGlNO+kGGwAAAAAAAAAAAHOt
uKiQZjK2VosvnD+dknzZZ+VyusZ/nTct097exnLFpMSLXV0dGemp7JZVlnGd
PB5J1wRs3dDd3aVQyB8XP7K3WaqTIt6/l8f7+W7W4KDtUZFH6My83CiMbE4n
BPF0d36Qf1csHuvs7Ij88RAt86SkeHJ3R+nbhwX3ac0jw8N0OKKbi+1Uxzs+
LmX7yrqZXltTrVAopkoR2eg40kt0TXNTo4Pt+yMiB6Kd3xTRlK4zyJRTY8rB
Ehd/Ok/XbN+2gRwFaeSr+rr3F8x6H7V6YmoYjUbDjneV5zKyhg1N3LRhjVT6
fgaWuNizdGV2VoaJJ91gA6Y6agAAAAAAAAAAmC1qtXp34DaWRLHFymJB0aMC
VmyTv69OAf/1PjoZV9+7XvdlH0Ita8uF5N8Vy510UkSyRza9Ml2WOdtcS07S
icJSr13hNoa9JvXQwYctzU1O9rz32ZS/b3DQdvb2ckK8kUNmKR9dRkaGp0oR
09NSWMQauHMr2YsNbxHbkGZf85kimth1+kw5NaYcLLepdDkVEy0bH2ePT/RZ
uZycCPaWtpBuyOaSdnWy2bN7B7ujmTSDddS0J91gA4ycawAAAAAAAAAAmC0i
ofDUyWgb3mKWzHh6ONOwi+nu7tro58vinT27dwiFAp2Mi+jv79sZsImGVLzJ
SYFbWpp0UkSqtqY6JfnysajwjBvX373rfVb6hBa7GH+BlSl7Xurr7cFa5ezA
i4s9y30k4OuGV8GBAdy4ibQ87XqK8eNteFXnv+7DQ/mMpIhqtfpUTDQL08iL
82djsm6m/5z4HdXOb4poetfpm/bUmHKwtNjZ0yfYIyhpiFdfX7vGZwXr0jWr
PSsry9nDEund5Wq1KvFSnE6YSXbd1dXBbee0J91gAwAAAAAAAAAAYH6IhMKG
V3WVFS/5/NGpyoyOjrxueCUSiYxXJZVKG183CIUCg58+f/b03t1csoyMDLOV
58/G0FDott6UGWNjooaG+s7ODrlcbrBCgYDf0tJUX1/b+7aHzvZrCtn4ODkc
iUQybUnSM+RwOtrfTNWAefOpXafP+KnRmnywpJ9JJQI+n97CTNd0d3eRS2hk
eNjIhiqV6m1Pd31dTWtrM9nXVMWmPen6DQAAAAAAAAAAgK8JexpecND20dER
uVz+IP8uHaLmaGch4PPN3cAvF7oOAAAAAAAAAAC+EQMD/WwCF7KwOT7srJfk
3ckxd+u+aOg6AAAAAAAAAAD4dowMD8ddOENn97C1Wuy/zvvHI6EtLU3mbtcv
ALoOAAAAAAAAAABmHX9cXPuuo6Cl5mZd6bWq4qsVj76oJfF5ftLLh2Zvxi9x
QdcZXwpba839xwcAAAAAAAAA8EWTKGSFrbWRjzJWpERb/LQfC5Zvc0GQCAAA
AAAAAABg0OuBnqOPbtomHDJ7gIMFi9kXpIgAAAAAAAAAADpe9XcF5SbqBymu
VyJ23b4UXZR5rvROwssCs99nigXL/CyIEAEAAAAAAAAAuIYlosMFadzk0Opi
WMjdK7cbXg6KheZu3RdHLe5Q9GSP1x2UVARoFOgfAAAAAAAAAPg6yWSyhob6
xtcNQqHA3G0B87vd8NLpcjjLDx0Sj1x68WBYIjJ3u74cGrWoWd6VLq3ZO1Zk
K8j689G0X7NFOVBk7uYBAAAAAAAAAMyyrMwbG/18bXiL7G2+J//yln63bYtf
+csybpmmxgYriwUjw8Nz1AYBn69QyGdYyb6QoFMx0XNR2CxkMplZEt0RyVhw
3mWWH/LiQ08/uS0Yl8x/S75MalHTWCGPf/OPubEhWQQ5vxkrcR2vO6R8l2/u
NgIAAAAAAAAAzCapVHrk0H4H26XpaSlNTa+VSqVCIW9uaiQreUu/y0hPZSUb
XzeQNXOXIpI2FD6cafay94fAUydNDQY/qbBZ3Ei/5uvtMc87reltX371KIsQ
/TLONg2+nec2fDE0alGTvPO6tGq36OFSwa2/VHRlkLXyjhQaGwpz/0H8dMV4
w1HFu/ua8X5ztxYAAAAAAAAAYK4cObTfw82xualR/6NbWRlWFgtevnhO3yoU
iv7+PrVaPUctmZUUkc8fFQlNfR7dJxU2i/lPEbPqn1ldDKP5oWX8gbjn9xRq
1Xw2wOzUY22KrhvS6pCxR1b8zD/hDjXkp/+2vCOFFlPxazXyEfM2FQAAAAAA
AABgfjQ3NfKWfves9MlUBfbv3b0vJGgmu5DL5WLxmCklPylFVCjkAwP9Eomp
99jy+aMqlalpmEKhEAj4RgqMDA+TMibWRiscHBgwcr/2VL00nymiWqOOKcnh
zr/8ort5fnZtXhNjCFXjEy9kQ4Lbf6dzk/LkaEOv8cYTyv5HGoWxqwIAAAAA
AAAA4GsVun+P/3ofIwUqK8sjfzykVCrJ6/b2tvVrVwn4/LraavKi712vTuGK
8heb/H1l4+P07ZOS4q2b19taLbbhLdrgt/pWVsZUe9kXEkQqtLJY4OnhTF6k
XZ8Y7nXiWGTenRy1WkU2JO2Miz1LC1dVlm/b4kcKW1su5C39juziVX0dq+pU
TPTVpATt5FMcSVVSqfR66tW1vl6kvA1v8fZtG968adMvTEQfDSf77e7u2r93
t6O9JanZzcU2+WqimjMSb2xMFBV5eLmrPamNHFfMiSiZTBa4Y0vRo4KpDq2j
/Q05OtJU0glkq+Cg7Z0d7dwCU/XSi7JnpP3ubg7kI/KCHstUe5k5iUK2Jy+J
RYgbM8/3j329iZlSpBwoHn99XPx0hSDnb0bTfj32yEY7kSIOCLL/iqwRP3Ef
bziq7HugkQ2Zu60AAAAAAAAAAOa3YrlT8tVEEwuz5yIqlcrlrvbXkpN0CkSE
hx0K20tf52Rn2lkvycxIGxkZlojFxUWFbi62F+MvGKz5VX1dZcVLUv5SfCx5
0d3dRVYGB22/nno1LvbsmtWeV5MSaFTY1PTa3ub782djyAuNRkMacyom2tXJ
hj2tkT3qsKa6krSWbBj546Genm61WtXZ2bFz+2b3ZQ4s5+Q+FzFwx5aoyMMB
WzeUPH5EGiwWj93JzSZNYk+GFPD5PiuX79qxuaGhXqGQv3nTdjTiUOj+PR5u
jrk5WQaPi88fdXO1O3fm5OjoxK2vvW97SHkvDxd2G7WRXiJrSFecPH7U092Z
vCCLes7uLB4SC/0yzrEI8UhBmkz5CSMtfwE0atVotaztouSFv/DuP/PTf+uj
KVGy/mL8VYS5mwgAAAAAAAAA8IWSSqW8pd+ZfhMxd3aVuNiz63y9uJ+Oj0sd
7SyeP3tKXguFAvL6bt5tboGmptfWlgtpQmiQzh3NwUHbA7ZuCD98gHsj8LHo
H31WLuc+m1Gj0bg4WhUXPaRvdVJE8pa7i8HBARveosKHD3QKaydTRCuLBQ0N
9dzyp2Ki1/isoK/PnTnpv95HLv/QGLLrfSFBZC9TpYgPC+67OFmTYmwNORay
5kH+XRN7aR7uaG4f6fe8doxFiEnlhXO6u3mjkb5Vj72hr8eKHT96vGHGfxAV
LJZWBck709RjbcbrAQAAAAAAAAD4xnV1dfCWfldTXcldqVQqj0dH6CwtLU3a
j1PEzo528rqluYltWPgw332ZAx0vl56W4rNyOTc9o/aFBMWePz1Ve/RTxGXO
NmNjIm6Z+/fuVFaW62zos8o9+cr7EZU6KWJF+Qudwmt8VqReu6JTWDuZIm7f
tkGncOHDB3bWS8gLlUpFXuTfz9MpUFtTbSRFLHpUYMNbrHPrd3VVRUf7RLpl
Si/NdYpY1fvG6XI4zQ+tL4YVtFTP3b7mnFqmGi6TNZ0Wl66k9ynzb/wunTdZ
WhkovPc/JC/8ZK0/qUYqteqva6QlAAAAAAAAAMBckkgk+mMRlUrl6Zhj3MWG
t+jpk8faj1NEImCLPzcS3BcSFHfhDH0dFXkkdP+ezo52nSXmRFRw0Pap2qOf
IhqZ2EXA55P2FBc9PBUTTVqVdPkiXa+TIrLWMqTZl+JjdQprJ1NE9popf1lG
KpHL5d1dneRFT0+3TgHSXVYWC6ZKEaVSqf96n2XONgkXY2trqmUyGfdTU3pp
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
G3L2rPQJXUNONAuLWpqb6EqWInZ2drBtQ4J3clNElhbSgYJM4M6tLEUkFyd9
7eJoxR3Fl/nzrbI0RXxVX0ffbtm07kXZM/2F+9hDmUxW/rIsLvas31pv1vKp
vgQMpl57dr+fxoU0Q39flR8fztue7ts5WQdDQ9jMIx5ujkYq18HSQjacj6qp
qeKmiEqlcpXn+2c8HosKLy0t6enpHhoaNCVFvJObTVeu8lqWnZVBvorF4jHy
Z6iTIho/HBP7BCkiAAAAAADAtyzrZrqD7VKdkTwJF2PZL2V6q6zOzcjj41I7
6yXsuYiuTja3sjL0K1/n68Wei+jiZJ2RnqpTgI5Boili4qW4LRvX6VdSkH+P
Fsi7k6PzA187+bwv//U+Jh/uB0/aG7iPQ9yeE6/WmH+agKBd20L37+GuOXEs
8sihiSlooyKPHDm0n/vRyeORwYEB9HV7e9v6tasEfD75yU9euLs52FotJi/I
IpVOxHc0Rezu7tq/d7ejvaWP67/kRv71cNrv0PxwrMg29qAztwBvcgKF5KuJ
arWKu9OmxgZSlaOdhZXFAnKRRB8N5w4x1UkRZTIZeevp7kzvptyze8fbnm4j
KeK+kCDSYFLY08OZvEi7nkLXS8RisqMVy53IR8ucbcIO/KAzm0bqtStkL9aW
C2mz01KTjVeob6oapm2A6bv4EsTHnaMpUFLiRbqGjhPmfTzykM2hTP766Bpy
GZAD5KaIiQk/0bdnT59g9YvFY/QJh7yfn4vIpvm4mZFGy4yOjnh7uXFTRJZN
ke8iljYTba0thQ/zyUKu4c7ODnLlkIUbWrKpW7jPZuRiNZPvH7Yy9vzp951w
+SJbSb6jHhUWkH3R/xDJzsog+7qcEM+e0zgyMkwqoRsODQ1OVbkOcjjkL5E3
Odnx8PAQW0++Y7kpYlPTa/qW/HFxD3+qFJG7RzpHFVnYAxu1nLiYpojTHo4p
fWLiIQMAAAAAAMDXio4CIv9yVwbu3BqwxZ++Jj82SYGMG9e5BXJzsshKliLG
x51b6+ulVCq5Zcqel5IyLC8iP0493By5c6MIBPxNG9bY23xPQ8Kurg4riwU6
z1ccGOi3t1madTOdvD51Mnp34Dad9qemXDH4wEDj6vs6bRMOsQjRPTlqWGLg
buv5l5aa7OJoxQ11PT2c79+7o50ceUh+uXMzPW8vt/S095kVey4iOV+VFS9P
Hj/q6e5MXpCFbhK4Y0tU5OGArRtKHj+SiMX82/9lNO3Xw9d/3Zi2SDVapV9A
LB67k5ttZ72Em/0WFz0ka36KO9fd1alQyOvra3cGbPJZuby/v48W4KaI4+NS
cn791/vUVFfK5fKenm5ystzdHGJORE2VIpLrkDSYBtTkBZ2bm1wn5BSTC7Kp
sUGhUJDrJCI8zMvDpfdtD90qKfEi6aXqqgpypDKZ7FFhgaO9JU3zDFaoz0gN
0zbAxF18IYqLCmkKZGu1+ML50ynJl8npo2v81334OzoU9n6c4SZ/35cvnpO/
yoOhISxspCki+VumE6nY8BaRS0U2Pk4ug/17d7NiNEW8fy+P9/Otx8FB26Mi
j9C5gLkpInEsKpyNxGtuapRKpU9KisjfAlmzwW81KcAG5pGLigbjRFzsWboy
29D/YmgnL0K2L/I1Qg6EnEFyjuiMJ+Rv5EH+XXKpd3Z2RP54iBZ7UlKsnYjo
j9K3Dwvu06rIHxdL141Urt+Gk8cjaRnyx0V2Tf5wHhc/YlkrTRHZaEzy90L/
YDUaDXsQ5SrPZUb2yIYRkpNLi5EOdLB9Xz/pf1MOx5Q+Mf2QAQAAAAAA4GtF
fqSv8VnR+LqB/Holv3BzsjPJ732aXFFBu7b5rfVm45TKnpfu3L6Z/HRlKSKf
P7piuRP5OUzvBlUqlU+fPHZ1siE/n1leJBGLgwMD3Jc5pCRfJjVk3Lju6+1B
fvZ6uDnSFJE4Hh1BftJWVrwkv6DVanV1VQXZ9TpfLxoaNDW9Jr9z42LPsqCG
/IZ1d5uo8JOO91V/l9PlcBYhWl8Mq+/r/Ozem12trc0sfiE62t+Qt3QIk1Ao
sLZcyPLed5M3ibe1ttC3psyuErj6n3oK/TWyiWFUstZ4aXXIpTMh5NSzAuS8
syfjUadiolkBiUSy3NX+alICt4BcLienOCL8IH3LTRHTrqeQq0IkFHLL596+
ZWu1+JPuaCaXGTkWnRmQD+wLZjtd7e2e+fM4N7ZrNnxLv0J9xmuYtgGm7OIL
Qf6sdgduY0EQW8ipL3pUwIqVPi3RL8DuIKYpopYzspE3+Sw++oKcdG6KSPbI
JgimyzJnm2vJSTopooDP9/Jw4e6OvrC3WVpTU0XLsJmdyXcL+f5h7SF71Hlk
KBe7O5suIyMTfyOp167o74tmenS0Xktzk5M9j0WpwUHb2dvLCfHGK9fR966X
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
Ujs5fQOp0HiK6Ghn8SD/LnsbER62O3CbTpkzp44vd7VXqVTkkPUfralQKEgl
JY8fGaxQx7Q1GG+AKbuYU4JxyZuRvsq3bY/a6vIaKzLrn12vLkmpLLpaabaB
x1Mtic/z2VBkLF/rUthaa5Y/BAAAAAAAADCFUq3KflXmde242RO5r2OxuXRw
Y+aFmJLsvMbytuE+tcbwHARzp6a6kk7n2qc3Vwi935l8yp6XqOjOFN7976Np
v6658IfsuYj59/NseIvetLWymGvmKSKRdj3FznrJ/Xt36LStQqEgKvKIswOv
tbWZFuCmiHz+6IrlTvtCgugDBpVK5dMnj12dbE4ejzSeInp7uUVFHpbJZHR8
YGdHO9lF9NFwOpUGOcaszBvk6Nj9sAdDQ1Z7uz8rfUI2IW/F4jHSBjdXO/a8
TZ0K9RmvYdoGmLKL2aJSq18P9GTWlUYVZW7MPO+QeMTsfy9YsOgsCBIBAAAA
AAC+TI/fvPK+ftLsPxu/4sUu4dCOnIvxZfdL2l8NiU2dE3YmlEqlo73lmtWe
Bj/dvHGto52Fgui9K8r/N3r/8lDW3+/x/a8sRRwbE+0LCXKwnXgGnVg8pp2l
FJEoelTg4eZob/P9am93a8uFAVv8ezhTqHBTRO3k8EVSLSnms8rd3mbpWl+v
mpqqnOxM4ynivbu5a3xWkP3Gnj9N13R2dmz086X1WFksWOZsk825V1oiFkcf
DbfhLSLHu37tKtK2gK0b2tvbjFSoY9oajDfAlF3MUMfowI3ap8F5l8nVaPa/
CCxYjC9IEQEAAAAAAL40fSJ+yN0rxn/NOV0O354TH1WUea70TsLLArPf7Daf
S/arMuG4VKFSiuWyYYnorWC4afBtWVdzfnPVtarimJIc0ns+109aXQz9pB/I
HslRYfmpqdWPK3raRDKpWU69sv+RqGAxmz9F/iZRqzEwBE6hkAsEczIH7sBA
/6v6OolYbEphiURSX1/b2dH+SbsQCYV0ZOCHNSJRfV1NZ2cHOS4D5UWipsaG
utpq0jYTK/zkGow2wJRdfBKVWl3V++Z8ad6q1BPG/8b9Ms4F37kc/jD95OPs
C8/uXnrx4PL/z959uEWx7vmi/wPca4fZM3vOpHtm9oRz950ze2bupH3PqMu1
hCZHETCAqGBCFAUxAiKYEBGzgqAikkFQUBAUBFEMCIJkkCyZpqG76dz3bUpr
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
O7c5rrCSjI0Z+GZOVb9QsCXtonZSwiPlfOcwpmBeaOQ9j0Zy/0DlD0ce/re8
t5DriGD2NfR3XSjJYqYTneNC3/W0cR3XvKfgv6W+HWGRg1JQw3U4AAAAAADA
GbFYzFu+2JB+vpSE+FhHBytWv9TiogIz3vdtbS3q8bQYqTA46BCzQER4KNl4
P/suc+NKe8uL589Q636+Oy3NfmSFIRKJXNc6Xo+OpH68FnnZzcWJ1SnY/6Df
sZDD9I/Tnl1l0utSj+flTIyWVFd/1kot4kzoeldn9QQMuV1kfdfObdXvfmpG
eOFc+CZ3V6n0pytVqVQH9/uSe0hnEU+FHnVds1LJ6KNHythZmxQW5BsYrZ4J
UM6cPrnOxXFkRNNcsKenm5w350E2s0BqSuJGt9X0j3pmVyEPkTxoZrtEglza
9m3u9IOjsojkEGaZvr5ecmce5T/UGeEMNfR3OceFaqcQg/MSx+T6+o/DvKMY
rhp9YvNxGoh7v5O2JnIdEXxZw2OiiOJMulWq+bXDT1uQ+JoOec/j8cmXVZre
zI1X5P0lXEcEAAAAAAAca2tr4S1fXFFeZmB5exszqjswi5enx+lTx9Wfsoiv
X71g7k1PSyYbqe6xtKPBAf4H/ah1P9+da5ztlVrjVqWnJtlZm5AVhUJha8XL
zclmFairrTY3WUYP+jftLOKk16Uez8vt9NrMKvAo/6GF6Q/aBxpYLXW7bt38
qcUjuVJSofaVvq0oZ2YRcx5klZW9YpVxXetIVzVptBNlETPupNpY8lpbW6gf
uzo7EuJjWcnbvIc5JkZLqJaKar1ZRPIEHewttJsUvih9RmqgOqRTWUTWO0Os
d3WOv31TO8IZetpSYxnN7vxoHOl/+w3apy00yuFqfvIvNNNApP+FpC5CrcRA
l9+KN53NDrHHqa/bJCqguKWa64jmE6WgZvSJHZV7Jx8R1+EAAAAAAMBcIRKJ
DG+L2NvbQwo3NTZo77oRE+W5daP6U1rsw4cu5t57melUMpDp/NnT+/y8qXU/
352B/vu0q21srCe19ff3kQrJyquXpa0t75lLQ0OdidESclKq/PSyiIZcl3o8
L6eddiMhkWOZ7QZpht+uutqf/kxrb2slWzo62lmHyOVycqV0FpE2zOfX1lQX
FuRHnNE0+KSGoDQkWp1ZxPI3r81NlumcakehULS3t5EaMjPS3FycSD101ldP
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
WAh6Rvnm0UGsFKJzXOhszTsJMPdVdL03jvRnfgL779/kOijQRyXuHC20ohpT
CZ+vxyiIwJVjj5KpXxpWMcGtQxNOh2GI9++bTI2Xnj1zSju3U1ujmV2Cnvhj
YKDfynx5zgN2f4FDB/b4+eyg1tlZRIVYUn8uYNt/Z93LUI31yrqy1SpNXkU7
i7hpo4tcLmdWW/K0iJydmnGjra3FxGgJa4BBssvSbDk94mJKUjxrrmRmFlF7
76WLZ9e7OrMmxair1eRqqior1LqyiFRf4Mq3n4Uhk8msLYwmas8ZeeXCBrfV
rEujWhLSs6tMGom2g/t9P45/WPHmpyv6NJfK3fG8k0qlWmFrRm25eeOaRCJp
b2sNDjpEbdmx/adpUFzXrKQ2krtE3ged7Sp13pBnJcXj2chc6sdJs4iGvELq
j/2Xv7+XmU7eCnpj2euXq5xsY29Ek2vXGR6N9awnzSKqx4ep3OPjxSpwLiJs
pb2lQqGjvz8zp+e724t8Psy95JXYunk9K4s4wzeceUbyVmtHGx9302ODixoA
AABggQrJT9JuiPiyXUd3D4AF7EJJFusrKG2r4zoo0E36Ppaf9meaJogZfy3r
yOA6HPimiWSSdYlnqF8aq2+f6pvZ9EyvXpY62Jnv8/MueVpEDfHX09OdlBhn
YfrD/r27mfPGJiZoNuY8yJLJZOrxHrsnjwfbWvEaG+upAswsoqwrS3Dvd+ST
eXPpz+h+qRTtLGLoiRASAJVRUSqVL0qf2Vjyrl65QB8SFnqMBFn2+iWJhxQo
f/Pad7fXRrfVdI/a3JxsM973zU2NdNqHmUXU3kuCX+Nsv9t7G9XYjNT5+tUL
coqTx49QBXT2aD4csH+di+OzkmJqSguhcJScwsHeQufAhtSVOq+0Objfl7qx
crn8afETexuz8LDjdBZx0ki0rbS3JLGZGi9lZvx2em2mkoH1dbXUlkf5udQW
qjC9vn7dKrrhH7HJ3ZXepRnBr1d3XlrnDblwLpy8ANR8wZNmEdUGvEIfQ9ro
Qu4qneVTU9laS2OyUTsJycJ61oZkEVtb3pMYyEs4ItB8SoMDA+lpyaQSnW1E
1Z/n9G7djCGB0bllcisOHdhzKvQoKUAqIRdO7pu5ybJbsTEzecOZZ6yrqyH3
8Mrl8+3tbdSxbyvKHR2s4m5d139nAAAAAOaphv4uVhMssgTnJXIdF8DXNiaX
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
UOIiftqfKvhvuY4F4KtQiEQvPDSvfdLPVDJNA7/jR4O2b3PXWba5uelp8RNq
va622n3DWrFYzCpzLCQwNSVRzcgiZmakrXK0NTFaYsZb5rllY0lJEV24oaFu
i4cbWYm5dmWdiyMpQ0reuB5FtgwM9B/c72tjySOVONhbZGdl0kdFnAllNomM
v32THGVqvFRT0s48Mf4WMx49e9+/byKXMMz/mAyUy+VRkZdc12rCMDfRhFpc
VMCsKvRESGJCXHt726EDe6wtjakKb8XGKJWKie4uK4s46SmI4qJCck/MeN+T
MhvcVpe9fllY8GjXzm0GXi8AAAAAAEzb0UfJrCxiXFkB10EBLHx7s28wv7uI
4szJj+GarD2Vn/QzftJ3sg85XMcC8DUo+FWC+/+qSSGm/kbaEk9tzM/L4S1f
nBAfSw2KOJGK8jJSTCQUsrbv2L75WuRl9acsYkz01Y1uq1+9LCUl+3p7U5Li
zXjL7mZ+nOOMlDE3WRZz7cqlCxHdH7rkcvmzkmJrC6N7mem7dmwtevJYLBaL
RKLkpNukqndVldRRzNTcjZioVU625W9eK5UKiUTy+FGetaVxYkKcIXuZ4yKS
vSRy17WOL0qfkTP29vakpyaR2G7FxtCX5uPtefL4EVKMBEYuhxou0sL0B3JR
E90lZqiGnIJcKakw407qwED/6OjIk8LHjiusToUeJf805IoAAAAAAGAm1saf
ZmURyzqbuA4KYOHLayhnfne2N47KFHKug9JHMfCSn/LrocRFkoaLXMcC8DVI
mqKod16Q81/KkTrmrsgrF0yNl9rbmAUFHriTntLc3KRSqViHG5hFXOfiyBrD
MDMjzcaSNzIyQpcJDjrELBARHko23s++y9y40t7y4vkz1DozNUfqTxtv+khL
TIhzWe1gyF5mFjEhPtbRwYrVibi4qMCM931bWwv1o4+3p4nRkurqqs+iPRO6
3tVZPQFmqJOeoq+v19Js+aP8XGYBKkg6i6j/igAAAAAAYNr4YiErhWgc6S+U
SriOC2DhG5PLrGKOML++gqZKroOakEomGM74m6HERaLX3lzHAvDFqWTDwpI1
1FzMotc71Eod/1rs6uxIiI/1891pZb6c6lMcER7a2tpCFzAwi5iUyG4mJ5PJ
HFdYMXs9v371glkgPS1Zu+ajwQH+B/2odWZqboPb6tOnjjNLDg4OFD15TKU9
9e9lZhHtbcx0tujz8vSga/Dx9tzptZlV4FH+QwvTH7QP1A510lPcio1xXeuo
nbD13e1FZxH1XxEAAAAAAEzbs9ZaVhbRPeU810EBfCtOFaYzv749WTGTH8MR
laRvOP0vR4tWqFX6unACLACKwVeCe/+Pphdz+p/L2tMnLS+Xy6vfVcbeiF67
aoUZbxk9PqGBWcS6uhrtOgMO7Q0PO0GX+fChi7n3Xma6nbUJ65DzZ0/v8/uY
5Gem5nJzsk2Mlvj57nyYe59Vz6R76Sxib28PWWlqbNAO9UZMlOfWjdS6j7en
9lQpr16WkmMnmjiGDtWQUxwNDjgWcli7wPXoSDqLqP+KAAAAAABg2q69eMjK
Ip5+cofroAC+FZXdrayWwF2COTyjqGpOd7gGmBWaXszJvxxKXDSSt1QpbJ3S
sTKZ7GhwgLnJMip5NWEW0XMTM4vY19erXVXEmdAD+3zUWvM4U+5lpjs5WLMO
ORcRpjOLSDTU14WHnVjtZEeqWuVoS0oyJy/Ws5fOIla+LScrVCdrlvvZdx3s
Lah1H2/PK5fOsQoYmEU05BR7fLwuXTyrXSA9LZnOIk56vQAAAAAAMD17smJY
WcTs2tdcBwXwDVmfdJb5AUa9yJ38GMMIhaPvqiqrq6vo+VWnR9J4dbTQWiUb
nq3AAOYyQfbv+Uk/E1ccmCht3t7Wam9j9raiXOfewcEB3vLFebkP1BNnEd1c
nJhZRJ2t744cPhh6IkQ9S1lEWl9fb3ZW5npXZ7KIRKJJ99JZxK7ODrLC7K9N
i7t1fbPHOmp9JllEQ05B7glriEjK1SsXmFlEA68XAAAAAACmxOZ6CCuL+H6w
h+ugAL4hqZUlzA/Q/uaxmc+xQv5md3NxIn+PW1sam5ssIys7vTa/KXs1pUr2
7vG+cC5c3p3HT/qOLMrRxhlGRamrrTYxWkINszYX6oE5ZZjPl8l055q+NKWo
TSXVTOqhHGlQDOr7v2kkQlPjpamfz99BI5dA3syMO6nqTym4jo52ZoGxMbGF
6Q/MLCLdA5qmUqlc16y8feuGesZZxK7Ojtgb0UrlZwMR8PlDZrxlxUWF+veq
GVlEUsbS7EftUIn9e3cfDQ6g1meSRTTkFMlJt1faW0ok7GEq3TespbKIk14R
AAAAAABMTxu/j5VCtIw+osTw4wBf0YhEbH7tMPMzfFBXNpMKcx5oxgSLib46
MNCv1vxhrmxqbAgKOEA2ljwtMrweP9+dMRf9h9P/cihx0ViNjkZN08OcrGEu
1ANzipU5e/rdr0NSf46f/IuRvGUGlt+1Y6vLagedrXzj426Sb6215b36U7vE
lOQEZoF7melkIzOLuGmji1z+2f87IJ+qucmy3t4e9YyziOQbIYdXvv2s5aRM
JrO2MCp68lj/XvXnH9qli2fXuzqz0rx1tZoCVZUV1I8zySIacorR0RE7a5Oo
yEvMAhnpKStszags4qRXBAAAAAAA0/OwvpyVRdx19xrXQQF8c0IL0pif4abU
C9Ouivz1Tf6U1v4rngg54m9taTw2JjawqgN7tjfH/e1Q4iJhseO049EVoayn
p1upVM6RemBO+fpZRJVMIHy6ipqLeawmzMCjuj902duYua9f8zD3/ujox3H8
ujo7Lp4/w1u+mPyTLum728tjgws98mHp85JdO7ft3eNNZxHNTZbdio3Z5+dN
5QzJK/2i9JmNJe/qlY+/B2beo/lwwP51Lo7PSoqpJnxC4SjZ5WBvQY1AqH8v
M4soEAyvcbbf7b2tp/sDFerrVy8c7MxPHj9CxzDDLKIhpygseETeExJ2bk72
k8LHYaHHtm9zT0tJpHs0678iAAAAAACYnnNP77GyiFef53AdFMA3p7H/A+tL
fNUxze7DTY0N5K/1ioo32rsaGuo0u8oNbehYdPGfhxIXCbL/RS0fIX+MDw5O
0upPJpNqDzs23kFVNum5SJm+3t6JurLq38uiVCr5/KFJT8fKyUz7dDTtCuVy
uZ5ISP29vT36B2ojhysUE86IbUgNgwMD+u+/VCoVCkf1FFBP/dLU45Hrr3Oi
R/CVs4gK/ltB1j+R93w4/S9kXVlTOvbDh67wsBPUiAEkbGsLI7Kyft2qzIw0
ZrGurs7t29zNeN+7uTg5Olj5eHuSmxMUeICZRSQrVy6fd7AzX+Nsb2djamvF
S0qMo2uYeRZRJBSGngghMZA43TestTT7ccf2ze/fNxmyl9XoVyAYDji014y3
bO2qFXbWJmSJj7vJjGGGWURDTkGQ8C5fPOuzaztZyL0iv2dSUxJd1zoackUA
AAAAADA9nneusHIXhc1VXAcF8C3yzoxifol+WdenV09nRzv5a730eYn2LpVK
9fhRXldnh3q8hyD541osZrdLPBYSSI32Jm2+MZS4qC/hV33viw4d2GNqvNTE
aImjg9WpkyHMtNXpU8ezszIbG+v37vG2tjAif/jv2rG1vU0zrW3GndT161aR
A8lyYJ8P3RaL/C1PTk13BW1533xwvy8pQ/7kJ6fw891JdQWddC+rHuqifLw9
SRikpJODdeiJELqRmHp8UobEhLj29jZyOdaWxuQuOdiZ34qNYY6fpj8YloaG
ui0ebmQl5tqVdS6OpPwqR9sb16PIloGBflKPjSVPcxZ7C9Y4b2/KXnl5epDy
5ESkwPZt7u+qKulLoJ5LQnzsBrfVpAy5pTu9Njc3NxlYA4Vc+MnjR1baW5Iy
5ibLzpw+KZFIyM0peJxHlykuKiQHkr3kYjd7rLuTnjLzS6OyN84rbcghK2zN
Av33Ue3rDHkEpFpy7ZpzOdmSFVJyojs/W6TN1/kpv9bMxfxw8VTnYqbJ5fIP
H7oqKt7U1dVQYwjo1NPTXVVZoT/lS77QpsaGtrYW1ZcZV2RkZIS8YJVvy5kP
xcC9LFKptLammjzKLxDmNE9x6ULEHh8v5pYpXREAAAAAAOinUCpZo7GRpWd0
RnO5AsD0PGutZX2MNb0d06hHpVKtd3V237CWSuVNZKKpY3ds33wt8rJiuIqf
+sdDiYvSzzuvcba/Hh3Z1tYik0mrKiu2b3N3X79mRCCgyvv57owID/Xy9Ch7
/ZJqrxjov2+zx7p7melHDh/s6GhXKpXv3zdt2uhCN5FiNm3i84cc7C0unAsf
GhpUj3cIDTi0d7WTHVW//r2sJlKFBfkWpj9cvXKBXLgm1Kq3u3ZsdV2zsqen
myrg4+158vgRcoFFTx6TCxcKR7PuZZBDUpLiqQL6T6eNakUWc+3KpQsR3R+6
5HL5s5Jiawsjcu3k1OQsYrFYJBIlJ90mcf6UJ6yrsTT78eL5M2SFPCwSf8SZ
UHsbM+pCqOcSeyP6+NGg8bunaG1t2bVzm+MKK8nYmCE1qMfbf5IL3+29rbq6
ityK5uamE8eCyLU4OViT2KgymRlp5NrTUhLJIyN3o7DgkYOdOT3W3PQubXiY
77HBZYfnprraaplMRt6ZYyGB5AZSietJHwGph7xF1LQjZOWLZqjUCrGo1J3q
xSx6vVOt5GY+F5iGmup3lmbLqf7ONPKKkjeNvLFcRQUAAAAAsOA19Hexshb2
N49xHRTAt2tj8jnm97j/PrsTn4Gam5vWr1vFW7546+b1Vy6ff1ZSrD0amJ4s
4o3ICEH2vwwlLiq48P+amyxj9qwkRCKR61rH69GR1I9+vjtNjJa0vG+mC1BT
G6xdvYLZxi/jTirZqJ39y8/LsbMxZba8ksmkZMvD3PuT7mXWQ6JaaW8ZeyOa
GapUKt2+zf1YyGHqRx9vTxJqdfVnza0jzoSud3Wm1vWfThvVzzQ46NBnFYaH
ko33s+8yN5LY6IHyToUedV2zkjmcIzmjnbVJYUG++tNzObDPh3l4X1+vGe/7
R/kPDamBuHAufJO7K7P3KClwcL8vqZnKIgoEw9YWRqwg6+pqTI2XUrm76V3a
tcjLbi5OrJ7g/gf9DH8E6q/So1k5Ui948B/kDeen/kbalvRFzwWzjrzM5PX2
3rHlw4cuasvo6EjIEX8bS56eYQoAAAAAAGCGsmpesbKI085aAMDM5da/0WqO
2D69qmQyWcnTovCw424uTrzli02MlpA/uu/dvUNn9vRkEd/c+kHTxzPnDwf8
tjvYmWsPZZaemmRnbUKt+/nu3Om1mVXAzsaUNTBae1srOV1DfZ368+xfweM8
M96y7k/ZAEr5m9dUWlL/XmY9JCQHewu6tR7tRekzcu1Uf0Yfb0/tUB/lP7Qw
/YFa1386bVSq7fWrF5/dnLRk7Rt7NDjA/6AftZ7zIKus7BWrKte1jrduxqg/
PRdWncR6V+f42zcNqUGhUJArys3JZhV4W1FOZxGTEuNc16zU7jZ7cL/v5Ytn
p3dp5Ly2Vjzt89bVVpubLKPSO5M+AvVXyCIqZdS044IH/64cqaO2jcmlbzqb
0ypLzhRl7s2+sSXtonNcqPX1YJOoQONIf9ZXiYXzxfjsXp6rLc9oCc/aSLMs
X8xzMDUO3TXtClfdPvWyveELvnUAAAAAAPNf+JMM1n9IX3+Vz3VQAN8upUrp
knCa+Ul6Z0bNvNqBgf5H+blBgQdMjJZs8XCjhgrUk0WsjvvP4fS/VI42+vnu
PLjfV7vCxsZ6cmx/f596PIt48ngwq4DjCqv01M+aeA3z+eSQ6nearq/M7J9Y
LN7k7rrC1iw66vLbinJqQlWa/r3MesJCjwX679MOVS6XmxovpUaJ9PH2ZM7g
QGFO+qD/dNqoVNuHz7OO9zLT6RQr7fzZ03SHbuY9IZdQWJAfcUbTxo8adZB6
LnTfZNoOz03UZByT1kAlbDs62PlncivIC0BlEckjCzi0t7XlPWs5c/okeaDT
uzRSmBxC7ierzoaGOnJeUqHagEeg/iptEYXP14te71ArRN0jQwnlRV53rppE
BXKeGcMy1cX47F7jo15GZDnnN/PaVt0+9UXfOgAAAACA+W5L2kXWf0U/a63l
OiiAb5p2c8RZnPDoXVWljSXv9Knjaj1ZRM9N0ZGX1EpNAs3Pd2d42HHtegYH
NX2Wa2uqqTLnz4WzCjiusMq6l8HcwucP6cwiqsf7Hd9JT9ntvc3C9AdqcpYn
hY/pA/XsZdazx8fr0oUInVe9ysmWmjPXkKlj9QfDMr2Zc8kpoiIvrXd1tjT7
cfs295PHj2TcSfXY4MLMIk40XqUhNVS+1bQ5ZE4rQ7OzMaWyiL67vcix5Eft
hWorOI1Lo9o6ambU1VXts5JiAx/BF8oiqsa6RS82y7o0ndOVKlXx++rdd69x
ngfDMncWZBEBAAAAAPSQKRWmWq0vBkQ6/vAEgK9GqVKxRkdcEx82JpcZXsOp
0KOsUfWYIs6Euq5ZqdaZrVLKxBUHwvYso7NVfr47dTbwa3nfTI6lev7OPItI
k8lkVZUVZ06f1DSZu3tn0r3Mek4cCwoO8tcOValUmpsse1r8RG1YCsvAYCjT
yyLu8Ny0yd2VnFcul9MFtm5yMzyLqL+G7vE2gdpTS4vFYrpHc8gR//CwEzov
atqX1tbWQrdQnQhXWUR5f8lw5m+HEheNPlv3oK5sbfzpWck7YVkwC3o0AwAA
AADoV681tcrKW/r+qASAr6O0rY71bV4oyTL88OvRkdrdTmnnz4U72JmrP6Xg
mP1exyoDhxIXFYX/OTOLuMbZnjmLByU3J9vC9AdqiMUZZhGzszK1h/i7dCFi
k7vrpHuZ9cTH3Vy76rP5XCg11e9IGWq66klTWPpPp20aqbauzg5ySH3dZ62+
VSqVrRXPwCzipDUoFAo7G1N64mlaYUE+nUWMuXbFc8tG7SvKy31AFZjGpUkk
ErrzONMwn3/p4llqRl1OsoiShkv85F+Qd7ste9mWhCMT5ZHWJ50Ne3In5e1T
8gE29n/oHR0WySQyhVylZo8eCQAAAAAA8K3RnlrlwINYroMCAI192TeY36Zx
pH9FF7tp2UTKXr/kLV+cnHRbexefP7TKyZZqs0f1Sk5JTqB2KQZe8JN/PpT0
ndfqf2VmEUkZempgilKp3LZlAz263QyziKSePT5erMPj4256bHCZdC+znoGB
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
Z+kR8t1n+x70Cw9mzabejWM2m/0n+pw8fqSzFVQqlbfnp1GRV3sx+Mb1qw4f
CrE9ra6uWrFsoe9Ytx3bNmVlPnV3G2kwGHoTuiMKhmFZY2e7BgAAAAAAZ8Nb
+PYTNLdolLRzAUA/0BfulktdDKVf0w5CjXAEmKjvm149op3FuRiKD5Ijb/3j
V3yIdpae4nhu8sU9tq/Cu5W9v5XoiWOH/Sf5cFzHV3AnXo/3lHzc1tbai5E3
rFt5+OC3Vd6XKxZtXL+q6mWlTNaclflU4jrCoO+3fzXw8XJNS03ubNcAAAAA
AOBsmlRyUYXoFx5MOxQA9A/ljT9ZZ8WV3aUdhA5jZbi1Qoz8gG3AlLuDSl8Q
bD3yEe8bK8/SzvJuTj6+Zfs23HDrQq/HKSstkbiOePb0cYfvfrHcWv31bmSG
kauU3/5Ln7fnp/fv3REeG43G5uam3g3bIVGLKNo1AAAAAAA4G0zQDDBcmVuf
Wa/kTfiV49+PbiCwDTeZyA/IETBWhtPO4nQU137DRH6XrYmiHeSdVbQ22b4N
JaFb+nJm/rw5gbuCv2r/enNTo8R1xN30VPsXjUajRqN+112YTCYy1JPH3dzK
WKVUarXazt5lWaNM1tzhCqIWsYvx7S987hDDyM1mx51bBwAAAAAAegITNAMM
V7rslXKpi+75BtpB6FDfn2i9I1/hHtpBnBGnrhi6d6G0v1fw+ay0Xo8TGXHZ
x8tVp9OJXr9y6fx4Pw9b7ZZx/+6SRXO93Ed7Sj5eMG9mXOy31WtZWcnCebOE
ByeOH5k/N+jVq5bDh0IunDtDXly3ZsXc2dMlriNmBEycO2dGyu2kwhf55IHR
+GZkk8kUFnoiaIa/u9tIstrsmQGiSjAnO3Pp4nnkXY8xo8gKJMaLgnzhrY3r
V5GhyFsBU8aRB9Krl8iLtl23H5/kX7zws4z76bZ3S4oLyYbk41+9cmHOrGlk
HU/J6OVLF1RWVvT6kAIAAAAAAF32U1IKS1TeA9qhAKDPeLMi/hdyqYuZyacd
hQ5OW8M23KSdwpnwZu2zz1Upo4f6bD7Xi57ZvhAnX9xj6uTeht1qbX3lMWZU
ctIN0eufzZpmu7tgQnzMWI9PYqKkbW2tWo3mbnrapPFeYaEnhHcLCvK83Ec3
NzdNnuAdsic4PjbKYDDYbk5YkP/86ZNHEtcRly+ey856JrovIllz2ZIFQTP8
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
oEjLZBulUmlJC9wUi2zgYD+ppbmJ+fFdeZmL4zSJREJey+XyhaHBMz2dLpw7
XZCfp1AoeAdl2zG7peWUHS3p9p+zEWJ24J8G3ZS+N0X083YPCvTm3iOut7nZ
5MqsWL5oJFPE4ZvbmoEUEQAAAADAKkpa6nkPIgbd4M+8AAA2rad4V+/QfF/p
VP3OXatTdhr6O9/6W70Oc79ag04tfvCf5JL2lNjeEHaWj4uoVCrPnT01N9jf
1enrZUtD9+3ZnnDn1oJ5QaZTxMKCvHVrI9xd7Gf5e21cv/rM6eNXL18wkSKa
PUpkRNiZU8d4e3FTRLMt8J6FW7wghJ1j5dSJIzu2beYWcyc+blXEUhfHaU6C
qSvDlzx/9oR9l9uO6S0t15Rwmfsg4rvdywfRCOvi+TMBfp7kgs8OmNnnw5+7
dmxZuWLpoQN7+kwRyT0SCrtMtC8Wi5ihIPtkySzbXBKx2PKNGTKplBcd6/tP
EU2cTn8porUm3QYAAAAAsEVJpdm8FHHLw747PAKALdJ0vBbe/LEw9jN12wvT
W4qT/r0rZoJGVGR6M7CEovwouZji5N/ptbaXNlg+R3N42MKFocHZb7LUajW7
wZKFISZSRLK7s8PUc2dPdXS0syszMl6YSBHNHsVsimi2BV6KeDcxngnZtFqN
70y3N69fGVelUqmKCvMPH9znYD/p3t07fbZjYkvL5Ye5cVPElvs3zO/TPyZF
ZOaLMe7lLRaLXBynpT5KMU4Ry8tKyHV2d7EnO/p5u0ft3dndLeFuEP39lQBf
T2YKbO8ZzjHR17jvmp4jmzu3NUFuE/mEBM/2ZWbxnjsnoM/HWRnv35cvXmAo
NTkpkdxoJ8FUsoQtnk8+VOw2ximiidN5nZUZOm+2r7cb+aCSF2SRy+V6q066
DQAAAABgo46l3+OliJezH9MuCgCsRN0tTvo3w4CHBZvNbit9NdcwcGLV5RGo
a8yTZswWxv5I3WKTX6cmUkStVrtowZy1q1foe0c4FNhNfFdext1Ap9N5uglM
pIh7d2/btGENr9m42Oj+UkRLjmI6RbSkBV76x8yxQlp4nZUZ4OvJFpaclGic
vJ06cWRhaDCvHbNbWkhe954bIRoGRWxvHlALPEyKSF6sjQzfs2sb793bcTFe
Hk7kovFSxGdP01wcp3135kR9Xa1KpSwqKlgZviR4lk9Ly8diLl88R5rNe5uj
1WoUCsWTx6nurtNjblxn3rV8jmx977Qm4csWBc/2JRdfJpNVVVWSmh3sJz24
f6/PMyLFODtMTUtNWbF8UWFBnlwub2ttJZ8oJ8HUu4kfZzXipYimT6ezsyM3
582hA3vJrScvyEJOyrqTbgMAAAAA2KiIxHO8FPF5VTHtogDAOpjZPSSPJup1
arMbK96dIBvLsk1N3gqWUks0Ilv9Lu0vRZRKu48cinKcPrmqsoL8WJCfJ7Cb
yOu++vzZE964iO4u9tyJiVevWn708H7uLiqVasmiuf2liJYcxXSKaEkLxs8Q
Hty/Z8e2zbt3fnv+7Gl2JdlmTSS/QzG5XAvmBfHaMbulhSoOrOFGiPlhbgPa
3RibIj5Oe+jqZEfuKffd0HmzTxwzjGrCTRFlMpmPlyv3WUF9b3/tZUtDyfVh
fpwT5Hs7Loa7QcyN60GB3sxry+fI1vfOEO3r7cbraLx751ayss8zKioqcLCf
FLZ4Pq8jc2LCbQ9XATOgJTdFtOR09EY9mq076TYAAAAAgI3yuLSTlyJ+ELWb
3w0AbIEo8Uvhrb/VSt5bsrGm47UhckyzG+6qxjZdT4u6LZ12FUMSff2Kh6ug
vKyEWbLfZCXdSzj33UkfL9cAP89XmR/PTiaTzXB32L3zW0VPj773McWUB8mL
FsxZE7l8wbygxsYGZrOgQO99e7YrFAqtVkN+vHblorvr9MKCPObd5qbGTRvW
7I/aJbCbGH/7pvGIdpYcxXSKaEkLxikiOXEXx2luznb1dbU/rCwvJSvPnD5e
X1/HrCnIz/P1drt+7RLzI9uO2S0toWhtyHD8FTdFbL571fLd+8SmiOTKkMtC
7iz7VklxIbliVVWV+k9TxPhbsd5eLszV43qdlelgP6m11TBh9LyQwIP7PxkC
tLOz48XzJ0zsNqA5sr08nNiHGFlNTY2nTx4VifoY2bWoqICUnZyUyFuvUql8
Z7rd6s02uSmiJaejN0oRrTvpNgAAAACALWrtFvEiRJcL27R9DbcOALZIK63R
dldavn1PyT51c9rw1TP26bTilP/uipmglbyjXcrgRV+/IrCbyC6O0yeHBPlt
27Lh+2uXZVIpd8vsN1kBfp4eroLQebPdnO2WLQ1tbGxIf/l8hocj2Z7Z5sH9
e3OD/Uk7p08e1fcOebd751bS5pwg30C/GYZ+r9HXtFpN5Mplzg5TKyr6uG5m
j2J2XESzLfQ5nuHiBSHhyxbxVmZkvCCVk5aDZ/kE+HqSFi5f/OHBS247pre0
ROmWUG6E+Nr7/2h75ANqwRibIup7RyMMD1vIvnUgavfysAXMa26KSNZv3bzO
uClyK8l9zHqVQV4/TElmhgp89PB+06dRG5fZObJbW1vI+soKi/7hg8GkiH3u
smXTN4cO7NV/miJacjp6oxTRipNuAwAAAADYqFd15bwUMSz+tPndAGDUU9Xf
0srqaFcx7igqzhomVUn6d71WRbuWEaJSqSor3ue9zWn4UG9iM4lYzA1eOjra
C/LzykpLLJyB18KjWLeF0HmzuY/qsbRaLWkkPy+3ouKd8cOTg9vSWMv9G7wR
EYc4rwqDmyIy2VpdXY3+L0NBsmMPclPENZHLT5040mdrpKnEhNvM6/fvyg8d
2BvoN4O0GeDreezIAbYXueVzZBcWGLqfM92QLcSkiO3tbcZvHTkcRVrWf5oi
Wng6xnM0W2vSbQAAAAAAG/X922e8FPHA8wFPHwkAow0zwqE0Y9Yg9lVWX7Gw
BzTw6FRC0Z3PyZVXNfQ9DQTYkKLCfHcXe96wgSOmM+Mhry9zwQovvTV6CnBT
RH1vUnru7Cny4t7dOx6ugp6/POvITRH37t62Y1sf0zNptVpnh6npL5/z1re1
tSYnJc4N9icLkxJbPkc2MxVObW2N5Wdk4lnE7d9ujNq7U/9pimjh6RiniKwh
TroNAAAAAGCjdqTG8FLEO0WvaBcFAEOilZQL4/7KkGU1DnjYf01nDtmx+4nD
cBQ25snfrjZcvaeutAuBIWls+FBaUrxwfpBxL+kRoO2R1Z7fm27/C26E+Mb/
v5QdLVZpn5cixsVG+/t4aLWasMXzuX26uSli9PUrswNmMsNacpGrJLCbWF9X
S67Y1csXeBsIhV1OgqkvXzwb0BzZpBFXp6+NBzlsa2slNTCPTfL0Ny4iOUTw
LJ/vrxkmneemiGZPh/mRlyJaa9JtAAAAAADbFRJ7hJciFjTV0C4KAIZAp5Y8
+rNhquU3Swezu1oivPlj4c2f6jUW9TMFllZcJrz5E3L1tKIS2rWYoVUqGm+d
yw9zy3T9Da/PLBayBNr9t6vd/yy3+79P7D4f0UPb/yLd6cuX9vyDZgdN7Gmo
sdbd56WIXV2dToKp169d4gV93BSxo6Pdzdku5UESr6lNG9asjQwnLzo7Osju
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
Xy9ZGMKMKmmiZeLg/j3JSYlareZOfNyWTd+cOX28urqStCkSfozjenrkZKWn
m4CpnLwg58gGcWyKmJhwO8DXk2zjJJgatnh+RsYL9hDG9b988YyUQa62k2DK
ogVzyKG5xddUV5G7Saol75IG165eUVtTbXzuDCZFrK+v27RhzccRNWc4X7t6
kRsVmj4FcnPJ+crl8hvRV+eFBDKnsGL5oqqqSt4lJZeR1Ew28J3pFhcbrVIp
+0wRuRfQwsYt+RACAABQ1y4V8yJEsjRLhvpvrAAwCBphUfcLL42wgHYhw6in
ZI9hsuOM2bQLsZRO3qh4d1yvkdMuZPDa0u78MLXKOpu58gAwTiQnJToJppp+
NoxVXl7q6vT1yeOHyQudTtfZ0XHkcJSXhxMT3RQXFebmvHFxnHb+7Gnyor6+
Tt87vuKCeUHhYQvLy0pUKlVdXc3unVsD/WY0Nnxg2hQJhcGzfFZFLC0pKVKp
lFVVlXt3b9uy6Rs/b/d7ifHMNs+eppFmvztzor6ulmxTVFSwMnwJ2aulpZnZ
gKxxdphKfvTxco3auzMhPk6hUHDHRSQ/hi9bFDzb93VWpkwmI0e5eP6Mg/2k
B/fvWXJqJlJEtVpNDvr9tcu89eQ0t23dYLZlYu3qFTeir545fXzunICrly+Q
y8g7HGknJMjvcdojiVis0Whyc7N9vd3IRWbPnWx88cJ380MCs99kyaTSttbW
uNhoclvv/uUC8hpMTLhNruftuJjOzg6y/bOnj71nOJ87e4p5Vyjs8vZyOXHs
UFdXJ/mR3ClyO8gt6697eGRE2L4928nlffH8CWlNKu1OupdA2ic1sNuYPoX8
vFxSHjn3Pbu2ffhQTz6NtbU1K1cs9Z3pxk7uk/rwATmj69cutTQ3yeVy0sKS
hSHkrM2Oi2hJ45Z8CAEAAEaDlPJcXoQYdOMg7aIAxied5NGfbXHYwAHR9bQI
b/5UePMnup5m2rWMFzVndrApYu2FfbTLAQD4xHdnToQE+Vm48f6oXcGzfLjD
zel0uhnuDs+e/jAMCK9H8/mzp0n7vF6xmzeu3b3zW+b1iWOHFoYGczvhkjY3
rl8tsJvIBDgymczHy5X7VKG+tyvusqWhbCNFRQVOgikrVywtKf7hGT9uingj
+qqvtxuvN/TunVvJSktOzXRv2TOnj88PCeSu6emRu7vYv8pMt+SirV29InzZ
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
Prh9qyFnC19GTpP83fjC8aN9brByfsj358+S/1HGR19nGyFn8TTlQdX7d1Fb
NpHtl8+ZnZv1qv7/Z+8+3OI48vzx/wH47n636W7v7mt7vfbau2vvetPtrVey
5QWBQCAkhBISKEeUUc4BJZRlJSsnS4NACJRzJAoQOSNyDpPzTA+/GlrbtHpg
ZoAZivB+PfX4GXVXV3+6e2jTH7qqSkvPHTuSHB9Hop080mftguDK8rLstDR2
k9BVK0gjx/ftKcrP27Z6JWl58bQpV86eJr/wnD9+lGv5wvFj5IjIuSVtzh4/
5nDYToVcfvtaJFm1deVysjuy9ta1CPJh5dzZ/DNG6pOFzx7clzQ3kw+kkDMm
GBfxyO5dZPO716NWzps9ffRIElJhbm5DXR3Xnzc/Oyvu6RNy+N/t2kH2Ti7K
2aOHySYkTrbC/MCJCpns4a2b7Bt3y2fPfJ2U2NzUyO8sLCj8nZKjPronrKy4
uKq8nH3VkJ9FtPnliQkXkS/kznVryKGR006a0mo0bDbV5lpuR9tWryBXlpyW
yEsXyVmyHBfRyiXgriM5Y3KZNPbJ44snjpN9Wd81soj9mK74lFjkIrvzxxYT
Y7s2dIbuzdnWc/snh4w2ySiKFc99DY3tz5/bp1VHnuRyAoW7nf5ObJeziOXl
peSpWTA2YH19nbenKzuEHa0sIgmJVBB0Jn3+7IlgXMR2s4h1dbXkIfrli2fk
KASvBgmcOH542pQA/nt9La0vxbGTINgZBjFiuNuD+3fYz3ZuYonfSLtHZ7Nl
m2eVnSg5M+Ody03+F092/eL5kxaLLGJTU6OPl+u9u7cEDa5bs3xFyMKO4uxo
ofUs4rKlCw7u3y0IbO7sqfyMk+AU8b+Q9oRqPYto8+Q4ScOjqASfX3O3i9IT
25396rL9rGcRbY6H0GJHL3V7s4i8rJegEz37czFqhEe7kcTHvbSM3P5NyO+N
fr6ew4d9yx8IgtX9IQisdMPnWMki2tOLv7PvJwMAQC/k2Czi8b27yf+eBL07
qysq2NmW+VnEl48fNtTV8Qfim+zrrVapjuzeZZlFXLdoPmk/9umTqf/s/GuZ
RcxMTeHvdPG0yYzReKz11UHymUQleI2QbcFKFjHiwnmZRCLoz5v44jlZaKXC
dzu3k/2uCp7DHYXJZFqzoO0dPBJz6+tt9fzX9i58f4wsZDNsoatWkE1Ki4sE
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
vlxzpu3HZPqklGwJJi0HQRCEK1s2Ri9foveudTsl2ZE3u6+vj7VeqVSKhELD
Octk0oGBAdbK4T6kMn27SKXS/n6xMcljZqC/H3I2ebYsDLuIEC6FYkK/+ukM
jj4XcSKRhBPX3t6mfe5Gp5H19Ii014/JlxMKu4eGRsbc1uciQoXp6uzUtrgN
FKRvlwmqnUhYKHp7e+CQtddfPH8mfKmOY+dylemTOtZLT1/QWC6iPrjdEAwF
B7Z2tLeZSQdzBEEQxDB9JXksFzGN9xWO64WMoJTIWh6rlXqfOpCppGzH4lEN
Ef3/plKgm2cWDNSW0+cl2/uPpOUgCIJworKynGf97ZvUl/oS9PX1nTtzor6+
ll5TXlYSFbnc1dHG3maGr7dLfNwusfiTx3gwfs+jh/eqKivWR6+CNHy72atX
Lm1s0HRnuHsnJThonoPtTFg2rV/T0dHOLOjtm9QVyxY58mbz7WYtCQ26c8vQ
rGGgITR4/uAge9K3Pbu2pdxIoo5radgC+PDowd2I8DCQAUv40pD0tDf68myo
r4M84S9z5fWrl2Ble3sbc+WFc6fgqOHDkUPxCZc1/Xc2b4yGZBAQPx83+CBI
uqr+yUXs7xcnXU8IWeAHW0HDqhVLamqq9GmgZcOHk8ePLF4U2NnZYTg42i6i
vsRFhfmgrbWlmVXou9zsZWELqY607/NyVy4PBalwjiBbyOdDcSGdEo4aDq2x
sWHLxuiRwTPd+VevXKSsJ51B0IlEIjlycJ/fXDdIDJlAVfnY1MhyEYeGBk+f
POrubEelgQ8QEMMFGdhFG52Z6Iv/RMJCkXjtChwvtTtsFSQmUOuhQkLp3h6O
zg7W8AHqKrXe8FWmU+f4Lj0DQcvOygBJPl7OUJfgA3XF1dZUw4ce0Scz0LBU
LsGpq63ZvCEKtEGNhUzWRUXU13264SAIgiDmiEoF77zsKV+f3CQtCzELhkr2
CgVWkupzpIUg6oG6ClZDxNaH16ZehkraLX7tIWuYulmhLQOlMsP5159Gl21n
v6YhCIKYIY8e3OXbzebSaosi9eVzJ/s5Z04da2yol8mkxUWFq1cuDfL3bmtr
pRKsi4o4cnDfyuWhee9yJBJJd3fX9i3rl4QGPbh3e+f2zU1NjUqlsramenFI
4Ia1kXS29+6kQLa3bgog/UB/f+qrF97u/HNnTuiToa+zcET44vNnT8IHEObI
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
V0rK+5JIJO4udntjdhI3T6VSPXmcuixk0fqI8JAg/7a2VkjcGbV5kb/3+4y3
UqkUPvb3i48eifXycBSJREaPmugiAodi94Ly/LwcEAky4G02cl34kkA/8o5q
uovo7+d1YN8uEEOsVH0XEV5EXZxsKecT3qK3bVl/MHYPlJ9y+6ZMJptUFxGO
bohY5e3pfO3qJWiK5Js34P359asXPl4upruIfZlpH36PyHtj4lkIMnOQdrWR
tRDLo4LRQkQQhBF63z7O8viTsDhrsivScRGNRqyDnEuDAzzd2BfOnSkuKiTv
b3SMuohnz5yAlzT99ObmphGjq4wWv89AReMI+dc+tG4MvAnrXHh1dSWcAm+S
JBu6iAiCIGNFcOffeBwrtcxQTCtkMuhMTaS7iNzI+UwrMj/Cx99B71L25TMt
ZNrDz39L7y2tSWdMP7ezs2PXzq3z57nCq5SLky386+3lrONQ0b0veN3y9XFz
dWIFBy2EN6uVocFtba3v3r5xd7WPjtqi+WWdajZrDhyFPE7sn1atXFZfX0uK
MnzUdBdRrVZfuhAPgqHeeR5OcGjzxnXU+6HpLuLjRw8WB8yHzOQHd30XEWTs
jdlhbzt7kb+3n4+7djmdxKsqlTJi7UoHu7k1NVWT6iJqhqzae3dv79kdtWJp
4JFD+6D9IRHanwS+MYqstxO+lZCOUblnpSmnIMiMQtkvIutClKybh0uGIgjC
IMLiLPgvu/ft40mtRcdFNBqxTjMUWe9OSvK6NaGO9j+yWXPXrlrx5vWHhbWN
uogxu7bv2xOtnw6vQHQX0Wj8Pv2KJhLyj8yvcXexG/Ha32cMzwJDFxFBEGSs
CFP/yONYqcS1TAuZcQw01dB9ofdO/255AyQk2Uuhd0lr4pkWYglURC+nekuG
/W+F3JyxltDT080tKerr6zWaUy6X19ZUFxbktbY0j5ZHJBJVVpSVFBdSoe5M
P2o6arW6sbGhlFtiimwDiIRC/d/W6fT29sDbZkV5mX6MmKkHWk9/YviIqAYH
Clc4UkFVFELjtiqCzCxUytINC0hEZgyngiAI4/TXlcP/152PbkxeFTouotGI
dXTgDRDeFeMOH7CzmfXg/h2SaNRFPHn8yKYNa/TTyWhAykU0Gr9Pv6KJhPxr
amqA2uHt1/Alo4uIIAgyVkRps4dGi+muOIFMAVkef6QbieLKYqYVmRlpzc/Q
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
5uHofTu3b2alTL+RSjtvkE9ZWQkrQdzZk8GBvnrPqgxzESUSifWShXTD0gj4
/Lhzp3q6u1SGuYh668JcFxH6Ax0WmeZF7lPaRZyqGYFtWzYdPLBb9cW4iJ0d
7clJl0Aw8yyfP8TlWLzMf6GpH0EQBDFnJtapG0qbpxCxfyxDTER76plJYZpP
7SCtaKYZLQuHLjdaMbfiUyOI0eEdXEc9RnoepelPjSCzlu6sZOjntTv9SQtB
zI2hwmdFbn8wyojEqVxEkWjk5IkY6yULGxvqqSOGu4itrc1WlgsqK8qZGfb2
9thxF2fcuqHSZgfpvcRAF9HB1pIOgqyVuHOn/H2XseKMXE9Npp0oupoRm9af
ip20jo1MJluzyp923iDZ5vD1rPyhPYMCfPSeVRkcozk6ao9mPqdPHlvqYieX
q80xQ1xEvXVhikm6nACtwYwLA3cKEttxv6Wjq2htRl5dLWRYXVWhMsxFZN0s
U7iIgwMDcElV5aR+BXWHovPznqsQBEGQOYa4KFi9Tl31AdJC5grsMM2blpJW
NNPIB4qhywnufq1SYVg3BJk+bVdPUY+R5u+iSGtBEBMyLhh8xfmqwOpn4yM4
eR8xMv25dwtdfz/Cq/jMfFJTrjjacXh1tdRWUlx4/15mwnfnlrrYeXo4vXn9
ik5puIsIHIuJdnO2KSstViqVCoWi/G1pxKb1K/28RkfVE/y12kG6LzHQRfTx
cjtyaL9EImENP6MRCgXLl7lsCltLDeQDnuZk21ovogfF0dW8eiXRwW4JbUB1
d3Xu3L75aMxBkJFx+6ZUKuXx3sGF8efPtLV9XKmysqLc3c0+5epl2Nd9VmWw
i9jS3ORkz4k5HDUsFKombDEoncv5hh4KaIiLqLcuTDHQyJHhG9xd1VLhnqbf
vO7n4/Ei95mHmwPtIrKaEe5XaUkR3D5ofCqBIS4i62aZaEbz3t3bVvi4vy54
SQW4oexxNxdb3ctjIgiCIGbJeF++ep26e78iLWSuMNbeNClMs8vvSCsigPD+
b6DXjffiJAgEmT79efepxwiO0ULMnpot3uphtw/Y0wMR5PPhl70sdP39Z64w
k5pyhbN4Pr1ZL1no5+Oxb/f2a1eTWJbdJ7mISqXy8qULDnZLnB2tl7rYwdlt
WzbREXK12kG6LzHQRXz08J6/7zJIef7cqamqLBQKdu/cwuVYeHu6ujnbuDhy
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
0EAF6amX0yhad/sY0gLTgLVOmrZyjV9TuJaaRMliKhfRRHWfeVYH+e3YFpH3
4jlrizt70nrJQqgjpDkcvU+3+aY3wVT+FbTtJBdx8i0ofFMAX+GEC3HMYNAF
BfmUi9jZ0Q47LS3Nuit4NyvD29NVqVRCN3Z3tS8ueqM7Pc0nuIinT9AfW1ub
QRUVYForhsjWaohBl6uuqog9fsTKcsG9u3dYKae6BdBQ0IavXuapTO8iAnAc
ihibCKQVtX/XiWOHp8rEkHbYEBIcHOhbUlw4Pj5OH1wT7IcuIoIgiBEZqz6g
Ho6Yh0PmjMZru18yjUTpQA9pRV8K432voLMJsn6hUmp/uUAQhKbn0Q3qGcKL
CiGtBUGIMfzuLXwLXtv+i1H+mFKTLvPznk+VYHh4OOFCHPWWynIR4SU3/vwZ
J3sOvI/DcdiJO3eK6ZWlXrvi6e5kvWShepVFZ5u01KvMnJubGndsi4Cz8DYN
OURGhLY0N1GnmpoaAgO8BXx+QUE+7Li52NpxF8MONT7n0MF96Tev0/m8zH+x
bm0gvONDPquCVtzJSGfWbnWQH7UD2uBVWqsvcfzooQf3s+rr32/ZrB6vRQ1V
opYmy7xzy3+FJ4iEDd6v+/p6mRfqKNqQ9tHRAry6Wqjv6Cg7Hnd01J5bE2EX
pqqaWCSKORy1bKkjZOjqxN2zayu1mJvpagrFpV1PaWtr3bl988cVNZ1triYn
UjUtKnwNFXF3s4drYYeulI66zzqo70V1daXmKZFoxN5mMRWtIzXlirenq6aZ
HB93Ovb4EUMSUAWx4j5DN7O1XqTDRTwcvQ9uDSvP9BuplIsIxdlxv4VewUoA
HQDEtLY2Ux+pGCslxYVwQ+FLbXjopem5iBKJhJ5BzASeCdDbe7q7DJFNG2KQ
THNhwLizJ+FbQ+3TKae6Be9qa9Shcya+KTPgIlL3kQqekngxPmS1lt9Qch4/
upeVobcdKJvxPa+OeVapVMLjCF1EBEEQI6KU8fm3/149HHGQ/RcHmR7lq22Y
LqLgLUbB/gHhoz9BZ5N1sP8DgCAIi+HaMuoZUh5sRVoLgpCkbv8a+CK8P7Th
87OC108ux2KqYXLscie7iPv2bPfz8Xj29MmwUCiXy+E93d3Nnn6PTkpM8PRw
Kn9bCplLJJLnz3Ic7JbQUQD4/CE3F9uzp09QwxThVXf3zi1eHs6QFbMg2MpK
i6Oj9viv8IQdeH+Hs8x1EbMyb9taL7qdnjY4OADv9S9yn6kD434fewVexm2s
LHp6upe62MUcjsrMSNdcEk014WDAi/P6kCAoAhJAVnt2bV0VtAJe0vfv3dHe
3qZQKJqaGoJX+myN/CHGhO6i9baP7hYwZAU8zaoJBPygAJ8NIcG8ulqZTNba
2gxNB3lC5qaraXhYyJFD+0FYft5zOCsSjdy/lwnp02+kqiamn0NZJ44d9nR3
gh3YoD/orvus4/jRQwHfxzvWBO4ONYpvYKDf3mZx9qP7zLMjI8PQK6gQzHoT
QGNCr2Ba6KrvJ1PrcBEjNq0/FTtp6DL0jTWr/CkXET7GnTvl77uMNSL0emqy
h5sDq5oH9u2KjtrL9Mqgp0GH0dE403MRVROG+ebw9axkp08egw5PBazRK5s2
xOBfzaxSU67Q6yTQKbXeAtXEgO3I8I/PW0NcRHhwvaut0b3wgo6WgW8ivb4l
fIutLBdUVpQzE/T29thxF2fcuqG3Hai54azR4HkvnuO6iAiCIEZnrGrvUNo8
caGe6TOIgbw/FMp0Ebsyk0gr+oKQfIibiLFizusFIYhRkIuE1DPktc3XKo14
hQgyd5D0tBdwv4bvwnDN5/7c+V38WcMXrGO6iD093bCf/WhSENVb6Wkrv7dT
Vvi4354YNUeTdj3Fx8uN2n+ak+3saM0MPApvwXCEik/BsitZM5ppF1EoFDjY
Wj58cJdZCo/3znrJQmoYT3V1JbyqbwxdywrlwCIyIhTe0+mAraoJEwAEeHtN
GpWUeeeWegmyCadLb9F620d3CxjiImpWDU7B3WT5Cbt2REZH7TVdTcPDQiDP
2tpqZoKTsTH+vsvoj6wZzbrrPrsQiUagfW6ksYPk0lRXVVCBQlQTXwFb60XZ
j+5T08ah8eGOBAf60rdMb4KITeuDAnzokaKFbwqgD2zZHKbDRbx6JdHBbklV
5Ucbqrurc+f2zUdjDkLKjNs3pVIp3OLly1w2ha2l46fADQIZz54+ZubDq6uF
g/Y2i5kRhOGj1pFyNNN2EVuam5zsOTGHo6h+CE0B+UBu9Lg7vbJpQwy6KxyP
P3+G6rGqCW/N3c0+5eplVkqVxi2AUo4cOgBK6uvfUwkMcRGhw0MazbGUBrbM
8PDwRFyeXOrjsZhoN2ebstLiiRnlivK3pdAN4ElCDevV3Q5isdjZwQqeAFTg
abgcHkqrglZsDld3pM7ODhW6iAiCIEZCKROIXnnJ2jJICzET2lPPMF3EhtM7
SCv6khgfGclzlDQkkNaBILOAoqV/pB4jY12tpLUgCElar5yAL8LbQEulfFx/
6qmJ2r8rPMzQJQKY5l5nR/v11GSWYZXzJNvKcgHlDgX4eR0/eoh5dnBwID/v
OXU293kOl2PR3dXJTABvx5TBZaCLeCMtxXf5UqXGbwo7tkWcP3dK9b2pcvVK
ou56RUaEQp6sg86O1vFxp5lH2lpbILcP73mGFK23fXS3gIHReJlVk8vlTvac
x9kPWJfw6mptrCwoZ8kUNYX+o5nns6dPbK0X0R9ZLqLuus8usjJvQ110rPyp
mvgu7NuzndqHunu4Odhxv/X3XcblfLN9azhzyrneBJ2dHevWBsJxaE93N3to
fD5/CDLX4SKOj49HR+2xXrJwhY+7l4ezekhw6lWFQh6+cR10DMocEwoFu3du
gYp4e7q6Odu4OHLv38vUrIg66se6SffadC4i0NLSDCWCcl9vd2qGfubkRQN0
y2YaYgUF+VB9aBzozJ7uTtDnkxITtKZUMW4BXAKlbwgJZs4inwEXEQABtCT4
9l2+dAFuHMhe6mIHOW/bsqmL8fXR3Q4lxYWeHk6OdpzAAG+4X9B/oBe9epkH
ue3bvV2FLiKCIAjyRTLwKpvpIlaHu5NWhCDIrKQ63IN6jAwVTbmMG4LMBZQy
SemKhfBdaL92Wn/qqZn2WEQauVze1tYKL6pZmbchK3qa5OPsB9R6d08eP+ya
7BcBo6OjwYG+rk7cSwnnKyvKWRONDXQRjxw6AO/OLc1NrC32+BEoV/W9qUJN
DNQBJIasWAfdXe2pCYM0Aj4fcqPG/uktWm/76G4BA11EZtWgkakxbyxJHz7w
4EZQq/aZoqbhYSGatgPIgByk0o8mKstF1F33uUBvb09VZbmOcOe6E/T0dFdX
VWgGx9HBwEA/NDV8s3RcBfcLEjQ2NkwV7yYwwJvlLkKv27I5TGtiYzE8PAyV
bWlpnkqVXtkU8L3raG+Db1Z9/Xu6Z+oAbkFNdZXmd9BA4IsDl0/vWq0olUpo
BMhzcFB7r9DRDjKZrKH+Q/nb0o7Ji2oiCIIgRkc52iUuXisX1JAWMusZbWtg
uohFbv9BWtEXh2KYJ/lwHmOsIIhuGk7voB4jHTe/I60FQQgjqHgN34UC65+L
m+r0p54CQ9ZFPBy9L+dJtkrD3KuqLN8aqQ7SsXyZy45tEfHnzyQnXaJdMuDD
e96JY4e9PJzhoKe70+mTx5hDtuCd905G+qawtbbWi6gwH3kvPv46YKCLGLFp
vR33W2dHa82NGh33cWgWX0vUYCZax0G5u9qzDBM+f4j21vQWbUj76GiBKV3E
kOBJo84YVaMWQHN2sNKq6nXBSxPVNDwshDWUUaXPRdRdd+TLpLqqAjozK0h3
3NmTrPGBiGrCXA0M8GbGREYQBEHmCNKW60Np84ZzviEtZPajkBdY/YxpJI6P
CEhr+rIQvfGHziZtSiYtBEG+aLoyk6hnSP2xCNJaEIQ8lK/+NmiJQjrN0Vx6
YzRT6/sVFb5WTTb3Ct8U2FhZJFyIGxjopxMXFOQzXTKavr7eB/ez/H2XwaY5
FEomk1VXVcQeP2JlueDe3Tsqg13EqP27Thw7rKN2Wid4ajINb01v0Z/UPpot
MJWL6OfjMdXc1dbWZjiiNQi1SWs6PReRRrPuyJdGZ0f7u9qa4JU+rBstkUi+
iz+rOdsdefTwHo/3jrQKBEEQhATyUUHWz9Xxc9u1rA2CfBJlAYuZLuJwbSlp
RV8WHy3rx/+XtBAE+aIRvH1FPUMqNziR1oIg5FFIxkr9vlH76ie2TDuTnds3
r10dMNXZy5cu2FovopbxZ5p7h6P3wYWsxOk3UimXrLOjPTnpEmuII58/xOVY
vMx/oZoYA1lWxg4NE3f2ZHCgr8pgFzHxYrzWNdlyHj+iYtqazkXUW7Tu9jGw
BdonTz8cGxuFezGViyiRSKyXLNRcik3A58edO0VFXjBFTafhIuquO/KlEei/
3Mmes2/PdipCB4IgCIIgOpA2XBpKmyd8+AecavqZ1P3/7N2HXxv5nT/+P4D0
u/zucnffvbS9XC7Z7G2STTY5tzVYILoxBtwwxsYNG2Pjsu6NdcFe97b2unux
ABv3jrvpYHqvolc1JKE6+n3kcbRjCYTAoI+A1/Oh3Yc0mvnMaz4ajeHNzHy2
LuBWEVvuCfpeZlTRqyXXf052Nl1HGu0oAI5L3dHCHkNSfX5POwuAQ5BXFbPj
NTff7nWUWOuqqyvdJo07uH+P5XXNJcXGgTkEly+ZXpqKeytXLCWLcGfWaDSL
Fsxhq2TsyL+mYWFNM3h7uLDnPR7YF7MqaqnZ6mIvnQ8LnWWwuYooFNa4uozN
y31nLa2tLZ58Z/ZGf0NXRexz1db7p88e6Ow0dmBC/GXuu7duJJKJVsbR2BG9
2bLNQwf2TvXz1Ol0Q7SltlQRE+JiTcNz97nt1DFaTXeTUFaUJUp73JaU2HT9
XGPCyfrLR+suHhCe+woPPEbng/b3EgBg+GB00jsfGy81repjgD+wTnh2D7eK
WHPC/Obe0J2/hexp8tQ5tIMAOLRUn9+xhxFNZyvtLAAOofVBgvEGia6/FGc+
H1gLmRlp/pPdv1gdmfzqBXvrwpaW5jjBJQ+3z9euWWG6YpFb3Lt4/oy35yRT
nbC5qXHDulV7Yr4kMyRejVer1Vs2rZ09KyAl+SU7doZc3nVgX4y/n4dMJiMv
S0uLSeMnjh+uq3s73npebk6Av9eli2cNNlcRib0xO0jy7KwMElKv1+e8zlq5
YunckOnsyZNDV0Xsc9V99o/1HjC8qUOGhc5qa3t7oEtLTV6+bPGaVZFWqoi1
NdW+XryYXdEyqZS8JB1I1sXnjb9z+8bQbaktVcQH9++QGFWVFWwxs89ttyet
VES+OA1xx8tjovKW+qRP/RP5KmXO+HveMr+idbPLdkZUHd1cfXxbzamdwnN7
6y7sxwOP0fmw/3cTAGD40tQligROkhu/NuhwGv/AtT2+zq0ikh/MaCdyOIyy
QRz/A3H8j5hu1EYAekV+y2MPI5Ic8wv3AEatmpM7yJcixfM30oL0gbXQ0tK8
bcv6oKk+POcx3p6TyP8D/L3YS1ZNuMU9rVa7I3qz26Rxs2cFTA+cTBYRxF7U
63VRy5e4u06oqChTyOUxu6L5vPFe7s7zQmd68idGLFlQXV1pai05+QVZljQY
PGPqtADfyT5u586cslyRwWoVkWGYs6dPkrWTxaf6eZKl1q5ZYRoSekiriNZX
3Wf/WO8BorGxYcnieaQDQ2YFks8iKjKcBNi6eZ2VKiJRW1uzMCyErDd4ZoCr
y9gpvnzu4BdDsaW2VBG7umTr164kewKZyA7PYX3bh5q8qrjp2tnS6PDM6Z+l
+vyuYGVQzckvW+5elhZkaMTtfS8PAAAAYJXs4ViRwKm7BOdyD5y8opBbRcyc
gRsA9kD+arpxTyvaSTsIgOOq2LuSPYw0XT9HOwuAAymPiTIWEj3+S5Tx9H3a
aW9vK8jP7ezssGXmjo72vNyckuIiyzFTWDKZrLSkKD8vp7W1xfJdvV7fUF+X
m5NdUVFmqjgNAMMwtbU1hQX5NsYeRNZX3Wf/9NkDLS3N5OPobfHekG4nS5Fg
Gs3Ae9XM+3cyCcMtew7Wp2+j7oaa5lsXS7YuTJv8UXboxIr9X7Q+vNLdJBzq
9QIAAMAopG19ajwdMfHfGbWIdpbhSq/qfuXygamKSJ6TKbRDORxt6/O3J77i
PpwAvWhIOMkeRioPrqedBcCR6PXle4yFxFe8nzfEHaedBoA+dUdL26Or5TEr
MoL+Qh7kCXlJJtLOBQAAACNf1zNvkcBJmbuOdpBhLHPm/3FPR5RXFNJO5Iik
9/5sHBa8LrHvWQFGJVH6E/YYkr9iKu0sAA5HeHYP+ze7/Eh//DsLo5Cqua7t
0dXK/WuzQyemTf6oZOvC5lsXuxtqaOcCAACA0UUnyhXHfU+c8E9MN/6COUBF
62Zzq4htj6/3vczoo6o8JRI4dT1xpR0EwEGpWurZY0i6/ye0swA4os7UR+n+
f2S/JoVrZrY+iO9uqGE0Ktq5AAafRtwhLUhvuRNb83V0wcqgVJ/fZUz7a+n2
xU2JZ+RVxbTTAQAAwKimSA8Tx/9QL8XPJANUc2I7t4ooPLuHdiKHpJWLr/5M
JHBilI20owA4qBTP37CHEa20j0ETAEYnbZek+vi2FI//4v6ziwcew/TxyvUX
GUF/zYvwLd22uPTLJUXrZuct88uc8fdk11+mT/0TmV6+J6oh7oQ487lWilsP
AQAAgONgGHUn7QzDWMs9AfdnwpKtC2gnclDqWoEyezlujQjQm5xFHuxhZMDD
0QKMBlqZpPnmheINoZnTP0vm/5p6LQgPPAb4mPTzZLdfvXT+4BV5TPrPrNnj
Kw+uk+SmMloN7S8ZAAAAQB+Y7mZt61PaKYYlWVEW92fC7FBn2okAYFgq2xXJ
Hkaab12knQUAAOxB2yUp37sqmf9hsudvClYGpfl9TP4vznxOOxcAAACANfIX
/sbBLxrv0A4y/JAf/7hVxGTXXxr0ON2uF4y2O3+LthU/GwP0oF5wjD2MVB3e
SDsLAADYj7Qgw/iX6JAJwvP7Wx8mvJ7rkrfUR1aYSTsXAAAAQM9UFV+LBE7S
2x8Z9LiMot9M93tnH8q6StqJHJROXEB2M8nN3+C6ZgBLotQk9hhSsDKIdhYA
ALArRXUpOf4Xrp6RzP81o1G1P72ZOf1v5XuitDIJ7WgAAAAAFhi99N6nIoGT
qmQf7SjDT0FUALeK2PHqPu1Ejkt694/Gs17rrtIOAuBwupuE7DEk3f+PtLMA
AIC9SV6/SvP7uGxXZHrAn9UdLXq1quro5oygv0gLMmhHAwAAADCnbXkiEjiJ
r/4r091KO8swU3loPbeKWB97mHYix6Wu/IbsZrKkibSDADgehjENPouTTwAA
RqH2Z7eyQsbXXTqQHTKBHZpZnP0i3f+ThrgT5N8I2ukAAAAA3iF/GSgSOCky
FtIOMsw0XT/HrSKW7VxGO5ED0yklif9BdjNdZxbtKAAOJ2ehO3sYkeZjmGYA
gNGoYu/KygPrhGf35K+Yyt5qW93RQp4XbwjVdytppwMAAAD4jl5eLU74sTju
ezpRDu0sw4nk9StuFTFnoTvtRA5NmbdRJHCSp4bSDgLgcMp3L387TPPNC7Sz
AAAABTq5LCPwU2lBRtH6kMpD699OZZjyPVE5izw0nTSvGFKpVEVFBaUlRXJ5
F8UYAAAA4DiUeRuMF5w+dqEdZDhRd7Rwq4gpnr+hncihMcoGcfwPxfE/Yrqb
aWcBcCwNccffDtN8aAPtLAAAQEfHi7uvw3j6bmXW7HHtz2+bptd/eyhz+mdU
RvFLvBq/MCyEzxvvyZ/I503gOY9Zu2ZFaUnRUKyrtrYmMmKht4fL9q3v+08h
SejqMrazo2NQgtmTSqWSSvu4t8nw3ToAABhRtF2SG780jn8hjKcdZThJ9fkd
t5Coam2gncihyVOCyT7Wnb+FdhAAxyJKf8IeQ4wXsgEAwGhVuGZm8+1LXeX5
aX4fq9uaTNPbn95Mn/oneeWQlO96pFQqt2/d4OXuHCe4VFparNVqdTpdaUnR
xvWr3SaNe/ni6aCvcUXk4vVrV9ZUV7W2trxnUyXFRTznMcOxzhYf923IrEDr
8wzfrQMAgBFGXX1RJHCS3PyNQa+inWXYyFvqw60iijOe0U7k0HQd6cZ97NoH
Bl037SwADkTV2sAeQ8ivjbSzAAAANV3l+ekBf2Y0qoa4EwWrpnHf6nh1P93/
E1lRtn2SbN+6IdDfu6y0xPKtA/tjPNw+r6muGtw1evInvnj+ZFCa0mg0LS3N
er1+UFqzJ1uqiMN36wAAYOSRPRonEjjpZeW0gwwb5XuiuFXExoSTtBM5Otmj
8WQfU1edox0EwLGkev2WPYxoRG20swAAADUlWxcYh2bW63MWurc+eOcSIXHm
83T/T6QFGUOdoay0hOc8JiX5ZY/varXaqX6eJ08csXxLJpVqNGrrjYvFIp1O
Z9kmWWNaanJ/o2o0mrbW1j5XytLr9WTtfTYokYj7G8NyEbJFVtZFAre2tigU
CrPptlQRAQAAHAejFmGAlX4hP+Zxq4gVX62mncjRaYTxxjFWXvjTDgLgWPIi
fN+e0pzd829tAAAwGnQ31KRN+V99t1JRW5bu/4lG/M6Fq9K8tDS/j6X56UOa
YdOGNfPnBVuZ4dnTpMSr31U4tVrtqZPHgmcGuLqMdXedEL5wLveS59KSonmh
M5VK5eXYC6Eh08k8fN6EZUsXVFW9vdPjF6sj582ZwXMeM3PaFDLno4f3TYuY
rXdH9OYrCQL2eU111fq1K90mjePzxpM2V69cVltTzb5VXV1JFpeIxdwMUZHh
3h4uZM5Af++YXdFdXTLTu+Sl4PKlujrhhnWrvD0nkST+k90vXjij15tXO03K
y0sXhoWQJ2e+OTF7lnHDpwX4njt7ikzp6GgnwXw8ecZ2/Dzu3L7BXfB1dubS
8DAyP0lOZliyeF5hQT6Znp6WQjIH+HuRDiRPTJv/1Z6dpAWS5FpiAvlcThw/
bNo6MnHzxi+it21kGIa7isMHv1oVtVTVjQt/AADAXvQqvayMdojhQZT2mFtF
zFvmRzuR42NUZYdRrAYwU7FvzdtTmq+cop0FAABoKtm6sDHxNHlS83V0+Z4o
s3cluSnGQmJe2tAFCJrqc/HCGRtnVqlUEUsWBM8MSE9LUSgUra0tiVfi3F0n
mFrIzcnmOY+5cO70zi+31tfX6fW62tqa5csWB0zxYitdBfm5ZFkyz7cXz2Vn
ZZAW2EUUcrnZusiKvjl53PDmhEZ/P48jh/aJRJ3kZWND/aYNa6YHTpZJpQaL
Owc+e5rk4fb51yeO1AlrNRp1QUHe8ohFwTOmtrS8He8vKjJ8985tpPEXz5+Q
lcrlXbdvXSeLJMTF9rbVpBGyjWe+OXHsyIHmpkatVpuS/NLbw+XWjUTSOGlH
qVSS3oiP+5YkYeuERGlpsSd/4tHD+8kThmFIwgP7Y/x8+ORJZ2cH2fZ9e3dN
C/AlT8iDrWGuXrnscuyFE8cPz5k9jfQhaYq7dRUVZaRB7of18MFdt0njXmdn
2vjxAQAAvD9FVoRxmJXG233POup1Nwm5VcRU349oJwKAYakp8czbU5r3rqSd
BQAAaOoqz88I+otBr9Mp5ekBf+4qzTWbgT0jUZKbMhRrVyqVPOcxj5Me2Dj/
5dgLAf5eZlfvvnzxlM8bLxTWGP5RRVz3xTvl0La2VjLD46SH7EuzK5r7rCIm
Pbo/2ceNew6eRqMmUx4+uGt4t4qoUCim+nleOHea245arV6yeN6O6Lfj/UVF
hru6jC0qKuDOc2B/zJzgoN62uqAgj6zCbDjpA/tiyMS7d25yJ5K1Hz28n32+
J+bL4BlTubc0JJsw2dv12dMk9qXlFc2rVy4jWx29baPpqm2zGunNG4luk8aR
HiPP6+vrvD0nmW0sAADAUFNXnn4zzMp/GbTm/3aDOYZJcf+QW0jUiNtpZxoG
tE0Pup666+U1tIMAOAryyyB7DMkN96SdBQAAKCtYNa3t0VXypC3pWu4Sb8sZ
pPnpQ3RGolBYw3Mew1albOHnwxdcvmQ5fWl42Fd7dhr+URLMyjS/CntOcFDs
t+fZ5/2tIj598ojPm9Dc1Mh9N+d1FjvmC7fOlnglzt/Pw/Ly3vS0FFeXsex4
0FGR4cuWLjCb4XHSQw+3z3vbaraKaLZRiVfjLWN/uX3TxvVvb3l0/97tbIuz
BINnBlw8//Zkwh6riFN8+dzrry3HaN6+dUPQVB+yLYvmh5D5zS5wBgAAGHoM
OwSGMmct7STDQM4CN24VcYj+LjzCKPM2kR1MkbGQdhAAR6GVithjSIrHfxnw
8z8AwOgmSn+Su/jtH5VyFvLbn/dwiZC0ICPd/xNx5vPBXbVCobD9XMTW1hYy
c2VFDyMznjtzKnzRXMM/SoLcqhcrInw+WxI09L+KqFQq588LnuLLP33qeF5u
jkql4s7GrbPtjdmxeeMXlvHIGt0mjWPXGBUZfmBfjNkMmRlppBG1uudxW9gq
YtO7ZcxbNxIne7uazXn44FdfrI40mygRi0nIZ0+TDuw3nr7I3lDR0EsVcf3a
dy5SsKwiko4KnhlAVh001Ye9xBsAAMDOdOI8cfwPyEMnzqedxdGVfrmEW0Vs
vnGBdqJhQC+vFsd9X5zwE6a7lXYWAEeRHvBn9jDS3VBDOwsAAFCWOePvXaV5
BuPJ6qnkOaPTWs4jK8pO9/+k49X9wV11n/dFzEhP3bRhjVarzc/L4TmPkclk
lvPcvXPT38/DYENJ0GB7FZFTeFSr1dcSE1ZELvZw+5zPm7A8YtHzZ0/Yt7h1
tlVRS48dOdDjVkwL9L1x3XjCZ1Rk+Iljh8zetaWKaDY0860biYH+5ieOHjqw
11RFJK2dOnlsTnCQJ3/iksXzdu/cdv3albDQWdariIcPfsWdYllFNLy5rpxM
PH70YI9pAQAA7ECZs0YkcJI9mmAw4KwYa+ouHeJWEasOb6SdaHiQJ88gO1h3
/hbaQQAcReGamexhpOPlPdpZAACAsob4r8t3L2efF60Pab7Z89+p5ZVF6VP/
1P70Zo/vDkyfYzTviflyyeJ5hjfDmvCcx9TW1ljOc+ni2QVhsw2DWkUMmRVo
WsREo9EU5Ofu/2q3q8vYWzevGd6ts+3asXX71h5+ONfr9e6uE169NJ7Jabcq
YkT4fNKxpGWyvaYZFs0P6aOKeGgfd4plFVEorPH2cFkesYjPm1BUiDNAAACA
Em2X5OaHIoGTuvIb2lEcWseLu9wqYsHKXu/DDFy6jgzj7Tev/T+DTkE7C4BD
qPk6mj2MCM/v63tuAAAY0XRyWarP78jP4+S5vKIwPeDPerWqxzmVdZWZ0z+r
jz08WKsuLS3mOY9JTXnV47sSsXiKL//M6a8NxlqczpM/8c7tG5azrV2z4svt
mwwDqiKyhbL6+jru/N3dSg+3z9lFyBotbzB47MgBtvjJrbPFXjo/c9oUdrxj
ruKiQjJPnbDWYK8qIltxLSst4b7LMIyvF+99qogqlWr+3Fnr164kTW1Yt2pG
kB87UDUAAID9aRpuGOs8if/OqHDZaa+UwgpuFZH8jEc70bAhS3ImO5iq4gTt
IAAOofXhFfYwUrI5jHYWAACgr2znssbEt+Ptlmxb1JBwsrc5NZ2tOQv5FXtX
DtadddkBO8rLSs2m6/W6rZvXTQv0NV3FfOzowTnBQaYRhFmlJcZKV0G+cXTp
AVQROzs7yMuE+Mvc+W/dSCQT2UUO7ItZFbXUrMHYS+fDQmcZ3q2zdXS0e7k7
379nfmPJDetWrY6KYJ/bp4qYl2u8+tvsvoXPnz3h3hcxIS521nR/7gx9VhH3
7d1JPimJ2JhEJpXOCPIzDeYCAABgf10vpogETvLUUNpBHBej0ya7/pJbSNTJ
8RdAm2gabpK9S3r797hqHoCQVxWzx5DMWWNoZwEAAPokuSmvw3jsc6WwPN3/
k95ORyT0qu6iDXPyV0xVd7S8/6qVSmX0to3eHi4JcbFlpSU6nU6lUhXk50aE
z/dyd87OyjDNKZVKZgT5rYhc3NLcZHhzpXBWZrr/ZPfdO7exMwygikisXLE0
LHRWW9vbMxnIW8uXLV6zKpJdpLS02MPt8xPHD9fVCdkZ8nJzAvy9Ll08a7Co
swkuXyIz3793W6PRsIF379zu68WrqChjZ7BPFVGhUEz2dt0RvYUdMJp01P17
dxaEzV4VZdzSxsYGMvHB/Tt83viqygrS4ezi1quIj5MeuE0a95pzWmZhQT6f
N4F8aj3GBgAAGGp6hVB85acigZO29RntLI4rO3Qit4ooK8qmnWi4YKR3/kD2
Lk39ddpJAOhjtBr2TxKvXD7QKc1/2wIAgFEoc8bf5RUF7POSrQsar1q90RDD
1MceMQ7cnP1iUNZ+4/rV8IVz3V0nePKd+bzxfN6E9WtXNr87MLHhTV1u04Y1
5N2Z06ZM9nYlj9hL503vDqyK2NjYsGTxPLLSkFmBAf5eUZHhYrFo6+Z1pkWS
k1/MnhVAlgqeMXVagO9kH7dzZ96e0Wd558CnTx4F+nt78ieSRdwmjYsIn8+9
XNpu90UkbU4L9PXx5M0Lnenl7kw2kGzmq5fPSfitm9aRGbq6ZKSHyVukcbm8
y2C1ikg2gTTFXlrOJYi9SD6L4qLCHpMDAAAMNVXJfuMoGMV7aQdxXCVb5nOr
iC33BLQTDRuqipPGQXySPqcdBMAhvA7jvf1jRKH57Z4AAGAUqv/2kGnkPnlV
cXrAnxlNz3UtE2lBRkbQX6qObrZy4mK/aDSa0tLiqqpK9ly+3qjV6pLiItPJ
gYOipaW5ID9Xoej5Htp6vb6hvi43J7uioqy3ch9Xa2tLYUG+ZT3TnkgfVlaU
57zOanj3ro/vzqM2q08CAAAML7rObAOj7Xu+0Up4dg+3ilhzYjvtRMOHTim5
9oFI4KTrSKMdBYC+sl2R7GGk+UbPY3ECAMCoomqpT/P72PCPwUGKN4Ta8g+E
ViYp3xOVOf2zwR27GQAAAMB22pYnjKqddgpH1Pb4OreKWLQ2mHai4aS78Ms3
Y6z0esNwgNGjMeEkexip+Aq3RgcAAKO8ZX6itMfs866yvIygvzA6m/64LyvM
zFvq83quS/uzW4zW2mmEAAAAAINL15ltvPL0wd8NjI52FocjryziVhEzp/+N
dqJhhfwo3PbKwOhp5wCgT5KTzB5Gchd70s4CAAAOofnmhdIvl5heFq0N7tfN
c8SZzwtWBqX5fVx1ZJMkN2WwLnMGAAAAsEanlN7+nfEGiUW7aUdxOOTnsVeT
/tNURXzl8oG+W0k71DCEQiKMelqZhD2MJPM/NF2/BgAAoxn5pyHV5/emny2l
BelZwWMNDNOvRrqbhPWXj+ZFTCb/vuQs8ijZuqD6+Lba07uF577CY/Q8hmD3
BAAA6JW29bk47nvihB/rpcW0sziczFljuKcjdpXn0040zCjS5kqu/5xRtdIO
AkBZ5vTP2MOIoqaMdhYAAHAIRetD2h5fN73Mi/DteHFnYE0xWk1XWV77s1uN
iafrYw/XXdiPx+h5DNL+CAAAYCtF1jLjdc2PxuG0MTNFG+Zwq4htj67STjTM
yFNmk11LmbeRdhAAyoo3zWMPI60Pr9DOAgAADoH8i0D+dTC97Ex+gBtfAAAA
wDCg7ZLc+m/jWBgl+GPWO2pOfsmtItaexnXf/cPeeFOc+G8GrYx2FgCa6i4e
YA8j1Ue30M4CAAAOQSeXpXr9VqeUm6Zkz/lckpNMMRIAAACALbQtj43VnoR/
0svKaWdxIK0P4rlVRO7fi8FGXU893hSo99EOAkCTKDWJPYzkR/rTzgIAAI6i
eENoW1Ki6SX5ybNw9QyKeQAAAABspMhYbLyuOWmiwdC/GzuPYF2ludwqYtbs
cbQTDT9sgVpy41cGvZp2FgBq1B0t7GEk1eu3/b15PgAAjFRtSde4f6RmdNqM
wE/lFYUUIwEAAADYgtFIJTc/NJ42VnaYdhZHoVPKuVXEV7yfMxqUwvpN9uDv
ZL9SV52lHQSApvSAP7NHEmVdJe0sAADgENiLmk0jNRONV06Vbl9MMRIAAACA
jTRN943XNV/5Z6Ybg+q+lRH0F24hUVFdQjvR8KOpu0L2K+mdj3GaK4xmptGa
uBevAQDAKFe4dlb789uml/puZdrkj7qbhBQjAQAAANhImb1CcvO/GFUb7SCO
onDNTG4Vsf3pTdqJhiFGL739e5HASVN/jXYUAGrqLuzHACsAAGCm5U5saXQ4
d4rw7J7KA+to5QEAAACAAas+tpVbRRSe+4p2omFJVXnKeNfNh2NpBwGgRpT2
mD2M5EVMpp0FAAAchVYqSvX5PaPVfDdF0pnq8zvyf4qpAAAAAGynkxTIU4Ix
XrPhzR+IuVXEkq0LaScanvQqyfVfiARO2rZXtKMA0EF+H2QPIynuHxr0Otpx
AADAUeRH+ovSn3CnVB5cX3tmD608AAAAAP2iKj1oPHPs/mcGvabvuUc0WWEm
t4qYHepMO9Fwpao8Jb76M11nNu0gANRkTv8beySRVxbRzgIAAI6iMeFkxb41
3CndTcI0vz/ouxW0IgEAAAD0g04hvfOxSOCkzB3td2XRdkm4VcRk118yOi3t
UAAwLJVsW8QeSZpvf0s7CwAAOIruJmG6/ydmE8t2LG1IOEklDwAAAEB/6Tqz
xPE/FMd9X9v2gnYWytKn/olbSFQKK2gnGsb0slJtezLtFAB0kN8H2cNI+Z4o
2lkAAMCBvJ7nIit653oNRU1Zuv8fGY2KViQAAACAfuku2ikSOElu/obRSGhn
oalgZRC3itjx4i7tRMOY9N6n4rjv66UltIMAUCAtyMC9EQAAwJLw3N7a07vN
JhZvmtd0/RyVPAAAAAD9xuhlSZ+LBE7y1FDaUWiqOryRW0Wsu3iQdqJhTJkd
RfYoRdpc2kEAKNCrVa94vyCHkVcuH+jkMtpxAADAUXSV5lr+gamrLC8j6C+4
lw4AAAAMF/quKvHVfxEJnDTCeNpZqGm+eYFbRSyNDqedaBjTK+rF8T8Sx/9A
L6+hnQWAgpxFHuyRRJz1nHYWAABwIOn+f+xuEppNLFwzs+WegEoeAAAAgAFQ
V50zXtec+O+MsoF2FjqkeWncKuLrMB7tRMObImOR8XTEzCW0gwBQYDq3ue7C
ftpZAADAgVR8tbrx6jdmE6X56VnBYw16PZVIAAAAAAMgfxkoEjh1PXWnHYQO
raTznWGa+b/Gz3LvQ99VKY77vjjhx4yyiXYWAHtrf3KDPZIUrplJOwsAADiQ
zpSHBSuDLKfnr5jalpRo/zw9amyoz8/Lkcu7bJlZpVIVFRWUlhTZOD8AAACM
DIyqXXL9lyKBk75rlA5PnOb3MbeQ2F1fTTvR8CZPDSG7k/L1atpBAOxN1drA
HkZSvf/HwDC04wAAgKPQq1Upnr/RKcwLbtKC9MyZ/2fQ6wZxXXzeBFeXsWaP
AH+vqOVLnj19zFj881RbU73uiyg/Hz7PeYyXuzOZOTRk+ulTx3W6nlMlXo1f
GBbC54335E8k6yJLrV2zorSkaBA3AQAAAByZXlKkrh29d2XJXzGVW0XsTH5A
O9HwppMUiuO+J77yU0bVTjsLgL1lBH7KHknklfh9CgAAvlO0PqT96U3L6YWr
Zwzu3RH5vPHHjx4sLio0PYqKCl6+eLZv7y63SeNOnzrOnfnJ40fenpO2bFqb
mvJKIhYzDFNTXXX71vUAf6/lEYs6Ozq4MyuVyu1bN3i5O8cJLpWWFmu1Wp1O
V1pStHH9atLyyxdPB3ErAAAAwOExuvZUAzPqhoqrPLieW0Ws//YQ7UTDnvxl
gEjg1J2/mXYQAHsrjQ5njyRN187SzgIAAA6k+falsp0RltO7SnMzAj9lNKrB
WhGfNz7xas8jJ+7bu5PnPKa5qZF9mZuTTV6e+eaE5ZwtzU3zQmcumh/Cnbh9
64ZAf++y0hLL+Q/sj/Fw+7ymuuq94wMAAMDwoK751jguRto82kHsrenGeW4V
sWzHUtqJhj1dZxbZl8RXf8ZoJLSzANiV6XhSun0x7SwAAOBA1B0tqb4f9Xj/
7ZKtCxrijltOHxgrVcS83Bye85inTx6xLyPC569ds6K3dmpra1xdxj55/Hbm
stISsmxK8sseZ9ZqtVP9PE+eOPJ+2QEAAGDY0HdVia/8fyKBk7r6Iu0sdiXJ
TeFWEXMWuNFONBJ0PfMy7ks1l2gHAbAreVUxeyRJn/on2lkAAMCx5CzykOal
WU7vrq9O9/9EJ5cOylqsVBG7umQ85zG5OdnkeWZGGnmen5djpaktm9bODZnO
Pt+0Yc38ecFWZn72NKm39QIAAMCIpK6JNZ5CduWnemkPlyqMVBpx+7vDNH+I
YRHen15Wrny9klG10g4CYF8Mk+r7EXswUdZV0k4DAAAOpO7C/poT23t8q+rI
pspD6wdlLVaqiI+THk72dmWHTYm9dD7A38t6U08eP+I5j1EqleR50FSfixfO
DEpCAAAAGDEU6QtEAifpvU8Num7aWewnze8P7wzT3FhLOxEADFfFG+eyR5Lm
W6PrvG4AALBOXlGQFTK+x7e0XZK0Kf+rqCl7/7X0WEXU63VPnzwK8Pe6mvB2
JJeYXdHLli6w3lRpSRHPeUxFRZlSqSRPHidhCEIAAAB4l04hvfsn4w0SM8Np
R7Gf/Eh/DNM8FNRVZ+Ups0dVRRqg8cqpt7dGjB5FR1EAALBFesCfuxtqenyr
+eaFgqiA918Fnzd+ii9/1nR/02Pm9Ckebp8Hz5haJ/zuD+WropZu29LH2Y9t
ba3svRCFwhrTpdAAAAAAXDpJofjKPxtvaieMo53FTir3r31nmOZY3Bp6cHQ9
9yU7kqoMw17DKCKvKGSPJGlT/pd2FgAAcCzkZ86GhJM9v8cwueFeLfcE77kK
Pm/8nt3Rz54+5jySLsdeWBoeNnP6lKqqt3fb2L1ze2TEQutNmc5FVCgUOBcR
AAAAeqOuOvtmjN1/1XeNivt6NV07+84wzTsjaCcaIbTND8mOJLnxS5yOCKMI
w5hukiCvLKKdBgAAHIgo7XH+iqm9vauoLkn3/0Qj7nifVfR2X0SVSrUwLCQi
fD778tuL5wb3vogZ6ambNqzRarUDDQ4AAADDmDw1RCRwkj34u0Gvpp1lyEly
kt8Zpnkhn3aikUP2aJzxdMTyo7SDANhPybZF7MGkIf5r2lkAAMCBMBpViud/
WxmOue7C/sIvZr7PKqyMrkKm85zHdHcbq4KDPkbznpgvlyyeN9DUAAAAMMxp
u6R3/mCs/1SM/N+CNaI2bhUxxR3DNA8aTdO9N6cj/sqgV9HOAmAnLXdi2YNJ
4eoZtLMAAIBjKd44t+3x9V7f1utzl3g337ww4PatVBELCvJ4zmPq6oTsy4jw
+WvXrOitndraGleXsU8eP2JflpYWk2VTU171OLNELJ7iyz9zeuT/1gAAAAC9
0UkK5a+m6yWj4oq8tMkfYZjmISJ7+H9vTkc8TjsIgJ2omuvYI0ky/9d6FS7n
BwCA77TcvWx9+K3upto0v4+7SqydJWiFlSpifX0dz3lMacnbn+1zc7LJy7On
e7hPY0tLc1jorEUL5nAnbt+6IWiqT3lZqdnMer1u6+Z10wJ9ZTLZwDIDAADA
iMLoyH+0QwwtDNM8dDSNt42nI978cDRcHQ/Ayg6ZwB5MRKlJtLMAAIAD0Yja
Un1+b9DrrMwjSnucMe2vWknnANq3UkWUyWQ85zEvXzw1TXn2NMnbc9LWTevS
UpOlUgnDMLU11Xdu3wj0914Rubiz8507NCqVyuhtG709XBLiYstKS3Q6nUql
KsjPjQif7+XunJ2VMYC0AAAAMOIw0tu/lz34m0Erp51kCFUeWPfuMM2HaSca
Ucj+8+bq+F4GJQQYcaqPb2MPJpUH19POAgAAjiU33Eual2Z9nvrLR7OCx2pl
kv42bqWKSAT6ex/YF8OdIhTWbFy/eqqfJ895jLeHi9ukcfNCZ547c0rfS53z
xvWr4QvnurtO8OQ7k3XxeRPWr13Z3NTY35wAAAAwUknv/1UkcJKnWLuj8nDX
dP3cO8M071hKO9GIomm4+eZ0xN8Y9BraWQDsQZz9kj2YZAT9ZWAtkN/LXF3G
ch/kl7XZswJ2RG9pbGwwzUZ+dzuwP8ZKOyYFBXmkEYlE3K8YErFYo/nuLOKo
5UtOHDvUrxaGKFh/qVQqqbTfv4xzlZYUkZydHe81duoAVlRbWxMZsZD8ar99
64aszHTyFtmWoc4wKM6c/nppeJiVGcz2Llq4PUw7izmzLrLbTghDre7Soepj
W/ucrfbMnuxQ54GdkTgALc1NRYX57IjMfdJoNKWlxVVVleTJUAcDAACA4UXf
VSG++jPjuWSlB2lnGSqS3JR3hmme70o70Ugju/8Z2YXUVWdoBwGwB0arSfX6
LXs86SrPH0ALfN7440cPFhcVmh4Z6amHD+2bHjjZk+9cW1PNzrbuiyizs0p6
w95Uv7/FOi9358dJ393hISoyfCiqiAMI1l/xcd+GzAp8nxZKiotITjsUcMxW
tCJy8fq1K2uqq1pbW7Iy08lbqu7hcbPNM9+csD5gq9neRQu3h2lnMWfWRXbb
CWGoKapLM2f+ny1z1nwd/Tpskrq9eagjAQAAAAwiTcMtcdz3xPE/1La9pJ1l
SGjE7dwqYjL/Q4NeTzvUiMLeHbE7v++/vAOMDKXR4ezxRHh2zwAW7+2SNI1G
vSBs9soVb8+XFotFMqnUlgZRRRwuVUSNRtPS0qz/x79BnvyJL54/YZ+r1Wry
1lAHGCzDpYrI7WFHY9ZFZvsGDGuZM/6uqCmzZc7GhJNpU/4Xd9kFAACA4aU7
f7PxotTrv2CUTbSzDIk0v4/fGaa5vpp2opFGrxAaGPzuA6NF+9Ob7MEke87n
A1jcyo2tEq/EefInWq8kyKRShULBnTLoVUSNRmO9NbVaLZd39bkKs2CdnR1k
wQE3K5VKRKIerv7rVxWR9G1HRzvDvDOsWI9VRI1G3draYtbVtuSx5V1Cq9WS
laalJlsPbGNXW9fnthjeVK11OqtDQog6u7vfXg45uFVEiVhMPpTebtRmS7we
e9tKD5PdgDRoY7x3olp8L8harDRlpedt7CLyfe/z2vA+v7BgZ9VHt9R/a+sf
ZbrK8rJCxhdEBcqKXw9pKgAAAIDBw3Q98xYJnGRJn4/Iu9vlr5jKrSJ2vLpP
O9FIxOh04oFc3Qkw7OgUXcn8X7PHE0V1aX8Xt1JFfJz0kOc8pqtLRp4f2B9z
4dxp01tarfbUyWPBMwNcXcaSeebMnmYqQfRYRXz54un8ecHJyS8s17J+7cp5
oTNJO9MCfckTweVLhn9UEevqhBvWrfL2nEQa9J/sfvHCGbPazssXz5Ysnufu
OoFsxYKw2dcSE6xsqSnYjetXpwX4vrkD5ITwhXMtU1lvNvbb82Rxt0nj2FSC
2Ivs9PS0FJI/wN+LLEiekIeVu36VlhSRbfT2cCExPNw+j9kV3dHRzr5lVkV8
nZ25NDyMzMaukQQrLHjn4NZbnj7fra6uJCElYvEXqyPnzZlBZpg5bQqZ8ujh
/aLCfPKEW2W10ifl5aULw0LYJ8eOHiQfdHt7W49bbWVbSIewPXY59kJoyHT2
01m2dEFVVSW3BZVKdWBfDPvxkRbWrIpsqK+zUkXsce/6as/OO7dvkH2JbMWm
DWtOHDcOc9bdrSRPfL14bMvkCdkW0/5mY7zeetuyhy13g0B/b7IbsF83lmVO
U1eTTZ49y/jtI6s7d/YUmUL2H7KxPp4846r9PMiCNvZ8j11k2jfYebjfd7IP
kG8Nd+xdgiQnC/b5hQUqJLmpueFets/PaNSt9+OzQyem+39StjOi+vg24bmv
hstj6LoRAAAAHBmj7pTe+q1I4KTIiqSdZfBVHlrPrSLWXRrkq/aA6C7ahbsj
wuhRvGkeezypPW3TrQu5rFQRT544EujvzT7n3hdRpVJFLFkQPDMgPS1FoVBU
VVWe+eaEq8vYe3dvGXqqIl5NEHi5Oz972vNVcoUF+dlZGR5un39z8jh5Ulcn
NLypIu7euY2s5cXzJwo50XX71nUyT0JcrGnBG9evkimk8c7ODjLPs6eP/Se7
nzp5rLctZYOdOf313JDpmRlpZJG21lbSIJ834eaNRBubPXfm1LRA35zXWXq9
jvTDk8ePvD0nsYUXMj/Jv2/vrmkBvuQJefRWQiFdQVbx9YkjdcJa0oGkkcUL
Q8NCZ7EniXGriKWlxZ78iUcP7ydPGIYhEw/sj/Hz4ZtqjFby9PmuaUUF+bnk
oyTPv714jsS2vC+i9T4hHevuOqGlpXmqn2fMrujriQk9DstifVtyc7LJGi+c
O73zy6319XUkcG1tzfJliwOmeJlidHcrFy2YM39eMJlZrVaT2WIvnQ/w99r/
1e7eqog97l2rVy67HHvhxPHDc2ZPI2tk62lbN68LmRX4OOmhTCrV6XTZ2Zmk
ZbIU244t8az0tmUPm+0GGo2adOPyiEXBM6aariW3zMl2Nfm6HTtyoLmpUavV
piS/9PZwuXUjkSxLvixKpZLsRfFx35J1fVehtdrzPXYRdyc0+76T8IlX4kiM
ixe++xfWli8sUKPXp/n9Qd3W7wt8VM11bUmJDQkn6y7sHy6Poeg/AAAAGBZ0
ohxxwk+MhaCakfYjaPONC9wqYml0OO1EI9A/Bmv+0KCnPy4nwFBrf3aLPZ5k
Tv9bf5ftsYqoUqmePU3y5E88feptFYVbRbwceyHA38vswskd0ZvJRMO7VUSG
YY4dOeA/2d3s9DlLllc0u7qMLSoq4M5zYH/MnOAg9rlUKvH2cLl75yZ3htLS
YrdJ49gyiCU22OxZAWY3eLxx/aqPJ08mk9nSLFn8aoKA+67g8qVZ0/1NL/u8
olmhUEz18+Se2Gl4M3ovWcWtN8VMbgFnT8yXwTOmci8qJ1062dvVVJK1nsf6
u9wVmV1vy60i9tknpGPJXrR82eKiQmufsvVtYct0ZDfjLtLW1kpafpz00BQ+
aKqP2cd36+Y1d9cJ/bqiefXKZRFLFkRv22i6OLelpZms/f69O9ylriQI5oZM
Z5/bEs96b5v1cI+7gVqtJhuyI3pLbznZfdhsiGfyxSQTzT4g0vjRw28rKn3u
RZZdxN03evy+v3zxlGy7UFjDvuzzCwt0le+JakrE31UBAABghFNXnxcJnMRX
fmrQvu9dmByKNC+NW0V8Pc+FdqKRSfbg78bxvst7PTEJYMTQq7pNIzVLclP7
tSyfNz580dzdO7eZHhvWrfJyd+Y5j9m6aZ1G8/a2Etwqop8P33Q+m0lTU+Px
owclErGpiqhSqbZsWhsyK7Chvq7PGJZVxGVLF5jN8zjpoYfb23s/xgkuBc+Y
anZHQcObyzNJjB5XwQYjC5pNJ9sYMMXrypv6T5/NhoZM/2rPTu5bnZ0dL54/
MS3SZxUx8Uqcv5+H5fDHN65fTXpkvNCVW8C5f+92dnam2ZzBMwMunn9bELCe
x/q7NlYR++wTtmNNkXpjfVvYMh1Zr9kMc4KDYr89zz6fFujLPf+NpdfrpgdO
7m8VcYovn3vtcGND/eXYC2Z3/Hv08L6ry1h2w22JZ723zXq4t90gPS2FrJQ9
WdEyJ9vVZjESr8aTiQq5nDvxy+2bNq5fzT7vcy+y7CLuvtHj951YGh5m2t4+
v7BAV2fqo4KoANopAAAAAIZcd+GX8tRQg8H8l5dhTSsVvzNMs9uvDLhx0BDQ
NN41no5445cGnfmvaQAjT8W+NewhpWxnRL8W5PPGR0WGHztywPQ4fvRg4pU4
s/PKTFXE1tYWnvOYyory3hpkCx21tTUR4fONxSWLsk+PLKuIpqKlSWZGGmmQ
vVnf7p3bN21YU1tTbfbY/9Xu1SuXWQlWWlps+RZpat/eXbY0++D+HVeXseT5
wwd3m5oaLZvqs4q4N2bH5o1fWJmhx9FVJGIxmf7sadKB/cYTz9hb4fWZx/q7
NlYR++yTtx1bUmRlo/rcFrZMZzkyNdmL2MuKFQoFmSEvN8eywR3Rm/tbRVy/
dmWPc+p0uro6IdnTbly/Sj5Hskb2FL4+4xn66m2zHu5tNyCzuU0ax85mmZPt
arPGb91InOztatbO4YNffbHa/J4wve1Fht6riFa+7+fOnApfNJd93ucXFuhi
NOpU7/8hP3/SDgIAAABgL7pe71E/HKX7/5FbSFQKe/19HN6H7NE44+mIpT2f
mAQwksiKX7/9wwT/1/36VdHKfRG5TFXE/LwcnvMY9vrfHrGFjmkBvps3fnHm
9NfurhN6LNyZsTJGswm3KLFyxVJP/sTJPm6WD8tzorjB2tpaLd86sD+GvVjV
lmbLy0r37d01PXAyu5mHDuzlDsjbZxVxVdTSY0cOWJmBW9wjG3vq5LE5wUEk
1ZLF83bv3Hb92pWw0Fnc+o/1PFbetbGK2GefvD37VNzHXmd9W9gyndkJdUTE
kgVsmU4orCEz9HheK9lV+ltFPHzQfBQGsmN/sTrS28NlRpDf+rUrTxw/fOHc
abMqopV4LCu9bdbDVnaDaYG+N65f7TFnj0MX3bqRaLp/qQlZtamKaMte1FsV
0cr3/e6dm/5+HuzzPr+wQF1pdHjLnZF2jyAAAACAHunaU8XxP1C+Xk07yKAp
WDWNW0Vsf36bdqKRSdv80Hg64vVfGHQK2lkAhlzOfFf2kFJ/+ajtS/W3itjY
UM+eatjbnGyh49TXR5k3VkUtDZkVaGW0YlZ/q4jR2zayZw/ajg3W41lV27as
j9kV3d9m29pa79y+MSc4iDzYgVEMNlQRd+3Yun3rRiszcIt7EeHz588LJhuu
1WpNMyyaH8Kt/1jPY+VdG6uIffZJj6UtS9a3pc8ynVQqITP0eOvF3Tu397uK
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
bEQiEZNtWfdFlO2LDFY3DkzMrmiy9rbWVhvnJ7sW6SidTjekqRxhpQAAAAAA
I5im7qqm/vpgtVayOYxbRWy6fm6wWobBxOil9/8iEjipSvbRjgJgDy3NTcVF
habHuTOneM5jcl5ncSfK5V32D7YicvH6tStrqqtaW1vsv3YzXu7Oj5MemF7m
5mSTXhqKKuLS8DB31wnciuXAPH/2hCS8fWvQ/gkbALFYRDJs3vjFe7aTkZ5K
2jl39pTtiwxWNw7MvNCZgf7ets9/6MBesoGVFeVDF8lBVgoAAAAAMBooc9ep
Sg++ZyP1sUe4VcTy3csHJRsMOm3Lkzenof4ro7L1TBKAEePhg7s85zFKpZJ2
EIMnf+KL509op3jLblXE2prq2tqa92/nm5PHScKKirL3b2rA0lKTSYbYS+ff
sx2pVFJVWSGTyWxfZLC6cQBU3d1uk8Zt2tCPMdTCF8315Dvr9XY9LZDKSgEA
AAAARj6dUpzwE5HASZEVaTAwA25GnP2SW0XMDp04iBlhcMlfBhg/8YzFtIMA
2Ft/q4gajbq1tcX6VasajUYiEff2rlQqEYk6zSZqtVoSIy012XJ+vV4vFots
jGcW1TLnm0uVNX0ua72KSPJYuTJUrVbb52ROmUxGOod9vmZVpCff2SwVedeW
T9Z6dfTNWmwqPZ0/9w3ppeysjN5mMPscSS/1t3xNPrv+1sG6u62tguwhDNPv
f+jJR2xKXliQ32PttLetI7ulu+uEyIiFlm+RTSNfHCsb2Odn0dtHaWWlAAAA
AADwnjRN98QJ/yQSOMlT5xgY7cAa0XZJ3hlgZdJ/6hQULhIEW+i7qsQJPxbH
fV8nzqOdBcCuLKuIX+3Zeef2Db1edy0xYdOGNSeOH2anv87OXBoe5uoy1m3S
OLLIksXzCgvyTUvF7IoWXL5UVyfcsG6Vt+ckMoP/ZPeLF85wix6x356fFuDL
Lk7eFcReZKd/sTpy3pwZZOLMaVPmhc589PA+O720pCgqMtzbw4WsNNDfm6yi
q+u789N6zMlOrKgoW7MqkizI501YHrGoTlhL3rp+7cqc2dPI2slj3RdRbW09
n3u8fu1KkoGscVqgL3lCNsrwjyqiXN51OfZCaMh08i5pednSBVVVldxlX754
RrrF3XUCnzd+QdhsEsx65yc9uj8nOCg15RV53tbaSp5/feKI2TyL5oeQLuVO
KSoq2Pnl1umBk0kk0tUH9sWQj2+KL59bI0pLTSZLTfZ2JfOQrUhOftHU1Eja
J51gmodM2bZlfcAUL/bj2L51Y0dHu+ldiUR86MDeyT5u5F3SYysiF+fn5fS2
IeSTJY37evGMH+L0KeR5dbWxZ0hv7N65XSaTnTp5jHR++MK5xi1taz2wP4Zt
mTzIJ3v29EluKY8sRT4+9vnTJ49Ia9nZmaSvIsLne7h97ufD3xG9ub6+rsdu
JEg/kP2B5N+1Yyv5EMkqFi8MvZog4AZWyOXHjh4MC51F3vXkO++N2UGmHD96
kPSVlfqwVqsluzTZo8hHTBacPy84KzOdfMrc2qmVrVMoFKQTZk33J9N9PHkk
8769u9ilHic9JCHJbsP29qqopeXlpbZ/FlY+SisrBQAAAACAwaJteyW++jOR
wKnrhZ9B1z2wRrJmj+MWEiU5PZxmAw5CmbvO+HE/5tEOAmBXllXE1SuXXY69
cOL4/8/effhFkeb5A/8D3Nnb3fvdXtg4uzfMzYbb3bu93b29cUYHBJoMIggC
YkRFEZUxh0ExYdYxtiImbEQxoihBDCCKCIIIguQcO0DTufv3NI9TltVNdxPL
8Hm/6jVXXfXUU9/nqW5u5rvPU8++aVMDTsYfo6nCsrLnboKv9u/bRXb0en1n
R8fuXbE+ngKyQ69aEhm+dfP6iPlhd+9kynuI7mtXL7k6j09KfLXwfXycMMDf
q+DJY51Oq1QqMzPSPNwm0BxdcVHhw9wcEsaZU/H5jx/R9yJm3U4nlx8+9G1d
bY1arSoufrooYm7IlEktLc0W4iQHd++MXRA+i9RD7tLZ2bFuzfKwWVOvXk5e
/82q+vo6nU5XVfVy9ozg5UsjzXYIqYdcS2599MhBslNXV2v4LotI7rJ5Y3Rf
JdqamupFC+f5TXRXKl79P4jLly6Qqy4kichNSQ9k3c7w9XYRHjlgofN3bNtM
qqW3oC82TD6fyC7QUF9HDsZuiWGOZKTfJA/Cw9Vh1Yoo0jmkQ0gBsk/+eXD/
qxdxkEqcJ3zh7em8ZVP0ttiNnm6OTg5jSWFShkm15efnTfQSkKo2xayLPy7c
EL2alPHzdaeD2dRq9dzZoQLHL0l7T52MW7t6mbuLPdn6mzEdd+zwyuVLSP3k
K0GCIRt5ZG2treTIgf17FkfOc3EaN2/OdPK8OjraScx0CvCpE3HCw/uDAiaS
YvSbYOjLppKPGzespR/J14x8jFm/hrRiQ/Qa0p/kaZIj+/a+fpPtq27syxWT
zif75AtA7jJnVihpNWkCiZy0hRkB297eRishIZECc8Omkf0VSxeR8uRIfw9L
JpUuWTSflJweGkjuHr12pcBxnJvAPmrxAtJ1NL9tuXW1tdWkZ0KD/WkSnuzf
uH7V0JeDpSl00lfkJxC9biXtSfqaR6vPwvKj7O+mAAAAAAAwvLRdhZJLv+wS
jZFlTNCrpYOo4cXmhewsYn0Cd5AJvEU0Msmlj8njVjfgv7DgA2I2ixgxPyxm
/Rr2WhXbYjeGTJnEzJ8l9Hq9t4dT1u10+nFJZLiTw9iSkmJ25bt3xU4LmUz3
pwb7ccaDic6eDg70pfucGc1yuXySj9vJ+GPs8iqVav68mZtivrEQJzlIwqiu
qmSOdHZ00AFy7FGRly6eJwdl0n7/sJud0cxZNbitrVXg+GVG+i1D3zRtD1eH
6ylX2AXKyp47T/iCJgnNmj0zxNvTme7TLB9nlWESAzl4+dIFdhghQX7NTY30
CHkK8ceFdNhbZkYaOULzsdNDAyXiV5PKlQrFwgVhdAgozaT19HT7ersE+ns3
sEb0Xb2cTDOlZP9pYQHZjzt6iDlLYiBHTIdKMhob6kmBrZs3MEfu3c2ig/Gi
165k1i8+dGAvOZielsoUI22hSTz2VUnnztKPNMVHOqqxsYEe6e6Webk7+vm6
s7uRHKHj/XKy79HeSBSdZgrQLrp65SL9uCB8ljFhe+EcJ1TSRXt2beuvgTSF
yP5Oks709XElB6dNDbCxdcSWTdHkSNN3T5B8cwSO40gz2b/B2C0xpAz9NVl+
FlYfpdmbAgAAAADASNDJyiVXPjUmEm/+r17ZNtDLmy4eZ2cRn6+dORJBwnBR
VZ8RJ35PVXOW70AARo/ZLOJELwF77jCReuNafn4e59qQIL9TJ+Lo/pLI8IUL
wjgFMtJvuTqPp/vTQwN3bNvMPtvZ2XH3TiZN/nCyiMnnE319XJlhfoyHuTlO
DmPpYEWzcZKDpmF4ezofOrCXfaSutobcrvxFmaEfZrOIj/MecopNC5mccMb4
QrxE0emQKZNM37C3akUUM0SQg7RO4PglM3V3ceQ80lecdzYe2L+H3Les7Dn9
GBE+W+A4jpML6uzooBlCmmejE2MbG+rZZWjeKShgIv0oPHLAOAn3zQeq1Wrd
BPZ0iCZpKc2aMvEolUrysNhz2DnIsyaXsGdMHxMaF3yJWryAPUc463ZGyrXL
7Atpni163Ur2VXTGrkqlIu31cndkBqBSM0IDJ/m4sbvx6yUL6Ee65vj+fbvY
5bNup5ODVy4nG75LM7KHdxr6XiDp52ucDpx6I8Vs6+iy0ZwvMLFn17a+3Ol6
G1tn6PvO+Hq7MB9bmptIYOz5y4bvsoh0VrjlZ2H1UZq9KQAAAAAAjBB9b4P0
+p+6RGOkKX/QyeusX8DSXVbIziI+8v+fEQoSho2W/5VqAUaT2SziqhVR/ZWX
iMWlz0uybqfTqabxx4X0+JLI8N07YzmF8x7lkjIqlXGs4M3UFCeHsaRyckfT
MVGcLOL22E3r1iw3vTsp5jzhC1rMbJzkIHs4HOU30Z0zU5i0wjjW61m/OTGz
WURm+jYjInz20SMHyQ656drVy4wrBb+57dqxlYRk9hZ0VY64Y4cNfctqeLg6
kNo4ZRYuCHN1Hk9aTfaLi5+S8tu2xphWFRzoS3NEZWXPSZkN0as5BV6UlbKP
+/m6k9uJzp5OFL2x0ffmGfpm0UbMDyOXkJrPJ4ksDNpk0IQn+W4wR0jDOUco
vV5PeoY8xGtXLwmPHAgJ8jOuTnLmBHMVecR0SZTnJc/IqZ3b38jdkdgEjl8u
XRJBP9JuoU+BWLFsMfmaMUMfKToWsbio0NCX1yX77NGq1OqVX5PjJDCzraNR
MeMhGfTnc4n1AkzLrZPJZKaDWg1906VJQzIz0shT2BC9hjSBfAPp6FnLz8Lq
o7RwUwAAAAAAGAl6Zbvs1v91icZIrtjp1f0uPGrmQo062/nX7ESiqr3Z+mXA
L61CVZ0wuDnsAO8cs1nEfXt2cIqpVCrjAhkhk90EX/UtmbH+0sXzs6YHs7OI
nPF+hjeziET5i7Kd27fQZUEC/Lz27t7OvKqOk0X8esmCA9/uNhtwgL8XneFr
Nk7jQdYb8yi/ie7Xrl5iHxGLuwaRRTRdADdifhjNX0UtXkB6xtvT2XQzHRtJ
JZ9PJHXmZN8j+5UvK+grBNkF6IiyBeGz6Ec6C/vunUxOPTSrRhOqN1NTSBnT
F9/RGbt0ki/NKfW3hc2aSi8hT+1E/FFfbxdy0MPVgTxomszsD+kKF6dx7LGU
pO3M6EcmVPIlobOAyUbKz5kVGj53BjP4kF41e0Yw3acLl3CaXPq8hJ02vJAk
Ih/v3b1NP070EpCvJSe2lcuXMJnJoMCJ5BtoGv/smSGebo79rddM+sG0WsN3
Qx/LSktsbB39RZCOZWooKSkmPyg6mpRsk3zc1n+ziuwwoysN/T8LGx+l6U0B
AAAAAGBkaWTdmQLx+X/S93KHIlhWGO7OziJ23L0+QgHCcFFVxhmX586Zyncg
AKPBfBbRJBEXET579syQvEe57FTS3NmhA8oiMtraWlOuXZ4WMplscrncYJJF
3LIpekP0GtNodTqdi9O4+/fu9BcnX1nEmPVrBrr07eaNxlfVdXYaxzeS3iD7
tzPT2AXoTb/9rjn79uwgH03XN3mQc595CR5Naj0xmXtOB44WFj4x9KWtaLUd
He2mm1QqYV9Inl3qjZRpUwNMZwGzkcfnJvgqfO4M5kh937owzFRfakP0anJw
7epl5EG3tbbS12yuWLqIPFP6JaFXMROHyeXkI53Azki+cI4cpN8BYlPMN+Qj
HXzY2NhA9rfHbuKE5+MpoCk1rVbr5DB20cJ5nAL0FZdLFs032zo6cpWEbXoq
fM4MJndqtXXE6VPH2d9z8jTJ2YlegvNJopcV5fS3QB8Q88timD4LGx8l56YA
AAAAADAq9Aat8d/wDTqVXtFqrfArlfvWsLOI1Uc2jmCAMBz0vQ3i8//UJRqj
abvPdywAI86WLCJdOONFWSn7oF6v93J3tDGLSGo4GX+Mvb6JoS+VJ3Acd+9u
lsEki5hw+kRQwEROecN3U1zparxvVRYx7uih8DkzDCbSbt642vc6PlPTQiZP
mexD90nMpP7a2mp2gei1xrV60269WqqD3Ih8ZEdFRUbMIccf5uYYvhuveDP1
jZf7ScRiD1cH5wlf0KdcXl5GypgO4yQPK+XaZblc/iQ/7/KlCzSjRSkVimlT
A5jhfKbKX3DrNH1NolqtchPYszONhr7lkl2cxjHDNelVzDIo5KbsVVSoTTHr
SBlyIf0YGuzPlMnMSDNe/maH19XV9k2LfpXj9fV2Ydb0YRzpW9pGeHi/2dYp
lUonh7HkRpzj9I2F8+fNtLF1xJpVS8klzMI3p07Emeb3aLqYvoTT8rOw+ijN
3hQAAAAAAEZTT/YU8bkfqKoTbCncln6RnUUsipxo/Rrgm6Jkq3FJndS/GfQ6
66UB3mW2ZBHpKrHM7GPqTlYm572IFrKIdKFkZl4npVarPVwd6HxVThaxo6Pd
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
uJ6AeaQXmUzG7hcVFpD3gfxpGNQhLw+t0x+FXG7mjSU3a+G9kB/LwW7y+rXL
TZ41n2bvrxfzbRqz5JmQjkw+EzN9kT8o8oubSfSJRCLzacD+bn+wNwgAAAAA
AAAwahhZgyx/l+DOG73DnMPfVlT8+PLN5q5wpBlCfk6iyTrSqlJah2yikqdD
68t8FvHM6eM+61ex+wf3+wXdvG5QobAwf/HCOWx6iq1QV1e7Y9tGF6cpttaf
uU9zuHb1Yn8JgYz0VHKth7sz+Yc/2SGbTCZjs4gSifhm4NWF3l52NpN4tpPX
rVlWWfn8hduXSEh3M2e4kgrTp/K+2bmltbXF/J2WPism9+LiaEMucbT/klze
0dG7XI5BFlEul507e3Kqsy2pScrJDnkO+ndRXVW5fauv/ZTPebZfkDqbfNfV
VFdZcraq6jm5TQGfn5KSSHbc3RydeNZkZ+2qpeTsvu93h4bcpO0kJT5evXIx
eTiknWVL5t8JC6WnystLly/xZndIbEsXz2tvbzN512q12v/8mXlzPEgkpKlV
yxclJSawpwryc0nXzU2NBpdkZ2WsWOqtkMuHJQzyKEgvpPdZnlPJDvsKsVnE
AV8VM12bRCpv2bSe3T9/7tSCeTMN3oqHUfdJYVZmuv7zIf1+vXYF6YWEQW6B
3D7piOznZGfSaulpKSTUaS52pJzcBfn5mpoaSVN379yidcJuBZPHS0Ilb+wi
b6+Y6Be+EE5OerJy+ULyVnTfrJsj+VH6S+pKpdIF82fN9XInNV2dbEkvRw7v
Z0+RTr/7drvHdGf2ie3ZvZO+w+Z7MdOmMUueSVtb67GjB8l/Okgh2TzdXS4F
nGeT82b6iot9RMIjj4icIkFu9FlD3hzar0DAP3HsMNsmObth/UryiuoHZub2
B3WDAAAAAAAAAJzRyJWVl4UP/9GzlPOvXr49/e8MG0L6TUsWbZpNq5XsHOCT
tv6YySKq1eolC+cGB/VmDk2OQs3KTCf/bFcqlWyFA/u+W7t6WeKTeKmEEN+P
uOto/2VocKDJ9js7O3KyM8k/9md5TCU7ZNNqNWwW8erlgH3f766vryMlNTXV
X69b6THdmea1BAI+CWztqqWlz4pVKlVtbfVev2+8PKc1NtT3d5uPE2JJJD+e
O1VXWyOVSuPjYlYuX0gaIfs6oyzi7m+2ec/1jIt9JBIKNRpNTk6Wh7vzhfNn
2bN8fpe7m+OpE0e6uro/EyWd7tqxmfROKg94lnZENnK/JOwF82eRHXLX5Kz+
vIjhd2+TgG+HBpGnRB7m44Q492kOdO2VwsJ8B7vJLS3NM9ycDu73uxsWqlAo
jO+aFJKfY94cj4z0VHKnra0tYbeCyYXXrl5kf19y+Y1rlw2uIlGRJzBcYRQV
FpAbJI2QB0h26upqLXxVzHdtrK21lTxbEjx7uHjhHDdXnkEd8lKROjRxSn4U
n69Xk5KFPWsJ7d61jWc72Yln7bthjZ3NJDq6nDw0+ymfkz+T/Xt3Hzr4vatT
d3qZvEvkwrTUZF3PN3t7du9kE25nTx8nfybz53qQQ5p1J68fuYT81uQhkLOk
O/1QDZD3eftWX/IGkjqrVy4m+1EPIkg5eQ+nT+U58b4iF16+5L9n9w7SJnkz
6Yd5Znrpr01jljyTjo72ebNnsAOcr125SF7aObOm0/vtr6/AG1dICal55vRx
8taRd4wckt+IzXOSP+QVS715tl+Q34i8n6RlZwdrslVUlLGBmb99y28QAAAA
AAAAYCxQtyWzcyRqpfWCO78VxX7VPcxZqxpsO013LtH0YNm+df1V4+ck0mrJ
Nm9InhcPIeb+sohtra3kn/krly9sa+tdXcWSLCL5d31xcaF+hWNHDy6YN9NM
ACZHNBsss0ti4Nl+ERf7iD28cP4sucTgU66d2zft9fvWZBdSqXSGm9PVywH6
hTU11fZTPo8ID9O9mEVsaWkm+w+jIvUr3woNWvTvkd2xMQ/JE9MfE00iISWP
oh8MeNYgXWkwoplmEYVCgYujzYPIe/oxlJaWkIDZLFxhYT55IF+vW1lcVGDy
llk3A696uDsbDPpOSkwg19bWVpP9c2dPLnpxxLpcLiNds8mx4QpDZ2pEs/lX
ZcCujSUlPibP9nZokK7nU1XS/tbNGwzqkNeGvAl9YfSky/RfjK6uTnc3R1K4
YP4stiQjPZVNqQn4vcOu2XVw2O/92Fzx9WuXyH6A/1n6u5MAyL1Mc7Fjc1y+
G9Y48b5iU9a6nvztLM+p5tci37+3O+HZ9O+Ep0Qidp/m4OU5raG+jtYhb69+
/AP2YtCmSZY8E/LfAXJIXnVap7mpkZRs3fR1f/GTH5RnO3nFsgX6w58P7vcj
ddjXID8vl+xfvHCOng2/e5uU/HjulIW3b+ENAgAAAAAAAIwpjKxRcPfNfw9z
fkte6MfIBxhvq09YkEHTg08X25ipmbfK6SU/Rwy8fsXOZtJcL3f9jR0zeCng
PF0HRGdZFnHdmmUGFeJiHznaf2kmAJNZxOysDINqC+bNDLzRPSebRqOZ6mwb
/TDSoELps2IHu8kmZ9gLuxXs7uZIP2Wkwu/eZjMh+sm9xob6m4FXDVKUMY8e
kqfE5ogS4mN4tpMNBgLnPs2urqoc8KyFWcTgoOvzZs9gjJbe3r7V9+zp47qe
9B1p59qVi8Y3q8/NlWc8CJ1Ys2rJD4f2kZ2a6irSTnlZ36jSuNho8uuzI4uH
KwydqSyi+VdlwK6NXbxwjgRTVNidzyQP3CC/pOuZbY8UkhbYQ3ZBZ/Y56Dt+
9BApP7DvO/aQHYFr8Jkrm+CaM6t7PlI+v8vVyfbrdSsN2iF/Wd0psp78KrlZ
sp+X1zftQFnps8Qn8WYW0yEvvPs0B3rof/5M94DinBcWciJ/C048azqIe8Be
DNo0ZuEzeZwQF3k/XL8Cm0Wkn7Aa99XS3HQvPEx//LLu31nEqqruyQrInzz7
fx+oVL3/t4tCoSDBsz+oJbdvyQ0CAAAAAAAAjEUambLykujhp32rOafO17Sn
WXSpRNT3kaHt75n+F8XoTH30wuyIxdmDDTPw+hUXR5vHCXH628OoyJPHfyDl
p08epTUtySIeO3LQTAWTTGYRjRc6WbtqKTumuKknX0Garamu0t/Ky0vtbCYV
FuYbd3H44N5vdm4x8xBMrq6i0Wjq6mpJR+F3b7MjJdmcqkwmW7p43vSpvAD/
s/l5uQZjeM2ftTCLeGDfnl07NhvcINmO/nBgk2/3t6ls+q70mbmvT1tbW0id
5xXlxqcuX/Sn/ZIHq5+X277Vl/7KwxIGyziLaP5VGbBrY5s3rufZTmYf+M3A
q+xLol+BzVPRnCdpx37K542NDQbtPIp+QKrd7ZmDsbS0hOzv2b3DoE5Z6TNa
HnHvDtknL1hw0HX9bfeu7hG77Ae0KcmJpC+y+X23k7wVAz4uNuGp/0Wuh7sz
+XsMunndoBd2DkC2jvlejNs0ZskzYTEMQ36O9LSU+xF32Yk3u9deuXHFfF8i
oZC8M/FxMSTyPbt3kj9Y8mKwKWuVSrV2dXcWdK6X+63QIHYGgEHdviU3CAAA
AAAAADCWqduSX1jNOfqfyqqrOq2JWez0Zc3+J80NSioKzdTMW+VMa+avcR1s
eGbmRYyLjdZPxViSRTRfwSTzazRTa1cvY7OI7MjHaS52JGzjLTUlybiLjT5r
zpw61l8AOqPkXkF+7pZN610cbWbPdOvOqp09efVyAM0i6nrmwbsTFrph/UpH
+y95tpO/XrviyeN42pqZsxZmEdmhqSZvkP2Ej03f0TG2JpG7IHVEIhNfuz2I
vOfu5sjuR94PnznDlb010iAJmC5kMyxhsMys0UzpvyoDdm2MnFqxbAG7/+2u
rcb3fuPaZVKYmdGbyXef5rBk4Vzjdi5f9Kep0eiHkWTfeIY9dvQ0O2UoebXY
FUZMbslJT9hLiosLyXvIFq5eudjgqzyTj+LK5QvsIZsf629btmQ+vdBMLwZt
mmTJM1GpVOS3Y8c4k83BbvLyJd7kNSb7dDEU475IYCQedhg42Wa4OX337Xay
Q6KldchPTy4hMZBy8td3+ZK/Wq22/PYtuUEAAAAAAACAsY+RNckLdgvu/r43
lxg3xXz9kl2LaW6wJSrYTE1Bbor+54it0SGDCsxMFlGr1ZJ/0Z/vmZdM10/m
h800jmYWsba2mlTob0lik/bv3b1n904zFfSTe+lpKQ52k/3Pn9Ff/TYlJVE/
i0ipVKrCgryjPxyws5kUce/OgGctzCL6fbfT/Aqzvek7U8O3qcaGelKnpqba
+NT1a5do7kUqlbo42rBDyMPv3qaJuOEKgzXYLOKAXRtoqK8j1x472vt94yyP
qQtfnO+R7ZTUEQoFup58KdnftWOzcVOrli8iLwA7rpbNnj19cSCtrmcKRzp2
eOumr8l+S3MTeWGMNzYPRtVUV5H7sp/yOXkg+ut6G2AnWiSvIntYXFxIDk+d
OGKyC/aOBuzFoE1jFj6TPbt3sNVIU22trewfBXkIpAL9Mzfoq6KijJydPpV3
KzToeUU5O3Mje1OXL/kb9EUaeRgVuWD+LHL24H4/y29/wBsEAAAAAAAAeJVo
lcqam6K4KbKnG7sP1RJ50V51c6xxxbqrR2lisPLULvOtluxYSCunT/+rWtBp
eURmsoi6nhGOdCXZbVt8jJcvuRRwfpSziAqFwn7K58a5AgGff+b08ZbmJpP3
OGfWdHbgpD4S7dEfDuheTO7t37t7x7aNBjVDgwNpFjHyfniOUVrpzKljSxfP
G/CshVnEixfOrVpuYpbLmOgodjkYS9J35H6deF8ZzF/H2rp5w/d7+l6qQwf8
2HTN+rXL7+iNWh2WMFiDzSIO2LWBuNhHtt1r4tzX9SzhTfb9vnshb/y8otzO
ZtK8OR7sIXmLyKH+i8diRz2vXrmYPbx75xY5NJiEk7xpLo425CVkFwrZtWOz
8QeZJAby5PPynpI64XdvG+QhH0TeI5fQVb+N7dy+Sb/N8vJScnjy+A8G1cgT
I71IpVJLejFo05glz0SlUjrxrPVfWqK9vc3BbrL+N6IGfV27ctE4v0dux/bf
M6CSyEn8dF0YXc8SNgvmzyIPWS6XDXj7Ft4gAAAAAAAAwKtL1XCP/TRRGPln
RdkJRtX379/OlGiaGCxY726+HXlDdQrvD7T+s92mh3yaZD6LuNfvW7oaxbGj
B91cefq5OLVa7eU57SWziKHBgXO9+m5wwCxiT1Tf6A+EZJ04dniGm5NGY5gq
JDo62p0drNkUEyUWizzcnY3XaPbdsOb40UP6NVUq1YplC2gW8diRg8a9k8fI
DgU1f9bCLGJtbbWdzSSDqe1aW1uceNZht7o/TLUwfXfm9PEF82YarBRT+qw7
hsKCPFpC9l2dbGuqqxztv9Rvc7jCIFwcbdhVqlkDvioDdm3g7Onj5Fp2CRt2
Qkj95U7IC7DQ24sU0pQ4wX7txi7twSL75BXqTlidOMKWsPMfLl/iTVcWlkjE
K5cvJIV05G/gje5VVMhPTNthGIb9QPFxQlzPCiBfrVjqrf+Hk5qSRM4GBV7r
73F5uruQvzV6qJDLyR/pLI+p+o+aPBye7ReLF87R9a4zMkAvBm2aNOAzYZ/t
hvV9z5b8XmweVX92TYO+Dh/cSyrkPu2btTUnJ4v8lKSQPE/dvwebJyUm6Aez
avkiF6cp5NYGvH3LbxAAAAAAAADgVcWoFc+OCiPe612B5dYvpZkrNV3d6R1F
awPNCqa5vD9gS3XXT+iPa26O6DdBYcB8FrH7I7pFvdkSdkLC26FB7KFYLPpm
55bz5069ZBYx+mEkz/aLyucVbALQkixiTXXVVGfbg/v92CUYOjs6wm6HkEZM
fnfHCrp53dH+y4dR99lRmeSSTb7rli6ex2bY9JN7165cdHGaQmd4a25q3LFt
46GD35MKpBdyI6WlJaSpc2dP1tXV0ifj4e58/dolXc96HGbOWphF1PUkXtyn
OeRkZzIMo9Vqc59m+25Ys8jbi01nWZi+EwoFs2e6bVi/kv1Ek7STnZVBmqWL
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
/oD+AzKRzA8=
    "], {{0, 1403.}, {1730., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{786.9137499999999, Automatic},
  ImageSizeRaw->{1730., 1403.},
  PlotRange->{{0, 1730.}, {0, 1403.}}]], "Input",
 Evaluatable->False,
 CellID->943267184,ExpressionUUID->"2a4f6b54-1019-4b46-86ba-613029a76a1f"]
}, Open  ]],

Cell["\<\
In view of the mind-map above we can come up with the following flow-chart \
that is an elaboration on the main, simple workflow flow-chart.\
\>", "Text",
 CellChangeTimes->{{3.734615915858555*^9, 3.7346159338460007`*^9}, {
   3.734616351968804*^9, 3.734616419335037*^9}, {3.734616580077915*^9, 
   3.7346165804368753`*^9}, 3.9325062223057833`*^9, {3.932506398352644*^9, 
   3.932506434102675*^9}},
 CellID->37381487,ExpressionUUID->"f12543ed-f8ed-45b4-9c80-5eaebe3e0303"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQd8FGX6xxE88W8BFQURafaGImDv/c56Zz3LnYq9AzZqqClbsy2FVFAg
oScRFVCE0BQVSGiSQnZ3duOpiKK0lJ2Z/9tmdnYTFCRhN/r7+homk93ZKft5
n/I+pe/gN+5/vn27du3ePJr8uP/pd28aNuzpEQ+cQH556PU3X3rh9eee/cfr
bz33wnPDrhzcgezsQn506diuHd1WAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACg9VEMP0Fb
Rw4/STmW5wEAAAC0EaACAQDAXxJhLikRNhRoGyiM8ENk27IaauZJ4tkCAA4N
Pt2wyQR+tj8Z0Q+UP2hFiBUAAADgL43R4ALNELGyLovfdBUCqgQAoM3CpzI4
S9s6SjNmLcQ6AKBVCLtODfMOpEgbRZcehicoM3+pJkTwaAEAAPz1ENqOElKN
spJssD1sm3oHYUdzIu+CrA1V96AaXA4yDFUAQNvDKA7CsxloY9AnKLPHGC29
5SY/AQDgD6I03WqSug8Toi0hgoejLD9ZxXMEAAAADMuITCxyN6AuJWXjUCJ/
/YsNVegSkRGm4dsFPwMAoE1CZ60PF5TMnT9v/rw5ZMydO5sMuj1X7GFjlmEb
Ix7HPPbU5s6bOW/enKL5c+cXzZ7Hnubs2TO3bNmCDEsAQMvCF9q+++6H8eMS
HKlmp8PicdudLqvLidGWhttlI8/O5TJ7nFb6+FxmstPpsLodFrvNZDMlLVhQ
Qu1ESBEAAAB/ASLkXWS+ucp9grIINPr111+/+OKLeXNn5uZk5uRm5uVOxsjN
ycrLzc7NI9v8nmROn5q34+ef2I3Vk5XkZm41AADEE02rssydO/u9zLc+LXx7
6czhnxa+s3TmyCUz3yXjs1nDw2PmSH2bvAwjPseSwhGfFb5LxpLZI8gj+3TW
cDIyUocXFBSwZ69idQ8A0KLI2Rmerz4cvWera3eFa9dW966KVH38YtjGiNvx
61b7r5UOsVGVuvsbN3mUbHj2VDnTUxM3b94c668ZAAAAcFiRZZk7SJWoPH2l
4acff165cuWs2TOyJqfNL3B8uXjs3mrnbiZJ+YD+s3urnW5sdZKfXy9OmZIz
ubKyUr+1qh6GCscpACBOifab/fjjDw6ndV9luhrMkIMeNZChBDxkkG0lkM63
MdrEYI+M/HSRR6nWZpLHpwazvt9gdzos+/bto9IfXlMAQMtBlN2169dlpyWT
CYdMO6HaNDWYFvOZEONgB3l27Gc6326UXIovQ6FyJGtF8dipU7JVmDYAAAD+
GmgVTY0uU5lXsdmzZ8+aNWtmFk7LzU0rnmHe+FmyHEiX/RmqPzPmojzeRkhK
C9Uy7YLZpNtWJefnpH2+YnnETY7dUwYAgN8jwnVGZq3i4vmz80aptcRicnGb
V5VcdATcYgOjbY1aJ3WcBtKY+zR7eva4xZ8u0h93LL5yAIA/LXlZGWsXj1Ml
pif73XTD78RoU8MtS2KbSBDZb+dqgBKcrAayJqdZt26tjKpiCwAAAPyJUQSs
95OsyLK84ZuNC4rmZmelzX7funlpovptOvMHUuVHDrpo1Io/NfY2YHwM6lLQ
fw04qFLhS1OkzB1bHNPz3YsWLmDBPOw+wzgFALQN5B9//MHpsu6pctI5LeBQ
fQ4y7SuSnQ19A6PNDNlvo2YvMYGpzJr8vw2pmR7n3r27Y/1NAwC0dQyLbpqS
u25dWVamia641aYR8UFnHslORQlGmx4+G3WAS6mrS8bMmP6+ytoNsmAbWdE6
CAMAAABtlf346rR8/PDPX3/dvWzZsvwp2QX5nuXFYxqrXGowi60Ru9liMfmV
rT8KFSgVIzz8Tn1Zlpil1DINpDV602bkpxbPnVNX16BG96QGAIB4QYn4Sa3g
kg/mzZkyUg3SmZ/Ob36b6rdTo8mfSofPjtEmhuK1hX8N2mjgEFvgK8yZsLR0
GV80jeEXDwDwJ0EW+Wt8SsnJzli3aBwLUPTwtTYqPnwW1Y/RBodkVr1WhYyg
g0WMeDLT7Nu2VenPPnZfOwAAAKAlacYy0ptAsW4gfq+vpKQoNyejpMD0Xbmd
hpgG3UptGsvQ9KgBtxwQ7kFieTHlxxZ7OR5Hw6TUJNN74rUyl4KNp7fw0kBF
BUlfrFrGfacAABDfUAtox47taQ7b7koHWzWjkUJKwMqnO8VnjvV8i3FAQ5aa
7PTR0FNi9m4vs6VleOr27mv2GwBXKgDgQNhf9f715WW5GSaWoZ/G1tosXILo
coRNR7GfJDEOcFCXacAqk8dH0+s8K+aPLJw5jT1qtL4FAADQVvkNH6kcHewo
k9euX7921ozpU3KcS+cn7NvGOkfQekTpvKANCzTiyTU0y496CLnV7IXtLAY3
ToU2SP3JJqpd0J08+jRdDqR/ODt5+rQp+/bs1XQMuUmUD5ZrAQAxRrOCQwuK
5s+ZMpKmWLKyZnQxiM38IT9m/rYyTFwe6b+yJ2ii4aZ+Z2H+hBVLP4vxtw0A
8GeEaLe5ublrPxlDtF+ek0VVYm8KnYgMtkOEExUjXgd9dj6TWssWT70WbhJm
plmrqrZpz5v/AysGAABAG2A/K31yxHbkS0KKvG7tV++9n1f4vqP8syRVmsx7
Roj2HwGHGrSxKFO7EJ1+mmIj15BtKzW+JCg8EYNpFGZ9WwnayC3iGiO9q1Jm
QU6Cy+OUQw36g+C+U1llpRJa54sBAAAHiNbDTv7pxx0ep3VPpZtVN01VgqmK
z6z4kliwImb+tjG4yI7Y6TMxeeT4YYM5Kz2jrmGfijAhAMChEzmLlJevz840
KYF0MttQP5uX2RE8T98gQZC80FaGEnQoXqsqmYlVqAbcK4tGzZw1nduYxv7C
AAAAQJsjqmoZMYQJCi8/pKqN9aE1a9ZMm5Jb+L6janUyCzF1sbKcHllyypKb
dpEIsMwaotVIeiAli6KUrKLSXazleHwNY/wtL2JAdAy+Iblozv63LqXWPff9
cTMKpu7dV6+i3ikAIM7QJ6Xi4uK5U8aowTRasMXv5PMbzdaHndsWhpahb9Jz
Y9keE5HdrDlLWmFeYmlpKdMIECMEAPjj6LaGcSMnL3vdonFyUHRD2K/JgGW4
tjDCWXU+GmuqBB3ZGdaqqipWDJ13g9LlCAQKAACAeKfpYl+TPSLidM2ar6bk
Z8+Z5qxebVaDGXLQQ2OKWPsP6t8LOJiITFV8KUxQmnnICrGXDdXSTC0ul/8c
g3oV9NRIiS7OqizsR9SGDWQogfQFM02zZ82obwzXO1XUhuaeFwAAHD70uJEf
f9qe5rDuqXLKUpoqOaJLm/KQIdS4jvsh++0sxdLG1jrZTsmq+N3by0wZ6a76
fXUKFu4AAC0HFyJlZWVZGSmsuqlb9IQS6nH0HMUSGbAYF9dDf0Z0gzzNgGt1
UcKMwgL2wLXqpoZtAAAAIJ6JWvAN/yr+LkqbVnyzdfq0KTOm2n1fmdXAZDno
aQym0zRMXbcJpDL5aNdqoxkiTjF+c/BYXPEru3VhPzOP0aXV1F2s01bGvALz
sqWfyHIzTxAAAGIHmZXkBR8Uz8wfJUtu3hNQ+EipzWtSkVzZNoZJ+2kKlzal
ebI0Xqgwb+LyZaX0YcswdQEALYDR+sjNzV6/eDx1nDI/G+8MhdG2h2RmjQVp
EMjkDEt1ZRXMFgAAAG2dZgJNVVUKBubMLZya69r0WaIaTKNxREHW8sPnkAO0
3DcfVDg2jSOikZMRvlMYzgcxvFZ+u2TJwovLsfjejIIptsWLF0ZVVAAAgBii
KKEdO0R1U17CRZUczTY+bqZdO0a8DcODE6GnkvPHcmtmhruuoZ5IHggfAEDL
Ul6+MTuDTDhpPCSD6MDIVmvzgwfSMK/pquKEgoKCWH/LAAAAgAOlmcR8+kM2
7BWRJL/u3rXgw6L8rPQVxWPV2nRavzSQrtY6FW9qiIWY0jVEUY3TDlu4xQd1
R0vMKe3TEvYll1Kbtq/K9V6ea82aNYoSOkxfGgAA0Gh2yYbsKykpmps3hq7v
+J10vkJKfpsbRNbQrFiT6k0J+c3aE6ShX+SBFuZMKC0t1cPDsHIHAGgRaGqb
oubl5a1dOJYFmjpZxCkrs+ylP3ml5djPkBgHNvQgGZakb6eRw1L65AxLVRXC
TQEAALR5FBYypP/65ZdfTs3N+rAwscHrUAOTeacPGvQo2Wn7J9pylzpLaTAk
S8nXa9lhtNiQRG8Oqi5Kwn1KE2CDrl82uabmZVRXVdCuXaoio9ocAKD1ad7k
Yft++nGH22HZW+mkjQIDojYdRpsbeisoHmjKF0YVv/P7MltGpntfXQN92jIk
DgCgZWAFkxvKyjZkZ5rkQLroCWUo+QX7ou0NXszca1Z8KfRpSp7lxSMKCqaL
Jw7fKQAAgDYIkV+ss6Hme1PUYDA4c/asaXn24FoTc5lm0HJDQYfsZ4uGvAin
3xau+B2wRhdpR2nTQx7N1jRgvggn0UCUgKtiVcqUKZk7f/25iQ2L0nMAgMOM
XFI8d96UMXLQQycoMlMh3LQtDvLUWF9C6qzgtWJYbTpZchbmJS5bukSFzQsA
aEEUYXzw6qZq0M3aoTq0Sckk5iWEm8bzYGXZZIk+o3A/Qb9FrLuxkI8cj3Nb
deUBNCMGAAAA4ofmHGtMdZEbQ59++ml+fsaqBeO4v5Sm59O1QldIopEn+rIv
C0qJqNkesSLsRSHTQx264zQksXJzPnH/5YCVr942Sq5PZ02YP3tO8yFgUEUA
AK1G5Pwii+qmVU6Wp8+W2Lida1hEQ4HrNjMka8hnVYMO2hyKVoxJ315myvQ4
6+vrjZIFUgYA0CKUla3LzkyWgx7F75YlZzg9v7kq2RjxOCQtNz8iPNhEQ24k
18qihILC93WJAdkBAACgTcDlVZT5o6hybSA4fdqU+dOtuyrsam0mtX8DDlFX
U7LraRfUkqJ1TYlATOb10LTOUGEBinqnLTD0++mN3OmzyT76XGgZqNrM2e9b
lyz9tMkjhk4CAGgt2AwTXoAjv5QUz585ZQQze5nIELWvLchEaGPD8IxCfjOr
zJOq1Dpn5k9aVrqCZzfISrTfHAAA/iiNKgs3XbdoHA3VMFQ3RQxGmxp2USKb
Fxnjop9YK+RpBh1Z6bbq6hoaogPzBAAAQBshUmYJy1eW1RVLl+XkeL5emMhc
punUayq5WLKMMePSFJksYxe1N6HbtOaIWnNXAmbas4N6JxyyP+OXCmdeXnqN
z8ueZqP+eGUZCfsAgNZANsoRMtX8tGO722HZU+mmRV0kVDf9E4xkxZdCRbxk
VvzOHzZYJ6e56urqVO4xVahwgf0LAGgRysvLszJSqPggpoeXGB1CggjnG1bc
2sIgD4taK5KZF8fm3RlYkr5jZdEoXt0UUgMAAECb5rvvfpgxfeqMqbaftlhp
ByjJw0NMRW12WvHMup8US5Nw6Bl/YrTU+I0KgT5W7FRyqUGnEkjfsCTpvam5
9fX7FLqYG5LDDb6gpQAAWhy2KGMorbygaP6c/NEsScFNQ+J5iTPUOG3bg7WA
lByyz1GYN3HZ8lL9cXOxAuECADh0yEySl59VtngcK/PCqptCdrTZwSM9aOcL
WuOFFRYLpmVkWKqrKmhDDVmG4AAAANC2UJQQz7Vcv35tft7kVR+MV2rTiHRT
Ai7F75T9vBmESdRjp+7TJpLRKCvhMm3dYWrmVx9reRxwUFUzmDG/0Lp48UI9
hBiaCQDgMKCoNNw0zWHdXemgqQqSXa4Vta9R0bTtDtlvC/lTmJRxbi+zpGeI
cFPx0CFfAAB/BEMmlDaLlJeXZ2dYFL+bNVOwq14z7zGE0ZZGc2Ygr9sTDjdV
4TUFAAAQfyi8bKka2QdKpNfxv9Q37Pn444/fy3b+r8yqBjPUQBqPYJQDdoWp
LmLNFyu/cTlkiQWdBlJVv1MOuuqr3FNyPQH/t9FfBCgpAIDWQVFodHtJ8dy5
U0fRksvE7PU7VC8NNRFZexAfbWfojm7Zz+rU+exK0EGeaWFeYmlp6e9+GQAA
4ICQRcg6N0ay8rPXLhwryrwQhRaCo20OLvR5vgkNN/XZVclBFIPJ6baqqio1
YsUNlcQAAADENawBFFdVlO9++N+M6e/PnZbYUO0O+V1KIJ2l5+u16UxKAMFC
8TuoVRsktm0KDQwOpNJnF/Cs+XDCzMIZhs5fTDOB4xQA0KJo5g+dYXbs2O5x
2HZXOmhTDyJB2NTEouLtvC0yRvyP6BQSXlGQiBi/+/vy5MwMtzHcFAAADhYu
M5oGHJaVleWkJ/HqpkSChHxWVDRtm8MUXnqTaC8GmZbIdq0qHs3DTSO6SSKk
AwAAQDwRKZZkGoOq/bJh00aanr9gnFqbSaxdmu5N1BVvqr7IK7N2lqKpZTju
FLkzcTJMmmsilWZTEuWEJuy7yNMseM/+1defq6xdiyK+BFjYBQC0MHoPupLi
+XOmjAzVsoQFn2jqIUIWg4gaahPDFBXfRZ6d4rXKPodS6y7InaSFm0KUAABa
EkVRc3Nz1y0aR4M3Am45YGeLOLA12uogZiN7gsmq16pKNGGBhZtWNMl/BAAA
AOKKiNU97kYj/yxbumRqrsf/tUUNTObJlcxxKqxdJvtYnj4fWo1T4USlAypN
vAyaF+Nnrbv8Tlqctjbtu3L71NysvXv3MtcptBQAQMujyRN5+/btHqd1V5Wb
tYVKpZndxprY3pSYT5IYvzuoEGlSno52hwx4tpdZMjNc+/btaxIgBOECADh4
IieS8vL12Zkmqr4S2UEX3ew8WyHmsyLGQQ+JhpvSVlB+GmlDHih5rCuLRhXO
nGZ8+Ig1BQAAEG8YUym1DBm1sVEu/qBoer7712o3DTQN0kGTKfx2mvTttXLr
iWxzORgRcUqTLuEyjZfBHw21bXlqDNFSRG0o9/xCy/LPlkZ+DQAAoKVR1JKS
kjn5o6nXtNZD20CwtTbeS1efpjDidugZ+qwyj0kLFrKEfDbaINLvLMybWFq6
gj1sGc5SAMAfRldHjRs5ednrFo2Tgy5qiQRSqRki8vRhbrS5wdZMJauojy2l
qgHH5HRbdXW14UvA/4E0AQAAEF8oagP7V1aUENFTdv3y66yZBfPeSwnVpFE7
V3JQPxsxjmgFb+oa1eqx847tTA7q/aEw4mkIZ6nQT7iikqKKSqfpv37jys3J
+OWXnxFxCgBoJYjNS6ubOq17K520t6A/lTaECljDEoTYv94UVKuL/0HUANrD
2mcLVzplPQe3l5ky0l0NdfXhitkAAHDIcN9pWVlZVkaKHPSoATezR4zmBhyn
bW+EAiYRfiOlKrVpK4vGFBQUaM+c9SZmbTYgTQAAAMQhuoT69tvvpk/NWzR7
khpMo1pK0M1aQdlphj5Nq4yIKaU2lN9g7fqgzLSFQR8TsXbJw037eHbiJ0sW
G74DAADQgtCIkQ9KikS4KWssGJYUvibNhjDidJiMP0UzL59N8aaqkmdm7sTl
y1aIpw0AAIeMKPPCfubmZq9fPJ72hPI7Wao+4jTa/pDMPAOOSJCsTGt1ZZXR
BoE9AgAAID7R5ZOvxpuXP3n9p5PUYAY1cv1OOZAqXKZM0oV7H7MsS7RCbkvD
K7pY8mcXIk824NlT4cjPm/zrr7sVJRTLryAA4M+JvGPHDo/TuqfSTZt6cMep
mIgivaaIOI3/YShwyhNPZMn5wwZrZoa7rqFelhshRwAALUt5+cbsDDLhpCl+
NxUfXqtBcCBCo20OZlTyumGrihMM4aYAAABAHBIdGlJZuTU3b/Lm0iThNZVc
ciA1HGWKFd4/0VC8tEuUWuuRg54FBYlLPl2IUCEAwKHQbIiIQqubFs3NG8NX
4ui0A1HS5obPxoq9mFRvSsivl+VJpY1a/M7CnAmlpaV6eBgihQAALYJM+9Sq
eXl5axeOpQ1qiQSRUkXdfha2wTyo8J22mSGqh7EN1mg4VZXSJ2dYqqqqIDgA
AADEIYoa0a2Sb5aVb8zNydi2KpnmwgQdrAYmq2gqmaPkHUZbHQZ/BX24XrPs
c6h+z54qZ25O1p49e6iKasiNAgCAA6H5GYPt++nHHW6HZW+lk0gWkb8Q85kQ
4+AHd1DIfpuocE6lCe0J9X2ZLSPTva+ugT5tGYIDANAyKKz/QlnZhuxMkxxI
V5jXVEQqEntEsqKlYNsbErMrvWbaZZgl6S8vHlFQMF08cZgeAAAA4gJZbSqR
FPFz/fq1OTmu2q+t6rfpaiBNrOp6IwqWykRFCSJSqK2N36o6a6cr+JJHltzz
p5tXrfq8WZUFmgwA4I8ilxTPnTdlDC2XLXmMVV8w2tLQl1AlWp9Hb4UsS87C
vMRlS5eokBQAgBZEEQYKr26qBmlPKDXg0CYlk5iXEG4az0OyksF6YVgi+nnx
dTcpVQ24czzObdWVTcUHBAoAAIDYIiRRZFjIxs0b3njjje/LbGowjbeCkolE
04uX6oUx/bB52+IwaJWRj0/2mth6vUsOegJf2aa+lxubLyUA4M9CpKmjVTet
crI8fZaXx2ckQzlT5DK0mSFZQz6rGnTQ5lBEdkjp28tMmR5nfX09mnoAAFqc
srJ12ZnJREdV/G5ZcobT832tP91htMjQkxYjwoNNxMwkxubKooSCwvd1iQHZ
AQAAIB5oPgVbCa396uvcLLf/awuvaxryay2PjX06DKkxsZfCGC027KrPTsvY
+qlbo/A9zzffVBi/LVFfHgAA+A3YRBEulUx+KSmeP3PKCGb2Omn5F681LE30
iQhiJf6H4RmF/LQ2Hc1JqXXOzJ+0rHQFX4qVlWi/OQAA/FEaVRZuum7ROFly
K4bqpoZwDoz4H3ZRIpsJESH6fQ76NIOOrHRbdXWNXiUMAAAAiBOEYApLKLms
bN2UPNf2DamsFVS6KEAXFVZq6AyF0KA/z2CapxIw87bISsD1+QcJH5QU7ae9
C1QaAMBvIxsnClmWf9qx3e2w7Kl007rZEqqb/glGsuJLoYawZFb8zh82WCen
uerq6lRROJ36zCEsAAAtQnl5eVZGChUfxELx0oV+PhEJSwQrbm1hkIdFI4Ql
My+OzVzfJpak71hZNIpXN4XUAAAAEI+EEyJCG8rKp+R6vlufqtSmqcF0Gg7k
Z4kwQVu0gxQZ+n/SIQrss1bX+7a5p+Zl7NmzBzoMAODgYbGmhjowC4rmz8kf
TW3egJsu0PjDa3AYbXbY6XOUHLLPUZg3cdnyUv1xo7EgAKClIDNJXn5W2eJx
rMwLq24K2dFmB6+uoARYPy9idEipajAtI8NSXVVBHrQsyxAcAAAA4ocomfTN
5sopUzK/32BXgxlEfsk+F1FLiGijfR8CwnfKuujyXrpiIOL0Tzh8Nl6hXZU8
8wpsa9asifjaQJkBABwkikrDTdMc1t2VDiWQrkh2uTaVTzgQIm13yH5byJ/C
kxS2l1nSM0S4qXjoEBYAgD9CuMCLbquUl5dnZ1gUP227EJLsqtfMewzFbPia
bETvh193/zfNMHjdnnC4qQqvKQAAgHhDS6NTVEny5eVnBdZYifmjSulEM6Gu
M9H00BTun3vYRGpr6yGssWPsVYj4HUQpdSkBz5bSlLlzCmL9RQUAtGEUJaTS
6qZz504dpQRc1Oz1O1S2JCfW4/4MBiZLGtUv5M8rX3RHN1EP6LbPrgQd5JkW
5iWWlpb+7pcBAAAOCFmErHM3WlZ+9tqFY0WZF78zLgQHOlId/OBCn+eb0LAc
n12VHEQxmJxuq6qqUiNW3OT9fjcAAACAw4ssy6qibt++fdqU/E3LEmkfqEA6
r7hOBRw1/ZKFPeg/XAu7f0APOUDdKfplrXBF+/P36kOyxnP3T7p8zysO+Wx0
QV9yNfid+TkZu3bt0r8yuhILAAC/gV46m/y/Y8d2j8O2u9JBm3oQs9dnVoNs
Vc5v522RYzTjtfTkb/SXku14nepb5nbxiw3aFL/7+/LkzAy3MdwUAAAOFi4z
miqZZWVlOelJvLopkSAhX7wEP0S0hicTfoQ4M7GTPLBS3rqwoIIjppG0rTtM
4aU3iXZVkGmJbNeq4tE83DSimyRsDQAAAHGA3hbq19273puav7qELuPSDH3J
rfpTWYiplUs39jOZifXDtLZ7cHqI7w/4IangbvX8UHK7mr1j8WxK04xLk+gS
RVTTgJN8K+bPdK5du1772ojvD3W5AwDAb6JPGCXF8+dMGRmqTSMmEo0wYU09
RMhisDUliybI+HbIb25JZ+l+hsEVbLB/43nmP6BhipJoVIx6rbLPodS6C3In
aeGmEA0AgJaEaJ65ubnrFo1TAulqwC0H7Gwajw/vojdsStBAyqby5UAcvD6L
seyAqP795x3EymM3KpnadxJNWGDhphVMYYAEAQAAEHcQCVXf2FBY8P6iokT1
23RVSicWkBpwhI0+YnKybc3wNNqArSnWD1IP4fmeuvqx38PqnkyfjTUCtkRf
VIsMny3idknhG9gWSvmZ+D0kahsdPpcScG1YklRUMr+Zbw8AAOwf0RtIlbdv
3+5xWndVuVlbqFSa2c29cHy69qa07DwW7rDsC8+6xp36K1vDicqP2RZm+4O8
Lr+tqXhVJDt5ptvLLJkZrn379jUJEIIJDAA4eCInkvLy9dmZJqKOUtlBF93s
PFsh5rOiGhXp4Y2c9iWjAbX/4bOEqNQIX47BQvnTDUkEZrALt5EHSh7ryqJR
hTOnGR8+Yk0BAADECbpI+rC46NNitxrMkIMeVXLRDEqvlbbtiDb9uD/N6Cxt
xaXeg9NDfHytVv/1tz26Ju2nXbuo1lC9mtwuzdNLz5NcUczrMu1/yJKJnyT5
GtCmpZKrrio1Lzc7FApFfolgEQMADgBFLSkpmZM/mnpNaz20DQSbA3kv3egJ
vzWGN+w7jViJa4VMT35RIb9Zi6iJHHE88/+mUNCvzkzzNbRLC/lsst9OHmhh
3sTS0hXsYcsQDQCAP4xunhg3cvKy1y0aJwddNK07QO0UbfaOj6BTw/wvM3HG
Bc1BVaExhn/IgbjwCbfOMIVTGn121ojWMTndVl1dbfgS8H8gTQAAABxuolbu
9F9XrVo1Pd8Z8qXTkkF+Ny1tKiS+qRkxR/WTGKgov6WHsOgXHhup/3pAJ0lL
kXO9q3WuKGwdm1RJywz1iTZbcmt7CQ7pzC3UpezTgnJZyw8lkD5jWobX6yXK
DG8lxoA+AwD4HciMQaubOq17K51qMEP1p9IEgYBVD26n87A3pcV9mMbFNeOU
a3Rm0kzzlpuNxSeysgNUWnlNumc4LA7apuNU3Dq/nRfBDt/DQKrqd24vM2Wk
uxrq6plqAbkAAGgZuLVSVlaWlZFCozsC1E6JTGOPveOUz/whv748F05n0yTd
75+kJhYNouTPO0IBE7fXaKxObdrKojEFBXoLWtazmDVTgDQBAAAQE5r6Tisr
K3NyPDs3s1YdARdN0qc2nV1PZo8MmzysyskB6yFh0/sgNQ2T4TJb8sw1i1Lc
Lq7gUX+vZqHzYM64rV/ET5XfGTlAY4+pO93v/rBg3LLPlvK0WwAAODBoxMgH
JUUi3JQlNYRnXV+rZMpHDSpHfOGg1rDPls9y3hYVbREBtHY+7evtg/nFsu02
50E1GX+K5UufTfGmqpJnZu7E5ctWiKcNAACHjCjzwn7m5mavXzyeBXg4Wap+
vEyevyu/iPHCQz5+65WSMA1ERS/dUoj11bXukFjWiUQlSFamtbqyymilIk8f
AABADIkSQzt27MjPz69ZbZYD6WrQrfqdtDFulO+RB3Ae3t6OB6WHGNLzD/KD
qMVnbaZw62G8rvjUi4zfgZBPc5wG0r9ZkTJv/ixZDSmGtmIAAPCbyETWeJzW
PZVu2tSDO061STtiDmy5iFPWqFc0gRI1ZwyZFHrOgli9kloztocG02rrUFL8
TvsHOqJqw9KLcv6wwZqZ4a5rqJflRkUJ/f43AgAADpjy8o3ZGWTCSaNpcUR8
eI0lUGIZbqqfRsTcLnociKAOGkfqpR1X+fqdKnTsZk47HE3B3MJi9a1pGl2b
7zBouEYpldgXq4oTDOGmAAAAwGFFYfzGC+rr62fMmLZ6QRJdwCWSiw5aa10U
t4w/PUTTHEzUixukPk+hh/BcSxEhyV5stIIla/jt+gq1ZMyFMamala19hPF8
IoJam94ZeoTmI11N+vHJSYZ8hvbKPhNPGmW1feJl0Tz6jvFHoGtxAdovbF+V
Kz8vSxXpM+Jrdli+zgCANkCzE4JCq5sWzc0bQ8NNaey68/DNe1qTPj6V0Une
Z6v6bPimRcPqK5PZtM8kiNfK8s3Djfz2PyIFhMTs9+bfYgqnbOjywmsN+VN4
VTdRC6XZKgG+8AY75zjwtfI7SYSvN4WZ//wJptJGLX5nYc6E0tJSPTwMcgEA
0CLItDiUmpeXt3bhWDLbUAkipfJpk69/sbkx9qn6tNRMkwmfzJC/LVa0kmja
hbB5lUgrZuBY+E+2v61Wxm46jI0amdWZqkrpkzMsVVVVEBwAAADiEnnhRx/P
m57E439kyUmGEM2/Yc3Fgx6i7dF1DG2wnbTZk1n1RpYt5VVM6aWFd4qMGOFQ
tYQkm/FP2gcZBH1zSkuUv1SoN3Tbrnt9FV8KLTIgpUQ4hMnRiJ0e/6vGPhvv
b8L7Q6mSZ/p7k7/93/ex/vYCAOKL5k0etu+nH3e4HZa9lU4l4JEDfIXu8EgQ
u3Fa3rM15dlHLjul69EDL+5x7WVndD3x2Heev3lPRRKRDg3VSe3bt6NeyqiG
g/6IjH5dcES8TDIrERLHRP7aUJXSvt0R/GW/bJhw01VnnNOrS0nek717nOBb
NVyso3n5sp0pXIXG12SNb/+xSYd/cAcFLSfORRir6qP4nd+X2TIy3fvqGujT
lmH5AgBaBprcpDaUlW3IzjTJgXSFeU1FpCIPWogHU4XN2NyICLFJ8tw+XY8/
ruNJnY/udPzRJ3bqeMMVZ4wbeue+ionh8iY+M/eORoR2+C3bVgwvX/i2amyV
6A0Hne5/ka5NDYkuX9LOs8Q4Ykn6y4tHFBRMF08cvlMAAACxIaLWmIgGYf9v
3Lxpar6rrsYjS241wJL0fbZGv8E92Cpd5g9JD+l8XMcunY8iegj5ecMVfcYN
/XtdRRJVPHw2YqX+7Uhq9qreFN3JGa1QNQ3aYT7Yhgr2XupZ1V7AxHq4g7Ah
l19UH+Jmsp7sKXykEf0yeAk7fjK7NibdeOWZZ/bs/GHu0/xMROHWeFWBRIyW
7kCm58mz9T3Fs2zr1q0zBp0CAMD+kUuK586bMoY29ZA81Gt6OCNnmH+v0Wv5
ef2EC8875YXHrt5VkchEQ/IP68fdc+u59956PpnPiSj5W4cj+euZPW42zu3a
cYxravZwXkPT9S+fPVST9Pwjl3MHY67pkcfuu5SayT7zsOev/2H9BFEENWjT
bwX37jYTOmXsXehr8tfDOaggEGJLlLhhrZBlyVmYl7hs6RIVNi8AoAXRepDy
6qZqkPaEoov4YlLS+y/Eel2JmQzC9GDhGef27bJ83ks8zWHXlqSvP3zjwX9c
eE6fk2u/HilLyZqzlLwxhfoPdVNFMttG3zvk2evptpccLckQnJlisF9ifb0H
e3NoXgaPbDGIfr7uJqUSCzTH49xWXdlUfECgAAAAOAw0J4Bo2TEeDLLj5x/f
y8v2fWFmfTo8THKlUgFdY27FFvOHrIesmPMiC1UyET1k/YI37v/HRUQP+far
0SF/Uqgm5dmHB1JvpHBFco+lWJJWuVdTFJqzcv1EqB8+W31VYof27bhwjzgH
nzGJJnxPaHSQz5hKaRItoanXNFmcPPM9UkuZxVblpDzw2H2X8P4gKi/p40vR
zy3+RrgdGL/hIj5WchHFdcmsscuWfSbL6P8BAGiGSNmjVTetcrI8fXuzqYut
1D6YJ+ZTY82X+tbzNz3xr8t49CadftmK256KpN7dj186/cW66pS/HdFOOyW7
cI3S86Qig8/V7DjiyIZ8B1bZhi/Y0dW0iGBUbidOGnr72NdvDp+SJqHEKyU9
8cFmyMe0U8kShwJCstJw2aBDtGiU0reXmTI9zvr6ejT1AAC0OGVl67Izk+Wg
R/G7ZckZTs+Pk4wto1DQfp7X55TSmS+peraaj2bDPffvy59/5HLtV+Y29NKI
WS4LeC6DbcydQ566lk2tWq8oqoRbmTxqJh+hbQxtkTEymsVEMwQl18qihILC
93WJAdkBAAAgHtDl0dyCmZ/On6DW0qVbXtrU2MZRUwZiJ5r3o4csn/1iuJoo
qyz33L8vI6qIVhSIlozTE2E0eW3VyqLaeDkdEeopXkBdqQ2VyX87sr3QcET6
vJWWcfNZDfasjWdTshrv4WaXXCmi/lWvOeRP0WNQdUcrf9ekN+8Y8+pN2ot5
hiYP6LXHvnLd/odIC+KBRl4rV3K2LEksmjdf/1LBgQoA0GFSJjwpkF9KiufP
nDKCmb1O2hbKaw0nWoYNq9bxEGqVWHZuGn/csR0rl73NJ14q8gK8NnXKh/nP
LCl8qb4y+cgOR/Doet+qd+6/6+Kze584sF/PQf16fsDTBNhxPi14/pYrz7h6
QO9+53R98v4BP2+YQPYvK3jhxqvPuHpQr4vOOfWpBwbu3JhIdoZqUq4deIbq
T77r1gt6du90WrdOVw3oHfx81D/vuOC7r8byLIl3X77xiv49r7i4523XnfN5
0atkmt1bmfTPWy+oq5w0ZsitN1xxBtmgh/LvP7T1cA7DM6L1WyQaLKTUOmfm
T1pWuoIvysoK2gUCAFqKRpWFm65bNE6W3IqhuqlotxcvQ4usoAoz3TjvjJNX
zHkpKmHhf18mdOhwxE+bxvpXjfrXnUTEdLn84h5XXNiTyCC+AHfP7Rf07nHC
aV2PvWpgz7KP31J9dv+KkQ/ceeGZvU8eeNFpl/frtSBvMAvASI719R7ssGup
HFpzB3pPmPkZdGSl26qra2h0MVymAAAAYoGiYdgT4ntWrVxeOJVGD9L4H59D
1bobN1syNK70kOWzX6SrtCzyR/ZSX+W3X40+8sj2OzaMb9yWfO2g3o1SChHQ
SwteuPWqs4mVSsxYattuSiTXRQ3S2y+UPh/57zv7XTOo78CLezz378t/2UTN
0n3VicJk9tl8K0c9cGe/s/qcPKhfD2LPEn2GaCmDH7ziqw9e0RZ87eRzyXvL
PxkmFABWiJWuC9dYzMP/fln/nkTDuWZgr5ykB+kLAuZ7bj379NM69eh6wtUD
+9R+MVrlGZp+U7SPN96GFOEEZtGz9Gvz0xbHtGk5+hcLBe0AABoRFTxkWf5p
x3a3w7Kn0q21IDzcFWB41781Ja+f2fdkFuxqkC/h2nGm+sqUIzu043/q3+80
15h7G7x0zat6+dsnn3gM94X+vCWp20nH+VaPItsNPsuIl2/47wMDf9k84aQu
x0orR1Ffoi9pxIvXPfXAQFoBhnti/fZGnylh6G1jXrmNyiy/pddpncmLybT/
0N2XvPHMdaEamoD5zeJ3LuzbrWzhkL3fJJ9+6vEvPXFt5qT7vStG8KQJ2h/E
G1FnNaYjma0G0koFit/5wwbr5DRXXV2dKqoAUZ857F8AQItQXl6elZFCxQcx
WLx2vYaYHkER6/kwQtbo53Z2XxbpQQRNwMbrgPHsuT7dO6//YBixEewJ94S2
0SSFbStGnHTSMb9umUiP4DXZR9z7+uBryRGIQJEl06UXdU8de7e8jYqJmuXD
ySt/2TxeS4iI/SUf4ODxtERkcDOTub5NLNXRsbJoFK9uCqkBAAAg3vj22+/y
cjN3bnUotWnUd+p3MgvIGhZtsbfL9quHlM56gSgSPPmRN11SqR164toP3yBm
71Htj6CRRVvGdzupk3fVSJ4LSWzbJ+/vT7Z3b03s1Omof989iJu95E+OhHsH
XHgqsZ3rq4TjVJaSB/TjWgotOlRF9Zmjd26Z4B7/r//cP0icVYAWbz+jTxfR
Monu5FGs9mcfu/yx+y4lH0R+/WXDhNtvOmvskNvoX2tSxg+5beQrN5INY5n3
OA831R6BSVQ80LL1lYAre3JWYyONBIiKLgMA/LVhs4FhNWVB0fw5+aOpzRtw
i6x5/+GSMob4zBmOR2697kxWNc7Gc+pZq2LaIJ6/gEWcUsfpnoqkN5++rr4m
WaQYeK2XXnDayqJXyPa25W937XLMzxsm8BDQnWWJmckPELO3W5djdm5kXT98
lp/Kx5OdxP7dV53IEhmowzNhyC2jXr2JW469ux/vWzly48I3zz+zG5EIvKQM
MainO58Y/MCgXRWJHdq1m+l6Qm8XpXeG4kmdMZcIbNjZCqZD9jkK8yYuW16q
P25RRx0mMADgkCEzSV5+VtnicazMC6tuGk8Wyv7EDRnn9unKHKfsV17mhW1f
PbBvgefRoc/cWFdt4m0RyKx+yfk9Vs9/lb+Ap+qzA9qINTFs8PUNVSk8K5D8
vOT87vyV8W87NB28ugLN2mOFCKjjNJiWkWGprqogD1qW0TcBAABAHEEE08zC
aZ9/NEGWqNeU+sFiLUkPSg9ZMYeXDEox7r9qQO/5WU9T52f7DuTXmuUjunTp
+AvNoKQZ+jvKxmWyyE9iDrdvd8SyghdUgyZz46CzinP/y2KNjuCvGfrM9XXV
KaJvsmTvf0Gvz+e9umvThK5djvthfYLKAi9Hv3Zzyjt/jzxV29bP3jr91M51
lZNESJXP9v268SeecCw5AXKo8UNuG/P6LWqb1HYMxV2pnuNWAq4Z703+4Ycf
Y/11BgDEL4pKw03THNbdlQ4lkE4mRrlWSJxWqmgaNcKf4rMtn/XyhWeforUR
0eY06ke1/Lx5fGDNaJ6qz1cPZa/pi6KXPRP++eYLN9z/j4uOP67jUiI4vNR6
Hf36Tad3O/G5x6/MtzxcvfxdXjom4bWbenY94YXHxE7u3iQH5KWzicAaO+SO
Ua/dyKZQe88enfyrRuXbH+7f77TEd+9MevuO5HfuTHn3rjefueGCc7sSS7ld
u3a7tiSFfNYoYaFdTowDjYgEpEVp6Dqjc3uZJT1DhJuKhw7LFwDwRzAswWuz
SHl5eXaGRfG7icESkmi2l9Z3IJ5G07aztCkDjzjV+v0x0UO2z+7d5YuiIaGa
pC9LXs2Y+M+3X7jxX3+/sFOnoz6b+TyvdGpnzaFETGbASl65pviVjIn3klc+
ePv5nTt3XFL4XPx6j/dzf5ru5HV7wuGm6DYLAAAgpjQVQqtXryyYYiM2rBp0
h/wuKpq9Zj3kJo7Gb+ghPhFuKjP7MeQ3n9Pn5M+LXuXxQrwmZ8JrN/fs3um5
f1+eb36oqvQd1oYphRikRxzRoa4imRdH5ccc/cYt49+4Q1S389NwoFBNypqi
19InUH3m/jsuJFpK6Szqa339qWtMw++kik1Ncu8eJ3y7dhQ7TxsPPSIHfD/1
sSf+dZnKzFuWs0nDhG6++uzPpr1A7vPYIbeNePUGEdDLm2v44yu490AGXfUm
2k4wY9aMrG3VlTH4TgMA2gK8F2FJ8dy5U0cpARc1e/0OVWuEcThTG1hkqWX7
uoSjO3b439djjEmO3MOZ8NpNQwZfV1eRxCtd/1Q+/qoBvf9z/4CZnv9s/eRt
Ih2uv/zM5TNfElH3fsvPmxIX5A0e/drNRCS99uTVfCbfuXHiB7nPjHn1JrLz
1aeuVmosWu4/NZnHDr119Gu38iyJPt07+1YNz0l65I5rzynKemp+tjZyBi+a
9hyRU+Q8WUCOOdq9bKwOd5hnfu1DacEWeh/sStBBnmlhXmJpaenvfhkAAOCA
kEXIOnejZeVnr104VpR58TvjLSduf/Mk2Ti3bxdmsLDlOT6ZByy7vplIpEzN
8uFXD+zz3wcGFnge2/LJcCJibhjQt7TwRb4gZR1719BnrldrkhWv9ZcNE64e
2PfJ+weQV27+ZGhDlenaQX2XF74S8yv9A3eGWW2stjnt2GhXJQdRDCan26qq
qtSIFTeksAEAAIgZ1ICVFVlVduzYkZ+XtX2jhTpOJaqH0EqhUmwMsT+uh+hN
l1iH+t2bJx7V/oid5WOJ2Sucn0ytImbsh7lPctv29aeuUwJm6jht146oKLLE
egGzppaTht4+6vWbdcfpzxsmXU1N5kEzPY9vXvxmQ5XlukFnLi2gYa5bP3vr
rF4nkY0Fec8+cOf5RO7zhlDiVH2WHMsjzzw0gNqV5OBBkY56+/XnLpr+vOw1
iYhT3hnKZ9daasbf0vlvPw5WkkgOekpm29etK+MaDpaJAQAcbTagM8OOHds9
DtvuSgdt6kHMXjKZB/mkZ1e8hynlXE9PaPSbX37iqlf/ew0P+9FfsHPT+F49
Tloy/YV62iKQpuq/b3/k4bsuYS8z8XWx7l2PX1b4Ijn/L4pfyzM/xDLriTmc
sqsisVuXo0ty/5tvfkjx2nj06Z6KpG4nHyt9PryxilWPYecwdshto167kR+t
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
1+PeW8+f6fkPX+bzrxr1wJ39zulzMtk/qF/PD3OfJvvvu+2CXqd1PvXUTlcN
7Fm+6M3GatM1g/ryO0YMcNPwu+kJ9Otx1YDe2ckP8cioXVuSbrrmzKrSdx/4
x8XXDOx1wbknj3np1lBNUlRUUosOltYhOWSfozBv4rLlpfrj5joGTGAAwKFD
ZpK8/KyyxeNYmRdW3bSVG77rg/sVlxY+d+OVZ5P59qKzuzx5f/+d5ePJtF9f
kfTPWy8IrBn98F2XkPn5kou6P//oVT9vmsiFTqjK/M4r119+yelkrr7t+rO+
KnqNt/yTvcmmd+4iOwf268kFAd25LYUcgbzrnlvO69H9+B7djrt6QG/p85H/
vP3C/32ZIM7EK2b+gRf3uO+WCwvTHleZdeNfPYJIkHP7drnsop6XXdzrg/zB
5ObcczuVIN27HUvEUNnCIUSCXHfZGfymNW5LNhNJdHEvIkGITMxJepBFZZj3
bJlEpGTl0uEP/qPfNQP7nH/OKaNevYVKkFa4pXxxkMe9UJMzmJaRYamuqiAP
OhzVAwAAAMQVLKmOb9bWBt7Py9pX4WTVZhyaby3CyXaQw8QT7YkFevXAPmSP
Lpfv/3u/qwb1ueDcriNfuTFUk3LfbRf1Pv347l2Pv3xQ7/UfvUmN0Mrkd1++
8Yr+PbnK8UXxa0TUkp3/vL1fXeWkhDduv+GKM34tn0CUig0fD/nXHRcRfeba
y85YOfelqpXD773jQqIS3HHjWXOznhSxN+yA77x845XaAdeUvEoT5APW+ppk
crSBF5/W/4LTrh7Yd/nsF8iHrpr3MlEtrmWGKnmZf9VoTS2hhi1RS8jJ/PPW
i3qd3vm0rscTy3r9xzQ1vp6c86s3XN7/tCv69yKG9lfzX9fr+Qj73Weu25pI
LmFvFbmEW6+/vG9dRVJjVco7L91APvSy/qffce05Xxe/zr2dSwqfu+mqs64a
0Oeic0598l+Dft4wQQ5Y6zZPuvmavjwln3tNF773/Nght9VXJXbscCT59d5b
L+zdozO5k+T2bvh4GLn/nxU8e9NV51w5kByn65P3D/iJ6Ht+asKrWquUltSI
eNKo5Plgpn3Dhg28gi4A4K+MotJw0zSHdXelQwmk09Wu2lR9SmwFU9ckIvY1
y/qXzRNOOelYaeUoMnM2+kzDX7rxyQcvJy/b+01il05HE5vXv2oUj4C1JtxD
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
CK/m3FLmU3K0o3qiR5M2d058RVk55j0AnLc4bn9hedayxXPH1x6NprEMRrGo
h+iy2BJukG5NTOYsTxzNQu9P5s5YOfctMq7ecE2vT9+6h3SAr8RV59MiR1Ly
5ylf/GfimIfjg5579N83LIt/a1nCm7xlJry9OuW9pNBRb78w2PEpsrrALFVL
xw5+VDc0UN15wphH+farr/yHYet4om7TosZmUeV31AFUnciZ+u+7rnlt5KBF
UW/s/+ULcpD7h1xL1F5yWLYE9iARNKSr1QUzqcepUUPEAemAs14zS3z95P39
18x7++TeKVQ6GEJ5kAV5dZ7+1ZdHDKQfZNE2b5BXuS2VUvlFfjGjznY0Mj1x
hsPdFD5CAICWhKgpiYmJu1dPsVli7JZIx1DWKnH68uHOQkPkVia9N/HTR278
Z0+urVAdxM+vpoAvS3GroGr6F4+SfWYFv/DEvf2p4Ih/U3pcO/89Mg8nAzgt
jGt0FHtlH1F1KKiTIxnLtLGPT/rsIVrU3hR2Ve+LjFu/I0fmoof7mtIVK5bX
mjye2jvz3jv7vf7cHQuj3zi49ovKghAiQdZnvMfdUT5/+z5mmA2mGk2HAHLA
uWHPvzNqkOMH5BWmVI/df+OaeaPJobp27Sof6ufrXnp5RAsaTsPsjtoWtIIG
LdxAAxaYu+khXqtY6csNAAAA8ILc11Rex4H8W79h7bIMItFolSibQSOvsmE3
NSxAhnvvcL8as7rqEDdCUofJbt07SZk/ifScr3uRGU61TMTfz6veJwQ//9h9
12Ylvp2VQPTWN5bGv7404a2f5o0msxS6Hmqg6dCJrD+dN6NrJ39mBhQNuTdf
c1nuui8FA6+PHPbayDvnal4gYnp2yHP/uf8GeqiEN5fEv00mMEtnvUnmCYti
/vf8sNtqxYgVOn8gk5lbru+1bdnH1OM0wI9PS+6+85+vPzs4I/KVA2u/Ioot
0XPXp39I+qye/F8eCEM+YlbIs/+5v39m/Fu0zX6Lz5RWpbzNU+c5pgphZYdm
du5EZy+8XhX5pqRjRCUXdfPZ/yOdJJMrXkLrdO7MlUlvE03/xn6XjXmT/Diq
0pwZ3bt15LE//CuTI7w+4g5qmiaTIlowOpSVrHKU2WIevORn/zHpzYnMYjDm
zXvsrHwzN6vaTbwKp/PcNU6/dtOmLWqbSV9TGDV/XqKdldJW8AoHACiFQ5oI
xcXFUXp1WUEkKwsVTiO7uRWOjzmGls+9KY1Fks67I+vjJBWrf8GcPCsOzexN
E5hMpP7//v7UOUfmhD/0of7pUa9tX/rJkNuvZgt/YdxAunPFp+GTR+xeMea6
vhfXHgmSit1vWfLhl+/ez5PIBbKMNFzznfDJf+gOZjUP1d+zcux1/7yMRS6w
r28I2bzsoy/feXBe+KgXh97BB3wqgEyhfS7vwbMHUJn47gPUqdVIDacdmdqb
/dPn1/S9hA7aZl6LMKx8/7RLLun2129TiV5/QfdODpMs7Vuy/sVXn77DYWdo
uqnBpYqi9AubteScFmeHxcVGVFZWeqzDYvAHADQe14EkJ2dPQpyKVq0lsoMu
uml5tMI5EhxeRj+zakfW2DkhL3JPAzKcVhwK6nVpN9PWCWWHZvgFUAnijD0n
EuTBm4mysHXJp3cNuNJmDJGquxIJop78dM6PY6+9umeNIYiVkaVlajcv/vCL
d++vKVCJzg8mmiJ74qePcql09ZU9DFvHE7G1ZxV9o1BIhKaaZ+vasuiDL959
MFn9wovDBlIHD7bERgbqvr16UMOpUaP+fthnbz3Aqi9piUZDc5yawnb/8MV1
PIeAiXuwEAkys9fF3f/8bfLpvdOpfsGLAtOmksUstERjqp+NO+QYNeSEktO6
JXNCxoIU+cmHrykAAACfwWa3VtcuWpjx++qpAg271sksaaLCa2O52euvNyEv
cG8tDKUZOE1hJ/ZO69GtM7dSclWOy2WajWfiM5+9dS/XNLcu/XjI7VdRRdKk
4e6Rv68cE/79M9xwSrN3slSr5XkzOtO4ddF/iTz2v+7yg2u+4gchO7z+7GCa
2NwYtnXxR0PIHIZqlDyPHJnDfKz5/pm8tV/37X2R9fBMMjWyGslsQfvXrskd
O/htX/qxqAWb1cna518aOkD8+kwNJ4rtLwtGkyfaidS3k/VQRRTtu269ku/G
o2B2LP+ETJPEX88QyqdJ5QeDu3TuyFaZQ8nGbcukd4nBj7+t+FQ7+ekdmZ/O
Dhtld9RvEudp2ydaC0I6dQw8mTvDYXlQf/T6vS8/czsN5PQPYCU71dwEzVR+
0quPk0JHca8k0s7kB11+aTfjtglSoBNV/81qF2NpY2uBSbZT8sRCLpjIwu1B
S5YsUvo6BgAojc2+fPnyxXMmUqvp0SiaAYY5f/JaunaZebOF9DLXYzqW/CoO
TL/qigtN28ZxL03jlgk9/tGVSBMyrgYE+D350M0n9kziKuTS+NepVltAtV0i
g2JmPMuzvpzaN/XO2/sQDZe8fdijt3z9/kNcByRHePD/riUqLfnQygKWFptr
vmOfkDxOiYghn0h2eObRm7/96CFRVz0U8sC/rtmz6rM0/SsP3HmNqPMaQoO+
fPKKy7qnRb5MPnSuetSbz91Jh2ijhnQpICCAi+CnH+3/zYf3U4clFqT5v+fv
+uDVe8hup6ja28k5gBs1KToxoKPJPlqSaGCpsFXSCmAt+RYmmtE6I2n6xo2b
2ckWYCwFADQZt9Rh/MnspITdq6cIRRE0rNsSTqfx4vS19ZxOTx+YfuXlPcxb
x3Glxrhl/KUXdT9zcCZpHQL9hj7U/+/sSXwmnBX3v2v6XmxlGUeH3H41TYXK
Uoed3j+TSJAtSz4i/X/mkZu+++gxPpASMUQkSM6Pn9Xk06UxvpHnOOVhBVf3
vtSwdTwfiv/78PVEggjmYP7GB+6moocIi3/f9U+6lFZE1+Omffnk5USC6F8h
+yRrXnrr+bukVACdAwOoEdWiHv5I/3GfPMKj0oTDIWQfljAt7NTemRd27cLW
BMWVxPm6F1vU45SpkNyjxqilFlSLblaMprCwUHYR8P8gTQAAAPgAPFzi+PHj
85Jnn8gJqzWE00x03ARqCeflM+zGoAYKSmarVFUdIiLbj8j9k/unEs3OaXE1
qpL1L/JYwjnaF6mIp0GFajbluCp65kj+9tN7qdK6cfGH1F2zSyA1ObIpU/nB
4M6d/OUfd/N1PXPXfivJ6Nf/O3he+CjuGnTXgL4x5IBHqOAu2zfNoQVrh//n
xmmfPcadM8nU4oXhA/v27rFt2cdn8sWEdSlRLxPF1sqy2JHdpn31BJmWZOhf
JfuTacnrzw+h29kSMO8z09aDy/dPp31e8gFXYCV989TB6Z27BPCNdmYX/dfA
vlEzaP7SWlNI6f5pfHJ1av+Mvr16sEqd9JsaNo+7+KLutIyyQT2g/+Xki/Dv
uG/1F7fdeAVRjasLZnbqGMgnV8naF3klKdKr03kzqMWAHYf8SfT3i/7Rjcy4
rAYeyB/Cw2YbbSyVGs8NKJ1uM5nZ6rZkTl6/fr3kcqbwBQ0AUAIyAtDspnr1
mXy9vSjWbgp3hM+LFQC5C2iLZ6vjnyIG7IuLd6pU3at33nblI/deN/KxW2/q
1zMz/g2yvfTg9C6daTq4W2+4fNijN90/pN9dA/oc3vQ1P84fOyc/8K/r7ryl
N3lp8IDeYeOH8/QypfunvjJ80G3X9npx6B3XXn0JUXL5/jUFIVRksDVB6jI0
huc41fTp8w+epI5o3y8NH3zrDT1fHDbwhr6XTP38MeanGjL0PzeSDrz2zCAy
+KsnPB0+ecRFF3Q9vPm7ol8n33J9LyK5iHZMk7F08OODbem+kJefGXzL9Zc9
9/SA6/v1/PD1/6somEF+T6L2duvaUXKFJfJ6fvjzzHDa3HwsgknL8hhonAch
kwGTvjhbFRsTUVNVzUZ7DPUAgJaBTyCzs7PjY0OEoii7JZLWhDK5lJ1tWcFR
f0vRv0wkyMP3XffMk7f3v6bnsoQ3SQcq8kK6dwr8ZQGVIE//56b7hvzzrgFX
Ht74Le/nn78RCXINkSlPP9x/8IArVROG85D/0/tnvjJ84G03XkkkyDX/vHTS
F1QBoSV0/fz4qt/3Yx+dNOY/fLDt26cHmf+LKs/+aS89PfC26+gbr/3nRUTK
kNGeSJBhDxMJ0pO8dMeAK4kE0U357z96dC3Y8p3l1wk33UAkSB8qQQqDeKUJ
8lmkA2Rn0ufnh9Hv8vGr91TnU2OsuPTG5SZREAyalPAW9Tglao5FDHCj8YxH
o7dkTkpPT3eccypBiMoAaQIAAMB3ELjxdPfu3anzY2iJKJOWFU4SAwBFVbSB
IZYsNNJ6OJiKbEPoadElRsOVO5tBnRLOQvXNavO2iUSOExGf8yP13mFK6zVk
ojL0P3TKETpumGBRl+dxwylT5cifB4O7dukkGILFhD/UcHp57rovJTPgGyPu
TGY5Tkm3j/426f7/I3OYK4c/Qg8YPG4on6KczJ1GJjx33HLlc0/edlv/yxKD
XyBqMg3Vz58ZQANntDWHqGJ7042Xv/zMHQMHXEGmJdrJT/e4sMuRTd8d/W0C
U2zJtOQzpmhP5Ko3+4jLiaLNl3rFAigsMWllXki3TuJX4KaDozumPHS3c3JF
vil3x5of8RrpLdH0n3nqtv7XXEo0fd7h9envX3ppd/Jb/ffx/kR9Xjr7jVdH
3FF1mE2KmBmTTJZIr4gOnrvqc/LFU3UvD7qt16P3XDfyidv69+tF5nvMd4h3
gJXoaqbhQuZxSj3K/ohYviB0166dSl/GAAAFoR4jK5Zniu6mLPGLbKxo4bJ0
DnETykdad0dWqgPSpSsyNh745Zvqwyq+AxEoXbt0ILKjpiBk709j//x9kjx3
Nw1tMKlK9k0xbB3vWsRZReRaxYHp2Ws+O7V/hjgGGpn3vnwFiu0vafrM55+F
eR6Ykb1mLFFRZb+G1rz1690/fXY6d6bDq5Npl8y96sTeaazmoEb8aPbIpeG+
1V+w9Hp0xYofn75a5NiThV3wj2iGZ69K/ijKMrpWGG43Ry1InL5pw2bxbAMA
QLORpw5LTEzYs2YqrQll0rNQ/ZbPiV1fc4Qw8GINZDA3/zrh0LpvaguDqQmU
Zn0J4ipJVWEIGY3/2jVFHCeZcwgfLU/kTDVsHi8rmEufEGFx5uDMnNVjT++f
KS5IkUGV5/XiecOY4GBSUsu389g6GoB2YAZ5Y+m+GY5O0p6Yto3b/ePnp0Wx
4qxGYWfmUKuRDd1cNDj0EaJAHVj3RXV+CD0CW9CkIswSZpdW2VhURctLajOL
OjFTCRIfpy7ML5DH5iNOHwAAgA8iCIL1xx9Xrl4SzOKvuc6r4lWAz241dfVg
tHH/RlFei7LYkYEzrFaUy1qWUHQ6UxJFj9YTud8Xbh0nudBIuiFNkM57UkcH
+HxDXvyIxyqW5E6lq7c8VtToLCNycu+UfavGlufNoMfn2jfNwc5WXS00pt45
LXF+Cju+OaR0XxANk2ETHvIpJ3KmGzeNF6c90vq4QcyhKm6RJlFiJXrNydxp
vGN2MShSS20LJo3l13FknmY9HCwVeyI7WAtC8tZ9Sd7CD0W/3RHRViAW5GJ5
TR29CmEWg3F5P39nLVSJNVmkxfrmu3vJDadsLrQoY5bBYJIuJEyDADj/EEpK
SqL06or8SFrUgxtOHdLBZehuQY9TN7ljcUTuSx/BB9gjYs6Z0weDunTuyF5S
MZFE5RoPgRffyJaiRAFkdkgcbhE1O9w4mRroGLrFT6w1axwjrSSSVE7jp1FU
xh2JXEKkz7IZNA4ZoXUkJtXa5ZZPrnqbRX9aKgqpBHGYNPnxnU9U4lczeBiT
m/rDch1fMOuP56rjYiOraqrJVMFmq1X6egMAtCtycvYmxJIBJ5qWHCXiwyBP
KtWa7qYq1ycOsyRz3ujWqaPVHCIJEUc8hWT2lIZQlcMaKa49iYtxzGjJxucQ
hz4iju2iNZUmL6VzeP4oHdYpgGTSgckOKjLE7UYXbUuURw5BxstD2E3iqiLb
P0QmR3hr6VyyXFCaw20m/dasyTJ3UwAAAMAnIUoQX/QrP1ORnjbv4MZgwULF
nCOvpkMBNNal83pMacxqSYWUZSiSHUoU8SwngCFU/BRZwWJJ4PIMOXUJZTa7
CK1jTqUSpyW0A6KqK8aNMkWe68us4IVjlVnqsyW0rk90CVTnBkkDty2HOjvs
ZX+V7OvID+6YdImvun8RsVfmUPdPN6u5mVT8psywbDdIX8E5o6OTKItLUtPm
phmUOmmh9TGtRn3y7FnV1dWOqwmuSAC0Z7y6iNhodtPMJUmTqLupSS+Kj5ZV
wepphlD5sMbThDp8PtnqFetMZV5Q144dRLuopDA6Rldp8BRNl45VNnGUPlLf
yp3dIY+cT2RCUBbzLq9Wz8Znam6VUtloHM5LMkEgORR5lrl3ikuHam9QO+3A
xrqlWJ1jO6/dTD1s+W/ItofTQi0mfcbsaRs3bpTcw+ApBABoEWjYm82elJS0
66fvyWhDJYg5XJyZO4vftWqoPhv9eNUklcMCqRbr1brtxvQX0c1DXgLA6PQ4
dbzkOBSLi2euGjyFV4gz44pDXjhNmkZpo8OQa2ApssXSS1pnklIuffhLBtFv
VvwK7DkVLgYtUyuolGFBFg5JwY26TZAa3ppTmSJyivrBhtvNMbNiwwoKCiA4
AAAA+DBMiElJZv746895yYl/7aEeJtSRxhTCqze6K31cmzO6eDPKl0e5sc7d
ECrJZToT0Mre5TojEr1rQsSDuyvg7hU2xd3MThsjz9jjmL1IZkmNOH+Q9dax
XXLdDJPsjc6Pc4madHmX41PEPZ3asUm+xentyaYrWmfHpHkR+1Me5skj/W3c
D5Yfink0OVP5ORRz5xo0i8Tna9BuC9Pc5clLTGvjJ0Ky342m7jdsVy1clMav
H8yIAGjHeL/B2bYTf5dE6sLO5BOpEUXX3cytVwTZ+3jFvXq4IGCu+1yKleWz
6IYijSMqwTmS07HRIIoel7VCg9ppmTRKqU5cxIG7vml2hEhI3rbicC37WcQB
3yngnLqzyxqczOvJGbkgW2eURejLx+emDfVcYElVGtmRaU2oY9ma2LjIyqoa
erYRVQAAaCFoXXV7TXZ2bkKcSrDE2JjVVJqWN2fW2vTm5nIvCy6ozAsSR+Mi
p3lT7KHTtuk8CN8iJisjahFphmBuZaVS8rDKzZtCFFsydxGeyIW6ucrlgsN3
wrHu5j2mTFTKJM2C+aayPtchoFtquZNLJVZTmAembcoal56eKp5xaAoAAAB8
FocPiRh8d2DfwdTkmDMFtO4PE6+S3FezFdizLPu6ODdK6qRr7KTjUfT2dCiw
7uqew07oyLcmrZ8aQj32CXP206yWFY5ncYs0tpF+EUmdF/1UjR6y3vlqHTMK
mc8nPUIR07iLeDSK1u7qdOTVQ8nVkUklGVedy+uiZyzz/ynS8PwA7L00xl+w
aD07SXczq53r0UaZAdbkVN5rz+Yx1bAzyyd1WsFCp0Mblk7csGGD40KqFeBw
CsB5h7A8a8nSuZNoUQ9zFM9G0jL6V7NasChluOsOS+ZGfXUMKoftMdh1eA92
67aLB6lRHD/F4Vqypspi9rlcEE2mPEm4LJCBvTeY7yDuT8btIqZrMx2chS1o
XSWsFKpQpyGaHq1IzIrQ7GgChwpvlszOtBSyYNZnJM3csP5nO3ReAEALYhPL
qvPspvYiWhOKqR6OAdAk87pvneb0YXCUNZSGVkOo27qVy+qb61tEp30j/1N8
uxRTz1UAW5HD1upq8OSKj6sZ1rHK5nBSdS7qGZ0dkEkiecJSUaEQVR7HZ7nE
6fNMYsaGFbNwa6LOJcZQuPaZShC7JXJ2lP5wYb6n+IBAAQAA4HM4SqLzaYyw
adOmhfN1dALDEg1xce9hBnRLBBQmt4J6ifiQOerQ2hY0fNLtjexP95Q7YZKL
JncfknRS18N6BKSTnS1s/iOFTIoTD9aHIg0NafQo5yE5GnmzebrkO5JPlhxe
oK5Tjroq14spj5yHkvmpqkQ/Xsd3kSeyczdHOBbieZpWnmHecUCXSabzuxjO
Hm1aX2NpE8hsUPy+dB05YmF6TF5enngV0QcBrqcAtG9cb29HdtMCPYvTZ3F5
JndlsKViABvSnG42fBGqyOm8JDnzy6IeVN5CG1zjGsxqq0nUQ939Qh1Dq92h
DrtmunMVSbJk12I8pjFUjK2waERjrMsKnbst1/OX5IlPpQM6B/8m267NLN6/
SCcu55ljirNVcVH66upqFPUAALQ42dm7E+KChaIomymSBrtJ4fl1zaLPeXOa
KOWFAuvqknsmFuckX2yOvNlqUR9p6PfSunyEpHHI88x4Tw7mrXvmUO8+IWd7
e8OkhpToTK7BqQTyFcwRWzInp2fMlyQGZAcAAACfxcVH0GE7tWcty/xpWRCt
8VEUzm2MjkB4lVNei+UtxCpFkrh0jTSpf6XY3RopOVs6jZzuAlrtnvzHywQm
TCzVwSp9uFt9+UKtlxVeD/cht6/gbVLhFlbTwFaXcu3q0erRASliyNMKIf1W
YrZVz8QCqmZZTR2/Kg9fpblhTfpaU9ScufGVlRXOi8cDzJEAaE9IeV3EP+32
5VnLFswdx9RePRUZBrUz0FI+6jZv8GlcM6ud61BSSLt8sHU4DrkOs7LspkZZ
caizdd5dZEirdZ5vNMsiMR2REVKGbfeB3asa63FMl4Hd0AwDtezIdIHMTJ2F
bEf1C+bM2LBxM4/QF2x1DPQAANBorHbmbrp79RTBHGmTZTdt1lB27pto/zTL
uurmdyp/YpbP2/kw65IE2/34XraE2T1EqqsewWSuQe18u+dBnDkBPBcKm+nZ
q3UoibJvatTRs1mki4/RFBYeoaol1AEAAADtCxuLuS4vL09PT922agqvj+zI
QC4LGPGUsMZ6/3QT3C6Z0t1dd+QHdzf3uU0G3LRI9w+VYmpUsoOLGXi8GBKN
HgfxkmHVbabh8S6XTLCusx1JWze4u6cya4N7XSo+N5OtL6t5vj4X7VucBTn7
4BE9VO8ZaWhT8TBSGq9qCKmleQmiDm0OXrx4IbeiiO6mzpS5AID2h4s/uSAI
J0qKI3VhFfmRNksUlxTNGGRaqLmpjUZJ7mhlO3gNkAw5i1lSPorKk50aZa86
Yxw8UkO7yE0aKSCuc8lH5nqMtG4Zb9y/tdtiWZN/wGAxF7c51GbSH89Vz4qO
qKqqsovrqmy0xwgPAGgJcnJy4mNDqPiwRNkNWiktSZ1rT60vSlwslipJi2mQ
K4JH2IXnuxzepJ75UZ3d8J77y1NhqX/k9zSW8ifNTq3jSFDDM3uLdXhZkL5u
S+YEnt0UUgMAAIDvI7g5kHDhRh5KSkpS5s/Zu2EmWwWWXHG4KTLIPbu42SNS
Xi6gzyqXm6rluS3auk0tZL6pHi6XZrXLDvVPReptXuJ3zGpvTqGeP4LK/bH+
H8ppp3W3WvPkrnUHN7XI1CiE108ReDRuUeSqhcHbt28XXZBQMQSA9g/zNZXd
7Cszly2eM5HqvJZIZ3a4NpHjtM6lPXkdQ4/sK/UMlY3zxvGencBLGlXHYRuW
SsXbYd01btqaZXBguXTMOsGoy0iavmHTRul0OzKiY7QHADQXMpIkzYnPXjOF
pXlh2U2VlB0NHOEbPLTWMwhzzw03A6n3Pet4ftadmaNFo3+EZggO/o1oAAWv
RWsmakJ0bGxYYcEhcqIFAVm8AAAAtAccGU5lW2y1RMZZjhalJicZd4bajTpq
K5MV8JVSerrocZ5i2qsJUTZ5cCkQ3JDWsOhFR/Nea7LuT/Q2capHm270HE9V
5zf16gFb11dTbm7JS3TxQpkpyfHHj/+tzCULAFAUm526m0br1OX5Opslhmau
PuqoUtSKGU3FQcm1YqD3PZtjS/QWF9nI5l68r8k9Oac/pmDS1JpCmDzSF2eH
xcSK7qbiSYfmCwBoCrK0YI5RJCcnJyE2zGaKtJsjaBwTXTxqxTpQaC3SvJln
ed4ep7spah8AAAA4D8gvPDRvXvyJvWrmSqT1iHBUuVcBrluSovlqk5bFWc5Y
Mh0SLOHmHaqMjDT5pYJpEQDnCTZbrZ1mN12yJHmCzRJB1V6Tzm5Q83Sd8koW
aG2/OVMKiLnBtbYiHTmnGUkzN27ceNaLAQAAGoQguqxzM1r8nIRdP30vpnkx
6SE4fLRxoc/jTZhzhdZu1pGJwawYTUFBgd1lxU2o89oAAAAAfBYpKC875/fU
5Lgz+TpWLYLmABeKxCTnYkVgUXp6qTiP1j4aj8Ghj5ZwGqpv0a1Kn7ll22a3
qwUA0I5x3OZU9ykpKY7SacrzdbSoB1F7iSAo4hEEWi8pUNDaZHMPc+BLokUa
mynyWE5wXGyk3N0UAAAaC5cZnlPE7Ozs2TFBPLspkSC0Cq2yGU3RmthU8mze
NgtL52WO2Jo1kbubulSThKYAAACgnWKrFcMrfvvtt9TkmPI8uigsFb4XLPJa
G3VXckRrJ42VqKbZbvVCUVTKnFnFx45LsyD5ZAhTIwDaK457W1ietWzx3PG1
R6OJikQ9TFhRD9FlsQhSwCeae94Acu5sBrVg1NmORqYnznC4m8JHCADQkpBJ
YmJi4u7VU2yWGLslkmgTLgmf0XytEcWQncFgu0FtN9OABeZuekisGwsAAAC0
Z0RJJ5UB2bFj5/zk6MpCDfMv0oqFd43yqHzMedpzo2E4hhCe3XTvLzOXLl3q
Yh61ebeXwogKQLtBDEOwC8XFxVF6dVlBJCsLFU4ju7kVjosDQ4ji4xXaWRsd
0j2S6lDhbokqzg6Li42orKz0GMChAgMAGo/rQJKTsychTmWzRFDZQRfdeB4w
bYuPcmjnvJmpuylVDUzUc4acUHJat2ROyFiQIj/50AUAAAC0X7zoR9u2/Zoy
N6omP5yKSEu4mNPGqPHicQq/0/bUnOZxlqvBHLEwNWLfvty6Lh1MkABoz9js
y5cvXzxnIrWaHo2iZSAMoVRjsoixlmJUAlpbbVKEvs0SSgMtRWehsFqjRiCD
vEmfkTR940aeiUWAsRQA0GSccUmyJ7OTEnavniIURbDUT+E0u4sYpw8HDJ9r
bM2UFwI2apl6qJsVoyksLJRdBPw/SBMAAADtEK+WL5td2LplU8rcqIo8NUti
o7YawmT1obxViUJrL63WzKqDmaNO7dfNS55TXW1t7YsSAKA0ROel2U316jP5
entRrN0UTgtCUUspG/ONLE+mIQTZ6tp+I0Kc1rA2apyZTi3hdpO+OFsVGxNR
U1XNDB3QcwEALQO3nWZnZ8fHhghFUXZLJK0JZZI7WkB38L1Wa1Fx5wqa7fxo
9JbMSenp6Y5zTiUIUR4hTQAAALRXZBUQbY4/Bf7Czp0742N1Jfs1NN+pWevw
RaSzHaqFMTGKbEXtqnFfMjIpIlNco25VRvCWLVuk6qjKXKAAAAWgHiMrlmeK
7qbmCOpeIsUXGD2KDaG10SZf61SJxbzIOG+gmVgWJE7ftGGzeLYBAKDZSNVm
yWNiYsKeNVNpTSiiRNBQfUSo+X4zs6gTlssrPk5dmF8g1w6gKQAAAGjPyKSc
jSF/cefOnWlzYo/tDbWZIpmPimtsvhS8j9Y+mjGMx+CQc119OHLunIRTp061
9gUJAFAeoaSkJEqvrsiPpEU9uOHUMUq4WE3hcdr2myzBKT131PVUfzxXHRcb
WVVTLQhWm61W6esNANCuyMnZmxBLBpxooj5Q8WFQywQH3C18szGNj7qbmvRb
sybL3E0BAACA8xfRgirYcnL3pcyN/WN3EFG1qLg0a+UylNrZ5FLVEAo92ida
nQ5jlnDBQpeSNy3/fvWqn5S+DAEA55Y6ar3Zly/PXJI0ibqbmvQ0uynWyHyu
cQFtVNkNIbWmUMcZDKeFWkz6jNnTNm7cKLmHwVMIANAi0Pg1mz0pKWnXT9+T
0YZKEHO4GM3EnN4RquZbTVL0yBOmAxIdIWZWbFhBQQEEBwAAAMCptdH8locO
HZyXnGj6lVZapylPPTRoR4kQHsUv34LWVpv7SXREdLKiIdWGiLlzEv766y+7
q07t+QQA4KN4v4vZthN/l0Tqws7k622WKMHiul6G5juNGygEk4Y7mrJhn9aE
OpatiY2LrKyqoWdbwGAOAGgZaF11e012dm5CnEqwxLBMX2KaF2p/M6uhHfhe
M6vpGTSE2owhPEh/U9a49PRU8YxDHQAAAHD+4UX80XVjmv7MaDSnpszdtWYa
jdk3sVmQkfqXio6LZjFzmvLyHa2pTbR4m8NtRbpfMqevWvWD4xJAcSgAziuE
5VlLls6dRIt6mKNYgmuM7T7YaAVk5ilkVtsMzlLIglmfkTRzw/qf7dB5AQAt
iE3M/sWzm9qLaE0ou0XnGJRU4rgEd9O23IhCZ1bzShYu9bz4ups53G6JnB2l
P1yY7yk+IFAAAACcD8gzuotPbC5C8O/jJRkZGWuXTqP57li5KNIcEd+86oRK
lLlsizyvGlqbazJLiFgp28CDcbQ1xuh58+JPlBTbXTLgAgDaJ663uSO7aYGe
xemzuDyXsZ0NGm5JWtDabDOra41qe5GOimky1JtjirNVcVH66upqFPUAALQ4
2dm7E+KChaIomymS5viSwvOhFPhKMzti813cg1U05NAcsSVzcnrGfEliQHYA
AAA4D3GKP5v44KJY2e3l5aczM5dmpmnEZO/c71RcOw7mqjSRszYLdGofacYw
vrIsmDTUEm7S24ui1yyZvnb1GjtPVOW4MKqqqubNm5eSktLK1yQA4JzCBnln
VXXyx/KsZQvmjmNqr54ukxnUzkBLaehALuu232TnqNYUytY6w21H9QvmzNiw
cTOP0BdsWB4DALQUNEApMTFh9+opgjnSJstu6liaR/OJphVTZDMhIop+o46H
pMXHaAoLj7i51gAAAACA4VSra2tr1635OXV+7KkDYUSAErVaplMHi+nfeUI8
LC63+SY6DJMzaGGVREz6EwfUyXOTTp48KZ10g8Hw7bffXnLJJX5+fv369RME
uh3zJQDaBYL8XiZ394mS4khdWEV+pM0S5V4NEM0nW7DNGEIVYXMoGeGP56pn
RUdUVVXZucXUhvEcANBi5OTkxMeGUPFhibIbtHajKEFE4xtW3HyhkZNFtQNz
KE+OzaPSWJC+bkvmBJ7dFFIDAAAAOAsshdHvO3fMn5d4aHMwdT11KbisYjI3
BCmMfKKJFUPMITaDhqd8z0wN/3XHZjszoWzYsOHFl57r3LGTn5/fBRdcMGrU
qEWLFlmtVsyXAGgvsPURWXmglZnLFs+ZSHVeSyQrFcfGduQ49e2mpefRrBOM
uoyk6Rs2bZROt1uKHgAAaDJkJEmaE5+9ZgpL88Kym0J2+Gzj2RVYFCHNekp1
hKLo2NiwwoJD5EQTHQGCAwAAAODYbLXuQXw2tpFRZDGlp6WsXRJEYzm5Y5Ih
hEtbOCm19cacgR35acUFZZtJX7g9JC11blU1Dbaqqam9Y/Cgrl27+vv79+/f
f8eOHbILw4b5EgDtDJuduptG69Tl+TqbJYamsD4azocIZDT13SaYNLWmEGoD
N+uLs8NiYkV3U/GkYyQHADQFZySapCnk5OQkxIbRGrLmiFqqFITyGkNovtS8
RQvyvD1Od1M7rKYAAABAA3BkQC0tLf0ha/mCFH1lgd5uCmdZT3m5KDFmX5YB
lYtjl/qMiNxRrFEvU7X445PnRRq7RVdj0CUnRxcWFtrE+bAwbcrUjh07+jm4
//7709LSqqur7W7Jb+UFxQAAPghfEVuetWRJ8gSbJYKqvSad3UBdTcSoPTgO
+U6TDN00eTV5btTyvDoZSTM3btx41osBAAAahCC6rPPpX/ychF0/fS+meTHp
ITh8tHGhz+NNqDZn1NrNOjIxmBWjKSgosLvM9oU6rw0AAADgfMYme6TB3GTO
VLN9+/b5c2flbWFh+5YI6qdkcsyU6pgyOX0d0ZRoVJs2qLlOzcpC0SD9VYtm
rvlptfNcCzaz2RwQEHD11Vd98sknF154oT+ja9euEyZM+PPPP12uizpMpjCl
AtCWcdyhVPcpKSmO0mnK83W0qAdRe42hdEmFrnxpeVlktLbf3GUrXyArovUc
j+UEx8VGyt1NAQCgsYh6gMfsLjs7e3ZMEM9uSiRIrVENvwjfbCrn0ps5zGYh
aoLWbo7YmjWRu5u6VJPEJB8AAACoG16GVxCs7C8ar2E0mzIy0lYtUNcYtC71
RIyu+fGMGtfcp/y5isbykPkVam62TjOy8qZ0Qhtst2jojMgYad6lTk2Zd6a8
Qn6ayZl9+ulhfn5+69evLysri42NvfLKK7n36c6dO8kuf/31lzxFHtLlAeBz
OG5XYXnWssVzx9cejWYl/8SiHqLLYhG8hnyiqdwWK8m5o2tkRp3taGR64gyH
uyl8hAAALQmZ9yUmJu5ePcVmibFbIgULjz5DnL6vNptFzeMH7Qa13UwDFpi7
6SE2YYAEAQAAABqCIHt0WMls9rLKM+vWrZs/f5bx19Bak85m0lM/RiJziR5n
VNFyUTQqXGY7NbKlTJkjE9xQz2mTfl7HE5XdEk5Ph0VXdVg9f07MoUMH7a4e
aOT5ypUr/fz8/v3vf0uhWJs2bZowYQJ/ft999914440ajebEiRMNt5fCsgpA
G0Fc7LALxcXFUXp1WUEkKwsVTiO7uRWOpztz5K9Ga8uNxnp4pKezmbXknBZn
h8XFRlRWVnoMv1CBAQCNx3UgycnZkxCnokFnRHbQRTctj1ZQfFREa3QzUycW
psGxpGpFNEh/S+aEjAUp8pOPmTwAAABwNjz0LMFmE+1stfmHDqakzlmXGUST
nZq0PMdRrYlJYUfoB39is4TajSrBHMw2YnLVis3IcxZxRzI9mRGtWKBd98vP
8pNLTqUgiLbT6667LiAgIDs7m/8pbf/777/79u3r5+fH4/fffffdXbt2nfXq
gVcqAG0Om3358uWL50ykVtOjUbQMhCGU14zjsZZizmq0ttqkdTEqWE0qh7NQ
WK1RwwVxRtL0jRs3s5MtwFgKAGgynmntyZPZSQm7V08RiiJoEJMlnDpFiHH6
cDr1uabidRDE/NjmcLtFNytGU1hYKLsI+H+QJgAAAEBDcdjBnFvKKsp//HFl
6tzZhVtCBEu4I3LfOXei3qf8iVmLYs2t1uQep9SabVTTdWSTPnvN1IUL0quq
zti92TPJhg0bNhiNRvnplrBarVlZWY8//nhAQICfn1+/fv24WdXt8vB6zQAA
2gLkfqTZTfXqM/l6e1EsLfNnUTNLqRgawPKohCBbXdtvgklL894YNc7wDUu4
3aQvzlbFxkTUVFWzsRd6LgCgZeDTuezs7PjYEKEoym6JpP4SJnnCEBhOfa/V
WlQ8eIFqcEejt2ROSk9Pd5xz5jvBsrRBmgAAAAD1Ing+d4vvJo+HC/MXpM7L
SteW5zHDqUXHF6CZpVQlTqUMvFgzk87GUGdmVLRz0YzOJ/TXLgqvNYQX7Qqd
l5x4/PhxHq/rcX5dqMdZND8//8svv4yMjJS2mEwmvjwNF1MA2jDUY2TF8kzR
3dQcQd1LnFmpkUHFV5pK/ijmwDFqbAZa+G9B4vRNGzaLZxsAAJqNfGqXmJiw
Z81UWhPKpGeh+siJ7fvNzKJOWOnY+Dh1YX6BfBqPKT0AAADQcOospO54YrVa
t2zZkjx39taVk4k+LtCMmuE8SJxPq+TPEa3fmo36+prDy/M1KcnxBfl5Nlut
65l1OcX1e40KguB1h9GjRwcGBg4dOnTlypW1tbWeOwAA2gBCSUlJlF5dkR9J
i3pwwykfKNyspvA4bftNluCULUpqBLP+eK46LjayqqZaEKxuQz0AADQW+YSP
TP9ycvbOjlML5mhe2sBmUCO1i080KiO8inWjo6QvmQ+Y9NuyJsrcTQEAAADQ
MkglhCSKi4tXLM9Mmx+VvyWEps4zMQdUotAZVDSNHvOQcYvlZ4JbDDZ0au5c
vsulvEcVDDS7txpbLE8R/w1D+Q5sETkiY27k9u07yCSYa9PNX0GWH+HDDz/s
0qWLH6Nfv37BwcGlpaXNPD4AoGUht6zc3dROhugjcBbytWak4Rs0B44hhApW
rvPSZcoIuzkqPXHahk0b4fkPAGhZ+HR/TmLS7p++p6MNN5wyqylzeldhuc1H
mqR/iR4sRI4wvYy0uFkxmvz8QsgOAAAAoMUR7E4FTRK1+fn5ixZmLEqL/HO3
1m6IqGVlR8TYfLOaVo9iS5w2YyivJEUfxbh+h1hnyqC7NRXZk7w2Xs/FKNXk
4r+eqtbIjc9Em474cVH4jz+sEM8Ywy3hf2MVbc/9S0pKwsLCrr/+ej8/v86d
Ox8/frz5VxcAoKl4idOm2U3Dw87k62yWKJaSGp7/PtloalM27IvZBWmIJa3P
eCxbEzcrqqqqRrDxMo4AANA8bM7H7N058XEqwRLD3U2pz4OJx5HBaupbTe3w
MhV9VGiQoDliU9a49PRU8bRDgAAAAAAtARepVVVnDuzbX1JSIkVwS9WCrFbr
nj270uYnZS5QVxwMZ66n4Xamqku1m7n4ZrY+LashpRUTojrdTUUboNJzjDbW
pIwHvJKpLJ0pe1TR2i68SiaZ3FoiVi0Mzly6rLq6mttS3Co62c9mNT3r9Ely
PCaP5OCrVq3SarXSu06ePJmQkHDmzJmGHxYTNgBaDuf9vjxr2bLkybSoB3U3
DeejhPIDGlrjmtZZjYWtP5JTSWtbmyMykqZv+GW93bWAIwAANIq65mCJiQnZ
q6fbiyLZiryOj0Jk9k5GJKmEAVobbUaVlI1WVs9LxfUspqDpZkeHFxQUNPx6
AAAAAIBXnIH5NvHP33/f7c+48MILb7nlluHDh48ZMyYhIYE6uzBn1Opq66/b
tifPS1yxUHUyTy3mRDJra81UYacF300a2bqnilUyCnEId0e9YGj33mdBGup3
ZFCLHrnUmkrD82nMlJFmlLWZIslE6Odl0xYtzKisrBTPSeNPur15syadTufn
53fRRReRayMvL+9cfxwAwCtidtND4UJRFPM1ZctYTj9/NF9rZMC36JixQms3
xxzLCYuL0ldW1bgn0AEAgMbjNpDs2bMrIU5lt0QKZr0gRXnzKboJcqTNN+6F
YtRIQX+OjWGiu+nSCenpqTaHgzHECAAAANB8bI4J1bZt2+6+++67Bt85aNCg
vn37du9+Yc+ePYcPHy4r2k45U16xdcuG1OS5qzJUp/Yy11OTnq140qkXy8mp
4Y92UzA3qNrFCH0V96501+6dZaA19vOwoKfRERvF0vI7UhkwT136W4VQe4hJ
b7dEL0j4JiM9tbTstGt6/0ae7gZ7nHrdeeXKlffee6+/g0cffXTHjh0t9dEA
gHqQ3UHCysxlNLvp0WhavM+ktRnUgiFY+dEMrQnNHMqHfRsLOuBZrBckBm/Y
tJEtkGHkBAA0HbcBhMeUJSUl7Vo9udYiczcVXRpULMep0qMi2lmbUctNpmQC
IFho2jSeJZvOBywRCbFa5m7qvQIsAAAAABqOWykoecT3lk2bL7vsMn9//44d
O/535Ahpf+ld5FlZ+Zltv25PmT9nxULNsZww5npKY0PII9cBay3U41QKIWHO
qESas9SdhvPSQFpfU5Hfp9ZMk7rzLc7CpkaduHycOTk4TF1RUSE/HdLZO/fX
iwu7d+9+9913u3fv7ufnt3XrVqlLbhZXzzQCAIDG4ribrNLzkpKTkeHqivxI
e1E0z01Hs2J6lJZD841mVDmDNViQ/rFcdWxMRHVlleMSEOwwnwIAGky9w4WQ
nZ2dFBdiLYqxF0k1oViUtyGEpVwOEf9Ea7PNyEv0htmMQSw3mopLE+o8fFS/
JXMCz24KqQEAAAC0IG7GrtmzZ3fq1MnPz2/IkCHk8e233/b2Jl5Fyn6mvPK3
335LTZm7KC1y3y/T7OZoXsxRsGjtR8JFX0oi3A0hNgNLf8qKRtFJmhS/j2YK
Fh+NKm4v5dFS9IdiJULsRdHrF09bkJEmlbbnPsAKzoe4jfTUqVPJycnyLWPG
jNm0aZO98XWpAAD1IL9NbLbarOVLlswZb2XZTWlZKO4gdFhFBw00n2rcR4g9
D2HrjHSZLD1xGhlIZaLZ/RoAAICG4ypBqLvp7tVTyFDDckCFs+UbjUvz3ILW
phpRDdgjX3SjEuSIyn5ElCBxcerCgkNIlgUAAACcI2pra0eOHBkQEODn5/fF
F1+sXr3a399/3LhxdmqlE2jMoOAMFLUz/Z01Sl5e3tLFS1LnzdqwdGKNQScY
I2rNGhpgTutcaLjfKXmkwt3C6x+pHM42Sk8/2lKzSUkMaMAmsz+bI9Ysnrl0
Yfrp06fqOXfnaGLUqBkXuWDIlUOumVtvvTUmJub06dNux3GburdgPwE4H+Au
3CUlxRGRmooCvd0cwzKlUAVKMLNMyLRUXyiabzVnJnCjVjDri7NVMbERVVU1
0nnHaAkAaCx1jRvZuTkJccE2S5TNEkEnmUYt3Bh8t4lpXoyh1FX4qI6cVsnd
lMfpQ3wAAAAALUtRUVGvXr38/PwCAwMTExPJFr1eT/4MDw/3ur/NgWybcNRS
tG7dmvnz5i5PU+dvDLHT6lFkVhYuupgaNdyj0hGHrvyUo820MOZ3KsvyatTy
wsq/ZGmzliwuLy9v+5Ofv/76a/Lkyb179/Zj9OjRIywsjL/k2fm2/3UAaBu4
5LsgN87y5ZlL5ky0/xnLs5vaLXSA5S79goGmp0NreKNSSek+sDANFl9gEd1N
N27cqNTVBgBoH9SVKykpcdbu1VNsR6NpgVfSLMho2pRmU7oUI18q5RKk1qhm
tQUjhaKo+Fhtfn6+I7sp0rwAAAAAzUVu9jx8+PANN9zA3QVjYmL4xtGjR5Mt
6enp9RzB7iGRyZ9lZRU5OTlLli5InZewasG04/vCbMyCypKghrN85hqaAVXp
aU/baS4TMLOa/koW3Zl83cJU/YoVK2pqq8/ZVdAUPM+4/M+amppFixY99NBD
5OKJj49v1Hvr2QgAIJrQ3ydKIvTqysJomt3UFGk36Wm4JRtdqUs/eWJRsz/R
ztLEn4s1anxWuD/hgpmczai/cjSxMVHlVZVKX2oAAN/G61Rq9+7d8TGh9qMJ
NkuUUBQl2k6VHo3RmtIsorJA3S3MOsGosxdFbsmclJqewk41SgwAAAAAzcVt
NlVZWdm7d29/f/9rr7128+bN0iL19u3bExISDAZDQw8lqzTFnxcXF2/btiUt
NXlJesKaxZP+zgklMzSWkCfcoeyjiU0oCmVPwvk89tgudcqcWZs3b+T5ENhJ
cS4fK0X9Jk25IZ087t+/XyplZWd2+IkTJ1oslnPdSQDaG7KhdfnSJQuSJ9mK
ZlF/IQvNcVpL7X466npq1Dq04HC0uhpVM3kRQ+qsq5NvUbBLNK0NebTEpCdM
5+6mWD8CALQsZFSJi4vbs2a6/WiCvSjWXhRtN0fZi/SCMUKUHWh1N8Go402+
RfFeid2wRLATGhsToy7Iz3NTFiBLAAAAgBZBEIS5c+cOGzasrKzsrDvXo805
7WY2lhPV8dxaazMajRs3/ZyWlrIgLfGnBZPNO0O4qojGG0vRLz4hrfDXsPnz
kvbv3+tzS8Z1OZQWFRUFBgb6+/sHBASMHDlyzZo1DbqQAACu98LnX4ydFz99
QXJoRnJw+tygBXOCFiaFkCcL5wZnJM0kT9LnzmCPrM0JcT5HYy1tzkze+HPF
+0PagqQQch7Tk1VzIr6PjNBUVrq7m2IwBAA0HzIV/+678ZERuihdeGykLjoq
PDYmIiZaHxOtY49odTbyQzl+K9qio3RRkeHyLa3f4qL0s6KjYmOiYuMi42Mi
o6Mipk2dtPqnH6XTzcSGjykRAAAAQNtBVqjXe72e5uto3N+UPcpENttWVFT0
67btSxZkpM+fNy95Nppbmzs3KXluUlrq/D/++MPG0ynwX1JwGqUVpCHXRl37
bN68+aWXXurUqRPPgPqvf/3L8y2eTwAAIjZ6XxzYv/e3337b9ftvu7P35OTk
5OZmZ+fm7M0h/2XnZpP/9rKWI7acPc7naKztpb9Zzvqff1m6eMnmjZv4n0q2
3Fx2Hsm5Imc0u6y03O6aSAcAAJqMt5FEgD2tsbjpRz///POyZctOnaqvZus5
7xJ/tNW66wWuf0KUAAAAAE1AUsdOnjz54osvHjp0yF63VG1CDXRpJ7mJzync
KYI4/cC0rTH4yrzH0+PUrTzBX3/9NWPGjKuvvvqzzz6zOy5Isg+mdgB4RxxA
pf+9vMTXqmyey1XAAz7UbNq0KTw8fNeuXfY2o1dKJxNuQgCAc4dNFhrWRkY/
X4H/XGTKGhsbO3nyZDKhVbpHdn4CXfQ1+uCQIALOLwAAANB0CgsL+/fv7+fn
d99997XogQW7LEKfI8Xsy7V+TNXqxOWHEWc+ijuathTSebdaraWlpdKWCRMm
3H333fPmzauqqmqCuR6A8wr35Qm776ystBlSU1NfeeWVFStWKN0RGYLNhkEP
ANDSyGN5MMi0CJ988smwYcOOHDmidEec0IIIzufyigPK9QkAAADwZdavX3/x
xRf7+fnddttt9Rd+ag6CN02ezdj4s3P0se0P38vu3oQ5ef/+/f39/ck12bNn
z2+++aZNzUUBUJw6hlNEczed8PDwAQMGJCUlKd0Rdxxriwp3AwDQLnEr4il/
BA1n6NCh11xzzcGDB5XuiBNlrysAAACgfSCJ1FmzZnXo0MHPz++ZZ54pKyuD
qAWtj+dVd+bMmcTExDvvvJNcmf7+/uQSPXr0qOdbcLkCAFqEyZMnX3DBBeHh
4Up3BAAAWhWbh9UUNJbBgwd36tQpNzdX6Y5ICDCfAgAAAM3BTYwmJib6+/t/
++23bpknAWgL/Prrr2+88cbTTz8tbamqqiouLnbbzSaLO2u9zgEA2gvjxo0L
CAgICQlRuiMAANDaeM6dMJs6KwKDP7/99tv9/PyUNZyy6gC17ImV515VsDMA
AABAu0GaFO3cudNtiyLdAMArbldIWlpaly5d3njjjV9//bUeaz+uKwBAwxk3
bhxRe0NCQuClAwA4rzjriIdR8awobjj18B+A1RQAAAA4O56THLlIzc/PLyws
rGsHABSnnqvxu+++CwwM9GMMHjw4MTGxoqKiNfsGAGh/jB8/3t/ff8aMGUp3
hAJxDABQFoxCjYIbTrOzs5XuCAXnDgAAAGg+P//888UXX3zTTTedOnWKb1E2
zBnyHdjrDRPzfOnIkSPffPPNZZddxs2nmZmZDTkgAAB4wseKCRMmkMEkKCgI
QwcA4DwEQ19z4IbTnJwcpTsCj1MAAACgEXj1OCXExsZ26NDB399/5MiRZWVl
SnUPAE/qn7R7RuVXVVWlpKSQK7m2tlbauG7dOqvVek76BwBov0yYMIFIxunT
pyvdEQAAaG1QGarJ8B/t9ttvJxKkLRhO7bKziRMKAAAANBar1frxxx/zGuXj
x4+X5CmkKvBp5BdwdnY2ucL79u07ffr0v/76S8FeAQB8i0mTJpHRo02F6kM6
AwCAT6B4jlMAAAAAtAiZmZlEpnft2jUlJUXpvgDQaOqyIciX1NetW9e/f38e
v9+xY8dRo0b9+uuvrdhHAICvwg2n06ZNU7ojAAAAfIy2E6oPAAAAgGby/fff
b9++XeleAHAOsdls69atGzFiBE9JMXPmTGm7fB+FegcAaKPAcAoAAKBpwHAK
AAAA+DTI9wjaN3VZRM1m8+TJk+UB+/Pnz9+3b1+rdg4A4COQ4YKovVOnTlW6
IwAAAHwMGE4BAAAAn0MyH0VGRg4cOLC0tFR6iVfYgccdaN94psQ/efJk9+7d
ybT2wQcfzMjIqKmpqWdnAMD5xvfff0/GhylTpijdEQAAAD4GDKcAAACAL1JT
U/P+++/7+/sTOS4lNYV1CJxXyC/4Y8eOffTRRxdccAGvj3bFFVegfDYAQGLK
lClkcPj++++V7ggAAAAfA4ZTAAAAwLew2WwlJSUPPfQQkeCdO3dOS0tTukcA
tBXKyspiYmJuvfVWf3//V155hW+U7Kv11J9qpf4BABQChlMAAABNA4ZTAAAA
wLc4efLkddddR8R37969f//997p2gy0ItFcacm1v2rRp//790v6pqak6nY7c
O27HkUfx45YBoB0zdepUIjcnT56sdEcAAAD4GDCcAgAAAD7HBx98cOeddx49
elTpjgDQGjTKpOm5M9nSv39/MuPt1q3bu+++u2vXrmZ+BADA55g2bRoZBCZN
mqR0RwAAAPgYMJwCAAAAPofVaq2srKzrVZiAAODwe0EQhGXLlj366KOBgYE8
A+o999xTUlKidO8AAK3H9OnTye0/ceJEpTsCAADAx4DhFAAAAGj71NTUTJs2
raysTOmOAODD5OXlff755xdddNGgQYPq2gfrDgC0S2A4BQAA0DRgOAUAAADa
CHVZbIqLix988EEir0eNGtXKXQKg/XHmzJm8vDzpdlu7du3w4cN/+OEHQRDc
9nS7JfmfsKwC4IvMmDGDiNEJEyYo3REAAAA+BgynAAAAQFvmwIED1157LRHW
ffr0qacUFACgLjwtonKef/55f39/cotdc801oaGhf//9d6t1DADQasycOZPc
5uPHj1e6IwAAAHwMGE4BAACANssPP/zQo0cPIqmHDBny559/Kt0dAHyYejy6
VSrVNddc48fo0qXL+vXrPd/rtebUuegnAOBcEBQURG7wcePGKd0RAAAAPgYM
pwAAAECbQm6NGT16tL+//0svvXTmzBlYaQBoAg28cQRBWLly5bBhwy699NKK
igrpXVar9Vz2DgDQSsBwCgAAoGnAcAoAAAC0WaxWa1JSkldvNwBA06jnbiIv
lZaWSn+aTKaePXuOHTu2oKBAEASbg1bpJgCgJQkODiZq73fffad0RwAAAPgY
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
S/dgCk4xOKWT9K3MMW2j4LRemIY1/DYlJYXP54dHHJWwpJQ5pjLmOi2SyclR
fmFXLtKaytk9yiVk2r5SFXv9pivPLTo6miNXo4zUCg0qTm+pDMAp9Xrt7gI1
OJp4qr6Fg1NjS05OxvP3X3vttZ9++iknJ4d89GKks0bg9BkIQnMzAKUuOqxN
CmOBHk5Sf5hTzN/cN8b13ms7zhSc1tTAdefp4aZOCoNZh6oKTplkE8WXAzZ/
hYHeIc62FJ/WkddqnCk4rRvj3urfvn37Vx/fz0WFS4U4ximDTOdl5ZkdAFKv
sXPBKZ2qT6fqW4Vz/jokBFBwisEpV3RKIap1OAWn9cXIE35ZWdmJvyP5fH5i
YqKsRK5QlhCtKfAihQxfp9wwti/wjIKwFOWlUnFdpioBnlOQ7+XjHRBwQKGQ
4RtDvTn7ljr/l1q1DE3Vf0Sn6luT80T1A5zi7xDuK7DHjx/v27dv2LBhGJ/a
2tquWrXKYBPj5bppD3o9G30myvsPFM4RPRfo6RhNgYhEAyUk80yhn0OHkqJa
ey3HmYLTWli1FacIyqmTQ2SXyBTyMKo4fQ5em3Gm4LTuLT09/TdfPz1wmmV+
7ke9lr5YAMHpSmEBnaoPwSmcqk/BaT13gztbCk6NFKd05r4VOFWc1h+D4kyN
Vo2n53v67i+8cw9dkoYRTcmrWX7aKJbL0N4Nd43ONIVM9VCmKjkUdoTv5nH7
9m3cMX1YQTWo9d6o4tT6nKs4dbZgcKplv0/UasNvErAe3LytWLHC3t5+27Zt
3MIGvLRuUSqo4cyZihWnRpPBIbWLC2QSD+kpIQ/rKSFpEpzaeR2MMwWnNTWs
ONVyYpzqw2qTDhE3VZw+f6/NOFNwWvd269YtA3A6n8pN678vFuQtE4lXCguW
Hz9FwSmdqm9tThWnphSn1K3DKTitLwaeNdLS0lxd+UeOHJGh6fD4epTJ4QR5
LPIEr8VKeFjJW/Nds3LuOVYkU3IFqNdib7jyeafP6E3bp4pT6zDj5FDUrcDd
BWrLV5xyzST/BAtSqVQmk5GPvv7662XLll27dk1bASY1ZrDVNcOp+s+MUJqg
+7FeD+jRZ4o6vrev3ThTcFoLq5niFBwgjhKSxjh9Hl6bcabgtA6NG+PUz2Cq
PknOTr2eOk4O9Vl24dKjJ19ucKqmU/Wt0yk4pcmhrNQpOK0XVlZWdjIyiu/q
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
WHLJd3jf12N8N+EKtbp5+jV2Ck4ty54JTpn4pUI8tZxRYM6OT7Nv0cq+RWvw
ate8ZYMGDeDbVvBt43btEdVEnFCYM19YOE+YOydV2LBxExYn5uIZ7vME2VhO
ieWXc4R6HJKLOkH5j/65NCnyDP50TkJqo1dfhRP/s+6C9sC09TAbFKo8E0dA
zeFwVwZFGr2KFyDWOleQtyjzzny9wKHihZk5uDak9swjk+uZ5jE8kyHGeF8M
ESVANU1gY9sIrJkZl9Zu1OgW3bu/7enXtFPnyRdiMONFMlRYFWgtbHxmAdsA
qFCdz1Jl4G0HO04IOYLn7z8TmVJwamAUnFqnU3BateRQ2MWFd5ctW/baa68N
GTJk9OjRbdu2/frbb8T37jJT9VUMPsUzzTEj5RJCLBgjSBBKQ5WmY35W8pZL
rrCoNSEl9fL161wqxa25NuCRuy+DKdu4mwaaW/JW12B2wr6ujIz51ADtciGq
QQNqDOsoOK3IMFJ78uTJiRMnXF1dbyYmyJACGZM3fYExWqjducQ9KPgE6NWr
x99R0Rgn5t29e/7ypQULF7/Ru096ZhY+PT766KNv1n2LT4kiefHixYtXrPzM
4GQAVbm7e4KPUJZ5VW5eQZPmr8hlGGxCVbObl/fcuXNR4RJHR0enPa7oqizJ
K7wz2HFo5KnTRtdUycSPJq1fvx41tfROcfH0GbM6deoQdeasl7fvmFFjJVI5
/lFg46af27Vr6+3rA5ZBGxYtWShB+m1QDHwzSKQoo5NMjoq18/bZT36qqI0b
Xwjcy5C5AJESNV9c4O3teeDAPqlcQvFpXZkuORSa6M0XMMmG8NvtsffwVH2s
jRz43tTODv2HT138ev9BszY6zdnk0qRpq5+jUu3tXoVbZTHbfrx2c9+x43lZ
6h3XHvQaMa77wOH9353crf/QOT85Q/mliE1BxdLOHTF3Ojr06/7WiI1/J+1K
LbGzfxU2IBt+tCfjyVvvTunk8NawqQt7DBgCdjp7854mzVr+70QqnKovKHdK
Vtq/2hxjWCyUXeEcOGL6YtB+JObEMU4V9q+0ILsDW4EyI6ctgZPfs8pm/LgD
NPL1/o4TV/3351Pprdp2xBmXwL5atO8IG2yQv15Uvv2SuKNDX9jgY4k8kRaM
ksPIcV0HDB04fhqoZ9ZPTngcVu4Ker3f0DdGfzjow9nte/f9wjMCKXW1Oy4X
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
cYpgHTPhHek8dSh1gbBgxtUbNjYNGTll5p1W/QYO2vjLvNsQVH589mLj1m1m
JqbPTs20adwYJ3WafPJC6zf6YcAIKuz68dQ+Kz6fn5GzQJA78cTZlg69J0We
wTUjyWUBnmI/cP2GXitWzs3MBm9nJaTZ2DXpMXfBzLi0hcK82fHprQe8NXKH
03xhYRdY26egPKztZHTznr0mRZ6GWlldfIDcGUnp9q1aT7l0AxLRrLz+q798
fdY8iCVTsxq3bN1tysxpF67AkpkFgzdubvXWQJz1qftHk/usWAmTSYGaT51u
2etNUPMCYWGvRUt6TJ81J1UI1k+9GNuqdx/c/rnpggYNG83NzB3w9Xf91n6F
Awu80qXLlAvXoE5VlN/5oymgqXNvQQXsxyfPverQY1JkFNhpz3mLesyZOzdN
BNbPiE3q8N57TTp3RjFO81nt6zPkpi8nOK3ouanOwGlcoN4C+T43hJl6P3IZ
/QYdoPv+56wxUY/x9Pybhrtgf+oycuMbFe6UATi7wejOx/jL1vBTPO/A8Gc7
UlUFP0CjEQB/10hPuW2rDUR9WcEpV3FqLLcz9rPnzvfq1YsgIDyrl80GxTCZ
pStXzJ23IP/evWKlPDc/b/yEST9tgMESC+7ea9Gs+SfLlhbeeVAsV529GNOx
fZfZc+fkigvAp7Fx8R06dhVLimFkwjuFrVq1mTlrXlJaOmakf2zb4ejoCPaS
l1fQvGkzbpPcvX1mLVggkch+3frHqtVrUe4qVbFcNmPWzNVr19yTSsG+rt64
6dD7zSvXrkq4M+hRGp22bdulpKThLnz7w38WLVoAdofyksPJzsUMepJ7enrP
nbNQfO9+82atly5fln/nLuj7uYuXOnfsMmve3PyCu2Dza/HxHdp1vFtULFPI
QWdbNm+xfPlKUBLsCJRs37nL7Dnz8gsKwdvr8QntOrS/W/QA1Dxo0Fvbt//5
QCqRyhRJSSlt27TKK7xz9/69Tp27fvr5Zzt374lLSflrp/PChQtRmyHFiktK
dOjZm4hyn8mUrBKcVpF06U/MZl7BSbHPz8fb16fg/l142qtURAzMnNJKbjyE
2iQzqhCfcqOnylkWyuWf3PJILw1FpGj2PZJGK0kZTuQKPUyqwKpURv6tYgSo
JASxQeAIfPmTOBswCAZYUDERNvA4kDxZJP6GLgCvkkN0cadgHrSH7OiVgNP7
gYoZ3uftxr8BMRFrVcrQ8DC+6/+zdx1gUeRsmKLYFRAVUQFRpAiCCHbFrhQL
HaxnL1esZ/fs5RQEadKlivXsnt6dFRVkYRGs9G5BYCl2gf2TfDPZ2QWRU/T4
78wzzzyzmUwmmU0yyTvv934e9x/ek7DZ57airwya0mJIUHcaLHhbG3DK8dIO
zFLAA91TMQ2SS0z1Ys32CXVTKEIO0yqAaenORUHTKsCPkohsybIlsXupNNHl
6FrQ/PRMFwKbdH+6EK4FyisrLyAU0Tsx75Qpqme6mOanF4dMy+KuFajY7o/e
rTzNX3r4xq5bzyn2y+CQLJYLfFqfdEKjxZxYLAmLL8dW/0zOvsmosu8pOrof
JAsyRKxalF70kNMw/OuTUiGBTjOPOk3IcGVxYd5i2Pbhu59PxS87HL3zZgEG
V1NF2eJHkS5kBRCEXt+A088Lnw+cViQcwj/5LEgSF1rNLDcClBIZpkFNXFPR
tJllr310YiwCf3CGdCr+QWsvMnWv4abi+dS8CpDMiseZwNdIneWFc6En8Xm+
uOTjh5YtKHFCZFVc5Dfg9MuFD72nGh5wWt10MYJlh2I2ETbbp4QcXkRVAnRD
IKaGYRyVu47G10YIOdgpbC9vElSTH8Ek4Is14Ip4AsOKls8RTDunaTBsSxb7
qOKxwEqtpuD3uZ9FvgGnDSvUBTjlME4zxU9hBHXiDR6Y6mPC5N1kzZmz7B6k
USv71tpaww+dsEp6JNW4qW1yxmCvwFaaWmNPngeD/bFn/2zVVYMYoWcTkdKs
/i7ualaTKK+S9Smfa7Rmg9bU7yDSip8kJSVl/vtlxjQ+Jddw3SaNyVPGnDnf
pms3jJqSW6O98V5XVStbCjYS5DbH/NKNJm0VJsXfBT3VSbwko6070a0n3n2E
sjWNOAwAL4aIH+W379tnkE/gmDMXUDntH+DbOaTk2Sfn4nJOsh17/lLT9h2s
k1LBLZRDatawsEPGW3fie91PAelX7R8Wa//wI6DELTqqWFy+ic6OPXOltUY3
gujmgrppfxdPNStri6u35ZSUMAzL6Klmm1+6LisjNfzISdYzFK4ClPwbcPqh
wH0v1ANwisfkmmYyosgQjr0A4JlkcI6LZAYuiZGfDmhiP8VeE5yDUPZdEME1
82ESxIPhQJj45Kem6RmfrQU/rFqCCJgjVVeAESGo8cGir8noDcUP5lSn+ujN
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
tRpuPNigB4qJOrAx/aQrKiR6AY0d0OvE7h8ZPJOh0eJavLsdsmHWRCMdDYPu
6uglct3/l7563aKDtsAtss672Y7o302tPXo3oe2c23I010I31VBur9wOv2Xu
RGxHk6LMM27oLdajizKqdR8dtTPuS4VxDAgsNqR/8qvkv8E4RWHr1q2AnSYk
JFSxwGmdNE5LAWUCwFAAlFEKEuJIwQuwgUUHeGMgoFJGJrEYHIWXsDE4ZXG5
gFVQxFmB+bmgpCz7CWaccu2CqTtvEAfAPLFiwJQErGkwukXZc4I4sRATLTCr
9CgQY9YxgpCEywdsOrR/WloCZs4Ut2SZclRqEkoi6XmnkHU1BV60KJokeobF
RQwyxkGr2BjGEQ88JYB8uQxAqFSAf7D5RItaxBu5GxeS+tcwTrmvnsDAwMaN
G6N28scff0gkqHgnBPP8hITEwrKyktJyEddUgAF8Lmon8Sd+DciutDTuToKl
5QQNDQ1DQyO0RR46Am375KkzQ4cOM+ljrKOt7+g0JT07hxTvxcnTp4YONjU2
NtLV1rdzmori8/KfDB06tJCAnOA36vjR31asXoUa6uMnz8zMLKKiY8ZZju/b
bwAKZy/8GXcn0dzcsk9v42GjRgeHR2I1iafPzM0m3L33YOIk68F9BxoY6E+f
/l16bi6QRc3NzVU7q3Xo2N7ExOTPK1f79+/PfFAoLNmweYuRkTEqdt++fV3d
3KF35ObnDR4yPJYfbz5hfL9+/bR1ei5ZupwZEEpKUflNhwzF5dfpZec0OSMn
96s98Br7BVejlZVsxTIjmXlPfP19DgSHlgiKPgTd1w7pfzS+xlMoZuXKlba2
tui4rKxMTU3t4sWLKDIqKkpdXX3dunXe3t4jRoyYM2dOZSVDrra2traxsQkK
Ctq+fXunTp3+/PPPGrP9u71eIv3atWvR+0JVVTUzM5NGfk3gFJRCO+sYWa9z
dU9+650i/OVSWjNFhb13ylD8nvgS2caNBth8tyu+EKXcyy/t3NNw2q+hKNkA
u5n97ea63XuNMtkR81R3qJliB5VlR24SI3ohx5C/cqD9HJMJdm733nqnVe2K
E+gMHGX2w0Z07Hr3VVP5tn3MbLdezcSFSXlvs8ZZVd8YHaBMrFY5Y8bpI1xI
dG0jGVmw8ce5WTiha1H+e+IFuoNGm/202YWUs5/NzF3xxTj+TqmaTp9puw94
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
qjt06EBbtbGxMUx1gNdURTROQ0NDa0GQqEk+MVHn8kVLi8Sdd4u7mClnLetr
FQEQJ5FWS1BOpRdryKdMhH0xaCTLYmVlAUSk04JykR9zFj8po8b7gFVyb1FT
YWp+Mp+2AVrF+uvhojc0z3JuvNgz+TuIExq00P/r7OyM/nHuuE33DS1Aqehr
Bfba2try8vKoMdOWPGjQIJiuo6769u1bAJhOnTrj4bEvPvEeYKcczLyGh/aV
UVO6PSsq/uvStV93O//0w2KL8ZZt2iicPHsOFXXZylUqKsrTZ8x09/DiJdyB
xCh++YqVnVSUp8yYjuJj+QnPBcXp2TktW7YETBhgfy/fABtb+0LimAy9swi3
lmFro+XM1Rs3aX3BC1te/hP06PIfP8UyF/ibBX4+q1auW7NmDXz12Lp927wF
81Hkk+fFjRrJoRhPH18HBweR8gb5uDBkyJDfTp9Jz85r0qRJAZECBizXy9fP
2sYOPg1A+ad+N9PVwxPVi9J9OXIcX/kvEFTvVkT6FX/NycrJ9vbZj14EqNd4
eHjs2LFjEwlb2LB169Zt27ah/XYSUAL0yti1a9evJKCD3SQ4k+Di4oL2e0lA
cydXV1fARasHNBSjlowSwE8vLy9VVVW0VB83bpyZmdnYsWMHDx6sq6sLoOjJ
kyfRMfpn0avq0KFDFRUV1S1JUZqDJBw+fDgyMhIlO0LC0aNHjx07hvbHSfiN
hBMnTqCU69atW79+fVhY2OnTp8+ePRscHAxsou+//17I4rFfk3HqkVbhHCdQ
7z3AeNKUue4RG849cL37SqPPoJ/CL3unVO5OKJZr3swrGbtkAkxy5p4wE8vJ
cz2OGo6x8kx9jxmexM29d/r7Dho9lh66tZ94d4I9OjttZ2B/2+/Az5RHGlMj
7cGjFwSdx8CptBS6nY/IA5TQcsmmcQtXo2Ortc6mM36CeAbkTK2ctiOgr/V0
bF+fXAWAp3t6hdagUXO9jsk1b0HcUREoOK0CQ6zjp6CfLnGCrr2HmkycOsv9
0LrzD/YmvcS1O3hl3/03KE8i8Vrxmc+wjhvXVP/ly5eolRYVFRUWFsL++fPn
RSQU/jcCrWkqCfn5+fAzPj4e9UrUI3755Rfa0Shw+ukap3eOkGsPszN5PA/P
/92DMk6reMGvbhxA0za0LmAVSiMqYw/wDmxxXzn95yloRdBPvlXTq75r38YE
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
c3Oj6VGrRjHDhg2bMGGClpbWmTNnaszwk4uNLnz+/Dl6WVTP4UswTkX8SUIr
BWwQS4+m471PSuWW6xlrTvJ3J5R4p1W5p1aAcikqAD3G3p3SK/FG8EkPks+e
O6Xrz91xvfsKg6vpjIMnlMCLaI36ovJj707YQH5v0su15/kuiS9oSVCMjFwz
dLDv7qs155N2RD+BIlHdVPTTJb4Um/mj8hOHUz7pGOndn1G17+5LdMnee68A
+2Wr9o7W1DtN6JWMD7CnqrSKbdeyUO2c+SVsAiGtVA2P6AvAp/AwAzK+MU5r
Cx96Y9YbcCp+7dML7mjgFTIIJwucsoZXaP5sMaiXXjcVJzJ/dl4yBc+fWzR9
eORXWWzqjkUXsTEaRTx4Ydj9wdgBFGAhMGPkW4CJunWCfFx+ckL5oAl2xsm9
9F6wEbipf08NPGNXU1HaPM8G+9a5HUrgpki0QqH5GPboQvKZLo8m6kS8NGLr
AjR7H9FHb6KpkZa6ysk9Pwl54Qe3LDDWUhth3JMsTzr+5vITrldMsIwMA5xu
mm+zfvZ4vOCKj+iirJhxyg1FPr7oPsRQq4+OusUQQ1LxySgS7OOIeZ04dsqP
+AacftHAXVBwu0bDA04jiW1jZBUvmKyUQ17cCLh3aDtq1WDzCJaVlJuUddY1
IXwLOguUzkqQgMAulUNzz+178Nueyphg+LjwHn8OCEEt7fE5zwdHfyXfMiII
ZZohh9MeJ3JnjGqKDw4QrQwfvJhltS9Y32ofrzVYcYplW6ftG3DasEKDBU4l
XUcRp06ApsJxWwPD4Ud+s0sj3peS80GqFEBRgD1ZhJPKlmbChQ4peVgElYVb
Mac0mRrpM1Kltinp1K+ThEm+4ao1GI9NzYNLxDxYNRgQ1Skla1pa7nepOTVq
nDbw1fffCh+tBQCnX4hxClbwzDem+IPE5SUx20cjMDNoR2ae2ZsYsQsP5lg4
CI3MIaJ5QvXBE5v849EYjfMPjzlXxTAeqZjxVjz9yxv+9yJ3vI8+wM6UMM1V
VEf04oBJCLi25xH+J48UNTaceTswKtnhXMegQD0tvuaXcHj766ggkap8PKM8
j2rEj9iJa4QzDwXVApQzTPwqeUyGGWf33gndVXrFjxoKiV5G7AP89IcvrnH6
dRrb1w/VPxBA4PP5DQQ4pRgmhrOKS7gYF9GoZKDOLTt2zlv0IzlmYkQu6TGr
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
ewNpHKi9ciQ2/bRXyJiHapnOMPXgmEbM8aTszBCcyzeBLamWGKw84J6yb511
rgBLt3M2R2tZxrkUxwjAaUVJxOCUwadT0rBXZ9O3Bnf6euEkxe1JaVnjr8ub
Dx9Rs1HjwWG/DnD3aNin3/hUvMx4eWbn+Queqd9okPuOCYqsvhu3thk7cUIq
ric1wH17wz790QITcDknVZcF3zzXsBFad/zlW8+9+OLIsxeI72jOyFMxVWvV
HpeSilqr16177xXraO2nD5Kv1+/abfAvEWj6lQ3bW40dM1l+G7u/Km4LPT4A
TksQgFPXNACn4gCnFHLS6Yw7d5o2bXw55Rqtg5N45Wrt+g2y795Db3n4+E6e
Mo0uJpHIBgwYRIN/0ZJLf1jywgsvSKQB6E8fX3/iL4op0J0//0CPzNiF9c6d
Zk2akppT2CEt8crlWg3q0Wb9/CSoWa6SFC1BPmzYsPkLF+Sr8eCgxQYNeu1s
zHk0nXXndpNmTVH3aKx00tVrtHvU3VSoLI62BuC0GBkMhjOnz/r6+qPTgCYL
NQ+dOSmoOIEhuUZybtesWYs70DRtL3ctaHhR/Lk6DWWhONmvW3VmFbVWQ684
Zmf1fXv3iTp+As1Jz8oeNWZs586dx00Y365l2+mzP8rL14jhI8LKiq1FhQ3t
cmZ2llQqpeH59LjzealBFNlMnUmlCdXnITsT52XqJecVo+cSlpKS9wztJBlK
fXElpqLt1/+tWu0p9JZH6n8Dx8/2IqWRcHEomg2VeHWihdv0fOWbsHN8PMht
2p+E53soHo75fvNbsxZhcJr234AJs2gte3MP2Q4w07QF1MN0mo/UZOUmalUN
isc2TZxPqblwVbphh/whHaht1x88/fSz3EYZFprGJGj1MSdHNVlhUsYxVf6Q
n+V1zPfudKcwmFX+h7MBUBbNJ6g0yQDNBOsgKSuA00cXgFPxGoBTgVSh4DSQ
lwsixNpFM8GmKTabhJGXdA67p14i7+IaZDyMmczWVErglViixJUrz2HZPqGm
NvOZimYhfLDJpCCmVUXsFG9i64ZY1HQLYYsjM7VLjPxsG1xBkyRchWrLwmkL
p77HkNWEYLY1XnoNO2WqAJyKS2IGpzROf4ICQ9EPEq81fuudOp06Nnl3aO2X
O/ZZu6Hx24PfCd0/9rqy2dtD6rRr23zUmLqdu/RY+lOPH1ZUq1lv5InY92Li
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
PoiTGZJCkoLXNn2h3sRhg9Dm0IZuRaAO1/v3IvULDZk4uN/CSaiFPejPG2Gb
OrZpkrJvfWF0QLWqT80e/Vr+KX80Gppo/z6dWu9Z8bnp0m73+VMXTR5K3UpJ
/5/P+H079YNd+vHomaNfNw9vEnicilSiBacTcVWmbEpBOT5JSenUtGwz7WQX
5mFSBpZOSMtGK1rVb0Izp6Rl0CJTbLM5E5VoSVyFilmM/km2y6YLYPMGpGUy
tFYpUl9TAKdWAnDqmgbgVFBwyseMnJsfR2mwWylGnWo+KkGrsA6oFmtRfqIm
/mbEA62AA54EvXLLYCCGy4Xb8ypkQn0tu8dGARdyA8V35xMcHzkyAKd2ZTQW
EZJGYBrjeIin5fJUdEMY+et+nuezRpyeluj0U2VnVa/+zIfTZ6ZnqPJw5P7t
Xr16efv4oQ7PnD1r/IQpWXfuomllZtYbQ4YsWYJZKFv4DLcw7cMZ06dPv/Pn
fXS230pPHzJkSLNmzUioPo795350uJCQ3Lptm4uXEgXfZdtzmxuKPDZmH31Q
xMVf8Pb1iY2NtYKlRvaV8zgFp9NyqFTglK2jRFOG+qQbNl3Kr1Gn/pZkLY3T
Hzbnu9HfrEPT264WvjV7gcetf2jOUh+5qVnH7otDY3GovpsbamTbjb+rVavm
qSxaHa2q2aAR+pNGr3sqTSujM9Eyi0PPuV8tHDx74Y4b/7CFlkwtOnZfFBpH
eeCY7ze/OWs+TpfKMtjlR27UbdJ46/W/cNQ8CbHfdDGvZt2GP1/KQz186im3
H45c58L2xy/f/trUOVa79uNJRe16jcnuYDq66ZJ66hopWmVLkr56jVpcdDya
mLUlqN/oyV7pxu3XCp966qnP/Q56pxVxPLNd3zfQnBUn0p+v9wJqjWZG3Zig
nrjaf1nU9Rdat/W89R83zrPcgzEUJZkESP4BtFOGFSfTatVvtCVZh5OsKo1o
XdQTLurfI91A8sqWzE4BnJZbAE7FawBOBVLFhOpf3ovnXzLn6nwQJ0OforfC
f8arJAQVJexu06TRr1vmc/HpIwZ0j9rx7bW9615u06IoPsjAZjr9Ze0XGCQm
BP0Vt2fBtGH/xu9mkpomBfZ8qc052U/pv7o3qldLFy2hG8o/5eu/7BO0ru6M
b63nnjXvwqXdIWvmThvxyoPYnVWeegpN01Plxr4NL7dqYrhorgOF3vp41Bt/
nQtwq/JUavgmI5s6oG2zFw64LyC1pTDFffeVzlE7vkNvoT63b9WsKH4PXYz0
ee5H77+lPYN3+UbkJrrLyDwWz5wz7k20zJaF0xZMG0EdVuW/bmlUr7b6rIT6
6DL9T9jNdJsfsw/gVEwSMTilIBR7hE6WZ1PIOSENe4GOT81g/8Rgc8KtDIaO
sjCTclEGtCqzcZg/qSpF50wglJUsw04osicqMwl9zWAZaQavDzmTU1XswgyJ
pfMFHyIApyUKwKlrGoBTQcFpaWAUn1jm8UKPNdoCPkHl3nVYcJzxOC2wYi+O
OkPrjFstxvdBtWqH65hIDMCpXdklZnimwajT6cL2hcsC9uTcu6/RFtIxtGKn
IsCnGOeqsnPQHXVsfMJ9PePn/PPGzbNmfxx/MaFp82Z37v5Bz8Z8tVauyqhb
v166KvNuXl41NwxOr1xNadSo8Z0/76MrgsT165OuXnNzczt27ASXDQPZmbhz
7dq1o4lPxWZWVyW6qFG30S2KTLZTpVJBPH4lqeQcpySpKedySf0ePZVFr4yd
PXG1P84dmvawXtM2G+L/oHBve9p//9ufMH6l9+BPFvZ6d8xztep+HXJ6+42/
KOTcfv3valWroCXn+O7vNvh9Gnjuy2YQbdii7TdhsWgTO+QPF0eem7jS8+2P
5vd69/0aNet8HRRNse24pZvfmr0AM9iUv9yqVaFeoH3HTPcm2U1xDtK0h2jJ
l/sP/nLPiS3JWpKJ1JyhlJDPqdyueTNFlwxD5/1Qt3GzVyd+PmNDwIqTCpJP
1eR+WfPsczVpylYKTmds2tP7g8loemtK4VNPuW1NKfBIJ8MiN/gqDSO+/nH0
16vRu8Pm/Yhbm/zZ9PUy1BoawA9/DmjRuc/ob9e9vxjbB9+uf+ujhc1e6kGz
mNKdIsNrenfecrou6UkaGVVz0lSa7xQ8TitPAE7FawBOBVJF5jil5Z9I1PmD
OFlVt6cIBtxDKy51bv3itb3ruHamj3xj98o5O1d+2qtDyw1fTV43b+L6Lydt
nDdp0bTh3do3o039d3FP/K413v+b+b8PR45/u0/d55+L8f8eNfjTJ+Oavlj/
03FvBPz4qfLAZoo6C2JktanHKS4X9Quy4JWfTx8xSB8jcXuq6l/nAgyJmHPu
WvVZ/06tNyyYjDa37qspaNOLp45EW/w7Vla9mhvllrSEU6fWTXCHSU8MiUEz
Rr6GOoymd634vF/H1mj1tV9O3PDVVDSBW3ipqS5a8kz1p8kYhtBTd8/qz6cN
H4QmSHGoEcy+JwT/9MmYZo3rfTbmzYCfPlYecMcz0ZAm7iHVowJLHueyHCMA
pxUlMYNTs6UyuJLAzxyWWDJsk51ZWhhrEeCPEwJkYxxKXifynEsJUCX+pQxT
5a2VxjQyQawjBuCUE4BT1zQAp+IL1c9jgRXlVFax8Hla6+h4ri6MpXOpjk47
2jtuLaYYELshR2jUar4jQiseA3BaJrG0rSg6+pSvr/el5CScKVeH2aMVEqcO
mUIZl+b3mWee45/t3lL/ceMnevn5T544JVdTwBWNQsu/+fob4b8e4DxOdwfv
HfHeyDyN+feIXK2+TZt2UcePMaXqCwry8nWdOnU6dPSY7W8TQpje7nz6Uwja
04ysTJlMFhER9tdff1keTWCnFanSh+pz7JEWS/pfZHzLrj3QnC+kh3oMfZ+U
vC/anKRp23Ngvw+mf7wjZPmRG9tS/nqpz2sLQk5tv/5vtWrVKDitXvVZH6Xx
U4+IXsPHcAWVqBdl43Ydvgk/vylR3brXgFfen/7x9r3Lj9xiG4nGLqxK4wc/
bH5n1gKcMvTGP1WrVkcrztgQ0H/cTNyxtCLPtIe0+nyn1wbPCziKwWmNmmz9
eowcMWX9YBrdHOsWSwhqWtGWZPVcycHhXy1/sXWHN6fPxx6niXh1PkOevk7a
fxQGpztS/qry1FMkOQBbuUlueG/+6iHzltDG0abnSn4f9uWyF1u/9NqM+VPW
yToOGjLHO/JTn8jPkXlFzPH+dd7OQ5Tcop0ibrSkdJSSrnt46LwfUE/emvG1
V7rRgz06vrjyVMnsFMBpuQXgVLwG4FQgVSA4pbHzhKAGPYiTPfN0NUNyoJGt
Qd+pdZProetpDk8088PhA4NWfOG77LOhA7r9umnBr1vm/7plIZo4sHn+Uc+l
xqRA7WnpwB4vzRg5MHTDVzfDN/8bv/u1Hh3O+P9Au6GPlvy+/Zvln3zQsXWL
ryYPQcsXnPYlofrsLiQESZfPmTKi/z9xAU8/48Z5ckqXfTq4f7f9mxfgzWGb
f8B9wTGv73GHqz/N7CDal8u4wzdDf8Ykk5yHM4YNwnH3icGS5Z8O6d8FtXDA
fRHuNuk86rMuWkJzBRD4iXFxyOrPp414xZS4d8vCaYsmD8eNJwUaEoPQAlz/
X27VZN4U3H+Kl40Qqi9WiRmc0rh4xq3UIpuoLSYtLTjFDSoYZMqRT8bpVG6e
z/05NS17gog9Sx0ZgFNOAE5d0wCcihKc8s3Gu0xLoaW6QE+nrXwCbZcvvlm7
u8/RVG4OyXtZXINiMwCnZRXHThUKhb9EFrb/1zwt56WMyzDd15hPFQ6lClJJ
SpWdU7NmTX5nvP0l48ZP9PTymTZ9Ku2VhpSIQvb64MHhEfvv/Hm/atWq6Ozd
vTtw1PujWYdqrYaUQnvppQ4sOMU+3jfligYvNCSN6+9r1RXb+XIY5beke2z+
BLYa1Pn4C97evnFxcRwmhXj8SlIpwSlb494C2bXs0mv54Wu9Rk2etzOKrj5j
Y2CvEROpkyR11KzzYtOvg6JpWL2Hwrjjxn9Vqrqh1pZFXa/fpNX2tP+YCk0k
zalb1eqLQ8/N2hLENmLAKUzlBtTI/OCTBEga31+y8a1Zi7B/acq/VatXQ11a
eiChYYv229OKSBg72q5pyxX98/VeWHsuh4DT52hn0Ea95EWztuzpO2oKS2sZ
CPltxLmpP8u804x+xJ/T/epftRu8uO5sjueNv6tWe3pjsoaiV9T+69PmotVR
a1tTCqtUqTI/+DRtijLYLq8P+3j7vm8jLkxfLyOYF7e29fpftRo0+NQrrHm3
fh6Khx4k1h7Zd5EJ45d70N3H+QdmL/JRFC2OPDdjvcwjnWYGMG27/qBO/RfX
ns2k7ZcmuymA00cUgFPxGoBTgVSRHqdmC9bHSp95uhp/rU5tGl0P3cDNmTHi
jd0/fXZh58peHdsYmKr3GLrG71m9/ZtpaCJw5ZyJQ/rSQlGG5EA00fyFOmcl
yy7uXr3rx08xnCTurIXnpC/Wr3Pn9+1/X9pTrWoVTbQ/uxchX056d9qIgYX8
niT/ck72U59OrQ2Je+gWjUkhibvXoC1ivlq9KgGbe3BygISgjq0a3Qj72XiJ
qVQ1c+SbQSvxds/tXNGvYyvSIFoSY9KE4HXu30zWnpHVeq4GaRYzZENiUPDq
OdOGDUBNuS/6kAnVTwyO37Vq50+fmahfa1JgYZysSb06OYe9DGUY5zIcIwCn
FSUxg1NiGdgdFOc7vc3N5AXLm0HoRMtaUXxSavctSmLR/PGp2HN1vDyTrUVl
ua64c5k6MgCnnACcuqYBOBU3OC2mb5Rk0lI+Je4CryaUtf8q3221ROO3I+Zx
ywNwWjpZsTXuT61Wu2/fPmmALOfeXTKemuLPxsdp6NxTZefUeJ4DpxjqevtL
JoyfGn0mrlXLdn/mqyky1ei0GXfuNGjQ4HpqGlcc6nxiYrPmLf/Iy6dENFen
u56mrFatGo3Kpyd21t0/T545q1ZrBfc45Sq18XcfV4sjr2ER4VKpVKVSkoMG
RaAqV6UBpz5KI/bPJBiQElQ6H7tfjpvZqM1LODqezdvZvvernvL/qBPmqAWr
a9Vv9NG2X3ak4FB9HznOcepWrSouI6U0dn1rBK5QT1bcfv3vPiOn1Hmx6Tdh
52ZuDW7b51WP1P/odlEjtRs0mb01xJdsZdrPu7B/Ka1r71aduqF2eXvUkM++
8yUFlTxSiwaOmfnqlM/RwluStdWfq0F5I9kF44yNgQPen0p9Oz2UjLOo++WC
uo2brT6b6U0cPlecUT1Xu/7WlEJvhal5h26TV/rQXf4h6lrTl7r0GT3NI93g
fr2wRs06nd4cuT4hjzb+mXdEwxZtd9z6d+sVfb0XMe2kDrqro1XP1KnvnvKg
ZZc+U1d40f3dkqxr0bXPwpA433STp8o4fePufuNnoka2XilAg7D6bDbNKLv6
dOZztettTSlg8LLSyC/RBeC0MgTgVLwG4FQgVRg4TaAV4Rkg+SBOijkkE/aO
fSw7tml2PXQ91870Ea8GrZiD3urXpa33klmGJAwbC85Ie3VqGStbYUoKDF07
7/WeHR5eYhpc+8WERnXr7l3zxYOzsqYv1FEd2krnqw5ur1vr2QexO9Gf3dq3
8Fk6G/UQtZayb123ti2nDu9PfV9pnlLcvaTAvp3b+H4/i2LMwjPS3h1bxUmX
Ub5Kg/QJ9gzu1LrZjdC1eCs4zSl2kQ1c8QXtfN8u7X2XfIz5anLQX2d29u7Y
8qxshS5aUrPG08bEvYZkvAxqIXjNp9NGDDSR6P5Zo96gWVX1pP+Zh7ZRHqv6
bVu9WjUKYwJM5iD9YscZwKlAEjk4naAw12OyRpqWCHSig8B5R2tNZKErTqDK
LGNRYQrH45N8qoSdYrjKq0WVZfunqAzAKScAp65pAE7FDU5tzTYAv/j+24be
WzFPzpXUblPFO6aK2QCclk98x8XT0We9/PyTkq/QRLvsmaMhXqbMaSNIYltl
ZhYPnGLz9ZNMmDQRdW/EiGELFiygJwA6t6dMmzpz1kd5Wv3d+7lubk+RhTXD
h7279PtlaC/QHqH5H4wZ17RpYy6dKZoZfSZm+Kj30FuOwuQrw2x/1OBMozNX
hcvXPkCHIyMz218iCw8P1z8oxAfMAO6lla7SgFOKHAl+NHEx77hA0hX9s7Wf
f3/BajTTL82EC8Ff/7vrW+81btep33tTWnXqPW6p+4Qf3J99vs6yqOsYnCqK
tl//t2rV6tibNK1oc5K229ujWnTs3mPY2CbtO09c79v9rfe/2XueNoLm9B01
pVXnnuO/3zJu2TbUyOpT6Wi76+JyGrfr0KJ7v+/CE6pVwx6nqNlNl7V93pvc
tF3nnsMn4ND46V9svfYAddj9sobG2lO+iubM3BxIc5z6KJhdpqH9aH7LTj1e
HvBO9yEfNGrV/jPf/X5KtEemr4NOPV+/fpN2XbsNfh+tOMc7sv/706jHab1G
Tf+3P6Fll17d3xndpvfA5t17rzyR7qV4iJqdtSWoRec+HV4ZgnatUZt2c332
o1U2nL/Xrv/rLbv17frWiJZd+o77bgsaQzQOXnLj+pjbaNBadu239GDyrC17
mnfp/dIrg3u9O+bFth3n+O7n6k95l6IsFIDTRxSAU/EagFOBVEkep4VxshpP
V2eWv4zZIwnV38BtYvqIV3HK0MvBd496vdH75X4dW498rVevjm3c5081JQQZ
EoP+iw8a+VqPLm2bTR02sOfLLbYsnLZj8dS6zz+nOrjpl7Vf9O7Q5p2+Xca8
069DyyYH3RdTD9Jov+8b1q2FVvngzd4fDh/0K1pn+KC/Y3fWeLqquf8JwXeO
eL7Wu1Pfzm1GvdajV8dWmxdMM5CkrE9Tx9Rkpoed2ja9FroRTyf9QjscuPIz
+tYfRz1e692xd8eWI1/rg3qyecFkNFN3xo8kWQ1E44P6gyxk1ZwPh2NwevvI
drT7vTu1vhyE0fEvq+f17dBqcO/Oo9/s/VLLxge3LOKoKaWpJY1zGY4RgNOK
kmjBKQc5bfmkIxZajMep7YoTmXynOePl1o6mGJOmEhibmo2paarDDtjdohgM
wCknAKeuaQBOnQ2c8oPoy9Tz0iDQ4hu0qg0k8nEDcFoaOawVxciQnq6QyKSh
kRH3tVqNlia21fMz3AoVql+jZq085kLAbNNDKhkzYTKayMzKGTt+XMeOnUe9
P7pdu3azP/3s9v0/0Pw7f953q1o9V6NGHVZkZb07bEj37t1Hjx7dqVOXbZ4e
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
nnExpRH3jt1N+XSU9Ti1yJJK170Qf8nb2zcuLo48AmEZij2t4JRzWfG+MvC5
x90Ukpt79NVJ7w8p0rf62n1sX/GgcogcO5Pl1/0Tf6tfChnNn3X0d/bSszUK
qA3sNB9KOA2gMzrBR31ZxtkMVw0mbtJo1YhT7LXoRMe5VAPHO17mP40Wn0ci
PABnz5718fG5deuW0B0ptUo3zhaUGn5VqyDZSwbIfBQxHy8skDDyP5acXHTX
NBrN3bt3he7LYxB7cTk99n50GbgTHr49nVo2B48wAe4kN98suazgBHZx8X44
hmPtirL4RUOn04SGhkokfjRsH5d4w06nei4Y3xEytVnGzE7VBfrQsAipNECl
Ulps2Z5reiXvLEhEMvKfpoyWjwFM9mxB+gUqr9iIEzhw5RP9AOQ9FxjsG4/L
2Xg20nn08iliXx20I5zRXkVEhEVHnxJnD8s7ztxRY9dlOQYPtoIXQdnE+6bg
jzA5kSwOmYmdya7FiB4nejCsjqzddgQzHx+vsWM/OHnyuMHwkLtMxGdlHGeG
plI/MWYZh18R8N1RZpk/Tyw+XjgKYeZNj7tnFS56st29e3fIkCGvvfZadna2
0D2qRFGaRL87LO8Knjgxt0b0q9Zk7bAHcgVZelc/kTLYTsN57qSy97MmyJVE
rlAzISduD16+CQlJGIoy7NTMSPl/8pOaUo9TYmgZLY3uz8jM9pfIIiL2FxYW
lPQB8CTeDzypYr8UTAb2Qcrm1oguUFJYFkg8Yn9cs7yQ4YiVTrxxKu0nodkr
22R+lDAYHvJ/jhCtPD09W7Ro0aZNm4gIsVcKLu84WxJXC/QHKqW4bwrr1+Jk
tPt9YeW1JcYntCVLlqCLYu/evUJ3pHQqyzhbvxr5OdzEeCycSZbjZz2YRgfz
nVMZGRkdO3Z87rnnatSogSZycnKE7lFliv3W4H5UBcFTgAvIyk+e/dNg+adr
yuqp1p7gLtHZBUfQZWW0RKZ8KZVKqVQaGhaRq9PlatS8MHzOxdSCmtI/1biY
VCFbUkoTF3/B29eHhuczW+Q5Lrv2ZyPIsex9pMDZ4EKCO9vyqdzDxj1TWSaT
twR3YtLatWvd3NyqVq1apUqVatWqBQYGCt2jUqn04+wIpRpLWgJkq1IPmsFy
KevbGz56EOdH1Oeff46ui4CAAHH/UFj+cba3R2L8gHIyUZ9eu7NdyzcvNTW1
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
+Di1eEgHVYOyLYNqGrvmN+cGrKqAoNaXvNV06JMAbgEuCJ/QaddqtXq9/ni3
wxFyJIu4UBOFNlQ6ph53SpVMqhVF/O7sxzrLysoqKsqOd30W6S4GFwI58/r8
ffX19RqN6kBTY7eHhqj30t6fnpNlqDJMZ4ec7tXt6dm5a49Go9m//yM5bQWY
ZJzHu5eXrJxntqebuFRjsEx8rBt1pLz6ppt/v6omJKUSSzCwSR3s1Tfe9Pua
TaT2U5vlDzU7frHotR/Nmf+N++67/Oprf7tqvbj/z4lwmploIiHw4ltJu237
90Wv/2jOwu/ce/+VV1/9u9UbgtojzYxq4mitpQk1Km9mm21z9zU8lJn1pOWz
OQx7fl0my+PiSrKBeJymM/xck/BWaZnRaKQDQ7pgwj0FAACAqYysDlB3U7+Q
H7DT7KZ54XkyYbFl1FuYyyVekXx+Q90iKbspOB+kZwv9HMcVqXP9bKGf1/hs
+Qp/7JzJ6E1iY04LcCEqru0cLwXbQP/EKDvHkAnLA4KauJuW6QJnoZqOH8UB
a2hoUBdodu7aK4l+vVQRkpI0Rl6ciUXrcrmp8izV1TpZu2mbRlN0+PDhMCcf
DNmowx++LndWd5dDX7GquFgr2I9TYTDiwyxqjaZEdnt6XG7ietrawRRpVq5b
X3P69Gk/inlPLiTohueW6bSZJj6D4VJDxZJi3eKltJ9X33Tzb1cN5DiNN5Ba
SDM+ab/kssv/dODThw8d+eov/v17j8z43yuK7qvbm9hq/Npdv/xd9YZ4hr3z
pcW3zs6Qfot/rPHIdb/4t+//Kf6XqsL76vfMCO62fqhUOznC6XxLZ2p11W8e
+K8FVvscs/38hFOaXoAeGRqqn87w2SbhtYqKlpYWeWxAOAUAADCF8SuWlaUl
B+sXk3o3nEqyJZFXM2AXZETN87F5AaEgwOeXapdTd9OB3oc6NDbok3TxaK1b
W/XO+ucCQqFUPW15gH0reKiVGS0uPLsFESRJ3w3ok3LKBbol9KNUlGrYd1AI
m6ObTW7ziNrvoL8ivqc15hO6ksMY1mW2PLFPy3RvNjc3B78QfZgd50ZS7ga+
Sfr6+mpqajQazdH2Nlcw0jzoUUnDkGFjNKXn4UDGS6Kw9Xq8vQ1NjepCzfbt
W0lOCRr6TQ4/aplFF2GzQ6alpUWjLibh+cSR2C12q9zpUFCHnw5OtzgdQqkM
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
Sg9jt/ek2+0+1t1dVVWl1Wp5npe7AVPgIiIezIMHDz5dUZ1pImWGko22ySwT
P7rJeTjpChUqB0fcD+xJxUzFRj4ohJqEmdSz1MAndljkX09gBEkCFeKlYPww
SzQK4htKCiovvz8VSOVWkfaY6B/lB5xaFQH7wwbvKxowbqE1hWEzzPwCy2cP
P/v8g5mZNMfpxfU4nVm9tn7n7rAREqnBCQAAAEwE8omtte2IVp1D6t3YNcRB
MeKyBmxcNkxJoGD0NNH3OE3jzkXV1asjOdRiHPEikGOthaplPq5QnCY+riBg
yZUj2S92b8pJRHOemfuf/3jm/rKcxD/85w/pq1ThJNWjrLlUxgzF2gd/vZ9d
SmPtyZ6cVENKWD4oQl/a+awtJ+SMKrmS8rnkrUIeqmR/YTnxxuRziU8pKS62
NOSYmieui3/Ux+cFXVu5paQ9UpuJriu2R0pqSmP2o9pCCUn8Qn7Hh/8oKy+B
k97okAMSzGHm44VOnU5XXlF5vNsZ9DUN+YNNRKzxUE1JFkxGsVEk3Itu9P0j
FWQtOZ1KlYY8J92eHq7zeFlpZUVFRVjY/sjgMcG5GeELQTp0fsWroTx//n5f
/Y46lUrTdOgTh7vH7TkpeQiHD0jopRdoiqnnot9FTu/JPW+/p9EUffzxx6HO
kxfggiDPFH1nDxw48NeyKkk4FRKZaFFNh1i4UyWVMZViaUiKtFLtl0TZSz6l
8eR3eXEZVDI7qPjJJxo5pUpMJU3iVko0VVbKYmqle1J/VPEdJAfUQe2hnqgz
Qy8N1TCDjWG4C5FMlcLpfIuQWqT98z9eW2AWqNx9IcIpbd5AjlN9dd3uXcEp
hjkGAABgSlNRrt1fv5gEIHMrQu6msNiz8AyWRCJbERAKSrV5HYbWUMnLSI+2
qCd4/+sf9OO6tav3rHvWz2v8bIFfnCZSAtJBVZYuXieelVTK3o43vvb1q+1N
L3rbXr/2S18wvf9caAeiT+a88MA9P//OXT/99sN/uG2tKllKQyoJoZZlOc//
8e47v3vPT775p/tuX6dO8/G5nx/952//703Sr+fQuPtd1XMW/+1ecctpw5uP
3Hu7uHztr/f+5/+55YzxLetHzz/6x5/detPX/u0n37jn9u/srMju58SBlNdv
Xrr0xQfpH33kDz9eq0oVfz09/p5D256giQKI8cuzk+8+8vZ/UyfVge3RZmRq
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
rrhB7KUGNdVMj1IWUY8wYC8aFV2fCZYyRF+NIWIjlWCaak71YoCmMntnfGKA
Ba7HkCudDXCncMA+OqSg5w2MtkChjD+wPzw8XColyHusrZ0+WbssODxq0eOM
xXzxvGyJG6cmgVMjuI9mnJo2aEjDfZ8fOt5qsAWjpnD8idOWP2/FjNNxcYch
xsiHTdlziC5jPh/pGzzp1LmPunV3yMqGACNf5MyVzk7ObNyqre3tBxOPJ9js
9ITt8KTg1S6D16h1m2k37tKMUwee0HLjpj4LF2HEddKpS026mjlnQb1T0JoT
RzInKb1ByxYz/rpnl8qpV78hQk0JlI5KALUCRn+KUNMpY6P2gz1OPCmkm3KF
FRinr87J5QwD88WQcSrIHTdh/LK/HiwXSOdzIPJZFeZc+SRzjGvCzFA8ydJs
mY9vAMywyRprrLHGGmv/fGP8RIfbGWnpYUG7yySBOqk/jOwWemsF7rUB32DL
mxUojImhM+keHYHVTfexIWbVscp+HMF5E4vFoYFeZUSwjgiCsyr0poFHWN7b
YkEQH4p/J6menvoUVAgLxfHv8I4jEil66wsZp6gaAkK96BOx+ihullQwJjBA
6oXorLgX9MQER+ILvXCDkDgq9iEbweCq2B2hqe5U+7DA9E+i3aVcd9x7mcQd
96KHcPFIaniBeFJ0WTTDEl+t2J97c0d0ZJS2DK+RFzocm/xhve5D/jB/afZo
8qhMJosMj4Dh+UUKyEzTqDCuiDAQjF0wwdJX0OresFSIXA4KCpkxYwbenjt/
3qqvV+PtApVqwaL5Do7O0jwwXk1SauqAfoOu/3ULHFqwYIGDg5MkNw8M+FEK
2P/xjdt/gf0zZ81ZsXJ1QSEMnb51917v3r1vof1iWU7L1s1mzrIHlTGMuW2X
u42VNcSdipS/bduxdMXyAoUaA5sWVpbb3T0KFPDyE5OT27RqLZLKiJz8BvXq
j50w8a97iWA/GNDOXV6WltbgWnIKIHCqUhcXKhUzZ85csWplLuJ83r5/r1fv
vjdv3a4U6XqvhQL3KH4s5O+VgOmKio7ZGxVTVFSEPwO1NUe8qw2YFXOR0uMp
L4fh+X6BQQ8eJiqK/0ejgpSCrj4+HewXikUtW7Zs1aJ1qxbg/9YmpibgtWXz
VsDat29P32tSdALxkGnc1YjJ+dJSzIQx5RVoohRdnFy2KGKd1LjA8KaSQQo1
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
ayrDVLfEaNCiblDSiLND9Twe+xUUM2tWXBQDR7+pq9upVqt3NTRi3UNseO31
9ck5qqe6w/gJhPDUd91z98efJPS4PR6ft2Xv51dccYWNZoQfPTtn1sRJU1wd
XcLRtuz/4tYJt9Xs3CUc/+y5cyZOmkZ3dvf4vfv2f/mTCbfX7diFU2uZiy++
WFZdhJeZo9VNnjLN4XRdfe0P5s57fllKMu6J47/77rs/+njpoV5U6bH58y8u
/+4Vwn3ILz47Z/bTk6fQHZ1uf2/LF623T7h1+65diUnJU6dORdIKKt7o27d3
/w033qy0lXq8fbsbG2664ebdjU3ROpPhIZYskDK4PcJ527ytOicnp6mpiccf
JE6hwzmC4y6Bo0ePDtZXhZ2tra1yQyi/3//444//8pe/XLRo0X333ffYY4+5
3e6IBz927WL5PaGj81BBvrGoqAQpdf4wBVJKXT+ZLu1DnfDjhGz2HuHDNu7d
V7dzB8nE7/aFKmyQzPce2UCOdVqyiju6e84562xyNzTuYoJ8UMqI93Yd6j3n
rHMVjemDkk817OVIZS68PT6lgxRFt8eLcvzFyU9U4oCVcj751DM/+ekdzzwz
6cYf3SQsUkk7DQ5+e5Hy7kMFRY9xEiQZOdSB66SvSsi1C0KCbUBRBTrgszNO
vSGvvLw8EAhEzKiYeWMfCzixVRzK1l9RUTlz7fo5FhqXOaWnmEWLKQinMRKo
imk7Nd3kmGGm/mqjXrR2/e9jT05KzXze4phlcQk7J7Zhx2m7Y3K76xiPgzt/
OWeanaik7e4GbX5utKchAAAAAHwLOFLgFNlN69cvQT46OpNl0mSFJJRRG111
aBjJ6LYbr0DCKZ0sO06JXLMic+YDv7gJFXvE4uFH//rL1VdeKOzsb//kXFza
9Gh7AmkOJcRdt/1A/fFEJAFRKV9s+uddt15DmkP52z+88NyziBGOdyTed9d1
OR89hVy4jhR/6wc/v+u67aJmi4o0joXgc1KnCB0wk6XXJuGMxTPZ7XACDPmN
pqy0eHPZayydxdPpaI3gBvFRv6AQ0RpeliuPWx1UmLQsETmJrVTqDxVpHEWB
U+9ty4hAip7CLhYpVbwzJEb2yRruUkLEmwl5XseyMNP4qK8LxQlErytNGFaj
NrGxuYkPOTmHWCzR+qo7EtPdMX7rlB+GcHLMFluu3lC58lPSusUdqvV3KvtT
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
O21YUVq0tew1jslknZlhzZLiMZwp0tWEZRNu+n5N+UKpVO8y4kRdbZjz8J8m
CBuuprcvvui8rsa3xALCuBMWKWratOaVyy+7gLUn+lvfv+jCc801r4qLItRz
Kmlt/vztpYvIsjqGLirbX8f0lKLLKElSBeCcAt3SlqZmlh/Sjw3fdsMYXo9i
5WbpNptDp8+tXPkp1oi8pEohasnkHcWu1m6pEZVsQtv75f7q2jo743SHaY99
PV4P3dFZs3OXw+lyh1xkyClK9lOuDsXDIoHIdah7R8Mem50i0o0snpB+SVgi
Q3f+/Iv9W2tqhYdFLk0sLpF7EhESPfju3RRDEyencH8vfqgbb77hi7YDuHqA
261Qm6MoEIWfVU9JUXFBQUGnqwOPPTuCyXAGEvKgHjnydVXVOrVWY7ZavFLJ
XE/gK3w+o+4+9SLH6aJFwtSlO1znn3++/COLg7rvvvumTZmal1+wY0+9MOd/
++vfrF63XpjGuGAF1kUp+uKLLxQ71OPlJrzMpydPcR1yn332eLfUTI2Iih5s
0lZrDM9MnCzcU6VRT5sxXVnOor6h6bLLLnOL3uY+B02VVFT86z//vvnmmxcu
fJ7Y1IXbg2bLFVd+H/euimwyFcUzGeGf39XQqFKp6mp28JJYyg01PQBe8b5h
LC6a9d/quVb7TAs11YT6DUGqfiwEKTY7xWQXbieaHDNNzBwTvcjOvGhjHl38
4tw16xfaOuaYmcltDqysKn4xPG1/Wjsa2dlmanbjvky1LrqzDgAAAABOiMGO
09bWVm1OEu9Skeqm2HIWKxrgiSohvNK3JjWsERvfUImhn5JO4ljbwT1uEgY/
jvSLiaKRNfK5pA06mZMT/KN+BsKPDRUToLMbN7xXXFRAhpsLzy4Ejg+HzhVF
UaqsJI7KYukc3iGtEXEKJY9tavkpCLGsqBDOlNtu+H5txSLFhF/Wd3Dp//3h
xwXps4TtjYXzfnXHdaIzk9TLRb+ItFOOSbrs0guttf+pX/3yrTdcyUvlL6SH
WiqvmrG3ko70PGAFeIBONdV+lKs3DAwMRHzRhWVyDCLzo6X/Y/EZ7e/r6ysv
L9fpDHaGlgWQQ57RytaPcJyGqyueCOFI3O8PqR/k8NyK0oVEHSUtfro9frnT
vRiBwODnwrVJSSFQL7mD1xcgXZYkLRcVbPT6+kjBUvJEBoPh8SeeUnQtH+JV
yGrzaCtF4Q1ukNxnspg1Gk1VVVV//2E8wBx7vAtvZ9LCGVoNIyegqalJrVZv
3lZNSuP2+NzR9ZrK8f7Hnzy/+AVhg+7oPP/882VfcY5K89TTE6X1gqbotdde
W7VurbDR2eM+6yzkI7XRzCWXXKJ8tByt7unJU4jjVHiBDkq8g2wvz9aoJ06a
Ijzgjp27r7vums6ubll3/fCjTy699LvCTNuypTorKwvd3+vp9vlcnR1XXnnl
vv2txJhKd3Vtqt46qKxoFIKcq/D6AF7hjJWvWqnX6202R8SUkC40gGoq/41g
5W3hrWRn3a4X9MZ5FubZdrG6KQinMRMhH6kwKLOszHwz85Ld+fhLr/xlzpxF
Nnq2mZppoSe1R9Y4VfaHQr9o6ppno6cVLV+/4bPQBAAAAACA2CZCNZWqm+rr
1y/h6WyxLVS01YyTDKXYO4zwG3KZkhAlL1HwHNTdaRgh1IH1lkitLHGsG4If
P1JRr3Am26BNamtrU4w+fGg5YUpXFG0ue4Ols4RTGtYNyrEs7lRTfNgp8kye
cMMVD/zihmce/OlTD975zIN3PfSHWyb86Psbi/7K2xNYelnOR09NevSnYilX
Yfk4U2TTtfAgd024ekvh86VZs/78+1vEnUyKWGIXZ+tLPdRGFKQX1VieB86a
zNszeWeWUbu0qXkvf2YJPidJRFnLIc+XspBybW2tKke3e08TUhi8xPMZPIWt
xiPSn+V/htrHDG/wU4qQsgxC9FLF3bzKOyu7ZruHybkmHlTlhvR6xd70uO8S
El5a9n5+660Tbrzxxsa9LaH8X4U5lkg0RIlVOmnHJNAwbaquUWt0zc3N8qAP
XiOwagYjn5POzs5CY1FJyQp3r9ctOTDHptLvkEHmj0qlmTZjqrDhdHWed8G5
blHY7yOVgd295LpA4M2337ryyst1Br0wDzu7usefPc7r67PRzMWXnK98wGyd
ZtIzk53d3WedNc6NLakXXXKhm/Sax8snR6t7ZtJEcv8pU6Y98tjDzV+0ug51
6w15TzzxGHGcWjtc11x3bcsXn5O7NX++/7LvXk6M38JTbNle8+jjj3X2uKN1
3tyKNwF52xNA10Eo2mnILSwrqwgGvharl8CiGDG9vb2JWdnzzcxs1Hsd2Ren
mJ3RFgwhUMgKNqpTanbNMjvnW50LLa7na3c/OnfeC/auuRbnTAuNayyExFL8
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
0ix9kofP86eGwZdpWPF784DdasvVGypXrnH7gl5fHxElJNOj59TKhhE6p1KY
UsqGQ2bHH1uxkb1wSn31GN2pIh4z5M3zK42FxOfmPe6zn9oQjsHrC+CBQCe/
uGRFQX5hV1cXB8vhFEH0NHI+v/7666qqKrVaazLbFZVvvXKthiEn8CgELrjq
kZzVgYiivt4hZ2Cvxxex/9i22AgjNxGHqzZsvPHmGx59/LFHH3/k3LPPmTx5
MilkKkR3IFTaV5b3h1uhoxrhTtegfMZI7NjTqM7R1NTV4mGFywrfClIVVnjb
eXZD9TwLM81CzTAjyS7qsuEZHlPMtJyDLwUzy+ycY3YttrmQ6fTFl2eWf/pX
GzVLuKeFwnVNFc2k2ikylLOtzLP1TTlaHc7mYTlpxAEAAAAgllH28xC2D+xv
1WQvG2CyeGcGyuy2J3O2pfEqBEFgWx1x+iF9jybVTQtACxoJQ33xQeeNoih1
VtIAncPT2eis2pOJwVKMOF4saaRIqbB9y41XIccplUJUU/wCE/du/MeV37sI
KaX4Skrgyw/nTvz5dT+49Bd3/889d1z9o6sv/dfzf/jGLJb1IIJkX9tHi2f+
+pqrLrn3rut+ddcPL7/8oqX/fhhrrTFS4DSRiLeiK5tJ5agMc93HeYZcboDF
E+AbedyBb8+QYgLZGQwGKyrK9Ho9SduXmzEpOyK5hzJJnpz6oYwhutUP88iD
9w+nDg2X0X/se8qOU3eYwHuKpePBTx3eXipIVFPiOWyztms0mnVr1/T3H0Zf
cDmpqg/oQqeAsNp+TS2NanXOlu3bpJK/QZ8/2O0Laxk/yuJ5kMiYEXUnIrLj
xckjF+D1eyXr6fFL8g67Xvxed69/a03tus82t1ns0iOQvmmeCJl09OoVDB9e
ItviJw2SNSIfobCzcuWnBoPBardEby6dbghro6mp4U2tfp4F1cycDqppbMQU
s+g4nWoSfaco9d7keM7iWmxnpmlzn3rz9YU257O4P5TcSWqSSayMilL7LbRw
5/m5BZu3VIt6KTuAS2DB3xQAAAAgppG/BKG/WRxvzNfvWf8O78xCqfoO5KPD
lQ+XhUlDEHEWidgSmcbSGTp9CthNT4pvyAIR1kvpiqLNZa/xdCbrRGtE0hWj
PsrfdpKEGsDRSbiwgywI43ZXxHeq8NYOCP9kUCK/ve4N5653yH3QnSVFFJ0Z
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
AACIgHAKABAuF07T6bRqCgAAcRBOAQDCFc44BQAAIiCcAgCEE04BACAywikA
QDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCEE04BACAywikAQDjh
FAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAA
IiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOc
AgCEE04BACAywikAQDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCE
E04BACAywikAQDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCEE04B
ACAywikAQDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCEE04BACAy
wikAQDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCEE04BACAywikA
QDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCEE04BACAywikAQDjh
FAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAA
IiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOc
AgCEE04BACAywikAQDjhFAAAIiOcAgCEE04BACAywikAQDjhFAAAIiOcAgCE
E04BACAywikAQDjhFAAAIiOcAlUom81W+hAAlkc4BQCAyAinQJUQS4GaJpwC
AEBkhFOgComoQM0RTgEAIDLCKQBAOOEUAAAiI5wCAIQTTgEAIDK5cNrY2Fjp
AwFWrqVcmO/ifaDKCacAABCN7DzhFKh+P1XT342o4RsALJdwCgAAkXGpPlBV
ct/plPtXlHX/wMrU1dUlnAIAQEyEU6CqZDKZtra2gYGBfN7ML+zdu/fw4cML
fmqJU1JnZ2cX+71qKhAiGUN6enqKw6mxBQAAalT+Un3hFKge4+Pj69atGxsb
KwwOw8PDTU1N3759K9xywRBaoo4ClM/vzjgVUQEAoLa4xylQPfJV4fz5821t
bZlMJnfl/ocPHxoaGp4+fVr6U6VXlk4WggYQaMF7nBpbAACgFuXO5M04BapK
bmhKXnfv3n3mzJlcON2/f39/f3+yfmZm5tixY1u3bm1ra2tvbx8dHc1/8OHD
hzt37ty2bVtLS0tnZ+fU1FSJXiFlAL+ch0MBAEBkcuF0zZo1fwKokI8fPxaP
ThMTEw0NDePj43fu3EmlUjMzM8nKAwcO9Pb2ZjKZZHlsbKy5ufn58+fJ8vT0
dH19/du3b7PZ7OzsbF9f38GDB4v32d/f39PTU+k/F4hTMiLV1dUNDQ35agYA
AOLw6dOnVatW/QGgcl6+fLngAHX9+vXW1tYNGza8ePEim80mr5s2bcrdwjQX
SIeHhw8dOpT8+OrVq4aGhqmpqfzINjg4WLzDjRs3VvpvBaJVV1eXvN68eXPO
tHYAAKh9uf7w4MGDwcHBKwBllhtqBv9bsqbEZfXbt2/v6+ubm68Q165dS6VS
AwMDp06dOn36dLLQ29vb0tKS2/L48eONjY3d3d3pdHqxEnvr1q3Lly8XH0N+
DCxcBliWZHhJBpkfP36U56wNAAD4v8qXiixA+c0t8sym4pX5tzo6Oi5evJj7
8cqVK+3t7X+bNzIyklu4f/9+frdfvny5d+/eiRMnmpqajh49WmLQKz6Sn94C
WJYFBxYAAKC2OKUHakhHR8eFCxdyy0+ePGltbc2/lYxmz549O3fuXLI8Ojp6
9erV/Fvfv39fv3795ORk8YinbwDlY2ABAIBaV6IkAJTVcsefwnCa2LJly6VL
l3LL09PTqVTq8ePHueXGxsaJiYnc3t68ebN27dqvX7+WOIxs0YzT7CJzYgEA
AAAAqko+nOZ65vv373fs2JFKpfbs2bN58+azZ8/mtxweHk7W7Nq1a9++fc3N
zXfv3q3YQQMAAAAA/CJLn4z6+fPn169fL7jZu3fvxsfHf3o4y4L7MbMUKB8j
DAAAAFBupfvDEnOriAEAAAAAAAAAAACwYi02ldQUUwAAAACA7LxKHwUAAAAA
QIUppQAAAAAApemoAAAAAAAAAAAAACzIRFMAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGX6J2k8s7k=
    "], {{0, 787}, {1811, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "Exif" -> <|
       "Orientation" -> <|
         "CameraTopOrientation" -> Top, "Mirrored" -> False|>, "ColorSpace" -> 
        "RGBColor", "PixelXDimension" -> 1811, "PixelYDimension" -> 787|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageMargins->{{0., 0.}, {0., 2.2737367544323206`*^-13}},
  ImageSize->{916.8999999999982, Automatic},
  ImageSizeRaw->{1811, 787},
  PlotRange->{{0, 1811}, {0, 787}}]], "Text",
 CellChangeTimes->{3.932506218381425*^9},
 CellID->645188976,ExpressionUUID->"92eb7ef9-295e-492c-90fb-85b32b15e7c9"],

Cell["In order to address:", "Text",
 CellChangeTimes->{{3.734128445158594*^9, 3.73412860632964*^9}, {
  3.734128656359407*^9, 3.734128685634904*^9}, {3.7341289491089478`*^9, 
  3.73412898127269*^9}, {3.734609315938414*^9, 3.734609373567918*^9}},
 CellID->1135513001,ExpressionUUID->"7f2b0171-82ad-4eb5-a7c3-e94013940c84"],

Cell["\<\
the introduction of new elements in classification workflows,\
\>", "Item",
 CellChangeTimes->{{3.734128445158594*^9, 3.73412860632964*^9}, {
  3.734128656359407*^9, 3.734128685634904*^9}, {3.7341289491089478`*^9, 
  3.73412898127269*^9}, {3.734609315938414*^9, 3.734609376265726*^9}, {
  3.734609725209743*^9, 3.734609727727291*^9}},
 CellID->2027320565,ExpressionUUID->"fc7da13e-58c3-4fd2-af4f-4bb6bffa9091"],

Cell["workflows elements variability, and", "Item",
 CellChangeTimes->{{3.734128445158594*^9, 3.73412860632964*^9}, {
  3.734128656359407*^9, 3.734128685634904*^9}, {3.7341289491089478`*^9, 
  3.73412898127269*^9}, {3.734609315938414*^9, 3.7346093906177483`*^9}, {
  3.7346097323724937`*^9, 3.734609755739954*^9}},
 CellID->1201192653,ExpressionUUID->"5bca434f-a5f1-4384-a0df-83e5262f34c0"],

Cell["workflows iterative changes and refining,", "Item",
 CellChangeTimes->{{3.734128445158594*^9, 3.73412860632964*^9}, {
  3.734128656359407*^9, 3.734128685634904*^9}, {3.7341289491089478`*^9, 
  3.73412898127269*^9}, {3.734609315938414*^9, 3.734609419584334*^9}, {
  3.734609762164225*^9, 3.73460978392134*^9}, {3.7346164448190393`*^9, 
  3.734616445108897*^9}},
 CellID->2098637171,ExpressionUUID->"ddc56047-b6e8-4c72-ae36-742522942471"],

Cell[TextData[{
 "it is beneficial to have a DSL for classification workflows. We choose to \
make such a DSL through a ",
 ButtonBox["functional programming monad",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)"],
 ", [",
 ButtonBox["Wk1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)"],
 ", ",
 ButtonBox["AA1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Monad-code-generation-and-extension.md"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Monad-code-generation-and-extension.md"],
 "]."
}], "Text",
 CellChangeTimes->{{3.734128445158594*^9, 3.73412860632964*^9}, {
  3.734128656359407*^9, 3.734128685634904*^9}, {3.7341289491089478`*^9, 
  3.73412898127269*^9}, {3.734609315938414*^9, 3.734609366339542*^9}, {
  3.734609817368883*^9, 3.734609818189827*^9}, {3.7346164940114183`*^9, 
  3.734616494014583*^9}, {3.734616534557872*^9, 3.7346165345612793`*^9}, {
  3.735326590076611*^9, 3.735326592629107*^9}},
 CellID->1523514669,ExpressionUUID->"db6f776b-5347-4740-a5b6-8ee6208b40df"],

Cell[TextData[{
 "Here is a quote from [",
 ButtonBox["Wk1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)"],
 "] that fairly well describes why we choose to make a classification \
workflow monad and hints on the desired properties of such a monad."
}], "Text",
 CellChangeTimes->{{3.7341294280625887`*^9, 3.734129444464984*^9}, {
  3.734129536032277*^9, 3.73412960123634*^9}, {3.734609844278469*^9, 
  3.7346098692743177`*^9}, {3.735326606541873*^9, 3.735326622587414*^9}},
 CellID->1263518702,ExpressionUUID->"5ec96df5-dcbf-4fe8-a8ea-ae42732e38ff"],

Cell["\<\
[...] The monad represents computations with a sequential structure: a monad \
defines what it means to chain operations together. This enables the \
programmer to build pipelines that process data in a series of steps (i.e. a \
series of actions applied to the data), in which each action is decorated \
with the additional processing rules provided by the monad. [...]
Monads allow a programming style where programs are written by putting \
together highly composable parts, combining in flexible ways the possible \
actions that can work on a particular type of data. [...]\
\>", "ItemParagraph",
 CellChangeTimes->{{3.734129646085888*^9, 3.734129704153173*^9}},
 CellID->1640522978,ExpressionUUID->"89fb4f9b-6b03-440b-a4d4-212ec3167ad4"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " Note that quote from [",
 ButtonBox["Wk1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)"],
 "] refers to chained monadic operations as \[OpenCurlyDoubleQuote]pipelines\
\[CloseCurlyDoubleQuote]. We use the terms \[OpenCurlyDoubleQuote]monad \
pipeline\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]pipeline\
\[CloseCurlyDoubleQuote] below."
}], "Text",
 CellChangeTimes->{{3.7346099249196043`*^9, 3.734609965307767*^9}, {
  3.734610048141921*^9, 3.734610101670725*^9}, {3.73461655035218*^9, 
  3.734616550354785*^9}},
 CellID->727147413,ExpressionUUID->"4a2f2b40-2d0a-4bee-8925-c3d671a5de57"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Monad design", "Section",
 CellChangeTimes->{{3.72996269554256*^9, 3.729962702336378*^9}, {
  3.729962746088051*^9, 3.729962766879827*^9}, {3.729963877855832*^9, 
  3.72996387918302*^9}, {3.733550144758416*^9, 3.733550146275455*^9}},
 CellID->1984618861,ExpressionUUID->"7e349abf-3823-428a-93e7-28357110e07f"],

Cell[TextData[{
 "The monad we consider is designed to speed-up the programming of \
classification workflows outlined in the previous section. The monad is named \
",
 StyleBox["ClCon",
  FontWeight->"Bold"],
 " for \[OpenCurlyDoubleQuote]",
 StyleBox["Cl",
  FontWeight->"Bold"],
 "assification with ",
 StyleBox["Con",
  FontWeight->"Bold"],
 "text\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{{3.733424326452961*^9, 3.7334243386904707`*^9}, {
  3.7339161600384693`*^9, 3.733916193147944*^9}, {3.734129030413701*^9, 
  3.734129044036919*^9}, {3.734609984356267*^9, 3.734610018318657*^9}},
 CellID->773191623,ExpressionUUID->"4fc3582c-535b-4a47-8ca8-55c7144f9e9f"],

Cell["\<\
We want to be able to construct monad pipelines of the general form:\
\>", "Text",
 CellChangeTimes->{{3.734129760170046*^9, 3.734129783176695*^9}, {
  3.7346101215733223`*^9, 3.734610121695839*^9}},
 CellID->608059764,ExpressionUUID->"5aa92d5e-2eaa-424e-bb04-98b49de9fb18"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClCon", "[", "_", "]"}], 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   RowBox[{"ClConBind", "[", 
    RowBox[{
     RowBox[{"ClCon", "[", "_", "]"}], ",", "f_"}], "]"}]], 
  SubscriptBox["f", "1"], 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   RowBox[{"ClConBind", "[", 
    RowBox[{
     RowBox[{"ClCon", "[", "_", "]"}], ",", "f_"}], "]"}]], 
  SubscriptBox["f", "2"], 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   RowBox[{"ClConBind", "[", 
    RowBox[{
     RowBox[{"ClCon", "[", "_", "]"}], ",", "f_"}], "]"}]], "\[Ellipsis]", 
  UnderscriptBox["\[DoubleLongRightArrow]", 
   RowBox[{"ClConBind", "[", 
    RowBox[{
     RowBox[{"ClCon", "[", "_", "]"}], ",", "f_"}], "]"}]], 
  SubscriptBox["f", "k"]}]], "DisplayMath",
 CellChangeTimes->{{3.7058415800987587`*^9, 3.7058416110501013`*^9}, {
   3.705841645638204*^9, 3.705841727356278*^9}, {3.705842008672937*^9, 
   3.705842032273075*^9}, 3.705842164892056*^9, {3.7058433888986998`*^9, 
   3.705843451077479*^9}, {3.7058450038863297`*^9, 3.705845053428492*^9}, 
   3.705845147446558*^9, {3.706006685056164*^9, 3.706006688498361*^9}, {
   3.706565647454422*^9, 3.706565650014637*^9}, 3.706973379971839*^9, {
   3.73412980856787*^9, 3.7341298523085537`*^9}, 3.932505602364868*^9},
 CellTags->"GenericPipeline",
 CellID->1933261122,ExpressionUUID->"bde03923-5c56-4173-b32e-8b0af6507e60"],

Cell[TextData[{
 "ClCon is based on the ",
 ButtonBox["State monad",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)#State_\
monads"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)#State_\
monads"],
 ", [",
 ButtonBox["Wk1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Monad_(functional_programming)"], None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Monad_(functional_programming)"],
 ", ",
 ButtonBox["AA1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Monad-code-generation-and-extension.md"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Monad-code-generation-and-extension.md"],
 "], so the monad pipeline form (1) has the following more specific form:"
}], "Text",
 CellChangeTimes->{{3.734129870263419*^9, 3.734129879150743*^9}, {
  3.734129945245371*^9, 3.7341300088646173`*^9}, {3.7353266695778437`*^9, 
  3.735326679828556*^9}},
 CellID->892098344,ExpressionUUID->"7fb91505-3f99-4283-921a-d768e91105d3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClCon", "[", 
    RowBox[{"pval_", ",", "context_"}], "]"}], 
   UnderscriptBox["\[DoubleLongRightArrow]", 
    FormBox[
     RowBox[{"ClConBind", "[", 
      RowBox[{"m_", ",", "f_"}], "]"}],
     StandardForm]], "\[Ellipsis]"}], 
  RowBox[{
   RowBox[{"(", 
    TagBox[GridBox[{
       {"\[Piecewise]", GridBox[{
          {
           RowBox[{
            RowBox[{
             SubscriptBox["f", "i"], "[", "$ClConFailure", "]"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             SubscriptBox["f", "i"], "[", 
             RowBox[{"x_", ",", "c_Association"}], "]"}]}], 
           RowBox[{
            RowBox[{"m", "\[Congruent]", "$ClConFailure"}], 
            "\[IndentingNewLine]", 
            RowBox[{"m", " ", 
             StyleBox["is",
              FontSlant->"Italic"], " ", 
             RowBox[{"ClCon", "[", 
              RowBox[{"x_", ",", "c_Association"}], "]"}]}]}]},
          {"$ClConFailure", 
           StyleBox["otherwise", "Text"]}
         },
         AllowedDimensions->{2, Automatic},
         Editable->True,
         GridBoxAlignment->{
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{1.}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.84]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}},
         Selectable->True]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}},
      GridBoxItemSize->{
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.35]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}],
     "Piecewise",
     DeleteWithContents->True,
     Editable->False,
     SelectWithContents->True,
     Selectable->False], ")"}], 
   UnderscriptBox["\[DoubleLongRightArrow]", 
    FormBox[
     RowBox[{"ClConBind", "[", 
      RowBox[{"m_", ",", "f_"}], "]"}],
     TraditionalForm]], "\[Ellipsis]"}]}]], "DisplayMath",
 CellChangeTimes->{{3.7058415800987587`*^9, 3.7058416110501013`*^9}, {
   3.705841645638204*^9, 3.705841727356278*^9}, {3.705842008672937*^9, 
   3.705842032273075*^9}, {3.7058421067386723`*^9, 3.705842230314228*^9}, {
   3.705842362752913*^9, 3.7058424149282913`*^9}, {3.7058424462189007`*^9, 
   3.705842463420093*^9}, {3.7058425566716623`*^9, 3.7058426183121357`*^9}, {
   3.705842699113277*^9, 3.705842741907308*^9}, {3.705843584013538*^9, 
   3.705843638720714*^9}, {3.70584460693123*^9, 3.705844616931118*^9}, {
   3.705844658727973*^9, 3.705844764297112*^9}, {3.705844866687862*^9, 
   3.7058449493787613`*^9}, {3.7058566832704487`*^9, 
   3.7058567720637007`*^9}, {3.705856825201304*^9, 3.7058569003398247`*^9}, {
   3.705856942214942*^9, 3.705856981760878*^9}, {3.70585704817095*^9, 
   3.705857054267866*^9}, {3.705857084542461*^9, 3.7058571084136133`*^9}, {
   3.7058574655120687`*^9, 3.7058574829129343`*^9}, {3.705950709438127*^9, 
   3.705950710372057*^9}, {3.7064759485764914`*^9, 3.7064759668330727`*^9}, {
   3.706476046657185*^9, 3.7064760774539557`*^9}, {3.706565654581965*^9, 
   3.706565655515828*^9}, {3.706975226297134*^9, 3.706975230063406*^9}, {
   3.7341300455304937`*^9, 3.734130095942686*^9}, 3.932505615804356*^9},
 CellTags->"Eq:ClConStateMonad",
 CellID->1913527901,ExpressionUUID->"1d25bbd8-6c99-46ad-8a26-7690bed20426"],

Cell["\<\
This means that some monad operations will not just change the pipeline value \
but they will also change the pipeline context.\
\>", "Text",
 CellChangeTimes->{3.735326952724345*^9},
 CellID->2095818282,ExpressionUUID->"861466ef-6c24-48d8-b2f3-aad496a14f67"],

Cell[TextData[{
 "In the monad pipelines of ",
 StyleBox["ClCon", "Program"],
 " we store different objects in the contexts for at least one of the \
following two reasons."
}], "Text",
 CellChangeTimes->{{3.7341305860677567`*^9, 3.7341306019857693`*^9}, {
   3.734130754134509*^9, 3.734130979170835*^9}, 3.734610157115642*^9, {
   3.734687532763476*^9, 3.7346875335834417`*^9}, {3.7353266973574543`*^9, 
   3.735326708763479*^9}},
 CellID->1391087480,ExpressionUUID->"18bfa128-4a83-4013-abd2-b76590005beb"],

Cell["The object will be needed later on in the pipeline, or", "ItemNumbered",
 CellChangeTimes->{{3.7341305860677567`*^9, 3.7341306019857693`*^9}, {
  3.734130754134509*^9, 3.734130979170835*^9}, {3.734610160351207*^9, 
  3.734610178722865*^9}, {3.734687540198635*^9, 3.7346875435071297`*^9}, {
  3.7353267279448767`*^9, 3.7353267496354227`*^9}},
 CellID->352811471,ExpressionUUID->"aa2a584c-3557-4049-8ef9-1f8256b2dc56"],

Cell["The object is hard to compute. ", "ItemNumbered",
 CellChangeTimes->{{3.7341305860677567`*^9, 3.7341306019857693`*^9}, {
  3.734130754134509*^9, 3.734130979170835*^9}, {3.734610160351207*^9, 
  3.7346101818727207`*^9}, {3.7346875458358393`*^9, 3.734687546195219*^9}, {
  3.7353267340760727`*^9, 3.735326736866632*^9}, {3.735326769348037*^9, 
  3.735326798372431*^9}},
 CellID->500043730,ExpressionUUID->"34bf5e00-2244-42f8-9c09-5c3b289b1bab"],

Cell["Such objects are training data, ROC data, and classifiers.", "Text",
 CellChangeTimes->{{3.7341305860677567`*^9, 3.7341306019857693`*^9}, {
  3.734130754134509*^9, 3.734130979170835*^9}, {3.734610160351207*^9, 
  3.7346101818727207`*^9}, {3.7346875458358393`*^9, 3.734687546195219*^9}, {
  3.7353267340760727`*^9, 3.735326736866632*^9}, {3.735326769348037*^9, 
  3.7353267779857807`*^9}, {3.735326810003598*^9, 3.735326870788581*^9}, {
  3.735326948820675*^9, 3.7353269496419697`*^9}},
 CellID->1131459399,ExpressionUUID->"1a52b345-4535-4353-b5f4-56adb734182c"],

Cell["Let us list the desired properties of the monad.", "Text",
 CellChangeTimes->{{3.734129193673053*^9, 3.734129198435603*^9}, {
  3.734129305481017*^9, 3.734129321489648*^9}},
 CellID->470424808,ExpressionUUID->"11b10add-53d4-4d2d-950d-a1acc9e2954f"],

Cell["Rapid specification of non-trivial classification workflows.", "Item",
 CellChangeTimes->{{3.733953885546135*^9, 3.73395396012411*^9}, {
  3.734131359096774*^9, 3.734131389475753*^9}},
 CellID->1542443449,ExpressionUUID->"9a108706-792e-4156-ae28-ef73648eaa11"],

Cell["\<\
The monad works with different data types: Dataset, lists of machine learning \
rules, full arrays.\
\>", "Item",
 CellChangeTimes->{{3.733953885546135*^9, 3.73395396012411*^9}},
 CellID->1571944406,ExpressionUUID->"88835d35-28e9-477b-b6a5-1d224eabb326"],

Cell["\<\
The pipeline values can be of different types. Most monad functions modify \
the pipeline value; some modify the context; some just echo results.\
\>", "Item",
 CellChangeTimes->{{3.733424501729344*^9, 3.733424590615806*^9}, {
  3.734131110616765*^9, 3.734131110619543*^9}, {3.7353270048580427`*^9, 
  3.735327054762474*^9}},
 CellID->1325806248,ExpressionUUID->"897cd6c6-145c-4f15-b856-06abd2038418"],

Cell["\<\
The monad works with single classifier objects and with classifier ensembles.\
\
\>", "Item",
 CellChangeTimes->{{3.733424501729344*^9, 3.733424590615806*^9}, {
  3.734131111326354*^9, 3.7341311575310497`*^9}, {3.735327063494882*^9, 
  3.7353270656288223`*^9}},
 CellID->535288864,ExpressionUUID->"bf524b0f-9497-4920-88d9-59ea4c37067b"],

Cell["\<\
This means support of different classifier measures and ROC plots for both \
single classifiers and classifier ensembles.\
\>", "Subitem",
 CellChangeTimes->{{3.734131159679716*^9, 3.734131218518671*^9}},
 CellID->790939965,ExpressionUUID->"d767864f-72df-4164-9f06-9cee380581c5"],

Cell["\<\
The monad allows of cursory examination and summarization of the data.\
\>", "Item",
 CellChangeTimes->{{3.734131159679716*^9, 3.734131217538082*^9}, {
  3.734131258097731*^9, 3.734131291598406*^9}},
 CellID->404216825,ExpressionUUID->"c63ef1c0-9ac8-49f7-8c5c-8b9e034a41f0"],

Cell["For insight and in order to verify assumptions.", "Subitem",
 CellChangeTimes->{{3.734131159679716*^9, 3.734131217538082*^9}, {
  3.734131258097731*^9, 3.734131347512423*^9}, {3.734131402186531*^9, 
  3.734131402188352*^9}},
 CellID->1181402314,ExpressionUUID->"4819d7f1-c831-47ef-bdf1-ffa844fbab75"],

Cell["The monad has operations to compute importance of variables.", "Item",
 CellChangeTimes->{{3.734131159679716*^9, 3.734131217538082*^9}, {
  3.734131258097731*^9, 3.734131347512423*^9}, {3.7341314040798473`*^9, 
  3.7341314466462307`*^9}, {3.7353270872558107`*^9, 3.735327093159457*^9}},
 CellID->194891236,ExpressionUUID->"f7016e91-b88e-4e2f-9923-9687c7bc66e3"],

Cell["\<\
We can easily obtain the pipeline value, context, and different context \
objects for manipulation outside of the monad.\
\>", "Item",
 CellChangeTimes->{{3.734131159679716*^9, 3.734131217538082*^9}, {
  3.734131258097731*^9, 3.734131347512423*^9}, {3.7341314040798473`*^9, 
  3.7341314604869127`*^9}, {3.7341314928990993`*^9, 3.734131554616066*^9}},
 CellID->624441777,ExpressionUUID->"07132ad3-3665-40ad-bf9a-0b0810803ced"],

Cell["\<\
We can calculate classification measures using a specified ROC parameter and \
a class label.\
\>", "Item",
 CellChangeTimes->{{3.734131159679716*^9, 3.734131217538082*^9}, {
  3.734131258097731*^9, 3.734131347512423*^9}, {3.7341314040798473`*^9, 
  3.7341314604869127`*^9}, {3.7341314928990993`*^9, 3.734131591851993*^9}, {
  3.734131666545238*^9, 3.734131667186522*^9}, {3.735327111116885*^9, 
  3.7353271113960037`*^9}},
 CellID->240363150,ExpressionUUID->"7b153d42-f197-4461-b9be-05b26c8ec3d0"],

Cell["We can easily plot different combinations of ROC functions.", "Item",
 CellChangeTimes->{{3.734131159679716*^9, 3.734131217538082*^9}, {
  3.734131258097731*^9, 3.734131347512423*^9}, {3.7341314040798473`*^9, 
  3.7341314604869127`*^9}, {3.7341314928990993`*^9, 3.734131590989225*^9}, {
  3.734131760147456*^9, 3.734131776752664*^9}},
 CellID->366722043,ExpressionUUID->"51535d9c-a801-4f67-8e81-69bed7cd4edd"],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 StyleBox["ClCon", "Program"],
 " components and their interaction are given in the following diagram. (The \
components correspond to the main workflow given in the previous section.)"
}], "Text",
 CellChangeTimes->{{3.733550164198677*^9, 3.733550209075248*^9}, {
  3.733907923147995*^9, 3.733907928118556*^9}, {3.733907989499333*^9, 
  3.733907992479952*^9}, {3.7339080990430527`*^9, 3.733908141150771*^9}, {
  3.73390819321989*^9, 3.733908203870564*^9}, {3.7341291677916813`*^9, 
  3.734129173257914*^9}, {3.734130178711649*^9, 3.734130197946581*^9}, {
  3.7341310376274776`*^9, 3.734131078475995*^9}},
 CellID->219309811,ExpressionUUID->"5cc4235e-d70e-4df5-8597-87348ab6ffc6"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvXd4HdW1/o9caAFjU0wPAZsaCNiBGNNCIKEkFwyGS0koCUkgoSWkAJeS
G5JAHMgl5CFwgQCm28Y2GC4m2CYYjJuaJVfJkixZtrpk9S4Lf9fvrJ/Ws87a
e0ZHbkfWvJ8/zjOas2fPOnvv0fO+s/bsOfqWX0y8ddBuu+326z3pY+KP7vvW
r371o/+6ajj98Z93//rnt939059cevdvfnrbT3915i2DaecZ9DF5yG67/X/b
WwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAADCw+OKLL5IdAuinYGwAAAAAAADQ/4FuBwnCQwUDBgAAAAAA
AC9eqax3hhdIRGn3WkaL9i9iuEf1ekZzeIKn2+qYwU4jqE+3i9fr00juh+zq
8QMAAAAAgB1E4mrZdVLusV/0QNvd3d1BlYTUH/JtuAF094RYv5BKtot1BduL
vja1a3z65Ad7HSrbhRB3NsDiDyrp/ecAAAAAAAC2hfCMmHdPgt5Huzzjy7ZF
bXrDSCRtl+Cpd442Bklhh3blThgnu3r8QSfFJQYAAAAA0Ff6qqMSv7Xu+qzE
z6LL8xm3Wu91x/DWELQnwfBAElmxYsXixYuXxuAN+lziIDvdDQ0dLp+yJ7xm
rmppD+Zw/lMOF9yTutFKMX3qARY/1+wGQxupqan0WVtbm+whBgAAAACwS5K4
CwsxNW1tbfX19Zs2baqsrCwuLi4oKMjLy1sTg3T48uXLs7Kyli1blpaWRsqN
PtPT0+nP7OzsFTGo2OrVq3NycnJzc/N64EoKYxQVFa1bt473EPn5+WvXrpVT
rFy5kk5BtVGdVDPVT0KRz5KZmcln4ZJc//r160tKSmpqahobG1tbW3t1rEGZ
u6Dnv+D+dig0DP76179+8sknH8eYP38+ff773//mPfT5bwfZ6f3WwLWZT96Y
N28ef3I98i2fWpeUne6pTXk5SpeXegZk/OZw3iMHTps27dVXX032KAMAAAAA
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
XK4E9cbjJTz+RGroUM8KmWN160n2wfx8hrqAPHhBQcHs2bPJ082ZM2f9+vVN
TU0doXPqqqqqHn74YTi7EGRaprfXOhx7bjouvN+N6wm6RswY9g7jXm9cRDl+
98oSMC0TAAAAAJFi8eLFL7zwwsaNG12N5NVdlZWVRUVFH3300eeff7506VIy
GnRsbW2tOTbEyARpOXOs1ortPc9DeX2fK/Dc/e3xEyMTcX/ePXqnsVQmBh2A
SX94q3JPVFdXV1paumTJkszMTGrn999/Pz8/nzxdUCWm6Zqbm1966aW33357
CzJ3wYi5c3szqF+CBoa7P+SmRK94R2P4gHGJTvxBcSJzBwAAAIBIwe+5IxdA
xkFPoJKcUYdyRtqk0J/k6VatWpWTk5OamvrKK6+kp6eTByH3UV1dTc6iQ81g
1OvseW/FG+OjTYo+xBxrqm1XUyW1X3P/dEVmiI7V7RCkM90YQmSn6864iag9
N2zYQJaZ3dy0adOWL1+enZ1dVVVlAuAfrp9RMv60vr7+0UcfpXr4mTsGFs+l
sLCQzJ3pYtePawdt+t3tWTPYTD3m3kVHz3xFed7TXAjh48cbT2Tjd4G5AwAA
AECkkPfcTZkyhWyFVmhBbktrPPmWvcnq1atzc3OXLVv25ptvfv7552Qu6JP0
c1lZGZ1CHp2TSvS5vDqzV2Nl1KCUFOPT4bv/b2qTZ3lMzRr9rZsBbI83sO6J
jGymtiLLVlxcvGTJEvJfixcvnjx5MrljMsvUeuKO9elMg4fIYBK01P5ULYWE
VyGEw+ZOWrIz+PFP0xfmtoCbqtYjxx1LemCYnV4jo3tc23kdUjTjl/q98dMl
BnMHAAAAgCjAKyiSleBHt8hNzJ8//6233iKDpuWWLNKoYQ8oTtBoPIYqJJOy
Zs2avLw8spDvvPMO1U8uhhzfJ598QjvXxyCbw+u0aJ/CNZh1VCSf2BHvZTp8
rlNslK7N+ytc4WpMqFaVJk4dktaWvIdaoK6ubkOMgoICatgPP/yQ3By1w7Rp
06gdcnJyyIJVVFTISjXtTvpPKm9tbW2LoX+LdASX5PfcpaamknNkASzmDmk7
L7xaptwKaPdN39X9awahvgQ6fCZI0G/oMGvy6DHW7pgpfS3wsSZHppdRjWz8
7c6/Ba6ErgiemQwAAAAAEAXY3LX3WCQyGnPmzPn888/T09MbGhqMUmr33VrX
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
tDV+Kp2u05tDTDx+U48pY/SqmVmXYPu7LSD7qX8jNSczhM7OTrJRxt/xapmm
10IavCU+69oSn1f1ltc72dy1xCeYKAZyVWVlZbQnJyfniiuuGDVq1GmnnTZm
zJgZM2ZQmf/4j/848sgjDz300HHjxi1ZskQXGzt2LBXj5KOEJAHMnj37vPPO
+8Y3vvHVr371Bz/4QWlp6aZNm773ve/l5eVNnDjxzDPPpLPccsstFRUVVJj+
D3DmjjbGjx9PG1SSznvIIYdQDXRe/pPCoD/T0tK4GJ2xqqrq/PPPX758+YQJ
EyjCk0466be//S2vu0Ke+pe//CWd5ZRTTrnooouWLl16wQUXmPZx//n0tf29
hpFB5g4AAAAAkcK8CiH8FrqLW1ikmtfy9BURq249rkTsNf6gDKOpZ0fHr91i
n+IPqt/UoOt56623jjnmmKOPPvqYKEGuhz4PPPDAoUOHkm/in887U2KQB2F/
J69CcJ//CiHxgSR1GnOn66FiRxxxxKJFi2ibfNBf/vIXTiWvWrWKfkJlZSUZ
pUcfffSOO+7g58uovC62evXqAw44QLLSMrrIstHhZAP5z9/85jfk76qrq0eM
GHHVVVfJ/kmTJpE9pA2ZlinP3PF5b7/9dj4vnY7/pA02blysvLycGvmmm24q
KSmhP8lCUngvvPBCS8wekrnjODMzM8kM7rfffu6Njr4O+0TanykqKoK5AwAA
AEB0IMVFos5YD6+TStAuuXajT0dpY9USYFhaVZbNncAWhFGPCerzrYjfPTDI
uLXGLwchlW9F+5t2kD9ffvnl3aIKmTj5NHtGjhy5YsWKLTFzp6dlJu4aXLyd
rv+kysnc8RKsupvoKzKbU6dOJed15513kuuUo04++eRPPvmELRjPh6TCNTU1
d911FxfjGr72ta9Rsdb4zO/KlSsPOuggmWO8cePGp59+mk5BLfCvf/1LB3nW
WWdNnz5dpmWya3OfueM/KUI+L5UfNGgQbZC5oyal/yQyvJ944olbbrll4cKF
9Ht1ypscH5m7lmATvdX3Usz/BKkH5g4AAAAAkUIyd6KRRKHJm7C0FhW0iDJi
1X0Lm1TbEu/ITA6L37LHn60B8xJ1DCH60ASmw3P9oDd+XaFZhc/EEBK/m/5L
PP4+tT+Xd2tOS0sj/1JYWLguMhQUFBTGoLH96aefzp8/n38+fT7yyCPkR/bf
f395FJH289RHQbet20d66JqRLH3Bq8J6s1Fs7uRA7jLaOOaYY9idNTQ0fPbZ
Z//zP/9z9913X3755cOGDeOVYNlkySkaGxup/JNPPvmLX/xiwoQJXEyPVR4G
995772GHHfbDH/7w2Wef5aWBKisrydyRPZQRS58PxiC3SOaOjpJlMGlbzB3/
nMcee+z222/nY7lYSyxzt8cee7T2rLJCn//85z+vvfbaf/zjH/wsoVwFq1ev
JnOnx7OM8+3S/vqS5LbCM3cAAAAAiBSkckmkaVFkjInrTVqUDzIqSwStq8qC
zFpQkkuqFY+jxZuoYtclGcXonsKc1/11LfGmT6/K7tZgDtGh6nhMyzTF0PFv
Y/ubYnIucTHRfPJOv+Pv97//Pfma4cOHy7v/tvSslsltJYOKX0Suh5AZAK5b
1wODZyF6+/fYY48lc9cSP8KrqqrIVW3YsGHjxo3jxo27/vrrX331VQqytrb2
7LPP5iwbv5ORD6GSVOz73//+5MmT09PTN23adNZZZ3344Yf8Exipv6ysjH7g
/fffP2rUqJ/97Gdk66gRZA0ljuShhx667777aCebO56fyZXozF1zLIFIYfDP
52K0TebuS1/6kjQC7XnxxRevueaa559//gc/+IFuqOzsbGp/CU83eIu6qLex
/Vt67o3Qfv3MXTQvAQAAAABECl4tU/sIkYVGJZr9zaG4boUFm7uflTArPde8
eKttjjeJxk9pp8MPB0l50ZCCVvWyRxbPdHMHOisne9yA9Yb73i4tg40N1LK/
T+1v2qqlJ4XE77kDZEkGDRo0YsQIdrvG3MmgktbjkaMHCXcB90hjjJZ4S8jH
6rS1uYHQHJuWaVbLJO6+++6rrrqqOZbwmjhxoh4Ghx122EcffUQbjz32GJss
2ibrxMXE+xxyyCHkAaVO6ncKb8GCBc8884wMQvKABx10UFZWFpk7cYL8efHF
F5NP1OZu6NCh3Ahk7m6//XYZfvTnz3/+c24TeeautLSUzF2rekXdSy+9ROYu
LS3tiCOOoPPKsHz00Uf1M3dyiG63rWt/M/glkvXr1+M9dwAAAACIDpK5M3bJ
eLGQTJkYE+1cdHnRckYJawNlzJcpY/yU+UqUuXFG2p01x5tHQbIPtL1ixQqS
oxK/iMYgE6fbSuvSlngTp3M0+iuzx62zr+0vDkIr3qi9CsFkZ+TPjIyMY445
hj5N+XU9LzHX/cgbkjJ2DYjJw5phKTcHzHhuic/cVVZWLlmy5Nprrz3uuOMK
CgpoDzms8ePH0+E8/H73u9+NHDny5ZdfpvLPPffcDTfcwBWSdaJizT23Ix5+
+GEqRsfK2XnwVFRUHH744bm5uRzw6tWrhw0bVlxcTAP+oosuog3+CVOmTDn6
6KPpn4BeUIWMMP+K559/ns4rg5CTcfwnmzvJ3Enj0KnJpZK5o+3rrrvusssu
y8nJocKvvPLKhAkThg8f7rbbtrS/2xHyH6A5PnMHAAAAADDg4cydcQTGRGiT
or/Vt8r1zqC8ktHAupibEWtWbzpuUe7MKDrZ0LVpoyrS0RRr6Xl26cYbb+Tz
cnKkWdlAKWmMoQ4p6GfqMHTwbj1SYKvbX9s6+kU6kqiZuy3Bs++6urrcMjpz
5x3YZix5i5mhYsaDHkKjR4/eZ599RowYQT5r//33P/vssx988MGamhouRlfi
pZdeesIJJ5DjGzNmzJ/+9KfHH3+cSq5YsSIvL+/444//+te/Tn6Qil188cVU
jAzUqaeeSuN20qRJVIyfqtPxvPjii6eddto3v/lNclh06mnTplVVVe25556z
Z88+8cQTL7nkkjPPPJNORPU398zG5DB4g+Dzjh07dvHixVT52rVr6U86hP6U
8mVlZfSj9E/maZk8qv/4xz+eddZZX/va137xi1+kp6eTD5VW0mPeOxmgr+0v
SG1YUAUAAAAAkYIXVDFaVKsjV6waK9esMmUG2RlignQBfUiC9WjH5xbQP8fU
6R4u5k6XkTdKh7RDS3x2xqU5Xuebetyk5Fa0v6lBNswsxIjjtoM8c+f2S4tj
IrTrN5NjjfX2dn1Ql+k/aSMnJ4esU3l5uTuEyEY1NDRwDbm5uaaYiVPCy8/P
5wQ97amsrCRzRxv0Z1paWkFBgYRtrpFmdV3TefmmgYQh9xDMiNU/n/6xLFy4
UI/8Z599ll+7YJq62XddJNj+LfErOJkZCMjcAQAAACBSSOZOz3cyqSst3lxE
ZQUV0IcH3Z+nT369ck1Nzf3333/OOefQBonDe+6554wzzhg7duwFF1zw2Wef
Ucnq6moqRsr2yiuvHD9+/KmnnvrDH/6Q1GZLT/7rj3/849gYdODTTz8t9csL
nU866aTrr7++tLS0ObYwIM9wozq//OUvH3zwwePGjVu6dKlU9fWvf52qoqOo
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
8m1DvIsx4ZliEY/fbBAwd+GY99zphpUuc3NSbDqk93VJdwg1Kqtiek0/JiZH
GefF53JHoJRxL95IxS8nlTISJ22wucNSmQAAAACICDIts8G5gS9WxRVjWunJ
7XpRX0YWattivtLZK6MMjdnxCk4jNfXZoxN/gyOntfqFuQtn3bp1M2bM0C0s
DdiokkriUBidvfIODL1HKtHdqqs1B3o3vEOlMZ5oxh9eDzJ3AAAAAIgU5pk7
F6P0jFrz3uo3ciukTEhyqkk9iRNkfGS/PkXE4zfJRPPMHVIYBjZ3pv21v3C7
QNKyuuu9XazHgy5jDvF2N0+AdAuHjx9dZ2Tj13/C3AEAAAAgUvC0TNFXQUbG
Vb9ezMQtk9gS9P4gvefuaXTQhb0zxKIQv/7TnTiH1TLDkQVVGuJNgbvhdk0Q
OtkaXo9smIfRNO5XbqLW1B/Z+E0/NmG1TAAAAABEDDF3rMFcJRaurHi/GMMg
WdgQ/+iNLt/Y8xiOcVLujEc3GKlZ5GU045c3WeinqPjb9PR0ZOtCkGmZupdN
L+guEIJ60+0mr3mReqTLggaAPlYSVWagGqIcvyE/P3/atGnJHmUAAAAAADsJ
MndVVVVG0Xn/bPDNnuKddXV1jeruvckfmZygWI8QHagP9JoaLercJ+YiFX+j
WsmQo5LA8Mxdr7jmzttTuoDb+94ulrsB2nFLSTfH6joar5dxzxsSbZTjZ0zm
Djc6AAAAADCwycjIqKmp0dopRCkZ7deo1j/3Jqo0ZKDMKRp8i5mEV2J0nZGX
kY2/0TeDlLdh7sJhcxfka0JmG5puqu/BFHAHjO67RgfTfe6JGgIcaJTjN0lD
fSFocwdnBwAAAIABT2ZmZmVlpRZmJoHlKjH3Fr0RV3IgZ8QaelJO7I9czSZa
jvHenDfKsN5ZC93oz4jHL9/iJebhsLnTvsb1KaYLXG/u7RddzB0JckbJGrv1
8HgzfsrsNCMK8ZuN/Px8ZO4AAAAAEB14tUwt2ERr6fmHruPwWgm5ma+/NRkB
c6C+9+7Njnnv/It6lHPV9RDx+PVJ6U/O3EHTBmEyd/UK+TMozeT2hW58XcxM
5dXOxfSd/hRfIzE0+p5Wk7yzjjma8Zsf0hB75g4LqgAAAAAgOnDmzutfRKGJ
JDPKqj52H96Vc6YSKWPqN8V0PSYGg7lXb4xPlOM3+xtjC6oke4j1a3TmzngK
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
H7sQNAhsJh7ctQe4oYqtXjljF0UwkJNyo/T/1PT2228/IZtiO4dgDLUckfNk
yvF5Cu6oCSStV1dsUWtUpHTFTEzA7RHvUhVCRP3Zz35mZ+ftgpas6UlUpUmE
SPfSM4pRUB0UPkve+g8G3QRflulwOByphMzcKbsjVlVZsazx7tDNY5NEdpmD
O2XI6uGVHMmhPncPSSsDn2Rbjz4nmkLJEI11BgZOlRupZJDcPvvZz5Ifq4yv
OiCDS3Y8m+u3W6BgysTbOqTfBx54AP1YrFtV/+ogY6Ys8cCDuzjwUwiKzBnj
fUnsw4xatGgRxXFbtmzBlH/5y1+uv/56yUGtHCMvlOem7ZwdHsggg+gXWUGg
4I68PiE5stESEqdOpCEoqmSMRy2XlDDZ3KEPPiNDE5aBwTl6aYx0FQtVt6MD
j+v6gsv5VB1yDh7c7Rnea4H6FIJUr6JQki4ihCFUVFTwjDOeVBzA4lS2yA1F
KmxxSuBsbq+rHqG+9VMFKg03AbYmOD0nyUiYX/ziFxloRKqKsL3bqT1Z+5qB
6elMa8yo6iS4hDtv/dvzGZ+5czgcjpRi4MCB77zzjnT4skqKzA0uBcHVU8qA
iimUlPS7YsUKDu6yLbMVV1999Y4dO+69995LL72UDpYuXUoO8Omnn05G88IL
Lxw+fDjfW11dfckll9DB1q1bL7/8cnKeKdnFF1987rnn/uY3v6mpqSHfmBJQ
Yk7wxhtvUILPfe5z55xzzj333CMyUxG/+tWvKOfzzz//61//+uzZs7/yla9Y
a07F/e53v/vkJz953nnnUSYvvviirEBbsmQJS0iZfOpTn2IJCVddddUpp5xy
wgknUBhI2dKDXHfddZSMMqFkw4YNE9s9fvz4yy67jGX73ve+R5VM56nEu+++
m0r59Kc/TSJNmzaNq46y/ehHP0rZUvrXXntNPF4Va9j6z5rXTxQ8uIsDl2Xa
2mZG2foXv/GLX/xijx490Jk888wzOVoUCn2qBUShTMsSSg7uhOrMw/vuu4/p
Smx/6aWXZLKMW8oZZ5zBBBsxYgSdpNZEJDz++OOZLdQu6C6WgQT+85//TOyi
3Iii3bp1Y0Ju27btS1/6EjUooivddfbZZ1ODCnqG0ihYmIkTJ7JnS4ml2X6y
BfREzDqSh9l70UUXzZo16+2336ZSWGYSg19p5GocN24cNQoSjFr0TTfdtGnT
Ji7x17/+NZ2URsHk/+Y3v0nZ0mPSJW4U0kdhuIqNGh1gPrl27VoP7vYYslsm
Rx8Sldj4SAwEawTnf3FpIt/IzYqCO7ERmZZxD6IBkY1Y9LWvfW3KlClcEHek
xAHqSL///e/zWApT7sQTT2RuEIU+//nPi+F4/fXXr732WrELLNvOnTvZKFxw
wQVXXHEFGwVZ8YgNHJsAZcJNgGfupFFze+RGLb03CUP8p4eVlsJtn+2CNQr8
tjvbhbvuuuszLfjqV786depUqiJu5pgtEhs5n1T/fMxraaxpyPo7dw6Hw5FS
8MydGuUTu2CtiTi9watiTXDmjgwuWeHbb7/973//++LFi+lk165dH374YX6b
g8zlMcccQ7EPW9X999+/ruX1vQ984AO33nrrhg0b6PzGjRvJmJKnQb4xv7JE
buFBBx1ECdavX89/yWqTqWIxyNqSHaf8qaz58+eTF33UUUehd8Fi0+0//OEP
yanItuyqRxafjCn7sZQbS5htebmDJCRDzAb0r3/9689//nP2PynZI488wsf0
aPIglPjYY48lL5dvIQeD3BLKiiw+3UuPSWnmzZv38Y9/nHwMloey/dnPfqZm
MbKh+UGc7MBh5KCyPLiLY+XKlRTcIeGxJoPxMoIoR+wSLVBgcvLJJ7M/TCR/
6KGH2I9lChE35J07YTLhlhbQJTpevXr1lVdeSb4iL8sUHtKlt9566+ijjyZq
UZ5/+ctfmC0kIb+pylT50Y9+9N3vfnfHjh3cashJprCRjrlB/eAHP+AGJe3F
PiZJQu2C8sRGwSMe2CiI7SQMNe1MS2+A7KWmSg/OrZuSUdPjZCT5cccdx42C
UlKjoPiOjrlR0OPTsTQKaWt33nknt5esmXdQCPZUVJ8e3O0B+LOA+CmEutyl
GtiRogrseIgkk5kvzkeW7jO+/e1vk66ZNnPnziUaUERDTYYaDnOG0lD0xx0p
/eUmwLlRa+KsiGPUFojDRH66RL9EWnqKTMtYARsFOiajcPHFFx955JFB5tza
AtUEeOaOuc3PyE2AJGT+i1GgS2LgMi12gWzBOy2gZ1m2bBmXcvfdd9OzsPwU
isqzk2xnnHHGnDlzKLcHHnhAmjnWZxLnI/WPzUdy8ODO4XA40gey4BTckacX
cJVy7YgKH5SLJSZDDsRw0/G2bdv222+/fv36sXHfvn27OGyM888/n0Mq8XjJ
F6VbFixYIGkee+yx2267jRNQnpiALRcFWeTZ0vH06dPJMRA7yybsiCOOQLF5
DJZcTRJGPBZynim0JEnopHibnMMFF1zAEtJfWQ7ED8I+OecpD8IGXSqWItBu
3bqRvSbB2OJz+v79+9988838l7O1FS5/xUGy/m3kjAd3cfDMnWV+JnccQGlB
qpc4cPjhh7/xxhv896c//em9995LB8T5X/ziF0TXTKtzRdygEIk8RhXcEQ+P
P/54CsckZyKP8JAJJsUJwYSEdJdkRc3hpJNO4siOs1q7di35k+vWrbMN6tFH
H/3xj3+smEZeNAsjDZnEI2GmTJlCJ0kYfiIlTAbeuZO2I82Kk3GESy2OZ+sy
LZ8XDzYK6ijI6c20tjUqVGo+SH55hGBwR875kCFDis2yzgoJ7hA2ssP5r6CC
gkOFbCP4DEVzn/jEJywNqGV95CMfkY6UOYOUy+Q2AUrJPBchiedkF2bMmHH6
6afjcgh6NDIKVioiPJUoTSDT0pmTnNR4I5ZLhMmAXRC6nnfeeZSM+C/PQpc2
bNjAE+vUBOjZMVt69ptuuokOKLhj/tv6xINI/dtGgbrw4M7hcDhSCXznzpoP
5U2JpcDQKQPOFY8x1rXO3PFJDu7oVxKTISN38fHHH/+f//mf66677sMf/vCE
CRMyLbtlko2ua5m5++AHP4iGqU+fPt/97nfRiFMCkYTQt2/fG264gQ7++c9/
3nLLLRlYPkdRGwd3mVbPhEAu31VXXZXJ9VVOO+00dkQp26lTpz755JO/+tWv
rrnmGpJw/PjxnAM7nJwJPQglowf55S9/icnoEjn55GnfeuutTz/9NJl1Otmj
R48LL7zw/wNQPmT3JVsJ7pImKaSelTcbOe/BXRxE1BEjRijm4yqyJEUIZyhE
+u1vf1vXshj4yCOPJFeQE5CnSiR/4okniBvXXnstk1wILFR/7rnnvvnNbyoV
Ew/53U8i2LRp0ygT4qFkwlEPT1tkWnfLpGNqIzfeeKMS9bLLLnvhhReovXzo
Qx/Ktr4QxImpQclTcFbUKFgYbHrcKDIt+x1xo5AnIrbzTIG8MSoPTo0CZeas
/vd//5caxQ9/+ENuFJSYGkXXrl2pLdx///3SKM4991xOz/vGFEh1e54ebfXq
1cOGDeN5KEdbQdqxwZ0NsbG/sqqxTYbP4Myd9I1//OMfmQakd6bBb37zm5NP
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
6vLN70TivkIS47PgVQxF0UOu9Q1V2gcK7vAVYBXUozriUAMmGAol3d6mDlZy
jjPcRqNJIWG8lGD0alMmlb4HsG0w78MWkk/Pnj2LTTGHw+Fw7H0MGDBg48aN
dhwy0/rqVuHmhs/bUdagS4D5KH8SE6O3Zkuvax3sRZOnrqr87W8R5RcPp531
HxHPg7s4JLhTXlNtQoCGVMF3G/G8UpD9i79quB5zSwqUbHp1l8svoOBu2LBh
xWZZZwUFd7xDSFKvWBeaycLuSFElSIMgf1TK2tZ+UuUcBObJCM79dXD5kdtW
7LbWf1Aqf+fO4XA40of33ntPZu7QCmRgT3hrI9Cc2eH6WvDK5DzukGaNncoN
v4AgVtXmr6wtnrGDmXK78hiLKD+6BHKAgV6b6r8OAkmU34O7OHDmTjlCSndS
scpJQ9g5ONFIcHouaRkkH0QWCUcELjX5MRlufsgHviyzPZCZu6BGsLex6sOX
OkUdwd5VZtBU76pIgiyN9KI2f0U55GpHlh9vD74FkFd+9fhWfp+5czgcjlRi
wIABGzZsULYbX3ywrlcG3gpXBkVOotdX0wK8ihC/UUwYuRPWolkbrTJMOok2
zkaF9hmLJT/K1qb6x/xVtnU+c5cPuFsmNgHUvnKxFJdUzQvliAbMHGGUqEbR
SW6sg9ko3vwcy1WBlaViycqvbpf3njItX0/zZZl7DJm5w56HVSzcCC6trDVB
B14KQnXUSrNYhOoeLYEVo1QpSOMOLn9tbguV+uffuPx4YCNNhgd3DofDkUqU
lZXxpxA4JGGPrjZ3WirpWNksZQTRRHL+YpuU84YZ4l9r+NAiS3oJdmRgH21f
rfESMWc7O7bv5Ufx2lP/NaEtyn23zDh4QxUZzcYaVstlawvwu/BYon4JbYSr
omK5RWVYB1PMqnRFMGFmicuPrRXP+8xde8DBHQ43KR0pXQSPUXHWXkgy6oop
WyYDdt3IDZUnMra2xXhJej5GxiJ5bB/boeSX4URpAntW/0kHIpUvy3Q4HI70
gbx9cv5l5q4ud7MCZYzQuqGVrMuNUNC/UpGLNXD2uKYV1sKikZI4Tg3gy/IY
Manx4KuI8tflhmPiUbe1/mtzQ0Ulv8/cxcGfQrAj2+IFBf0o+VUTW8iTOkBt
i+dWC4Mnch5H4FGnajmcFUD8TLu+q2Tll0lzyYH06+/c7RnIOnBwJ5EF9lGq
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
Yteu4SyQfvI+jiVhErWCY/sqAsVgSond6eRHP9bKgIMeb775Jn8ExMnfftTW
1vbu3Xv9+vVWfZWmL0qih+rlgmSwx5GeOZgJFqqW2RdoDuzVziu/Cic5hy1b
tpA2t2/f7k3D4XA40gfVty9ZsmTAgAHbtm3D4cFK8yZXXqAdiXiM6pa8eSbd
FbwXTaoSpnPJj2t1kiDhp9z1YguKxatOBGwCdDxy5MgZM2ZE+BDUuGVFVSjG
aRMJI5SwfyO8Uk0gKHBQ/mA+RZc/kh6xefNm3gakiNRKGebMmTNkyBAJtOMz
p0lUSVJcEjciZEsKcOxroTZNVS5sWdh+1Y12PKQo8uNTqGR5W8ro0aOnT5/+
7rvvFptTDofD4XhfoOK7l156aezYsTvNm19o2uywf3DNidgd9faZ3CI5S3FS
KL97nmQKMRPeaQEtl5QYXNCIfyPyY+J9L7/KLSkfJYnc/vrrr5eXlzc2NhaL
VJ0I77VAjmtra/v3779o0SI72yXVK/s9Sv0jc5TvVwUbmAQn0SwUhWxzw50Z
km63ZzCfpCZsGdgB5VfHyn3lS8OGDfMPl+91jBo1auLEiTZqsF0QakdxRnEs
Mvdn71KNLtiBJ2Wo2maExsGwTlmHosuvcq40WpAc1AG1C2odvEmmz9w5HA5H
moC9Oo7gUZ9PPf+TTz6J4YkyFuq974gN4u9nyY1BNyxottTAaZKbjTeKqbVR
GEZ5siugMovWaO5s2d+sKPLndTys+ZZbFi5c2K9fv23btrnhLhAY3BE2bdr0
f//3f0uXLkWNRIbBUZtql0j6u3379ir4BIYlQJAYlkIqWfDGna0Bmhyosuwx
FoEldlj58aR1lfkM9WDjxo1z/u91NDQ09O/fn+K7ytzoI6iUJGIItVT8kkQq
RDCGUqVbYVTpKHZSemXROpr8OL6Ev9ZwoB2kNBTZDRw4sLa2drdHdg6Hw5F2
yJt3/Jeig3/961+VrQGOjLSzp6cslB0hRLOFxghjEGVJlXdnTSrnQAKISIyq
3PiID3CDd4nRVPqI/DgEWiz5ZUv5SvBdccrDeil0/Oqrr/7ud7+jZEVlU2eF
zOKRmrp37/72229XwgAFtgU7LSXuU5J/JerDYRPleika4F9ufXy7QqWZKUY2
ivDCvcrcURdbYmXIn+w48ku7UJXMlf/4449Pnz7dHde9C6nPXbt2kXWYPHmy
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
ffumz67UPzRjky1pXE9FAL1k2cyVK1eGhYUtXLgwKyuLsi2d2QHDor/GqzaE
zhj1oxE3neLRNDQ4qOieOjDemh7oZapflQsOoCqga4uKipo5c+apU6ewCfzn
TZVjWHquzZs3jxw58oYbbsA4Xfv27QcPHrxkyRIQtSr3qiv46KOPFJkdMmSI
1S5+IQVG7pzd+oIQgVJjRe7ef//9QIsj+D9s2rTp4osvBts7cOBAtsZyAKUS
CAQCJ2Hu3Ln79u3DuBsG7Fjkzuu7logeoWMBPmR28Dc9PX3atGnz5s1T++jp
ITBkbZ6yfeiMdElRLSRZjNOpvMW+sT8j4WL8zlO2251XA41jGktj8JCN8+ij
0TRQ2s6dO4HnpqSkFFfrFuflhtg2bNgwYsSI6667DuN0wOneeOONZcuWhRrB
gVqaMWNGkyZNoBIef/xx/CjSWHuO9zrgAceNGwdVMXz4cJs0tSmSQFAJGGdl
65E7UeaAAKt93bp1rVq1gkZ55ZVXJH4nEAgE1QswttHR0VlZWa5SqHCbcR5m
UVERro7CEltNwlRXlyxZEhUVBfyO0jrkcYoKIdtS5zFehqE0ZGRQIJ05WazN
yWQ8UY+7IY9jeY2EkUX9ik1hQSzT+IB4lR7DQX5+/tKlS6HyT5w4US2ehr61
HHI94HR/+9vfOnXqpPYyAB/+sssue+utt3766adyb+1sLwh8jEsvvRQqpEuX
LgcOHHDSBNSKYuzYsVAP9tGN0KwZQR0Fvs7jx4+XyF0wgBqQNWvWNG/eHNrl
zTffFMMiEAgE1QVlUadMmQLEjYbkkN/RY7e2CTgeWE3dPHPmTGxs7Ny5c6F8
GghDbsUmNCJFouQL/1plQTJFQ3I01EhLoFTLTfZowPidOm91FwzMMb6msiOh
o/E+VhQmU2kyMjLCw8PXr19v/PiuKpMw4ReYy1//+le1wZBChw4d3n777ZUr
V/pfjv0ZB+DQoUNqadC2bduuWrUq0OIEDK+//jpUQr9+/fCMI5tbEGqQyF3Q
Auxts2bNoGmgV9KvShsJBAJB5ZCXlxcTEwPkSwXjkOUp4kb/qoPCwkJv6WRL
loCF7QBZWVkREREbNmwwUjYjkC6Vm5Jm8fruvodhOBYBZIkpa2Okj4Xw6I28
viur2Aim00M8Q7kq/J4+fTouLm758uX+tJcNB8Tfn3/++b333lNr/itcffXV
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
xzxkaiVSQjRTHt9InBVoglWrVk2ZMuWHH37IysqiDgDtL1j/iz0FM0ooCT1J
PUZjb0LNKfqiOM5MbWCxyWPxmkIYxvL1q+oA6hAoLZjQmTNnnjp1Sm9KQXUB
V7DByB318Rhh0Uf7aafMdEBXMF0VaXoPiSnTvtjr63YyHdb1hyajfjX1phwm
P32zjOMtXonc1QwYf9m3bx+wm4SEhIyMDGx0jxYa9mpmsJgYW6NOMoNpZFjM
OBuzU+VhheBrXkzMuE48Pb6RYqrq6vyhQ4cSExOB4OzcuTM0zTU8u96OWGl0
VNZL6Aa2F/6l7zKrZAZ2kpVT7DvtkJ6kLUhdiGILo8SUBNWDMixaYJ2Wn6ZB
IZHchaZuCwRBCH1BFRWqY5E79p0dLq2ZlJQEfTeyOS/ZrcD4a0Xi0EzpKdPT
08E3mDdvHjAaamSMdlKB2jfWa9BcVkYPe3ZWMhvFpeeZSNRt0Ath92VjmEww
5q5AJYN7AE7psmXList2ScBIk5jW6kVYWJg+FGA1mE+v6o6rvcpZAVMy9bA6
YHnpaDAVj9Erx8tvvB0A2jfQKuZknDt3bs6cOWC9oZeh7jrG1Iz6o5tQP/WQ
aQWNQVgpD6MbRp2h5+nAAqqonr3YNCkUrh45ciQuLg46zTNnzoSarY6JiWGN
yN5uvcKt2tqYUs/ItMXY6LpNMGqm8Ra68hjFY9nruvzsXkrV8/LyaOROZhYJ
BAHHgQMH1LRMq70PKNdTUJE7+AW/Fzpu4Fzusm/lcNYlJWh00zf78ByupoJn
Fi9eDEZj7969VkbS2Dv4YzatkhVrYAbN3gDS+QxWd2eFG+fzYLHUV8FCwGsC
chcdHX3ixIkS2Yu5xjBlyhTQRmNHaX/G5qqxS7VKjypkxbZ0pmksqkIS2l+t
c/Lr98WbCrmrOezcuTMyMvKXX36hb5CNSaTNZHzjjOphZaWLTZPkaTl6RIOV
TKmHPjeDiWr1XPpTADZv3hwVFbVp06ZAN1GtQpE7Y23rVWRTjf4k0E0Qtp1x
Mg9NbDXmYHMj4+38EbWuy4+QaZkCQbABNzFXy6fQRVTUX2R2RsY3efJk+LWJ
yul7zGGczmr7OYXTp0/HxsbOmzcPbuSnkdEtFYv0eU3OJDOe7C54YDXSS8uh
B2yOWbkuMWbUOziMaaIk6kx6enpERERaWlqglcixmDp1Kluox0ph/IceuvUz
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
S4Hc1KlT77777myRvu2www6cv5C71157DZ5dl5MCQO2+++6LFy9GVocffjiH
hZMnT0ZWoGwgdwx6sv2oKqz7pSKrL37xi+PGjWOoPPnkk0eMGIFgQ3qSjcKQ
KVOmoBTGcAP+HufjRBOn5G5zRPa5qy2t5M/myiNlOVpfXb2tYTrGtwabVR0u
/2X37f24uaqWkytNf5LXUPVXBcpef1+6eWuQQ0rumia6oIpBG2MbHqwyBNrG
tLTdszHQN23atAMOOEA32ckW+9CA2EuXLsWB4G2GFvc76aSTQChkWibMQ1Bd
C8oWUR3cTbKVgUgp7qWXXurTp48UigRXX321Ksa3s6iBmXhYn7c2uieCF1+H
2eLIXRmM2YnA9+mj8eh8joie1i2bhP71A0zZeJzxrWOuZqKolYkiXi2t8avg
I1iUdebdAvU3OIyAZ9iwYc1tYqmkksqWFLzaFRUV8KHBaZnM+JTo6chdsKs/
KBrp8V9zL7jSfffdJ+ADQtelSxewTqTEMY/c5YrfMoDcrVmzpm3btgsXLhQE
W7Ro0S677CJzKREGSFa4HckOO+wweHweuRPp0KGDbD8q+iBPIXfr169v1aoV
2NwHH3wgJY4cOfLrX/86mJ1ME5IH11KyxbmjKGXChAmK0jxmFKyTOKfA6VNy
tzmi+9yZaSraKGqH7EyN3eZo3b+MI1DGg7NV56K9rNzKxsl6UmNGsvSvce5l
rD+HJZloDKOlpOSuaSLkLhMD3YYHMUk3LWjiSRXdUkfPS7LvfOc71113nfyF
N7nooouuuOKKbJHlMd5CRo0aBcoGJQG5sqBKhvA2U9x9TFAdlyRbJYw9evQA
45MShwwZcvHFF6tNshkb0sqPYMZc/AvCdsj2aYy2nEbuZFomt3icT8+UWIO+
2lotuZitA03depvklvJNY7JixYKdS4xFLVZ/1hlvjU7L/OSTT5rX0lJJJZVG
SUIX4tixY+fNm6e+W1yzDHnogJ1ukeCnZbJDZ+BiyUa7+zweAnbeffdd+GV4
cDjrQw89tH///pIG5O4rX/kK36jf3OEALr5nz56nn346yJd+BihZ4dIpp5yC
rH7/+98Lgm233XZSnIwUdOzYcdasWfrgF1xwAegAjsEH99prr8mTJ0OZU089
tVu3bjh4++23s8VNFmRaJp4XpXTv3l0URll33HGHArUCr3l2A+N8kIlG5oLJ
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
mI7cbb4wH5HjDz74oKKiYs6cOXH1742Eo1/GQNOOQbrHVmfA1hzE5aO2F2fq
rOT/b+/+fppougCO//neGhONv5AQAgQUAgqVIAoJJlZNEVCw+nihxGJIeNvn
NV5IJOlz0omT0zMz26UF2m6/n4tm2c7uTmdmz87MLm2Uz7/uBkc/rD/W7u6u
lJKMhZuj8fC8+68BU24uaPjq9g0grNm6utHvtqorpoIynkgMhUfxuzX50eld
Wypw/nU8198cbvLvEnz//t0P7kahMQM4Fz3Qa7YmgSVilMvlemuOSEebevCA
h7mO+018DKzH7qzpDmE0nPoB4//a6QgcRtqwA6yzYfL/b/v4Ue9Kd18b7deI
w8PDmZmZUqnkvkFF/wsM0fVCuJ9CcP/+aRpJdBTjvlfTd+3Ca/f/1c8om4ah
O4fy6tqbbxth29YtxLTwsD+gD2f2oBUv/43ESer3cOfOHU6WCydFKsUu0Wl5
efnHjx+NWPhqBDHQh/dUM0gNBqM1q9P41mjatk5mBn3//p3A0fkxGTA5jIb6
6DhU8rO+vj45OXl0dBQWXV+q7AqMj4+bs9jUbF19r7VvEq6c3eMTujpMelPy
Pg7oetcjJlP7OmPu3XAaIazoaJejSPn3Z0pG/t1pW6vVpH4L3HoB9E6HCIke
8/PzU1NT7jmfertGe//Q3LnTvQUdPPW7YZAMJ3v1NHL4DdihaM8/zLmeLtP5
1PmPbivrt7a2xsbGdnZ2+lhNo8A9lulqxI9cwqp063VTibZMnd60N/ea+m4H
vZVpCXo5TGwWGu1zszpx8fKvsxemdwvcuetdqkd3dna2sbHx4MGDd39/IkGf
QW4kbkKf68HKGveuaUVmXGYq17STRuIGbrSJ1tunbsxO6uretG69emIw1Q59
Mv/Z9/b2JHSvrq7+/v27YxkWiRvc6XlRcy7r63ujdR30ReqnlaLxxOwnOghy
bUDXl4kwOiLpCjVNy9zbKnz+G8EgVH8KTwZ30qr73cQADJaOv8u2v78vl4ZS
qXR4eBiNWmHM1FHLXGej08Ka7sqmmDThhHAYw3WW9IIJxWaTRvtMcqVSmZiY
WFlZ+fnzZ8cyRI/cnTvdbFJ3gnwl6hu7fk10zj/aPExzagQX/ejmvhNrVppm
5vNWD3qzxcu/Odf8x/EZkDX8z93F0s/VO8fHx3Nzc7OzswcHBw11jyAMd7r9
6FahU+rE4QkYtslwQsa3pXowUWMOpA9tMhCm8cn8uWNm/2T58+fPCwsL09PT
chXrXxX1jQzzfVGY8a+vPnOBDuvFJ46uNw1A146u5UY6FvnmEe7KHzq67Yjn
3/2Wh398iN4IACMVFk5PT8vlsgQQGeJVq1UdkRqZ35xgwmP4VhhUw+AWDbzm
8hTuU4sePRWBw5zXarVXr17J9XFpaenbt2/nKjp0wRXmrVu3ZHCnH0fR05u6
66iHM/oKGz7K4l/NIzepYWPGhd407AzhfZDopyhS/vVC6rS6efNmkxPn8snI
TgY1U1NT29vbMtxrtA/Gs+vI/NlIxEzzZ9haTBp9K8TkwUw1+JZfb3/sTf9p
zhEdJU5OTnZ2dh4+fDg5Obm3t5cqosI3Qrl2p85T/6qnZcJzOVqt4aMUfmXG
tnp9uHn2QTNaVyHzH/Zz/J++nbvBXb+bGIBh9efPn0qlMjc3J8Oczc3N/f19
3/d23CM9JujlCZJ6QW8YnebSATBjvd6JuQ2Rsa0+4tevX9++fbuwsHD37t0X
L15IvyhPH6Dw/YQrc+PGDemY7bZIx8y/ZthrCVeGf+799f79e5PeHzS1ud5D
nlyl9lz4/Edz7pevXbvW7yY29PJHmy9fviwvL9+7d69UKr17965Wq4XdxWh3
N2foNv3SeuIOcv7QHU3jHrHTsboRzH7I+qOjI2mra2tr8nkXFxer1Wp4W3Ok
3L59O89pbgJCuEkYATLiSSpc6GQSvkxYkK3yR6RRy/9uEEXlVU7n69evj2zb
BnAhJIbICO7169fz8/NyyZiZmVlZWXn58qXEtA8fPshl9PNf/7S4BfOq/0yt
T22ok3XcUO8/3I9eI2NVCZIymnv+/LkM6MbHxycmJp49e/bx40fC5pXRRb21
tbW0tPT48WNpYNIvLSmyxi08ffpUr3/aEq4fWKOW/5UWqU2p2fX19T62tNF0
enq6vb0tFTE2NibxTWphY2ND1kgX8eDgwITuaMxMhXe38OnTJ7+hDCc7BvkU
E9tTEd6RnEsvVz7F5uamhIvp6en79+9LG3vz5s2vX7/6XeQDYXV1VepaysSd
gHnOa3MuD0tEckYk/1KVT548kZotl8vN2IPZAJCH+ebts7OzWq0mwyLph0vw
kWuHDIsePXr0sGWuRRZmZ2fdn/KWe3Vp/KtfkAGjLLhXt4l/7UV4IL1/t2Zx
cVE+gozsKpWK+yHgjv+NiMuQKmG/Xn83qf5HA/1jVTrNIBvB/HMG9Z2rnZOT
ExkZyQhIRtluuO1jtY7eOnRnBFgTY3XiLgK4PrqJ4eHeJHRL/tfW1qSLW61W
j4+Pm8GXPzeH55y6bOYE9CMC87tI5teRBva0Jf/NWGsHgPx0CIq+28wRXnrf
w3mZ+Jlz/+FFkMh52VJDA/Pf4hkDwKHuy41C/k0/hHPqinXX4+1v3zJ/6Dad
5MvL0tDppRyGvQwLk/+LOmEBQOt4iQ97DnoOqhnr2pkEYbLo3rL3k0pm9p86
epOOQf/oMo8OEKKVkmo/qfSDhvyjdxfbgU+NkvKE4mbr5A0vAeFCuOfwXdOc
MoJzxxIYzdaYug5mvDUsBTXK+Y92XQCgC/rCah7KCpPl2ckgoC86IDpWRNhy
sgfmg9bSQiOY/0H+OMPrXE2l63oZ8LrrWAgDnv/L48faWsb4OmN5cJD/jH0C
wHmdqxuQmgG+qAN1sauMmUw3Yu1lchg9yr7Snbf8h72+yD9y6qKo80/+m9F6
x8mHC6/31FHo9+ZHCRQYlQsgp3Bqt7sAcpVhp+v5LmLjADK1Ofh3soBhlP/M
6u+UV48HInQ4+no37GVC/gHgohQ7IhX70w0jaqRgqNACG5xJmEHIw+Ab9lIa
8fwP+8cHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4Gv8BXNfsEw==
    "], {{0, 821.}, {1183., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "Exif" -> <|
       "Orientation" -> <|
         "CameraTopOrientation" -> Top, "Mirrored" -> False|>, "ExifTag" -> 
        38, "ColorSpace" -> "RGB", "PixelXDimension" -> 1183, 
        "PixelYDimension" -> 821|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{737.391875, Automatic},
  ImageSizeRaw->{1183., 821.},
  PlotRange->{{0, 1183.}, {0, 821.}}]], "Input",
 Evaluatable->False,
 CellID->1035777944,ExpressionUUID->"316ba527-3fa3-4a31-a3f1-b0c1ba20f32d"]
}, Open  ]],

Cell["\<\
In the diagram above the operations are given in rectangles. Data objects are \
given in round corner rectangles and classifier objects are given in round \
corner squares.\
\>", "Text",
 CellChangeTimes->{{3.734132231012496*^9, 3.734132332433034*^9}, {
  3.734132859560165*^9, 3.734132864105474*^9}},
 CellID->861542183,ExpressionUUID->"204e56e3-0549-4113-a29e-9a409f4450dd"],

Cell[TextData[{
 "The main ",
 StyleBox["ClCon", "Program"],
 " operations implicitly put in the context or utilize from the context the \
following objects: "
}], "Text",
 CellChangeTimes->{{3.7341321941915207`*^9, 3.734132222619858*^9}, {
  3.734132349386691*^9, 3.734132454542543*^9}, {3.73413265984853*^9, 
  3.734132811150754*^9}, {3.734686483903983*^9, 3.7346864851128197`*^9}},
 CellID->1604721607,ExpressionUUID->"523e5900-25b2-4494-887f-01ac10bbb32c"],

Cell["training data, ", "Item",
 CellChangeTimes->{{3.7341321941915207`*^9, 3.734132222619858*^9}, {
  3.734132349386691*^9, 3.734132454542543*^9}, {3.73413265984853*^9, 
  3.734132811150754*^9}, {3.734686483903983*^9, 3.734686518866857*^9}},
 CellID->308926176,ExpressionUUID->"d912bac6-0465-4dd6-9371-c15e0fbace1f"],

Cell["test data, ", "Item",
 CellChangeTimes->{{3.7341321941915207`*^9, 3.734132222619858*^9}, {
  3.734132349386691*^9, 3.734132454542543*^9}, {3.73413265984853*^9, 
  3.734132811150754*^9}, {3.734686483903983*^9, 3.73468652049776*^9}},
 CellID->1654265233,ExpressionUUID->"cc66421e-ba33-4966-88bf-981591a0c3fe"],

Cell["validation data, ", "Item",
 CellChangeTimes->{{3.7341321941915207`*^9, 3.734132222619858*^9}, {
  3.734132349386691*^9, 3.734132454542543*^9}, {3.73413265984853*^9, 
  3.734132811150754*^9}, {3.734686483903983*^9, 3.7346865216469812`*^9}},
 CellID->1912476969,ExpressionUUID->"a5365f4c-dd95-45d8-9a1d-3ef6ac4c13fb"],

Cell["\<\
classifier (a classifier function or an association of classifier functions), \
\>", "Item",
 CellChangeTimes->{{3.7341321941915207`*^9, 3.734132222619858*^9}, {
  3.734132349386691*^9, 3.734132454542543*^9}, {3.73413265984853*^9, 
  3.734132811150754*^9}, {3.734686483903983*^9, 3.734686522715103*^9}},
 CellID->1612673334,ExpressionUUID->"dc1e3b99-b5d3-4789-b80d-f5a37e7aba45"],

Cell["ROC data, ", "Item",
 CellChangeTimes->{{3.7341321941915207`*^9, 3.734132222619858*^9}, {
  3.734132349386691*^9, 3.734132454542543*^9}, {3.73413265984853*^9, 
  3.734132811150754*^9}, {3.734686483903983*^9, 3.734686523749729*^9}},
 CellID->809615751,ExpressionUUID->"1b71281d-271c-4775-9d4f-faf1fe2a61a6"],

Cell["variable names list.", "Item",
 CellChangeTimes->{{3.7341321941915207`*^9, 3.734132222619858*^9}, {
  3.734132349386691*^9, 3.734132454542543*^9}, {3.73413265984853*^9, 
  3.734132811150754*^9}, {3.734686483903983*^9, 3.734686523481266*^9}},
 CellID->755539665,ExpressionUUID->"495f9e54-b29a-48cc-8866-9c4ab17af8ab"],

Cell[TextData[{
 "Note the that the monadic set of types of ",
 StyleBox["ClCon", "Program"],
 " pipeline values is fairly heterogenous and certain awareness of \
\[OpenCurlyDoubleQuote]the current pipeline value\[CloseCurlyDoubleQuote] is \
assumed when composing ",
 StyleBox["ClCon", "Program"],
 " pipelines."
}], "Text",
 CellChangeTimes->{{3.73413293769382*^9, 3.734132958843141*^9}, {
  3.734132994843586*^9, 3.7341330885562773`*^9}, {3.734686536241378*^9, 
  3.734686539287981*^9}, {3.735327193321158*^9, 3.73532721241103*^9}},
 CellID->284344944,ExpressionUUID->"aac1bfd6-577e-413d-8e47-17aa269d0607"],

Cell[TextData[{
 "Obviously, we can put in the context any object through the generic \
operations of the State monad of the package ",
 ButtonBox["\[OpenCurlyDoubleQuote]StateMonadGenerator.m\
\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Monad-code-generation-and-extension.md"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Monad-code-generation-and-extension.md"],
 ", [",
 ButtonBox["AAp1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Monad-code-generation-and-extension.md"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Monad-code-generation-and-extension.md"],
 "]."
}], "Text",
 CellChangeTimes->{{3.7341325020188227`*^9, 3.734132537332466*^9}, {
  3.734132571094304*^9, 3.7341326313840714`*^9}, {3.735327224001162*^9, 
  3.73532724040224*^9}},
 CellID->834359233,ExpressionUUID->"3717c458-e300-48db-829e-456e4bc3aa0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ClCon overview", "Section",
 CellChangeTimes->{{3.733921508073859*^9, 3.73392151629746*^9}, {
  3.7339221559495983`*^9, 3.73392215672471*^9}, {3.734616646352672*^9, 
  3.734616677199198*^9}, {3.734868696651741*^9, 3.7348687248226633`*^9}},
 CellID->7414121,ExpressionUUID->"8a12bdc2-46a0-43f2-8495-671a444c821e"],

Cell["\<\
When using a monad we lift certain data into the \[OpenCurlyDoubleQuote]monad \
space\[CloseCurlyDoubleQuote], using monad\[CloseCurlyQuote]s operations we \
navigate computations in that space, and at some point we take results from \
it. \
\>", "Text",
 CellChangeTimes->{{3.734867980556879*^9, 3.73486811415189*^9}, {
  3.734868232944024*^9, 3.7348682713621607`*^9}, {3.735327791384325*^9, 
  3.7353277922702627`*^9}},
 CellID->55080121,ExpressionUUID->"c9a89993-43ea-47b8-b614-68eed4a7557c"],

Cell[TextData[{
 "With the approach taken in this document the \[OpenCurlyDoubleQuote]lifting\
\[CloseCurlyDoubleQuote] into the ",
 StyleBox["ClCon", "Program"],
 " monad is done with the function ",
 StyleBox["ClConUnit", "Program"],
 ". Results from the monad can be obtained with the functions ",
 StyleBox["ClConTakeValue", "Program"],
 ", ",
 StyleBox["ClConContext", "Program"],
 ", or with the other ",
 StyleBox["ClCon", "Program"],
 " functions with the prefix \[OpenCurlyDoubleQuote]ClConTake\
\[CloseCurlyDoubleQuote] (see below.)"
}], "Text",
 CellChangeTimes->{{3.73486812445675*^9, 3.7348681790545673`*^9}, {
  3.734868276502989*^9, 3.734868413440669*^9}},
 CellID->166141790,ExpressionUUID->"d22e307a-fdcd-468c-b98a-a31ded87ddc2"],

Cell["\<\
Here is a corresponding diagram of a generic computation with the ClCon monad:\
\>", "Text",
 CellChangeTimes->{{3.733956709249489*^9, 3.7339567296781473`*^9}, {
  3.7346166955608177`*^9, 3.734616713976048*^9}, {3.7346167476587133`*^9, 
  3.734616748074827*^9}, {3.7348684424203997`*^9, 3.734868504915214*^9}},
 CellID->616323430,ExpressionUUID->"1d2ba604-308c-49d8-a28c-5bb68bce476d"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvQmUZWV57u9KZJmsKCTEWaPrvyKDupwQooKQmGmtuzTLCIkujQY1F2Pu
vRHwihGhaZpmkm665uqa53ns6q7q6oYeGe2uOvO4532qEb1ONENDAz383+Hb
uw7dghCBAn1+a7PZZ599du2zT5/vfN/zve/z/n9fv/zib/zea17zmv/7B7S6
+Gv/9alvf/trV1/yx/Tgn7/1f//j37912f/8H9/6zmX/ftm3P/7136ed59Lq
+lNe8xrePg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8tBxd6QsAAIBXPmgqAQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAvynHjh17joevBH7tFVbvOSa8HJcFAHghxF/M3/Abqi9/JZxkxfnt
eBcAAAAAAAC8uqge2sR9cvk/6soB8IrgRRkmH4t45u6jJ61/V3gxJIjfrTsG
AAAAAAB+E35lzzPuoj/99NMHDhxIJtM779y1deu2mZktI1NTI5ObRqdmRiam
aRmemB6amBid3DQ8PjU8OSk7dT09OjYl22YnHaD7zbOTm3Q9Nq7n2TQ6week
h/LC6fGJ6KnohfRwfGKGDhsb59eOjNMBk3QYnZw24jPzlciF0XXyMjU1NjVN
Vz43N79jx45UJv3ggw8eOXIkeq8nd56PHjt2pOpWPOtdAgC8PNDX79ChJ9oH
egcmJ4Ynx6mpGR6fkJZhUr7+09VtC333qZUYHqMWYGZ4YrkNGZI1vXBscnPc
pFAzQgudcJwblmltW+IWhl6oLVXcZMnG1PgEtyoTk7xNa2l/JukAekjr8enN
eow+lPWUHDBVtUzoQuehh7qWPVMvZNnEDeAU/62RifG4sY0vtfqyT1r4vvGz
48sLvd/Bic18Hrrssanl5ndqitv5CXM/479CZ6C7qm8/aqgn+TdiamJofHpj
e1foB9XNKXMUbSl4ScDPNAAAAPDKRHqDR6NtWZv/FOodPlUoFGbn5uvbe669
reG6ps7rO4ZXj85fO7Ht+unda7fsXrN5z9qZPWu37L1x9i5eb7n7Jlrm7r55
lpa9N23Zw8vsrrVzu2iDjrlpy103bt598xwvt87ycsvcXfGR9PAHc3fdOruX
1j/Ysve2Wd6mnXz8/K5btuz5wdyeW7fcTQudn85z4+wuWejMu+iP0vl1kb9+
941z99CaruqGzXyFdJ030BVu3rt6atfq8W3Xjcyu6hq+tqlj9Yam5u6B+a13
WpZV1T0+Gt0O2qL/PV19lwAAK8AxHlY8/fTRW+sbr5/aKV98bjdumbtH1tS8
UCOwhxuKLdxu/GCLtDAzO6ndWLdl5+1zu2lZv/WedXN7abltdk/N7D3rN+/c
sHXPhtndG2ZpY9e6rTtraGNuB23TUrd1d838btqopY05On4nbdTN76md31W3
bTet6+d3127f2bBtV822XbXbd9fO7azftrd5212N2/c2bNtD6/r5nbpNxzTc
oRvPWPjZO3bLYbTeLXt28/b2XQ3b9srCx+hS/aq6O+Sc23fwetseuh66BlrT
frpCugy+yDvkUrfSpe6oneN3VDOn72UXvwu6A3O8h+4DvU26Ofxm53fSfr4n
W/fcPrfz9tm7b5vbRU/9gF++R+7bXbfP0e3deRvf6l3cjM/dSbf6Zmmrpfnd
K606tb30cI+0wDsu/fbV65qaj6P9fBXyYqU7AQAAAAAcj8SGIzzafsbs/wMP
PDg1O3tLfcvqtt7Vo/O33LFQn/AakiEt9YmgYWGpbtGtSXqNCb8p4Tcseg2L
QVPKa0y6TcmA9vB2wt+YMktrMmxOBq1Jd2PKbUkHtKc56W1MhfxsutKa9NvT
YRc9zHgtaV70SDqmLRG2JpbaUgFtNKf5VfRscyqkA/ipZNierLQkaCedxJyZ
XtiQdOlKNi7SBr0k2Jg+QBfDO3nNF1y3UKlb9GsWg9oFjzZu2bZv1ejWVS29
P2hsm90695OfPKgJF1Hsh96Zp/VeHT2KGGMAVgAd/txzz12rOscak3ZdMmxM
BdLguC2JgBqH1pRDjQm3IVlfN9qooUhRM+K35CrtGa89H3Sl/I6sS0e2572W
TLk3G3an/a5s0JsOezK8dOUc2tlbCPsylb6s25/z+rJ+fyEcyPt9paAvZ/cX
/KHiEj2UJRzM+HTYcM4dzjpDBW8oVx4o2AM5ZzBvD2Vp7dIyUHBHc8Fo3huR
hQ4eLbq0oXtGo50jBWe04NNTvNadeVvXejwdoGfgP1TwBrLBSHTOgXyZ1vS3
6I/SnxvIWfx3+TL84ZxP68FCQBv0dmhnfy6ghS6e3lpPJqDr783w2Tozvt4N
2kk3iu5GZ9buyPp062i7Led3ZIL2jEMb3emAGm1qmWm9MRO05rgFppa5JeFQ
I0xracO52W9cdFYPb/l2bdv3N3bvSyRX+h8RWOYlNf14cU8L6QMAAAD4beOY
WdP/fd/tHhj+ft3GVcNzN92dreFxul+bCGmcXrffERXCbUjZjalKc9qnzj/1
MJtkoaG9djg3JlkxaM2ELWl+VjQB7qM2pUReSAQtGXdjxhPFoNKecmlDFl/1
hDY5rD0ZtKVdOrI97XfwgIIHEbRNx/CAIhVoR5f7uumA9Y00Cws0BqGlKSPj
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
6pacccYZcfxD3F35yU9+csoppzz88MO0JwzDSy65hA6j85977rlbt27Va3jX
u971tre9jU5O56E9QRDoYeedd95HP/rR2dnZl/3GAAAAAEDjH5anA1atr+PK
m4vq+cB1HGRi0W9d9NRPPvZ2k9l/48HYIwPw7pzfI2Uv+sQqwYQQaJnLgqkx
oYaTUrKNg5nZH1KsGCSP2JHkCD9SCVxj4yZObjPFQF3ROJ+6pO5tgWZPRxHO
AT2rheSmbE+2fd0/VbImyjxVNxXVy5DCGZKyXWD1QyrKuWJKyVnMw0VTTo4n
QOmCCxwF0Z/x4+BhLYehHpvsqJ912QIiMqLkPOW0o27tNCBqzlTo1sVGlPWJ
YN29uXXNLSv9yQPwqocarqnpLbdu3hMVBfabk057Mogrb4pGynKE1rzQ4hdx
aWDJETNlN0V5CPqlIo9Y0bqiRkblcnJRgJY0GlpVZ0wDANSOhutcqB0ub2sb
JZEDrha7pPaK0zF0jF92OHrBjrMhtKomWzeoh+RWjlJwWGdwTLbFNsfjJAtd
JDVjm+tu9yTawXLuEOVBdQmVKVSdoBfOlW21oJQACTaOMH+a63KaP83mEiWP
fSTKflQPNJiREA5OZyt6mwreprJRV8ZFczCZcaY5jUoUSYrKaGEpumm+Zq+o
jQZbUEpdoVUt3T+Y2io/E1zaWD8LVSE0rkwaVf68JAVDvI4zKoO7Eonn3TS5
ffudd6z0vz7wrFBfYt26dVdccYVmd/7zP/8zbR85wmW2CoXC2Wefnc1mafvR
Rx9905veFIah9kCuvvrqSy+9lA6j137rW986Of7hBP7sz/5scXGRDjvnnHNq
amrohbTted4b3/hGOrNew+WXXx5nmOphWnwqPiw+G2IhAAAAgJeN6p/dVTUN
UvDCb0wFWnOTZ/DTfnPauMpT357FB1EeOtKOOoZxtc1MwJbyOVO6TitHaEUJ
YzhZMJ35uMiFdODd0bw9XqhoeoXWrZNwBVtn3CQB2db5OKMzFN3qgnFmsf3l
A2QtMgVbvmv8gwRFmDGCZm3EZTKWa3eKEjJc9OMRR+ylNlQIotKcLg1SWGnJ
etJztkV7CSQWQkMgQtrQ4Y9KENRbbkhqCQyTi1G7z72lsW0FP3EAXr2cUGJv
/cbW2nuyYk7oSjngpaaUY8peZDxdxNXQ1+FtTyauf+H15Cs6Iu6Pqt5wnU0x
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
OaWlFQlbj4HEUuGS9Qr+IE294UsKUgzqsuFD8N35S2ofTNHX0Z6GO2hrutSc
csX5Qf6yKCoLA7z1aeeuTdtr2jqO9b+11341Nzd/7Wtfix9alkVDfvqJnXfe
eRUVFXv3IvnU87xTTz1VjDh27tz5vve97zvf+U5dXZ3v+88991zs/3DIS97x
jnc888wzdDwd8PnPf94wjAP84126dCkN9mmjHH+46qqrbrjhBnmtaZrz5s3L
ZrP79u077bTTHnrooRdeeOGiiy769re/HV9nOf/h3HPPpfOKI2V8qXTek08+
+frrr9+xYwcdk0gk3vOe91xzzTV0SfSwWCz+6Z/+KV2AnPp73/uecCfk1MK1
oCPf+c53ylnonX/84x9fd911v70vQpcuXbp06Xqt1uFj4ba+gcVrtlXMBFXT
AU/cu1VJAR9KNdNB7UxYk4IpBOwOEq7MOaKvmAEE0SSBd2ySIJ188B8ARwTl
bvPwgjC4dxpFc3ZlXTFLF8P52Dhd/BkEhZAlxiUkaD7ePjiA3lHDBGXD7vLD
AGruKFsziqSXDRlrgI+tMBO+Wpmea0sxbVss9MuC4ZQlWibAfUiFErjJS8iO
GXz3poPKaW8p8x8WrNw4skrmjLT+Qpeu32RNrVu/eMW9sQulDFp5JBsCHU37
Ki84CxSiKacidCUvGAApi8U6M157ZEfJ7Q80BYKOwhyGM3oYi/AGsn7U2oCm
pWwf4jzKvMPBPSoXIwoLthFkyUAEnBYKPidNKPvHVXl3Iq9AA5VJUVARFeJU
OckSDCxsWSmKDIEg4gxNcXWAsYMViLdkechFfIwoQegC+BqgxZDAC748L0rY
dNnO1xuIkAfkjTL4MJw/qKVVELFiPiBCCI0qWw0DyQHzgb10MnPtaifbPvzr
zYv/o7JBnCfhpZOF+EK+rIaMxF74EbSL7UUDE/fdt+WA8vzQ9duqJ5544m1v
e9tTTz0lD2+66abbb7+dBu833nijDM+lPvaxjz300EPUf6CnXve61/X19cl+
OkY0FLt27frBD37w/PPPl79k69atcvz4+Hj5SS+++OKJiQnxf6CHuVzuQx/6
kIAPUr29vTLYP/300+lNDjC54k/+5E9WrVolB8T4wxHPS5dK5z3hhBOKxWK8
/7TTThsbU1mu9EE+//nPr1mzxjCMefPmladpxKd2Xfed73wn3RmBJuhGNTY2
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
4I7noNUqslezZs1cXFz69u0rkUiI+9y1a1eagIQHDRq0ePHicePGvcbVa8HE
HXOeeTt27Bg1alR+fn5aWhqddoQk+PLLL7ds2RITE+Pg4HD69Gm6y/fff79y
5UrjGA20Af3BfCF56uOPPyYZTaa3xDDxwgQAAAAAwAqB/mCCkGrz7t27N2zY
wGIKCgqCgoKGDRv2/PlzmWKEyYYNGz579owk69evH0kvFovbt29/5swZ7nF8
fHw8PT3J1h9++KFLly7ffPPNwIEDp06dmp2dLdMxzgMTJaRSKTHA1ta2VatW
9JMi2ev8+fMkQPxoZ2fnrKwskUhUo0aNa9euyUpR1dc6WKV5OQia1trb27P2
DDNnzvzuu+9I2M/Pz87OrkOHDjdv3mS7kNu+Y8cOrQcBRgH6g/myaNGiunXr
zps3b8KECbRQkiFnAQAAAACYA9AfjIuuOnNERATxWKkUkJ+fT/xZ3giT8+fP
nzt3rkQi6dKlC53k4tSpUx07dhSLxVrP8s8//xw5coQcQXOQSQq33TIN3759
Ozc3t1u3btxJNDZv3uzq6soSDxw4sH379j/++KOsdC2ftaoQ3Nk0TNyJ4Ikn
n3zyycKFC2NjY8nTSU9PJ/d/zZo1JH7jxo1t2rR59OgRTXbu3LkOHTrwxvzk
Xq+JX7VFAv3BTFm/fv0777zj5eVFchwp1pydnZOTk7kJkJsAAAAAAEwW6A8m
C6lF0xkuZIoRJoVCYVFREatak7p3/fr1w8LCLl261KpVK9q9YvDgwdu3b+f5
yMzD5VXLtdbSPTw8iBPdoEGDyZMn09NdvHiRHp8mIH40m1AjISGBOOA7duzY
s2ePLvGBDTrBEnA9bnd3d3K6evXqmddsGsQDyszMJJeQkZFBbkjjxo1pI5Ck
pCRyr+gj2LdvX5MmTQYMGNCvX7/hw4c/efJEV28XCpwmAwP9wYxguWP//v12
dnak5GGbSMESFRV1+fLl6OhorTsiZwEAAAAAmA7QH0wHnm4gFovt7e3pAI90
hElfX18Zp4vEhg0bnJ2dScyoUaM2b95MAqGhocHBwXoOS8nNzfX39ycesUQi
4dbPZ86cyaa3mDJlyoIFC+gmcvxNmzbRNBMmTHBzcyMBUufv3bs3t4uB5om4
UoOPj09kZCQ3ZsaMGex0kydPprNpmIWz8M033/znP/8hpvr5+bVv375Zs2bu
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
+D3//PPz58/naZqLGCLXGUYa8qpUGPvvvXxUt96MG7ay1Pk+feUgqiWKv8c2
m8jzH8r8ajH81cqpmYrH3883Cn9PqGyC8w+y/6EmtF+Ouay0UjpnXWjqfRb/
ZTIaPxID2krxMZ1zV+avwb8mJHUxQxshL0X8E5t/MATknzEiZ2iu195ieAOV
LYxeTFujvCrJNfmvLJnvjnE1Fvsy/onKP8j7F96MG2rXhDSLKe/r+34a6Y88
H+P9UfvEnxuW8w9tDxKbf5gxY0a2EFhEWXrV3ko1/cZQUJKzEaGjjqI/eVXO
qqp3tX/ToVxXVVUlEH9NUap9UDQ0VSJ1OIXO3epctFs1RDxitjDu0vS7lPD5
DyafgAjq+9///n333QcCxgtJkycinnvuufnz52cjgDmu9DEfwo7immeWKWEv
wDSsIfus5DXNjek2UEPOgkGnY7gWj3nJ4c8SnrT8w9ixY8v8amH8TXQdg78J
/rN5gybdGmtQUxi51ST7/Qs/a517cJnDlGR6sgcx/IqhvP71u1CiXBtjxeCd
lOea4B9VMwiliz+fP5mQwydX5vIPqjVm4n4iWdJBw4jgl0mjaF5D6pkt1Gvz
XNXocjCci2JcO8dfukpa/sFP01M4If6opsT9aXPjz/66nH9oe5Dw/ENNPviB
+GFB6tfpQQk37tvHkNqtqc8a6i2811BVIp/i4zqJwt+MooUmmvKWhKGaQKcQ
jJ0YW207YsQI3f8Al3HbbbctXbpUtzqgbatIXb9+/TT/oBQIhkw8TWN+uU62
MAnDXDOuXPI/8hFkE+2zeBhSK2juiGuajJNJK9WQfzHy0wbwV3+qTaB9SXj/
QhcFsv+hzK+WwZ+Rr6XTg43m8ugQGBGbqH60N5Y3rZnY/MMzzzzjqSo/q3JQ
Q+aapxmcu+EaJ2eYYsxx6dnnNEx8q/Kjr3iYsRhUx5VfjL9v5T1mDQXDpYt/
Yvc/yHQ4pKkufOxS49S2JqR3njJKMQ7GDPjHBKYkW2h5DJ5qZLRhGX8tAf6J
yj+Y6SuqifJHpe5Pmxt/9s5qG8v5h7YHic0/yPsXvPrjSM8bSbaNKupZWinL
LUkCmCZcQXWKgxDj/VmFVaGMhmonicKf/0pXanxk4S9/l9cF8k1e+atQmw/s
/V35nqZef/nll/AUuFi4cOGYMWNGjhw5e/Zs5X7w45se+MiIJoFPP/0UNDHT
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
KPn444/XWmstiLFnB2pecskluMba/6yzzkqTDuLv4Ycf/q9//UteH1Cag5KP
PfbYaaed9sknnygCLDOocPPNN1966aVAQPY/zJs3b7/99sM6FyvZiRMnovyA
Aw7Agl1ZvGDBgv79+wOZH/zgB7/+9a9lLBS++OKLN910EwqBJEZZvHjxmmuu
KbjdcsstN9xwgzALSjp9+vSHHnoICD/77LPPEQwaNGjRokWSP1Fh2HLLLSWT
8/DDDx977LG4dfrpp99+++24kM0S8pUQdHjYYYehE+5z8ODB8+fP33fffTGd
J598EkZJpyNog1wvvPACo42JgIBMdvQMAqqbkHJQBlauqeQtBjBi165dJfmg
KYjly5fLXb1QkPMfVL9Y0/3rGF7L+MLb/Jj1jk/aZ2iPn4TofgGVLkxXeuvH
Voj3hMtcTFbTWzm/iuSeM5QqYXtozI7inyp060rn4IIlVbimiLJjhuyMf8pl
Ylvm/Yva2tqf/OQnKm8AqGqaXsQw5lHyD2ZpZnwQTzlVmAoLkkL33niRUEMU
9Lnara4KNZzzT/8ZbVaZysJjN9KF4VAmv/mTdSRq7ab9V0Ycymd2D6o/xRC4
pSqTouiUhwg634bR30i+1my+/Q+/+MUv2LLtuuuu8iKGl7GVufyDfIE6KGZR
8Y+REB+EG6Lx3LlnfRktTVpv+M4xTIrWI2lnbw3XmMXc3MRpzBQ/Ne5fhdMg
YHREuzKmPmil04WZZCZdA+hviJwu5x/aIiQ8/6Cq4aXRGJkojfA2JJ1zXuj/
7bffNufVsBLpuFOnTh0/fry+WWbsQ8rZcNZ37U3rY8Q333xTAl2jyMZdcj/e
Kvr58mRNBSaRMQueXAa8yfWmo3j6S0mL7X8A3H///RomAbBaMbsg9MFN8PsX
Jg8gJRAJFh7DKRazd95556233tJtgUEKm/7TIf4a+5wqjBDY8RlHxrzjno14
eDRSFHjjAhOBFmDKWoEdvcHZi18USmbipomPkXj0KEryNb8e2wLfv8Cqs0uX
LhovfeMb33jiiSeCD4bGjRs3ZswYns6FF14oK1yeL1a7W2211SuvvCLLfyGs
1DQT/+yzzyDbL7/8MuqMHTv2+9//vsTAQgHc3XjjjWfPnr1w4cL11luPG8rj
e1yg24svvth0i/roFgZZEIAkPProoz//+c+5TufOnbFgB2KjRo165JFHFH+I
PQbt379/9+7dVZy++OKLTTbZ5P3339f9D5n8+xeCMIabMWMGutp9991ZEkaP
Hn3PPfd8/vnna621Vooioi222OL111+XOcqZk+uvv/7HH3+czp0VKec/oD5s
zh577MGyIR1iOieffDKLLqbz6quvvvbaa4K2lANtzAVoy0aU+fPna1cXXXSR
fDeERbol9z+AkkceeSRbOU5BGAieP6lzTxWu080166BSbMqUKaA5eG0sDDeR
C/WkWhJj5QQZzl4ysJXTEqP7jL+3Ht4b6tx95+log2OG058pemZh0iBch5un
yKqbah4ZxYc9VIud/5DNZiFjaxAcccQRQCBYX/IPRmz83D2b+MJHRzAXKnuG
+1xNbqn/Mr3F4xMElhxe6Jm78hd2YNq0aSlaQjJPBTALhBPQC+Z1FAIaT5on
2kreKGVJUyAdNd8o+nuq6s9mzT9A0q699loRME1ByIsYHuT8hyDCHvOoeFXo
w+t9LUnlLZh8ZcMYCh4o5Wwd32IuB9f1BgctCeJvxoW8TZ8+XUuC0aDgBkeW
jgamQBSVYugZVOHi6e8pli7nH9oiJDn/YGRV5ZMX40FbzRbDyDZs169+9SsE
wLBj++23H0LKa665RnbzajwszVHznHPO+e53v4swGDU32mijq6++GlGot8km
PcIqw3giDEaHm2666SGHHLLPPvtg6JtvvlmTnDHarW9e6yNIlEv+RCr84Ac/
QMj9ne98R/4eeOCBiOclIDRZd7ZsAuKXeVw/BTMRtpz1on86b9CGDh3akt/f
HDx4MNZcmkjHggULMV+N378I7kKBnICDEB75pgBE4qqrrhKR0NWZOCatudtu
u+2///64gPCg0NDT7LrxXOD8NtDebLPN5EV1fuyFvz/+8Y8xNQSfnmvyU1Zt
6ZD99zEJJ96Bs+iLaAGEVieCKcsbAYa5ZhbmMagOmnHvlegSO517yH7QQQdt
vfXWL7zwgjwQ526jzogz0mjC/iY//8ED4qU5c+bAtvCuG6wI/GYbff9CWYyG
O+6446WXXirmCPDhhx8eeuihspOBrRNqdu3a9bLLLpMn+1ITVuXss89WEv30
pz9F5CZ0gMygk3PPPTeVe3y/7rrrpmm9hgW4HF8A4Ue3igBuMQLy/gUuHn/8
cYg0gn8R4FtvvRVGUg5kgInbfPPN33vvPcFhxowZG2ywwUcffdSlSxd5MQQg
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
X3nllWppYcTkGYF8aIbxl+FwAasLqbiNAFYXpoylTmWPxcyoHqt8Zd7FgJ6y
/6HBi8HipcvbvQ757w6Dp/oFWJjuVCzoxEUG/GtB+jPKK8ncIVG6HpSaxtCl
8v7rvffeE46oqChIIAf2rbXWWpVkliF+p512WmUu94UZvZmDt956a+TIkb//
/e/11FxEEfvvv7/yRb9XJfDd7353/Pjx0AuZBVsYkSiMCw1K5/c/sKET9Lbd
dlv4/VRup4dx9PJCEyI6iFMqb/EkqFMpFdfMhovpE0V/FjYT5uHnww8/DH8t
+x+aZMtNkZu7UNKtW7d0fpsNGCRfxgzKWCV5wFRIs4IaJ4FfsEMJ5yRo0XjJ
uwORN3lnVk0Nu0uYGkQmME3K61Ru1XDqqadqZgBhEoTtjTfegLyB+7feeqvI
G+r369dPvt/EM9VEhMibzsJYuVQufMUsRKqx3Ojdu/fjjz8OHwGUELBJVxLp
GfxTFLtCX1By1113yfmTRqgaQ/9l+WM00uXzH9oiJDz/UEmQcs7Iy3lwhSiF
n3zyydprr/3hhx+qImiFG2+88ZJLLlEtwyIUNeWVcwNSE/b27LPPZl3G9RFH
HDFo0KB58+Z9+9vf5q3F4raGDx/+l7/8hZ2mmPq9995bvjIvj3H1eYpUk8/S
qUvlfVCy/0Fw8MFYKmceseTErIESRoGfffLJJydMmIAhDjjgAFkeVubyGGI0
UG3fffeFeenbt+/bb7+NajBr8pqk8UHeqhRD/xQZn6FDh8Jl/70u+Nvf/sZ/
YwBe+MQcIPSK6RBhJG+532mnnST5IPlzyT+wsOkFyIhgGMLjJ67CI6wRMYsR
HqxKJKvMxDn88MMHDhzI3ybgmEdKdOPlQw89dNxxx6EEzPrjH//I+Yf58+cr
E+F3vvjiC/AaTJQNEpdeeinEDMJwxx13yLgPPvjgYYcd9lwe4MvwF5ikc0+C
EIDNnj3bPEGWiVx00UWqLyI5RsBEclI5B9e/f380QeCE6WswhnIsMVAOx4fy
VP6cVZm75B/E+8gHGR944AGPKjQOU+MPIrAjZmYBMBwEe/DgwXCv//jHP+6/
/36IBC4aIG/nn38+hA189A0B6FlkskuXLhosQSr4QELJPzCvTagcle6Lv+U1
NNhcbWBUV3xLK+sa3GQJFH+DQFT/aZfPNDWDrYwQMmL80/TAA1UWAvcc04NB
ptLtLzXJGeHjxIkTIfbg+NNPP431poiZSkiMxYsC3IVGnHTSSSeccMI999wT
tJNyAU/EUfp1113HvlXzD2bW8WLDMqMmzjeBOsPIRBlDJhTmItYA9lC/G6sV
YA+feeYZXb/LX0S/p5xyiogZjImk3E1sAJAOKym5JKDfv9CBJKEBb64GWeuD
hjAUco3lG0wQxoVRRbAtdYJGT07FkWcE8rlPRg/GVhawYsqeLQSYssrYJGSM
1vMcsXwYPXo0ZA+zY+NWX3kTwEpHHOvtt98ulo0baj/gC4scJx9WUv7BO1aD
f1Q4oeUSm7EjVhCJ0s2iGu/xukYuxBGncqLCvlhAAjmwD+Knli2d375SmT+Z
IVWYEAZnZWPMtGnT1ltvPTnpyPQ8depUoLRkyRLgBp/10Ucf+VkIbpX5Ta1S
qKYVjh4ucm4O9ttvPzh6Fb8DDzxQ3t/X/ANaSTXghmpyELG45ihJq1c4l8o7
BUSwY8eOBdHqFLkoMbvzzjtFzBDxqowxSOEFF1zAYgYrkcl9bIXPn0xFi1kx
5t3UDIZzchfBpAZ+Ei9pTdO5yhsiN5E3lUlQT0yB2ArtXx5xSgnLm44OnsoD
GoRGHTt2lG+fsefF3ylTpgAlaITRBVYr0ZpU/i2PSsrzp/Og9pxNpVYD/nIe
jrzKLWTXMC9dmHwukv6mvlyU8w9tDxKef/DSGLSZbGoE+IGgAswX1k1GI6C5
W2211Uv0/QvAhRdeePHFFxsLhppYAwI3rB2+//3vw49oz7i18cYbw/jIqX2M
njz1kDcOltFpEvK3W7duUNtUfv/Dyy+/zAgfeeSRvXv31o0Z+g2+ynzeQA2U
5hNSebd45ZVX/vznP8fPnj17IjxgGm6++ebqg9RooNrJJ5/M1gAIS0Zd2y4L
nYZRPP21Yct/fxMA76/nAQJ22mknLMb5uObnn38ehjpK6kQkTDkW0SISyiMR
MxUelhCIGWrCU0N4+D0CFR6NeXRQSYPLT8TAWLGCsKjfqVMnLKXXX399iWH0
/AcwESsUxn+zzTYDE1FBzp9clnsh+rvf/a7EKiNGjNh9992ZZa+//vrdd98t
P1ULVKjSuSPOMGU56UvSBSo5ijYEDIMibkeAp+tW4IBx33vvPSlXGqJ8k002
QTkfHc/nP2Di77777rBhwwRVFTOE2UBVjtaMl0BBIPj9zWY6rxuDYp2omS54
fxDcf38z5aDSnaYS1DUDMlmTAQi21SFYtk39IA1NK9M/o61gKgcrBCelL1+k
KMg35Yy/efrD3S7Ln1gYpIkBM5ZvEiSLt3UomThxImx+E0pXkV0h/ud3PUzy
AZ1gJcIzipEEMyMuYf+oIMZQPakUijFM0d7gypwxhFLLUzOxh7w1RexhRUWF
xuRyVzypVOPT0gzCamBV3sCIK664Qh4NML+kQ6kv79FLJzCkG220kSwlpOcd
dtgBMfZRRx2F1b00h9ET96pPLcXosbOWpaIKP2IPwX/48OEwZSx4MAX33HOP
l0/PCC9pXAEs4ENumwNUDvXi6aefluN0NPlgPrmC9WlloS5HiZyfsp++ca8q
MxzFSbnEe9KtMh3MFZeNQg3kdBQ5m2j27NmSPmJe6PYbXamlyPhgEa1f5UC4
hWWdZxa8pLwiJLiZWaTy4QRmgZLttttON7UqZSDGkLrKfLTG9IGjl6BOHkPL
LanGPYiUVkY7izrpX+l8K/jbAsKGAABhDycf0vmdDwKaf1Bgex4/zaiZVpIF
47YSBZlVg1lfVOZXDfq9FTU1OiKkEfKGYFhXDZwalU4kvDcTYXlDiOjlDXyB
qIi8VZLWaFYB1xBymUUqv4hIFb4YJaAbU8eMGaP4iz0XWw19SeUeier3N4N0
rhf9feVy/qHtQcLzDzHSy4IaBG4if7G67Nq166WXXqon8Hz44YeHHnromWee
WUlHCKZyaXapicWRjIJoBDXPOuss+Xn00UdfffXV0jNCHfQg7+nrI2yNtWBJ
5GyrPfbYA83lbYvK/L61jh07ylZADITRu3XrpkcQPPvss1D2r776SkzcsvxB
lIJAjx490Js4AnkYlM6fI/HGG2+cdtpp22+/vZgFqO3+++8vC17ArbfeimUg
4iiZKfoB8qnc+2u6j8tUC25ibAD9tX7L5x/gmkFqTj5ABlbmHZye/yD5By91
lbktEDvuuKOKRCp30rWIRIqOvarMvb+sYpbK7cBUMRPKQHiuvfZa6RZ3zzjj
DAhPOn9cPFNPQ26wQM5/ENFC/W222UY/Lqb5B2GibL9BEzARS3sULlq0SF8L
qsydkdW5c2d5igSxvP/++1N5r4rAWM8SwZRBKNUXFMqUZSLoU6YsAqaS8/vf
/37TTTfFoMAHo+g5k9OnT99ggw2AKsoRBc2cOVN0BOWIK1DOy5abb74ZLlWE
9v+z9x3wdVVH3nZIAVL2SyVh80uyS9omm0AgbRM2yfLF3ZRQAphgSGEhS0mA
hUCS3cCGvkn4koABmwTbSUxVc5W7jQsu6pZsyb3KReV1SZb03vvm3nl3NHfO
uVdPssp9753/71m+5ZQ5c87MOTP3FJz/QKTGnW4dScWjRdWGl1Bs+VdeeUVr
xA25CwJk/IILLiDnwxlnnAHiKcKAkEJvrqVT2/y0AqVKXIfutBovLSreqv4B
HtJL0rVjPDEC8Yor0qfo2Jbq6upwUz4f+slfqq6t8CFY/BXl1XKPLrRzP+ia
+I/+h+FuaRziyFfAPffcw498RdD5F+p8FS0DtSWlnpSUIaq46dOnx5x1gpgC
hgTCqM+FnvRb3/oWhCRmgj688847E6wz/eEPf8iVIYJWMibYN0EtnZMnT4be
GRMHbXPhhReCuIkE486CDriYNGkSKuSEra6RAM4HGFr/67/+67vf/W7cpwK4
B/rta1/7Gs0Iwu4Sd8CjUQQU/Mknn8REoCVD90H0gyoDCwJf4XZzdMQeGXfa
lqZtlgRIas6cOcPXxtJKG/71r3/NFxZBXyacD2ll/YWqYYTgixn+CTd490pt
D1sUb3vUSqHtQSultsdHcXF7IAdVjylT1Sfsgdw73vEOfC5MQhhuoaUWZ06V
v/3tb7QxBYzoPvGJT/zsZz/D1pKweyvgzJe+9CWUF6DTZ4SJxedfvaGkGzdu
xEHdrl27kBjsczEuNj/cBAlGdLifc0Lpmmk84KXT+uW/6q7E8y+Gtcml7bUV
fMmk6nxIu+c/DLQ/1QL5wK0GfI4aDJhM7Y02QxBaEUNie0PWoarBa67r0P9A
U7a4/wFGemL/SbiYN28ebcKzc+dOam8YHdrbtGnTsL1hIwHacCzHaSNZSDin
fIrZCDjXkWQK3gL9qKuJfjR84BWZEoLPqqcrS/6L8Mb/kH8Isv+BNz/RYsWU
VzUYv+VPQPpA3j/4wQ+ee+65YCO8973v/dWvfkUnYNKoKW57wiEkGEp4jBeE
BMMKJDHhjBmuvPLKf/qnf/rOd74DPcWPfvQj3LqBNAllCiYkzroE2w3EE6xg
UAvf/va3waqCZFevXo2TzPEz7uLFiyFNkPGvfvWrMCaBEXicTXsgCiEK6JxP
f/rT5513HoysgABIFkZH73rXu+Dv17/+9V/+8pd4vAJqj/Hjx0Pgq6666vOf
//wjjzzy+OOPQ3jkMPSV8AooWbt27YQJE2CMBOWCZB966CEIhts1C/4n3JOm
suQ/58kI+x+gfwS+0WdB6CPo5Og0G1C9+OKL0Neoc1SIeIgFyhaaBFQNNokH
HngA2AsBcP8HbTP74he/yEMm7LHNFVdcAWRcdtllUHc33XQTDlTgOdiqmAJ2
oDTk7rDP31yzZg2msG7dOigInUCH/gfodCALqERoQlCJkPXDDz8MlQitYuvW
rbRIAdMH2wR6RuhBoFlCg4ESwUgMo/C6g2YJRT7rrLOg5ZC84H5W6HKJ2/tG
QgOjTLHlQKbQcoB+aEvf/OY3L774YugiX3rpJUwZnkPIb3zjG3gs7Msvvxxn
+0/GnfUXyHbyPyCpII9QRiQVy47LutXmx5tcwmP+wxACGxIdU44AtqvOh7Sz
/iKufD0XUhZnQ1wxGznuDWG5cJ2pHQzEmV6lTKFtcFNIyLIXDTwv+tQiisMp
5MUXCfIPefzrub+fRIyg4oogq7xS6R8o/9WHWv/D8AGyBqObL5G+++67hamI
t2Cfxm2rwavUnI1etRx3+kfqSd/3vvfhSfEJ1k8lHO8o9qSgCoTaRMYeP34c
VAd0PaQPofPCyWC8tYhvgmAeQmf3nve8590MuM4aEwSNdPnll3/sYx/DEw1w
/gMvFG3IgL059INIAPbmnCdg4b75zW8GwigulJF6VeAA9qqg9Kqrq6nsS5Ys
AbZAmClTpkAw0H6YHbwCK/LCCy8ErYuqDKJTRXDZ8eI/LwWX6BHwPxBOnjwJ
Jr9YdtHb26s62XD/Sa8iiFYX9xBYfottD3olPCgceyXe9igWtVJse1Ad2PYo
R+g0oS+GOoKBHPRQ2PYS9t7+1FoQM2fOhIEccFudmQDYsGEDkEFdPLRe4Abk
C5mC3QeN/4477qDRo5Y2kgsMA7lgC6dBHW4Fhm8hGPTX0MKx+UGf+9hjj2Gf
iyNDSBC6GOij1a4ZB3Wcn9omp+U/r76E4zAcVv8DNKf77rtPLLtQnQ9p2/9A
+6eppTgVfU7DObUV4eBcrVMaIlLLJAlFVYOGA7Q3SAGtBt6vkWpKOPNt+OAN
rtevXw+J06650N6uvfZakAjIFAaWZ5999u23307eGC/asBSYL7ZqCsxX3fIv
syAvqFpJVVIuoNM+9alPAYtAFuJuDJT/vIHRX+N/yD8E3P+Aw05acayd1c81
jHZSGW//dNvY2AjWPc1bpgG2GNzifHUMyRNBqkCiN2/eTGcZiHkCfIN3ygKk
taamBroGMHVJ0uEVJAJmVNzuWSBNnLoQd0+X4kKacHYrikQiNAWUi60ICaUA
tUCHDlDiGAbUFypJMPTwUxGVMeF4QQXDB8R/eoI5jpj/AYZDd9111xi2hRHN
fFCB+z8QZ4TxxRvhjh07oH2Kqd0UgLeBpqYm3pIxQRp1Q0VDjyk+3SbcHyDI
bOxwNg/0mlVI0YE8aGBQp0QYhqR5ERSeWsKhQ4e0J85QFigFaJMSc4gY+Asl
hUxx3SvRjNHhFZhj6OXj0WGktHXrVhgjxXTz7Tk/uTxCHTU0NBCXiGAMT41W
bYEvv/zyULUrrw/Z5eXlfJrNGWecAU1dfIPGW1p/QQwU7U0rX2qhOB9ULZdQ
dKbgMyofSirhbJBL6fCtbETLFC2Eh1HVtdpKiR5Ry5Q7HfGjTS3hbE4V9wAX
JWrzglfDwf+Ycz7siPkfQHg///nP03wbvuxCbai4/oKzXdurimoV1ZRg2gOk
uL6+nlgnGEVKEi5AD0BIsSMfhQe1jFvW8KZFgXktcI8WJ158vcXeGdUgbWTK
W4JwVUEXjBsf8dYo2gBxAy9AK6LSo6rHYCQ1kBqoPjBmVeITtpELDOHda4cy
f0nLf972eIIj5n+Acn3rW9/iViGf+SBaHc5/UI0OtURUUtXHmHArfEwHeyXi
vOhk+bgIO2KqF96SE7abHftiVdi5B1UQpgoOJwPDQ6Y4wdVLUSTsQUJtbW3c
GWPwYB3sIB7e9vAtdvRQ6YK3UMwjR47gPHl4SMGIDP+27cV/ypcQtyUU6neY
mllXV9dVV11Fmg3w7W9/GxjCp63STiM4/4H6NfKfD1qfx5nM4jVwkkZBvAEn
3K4zAIYk7SdqnNqb6HwFPWIkg0/QdUzVxDt0eAJDI1DI6iacvF0Rbdri81tO
G1EYd1QryotIB5oZHeqnFfBs+K9tacb/kH8IuP+BpEyVCFVqhLyoz4Ugq1G4
vtJmQUMFogo1gDB8KBiJD3UQqD1opERPcP4Dj+VFOaefk6qqMu3Akl6p3siY
c0IHhqSxn+qvGDT/Eeh/GNbZyIg777yTj5E++9nPgtVPb/keWWnb/4DzH6hq
tJY+bwOCyTyk0Mz0PGqDM9MfQvNz7Z1gPqK4e/jNNT/1BTyMyMLrQlhnPCNO
FR9Cx3X9pmh1XGri7gZDQpFgzkA+Pk84wx5VTkXXRgni7XDPf1i9ejVfen/6
6aeXl5enHIjGBgPCNWvWUHl5e+PqTjQeXmvCz8BF3kf6SP+oIyhKCsYVkydP
BnPs3nvvvfDCC+EiFArdddddX7QBdgfN3ICQU6dOhaHIxRdf/JWvfOVf/uVf
wOiGIRDcnn/++ePGjZs3bx7mCymAMEL0Cy64AFLAsoPS+8Y3vlFTU3PppZd+
+ctfBvEEwxkdqkDAhz/84bPOOutLX/oSpL9gwYJvfvObEOYzn/nMtddeC6Nr
0Z69GgDXcqjQcAhH47Gh4j+FwWuwOrXzXoYckN1HP/pRruWAh+qyC8Ls2bNJ
EoWWo01peDFVzcNFMmEfuCMCcOXDU+M8Fx2KqrUoOnlNedaqguUjXqGT+RMS
FqGveIkSbrebyhPtuJrTIDwkQgMLdmmL7M9/ikX6H29Hxv/Q29v7hS98gU+2
mTZtWk9PT9pxrvLAcEvzH/yHE16jC62NxhsbXXQwxzhF4U1CcJvzVjhGKGuC
yJ0ql7/imfILn3rn7ji1yPy5djgn1DiVhSxQUXzROL1SEMSook1vh3X+w5Qp
U/jHo4suuqhDN/MB8fzzz7e3t6PkIlfF6IKTLa7juj2RRJFVUPp8wM9VGVWc
WnfUH4kU+BiJy4Vo8Gp98YpWR54+ZVebq9Cf4hYJ4yfEiRzpr2q+DZT/hJg5
fzMfEWT/Q0IZJGg7Jv6Xi6qq+YWUkX4W6QsRwDSFvYPXfDCv7XQEAVri8QkM
xXEaOR9cqY4XATH8ULPT9lkcfJY1URhjDnBKWbWXB8R//nDE5j8cPHjwnHPO
wTESbjjpExjXXyQYOEO0lRh3j5x5H8E7FMFnrmnVAbOoi34rlD61xN09HY0x
yKwQeRGdgnK1LXHRU0WjQ/dtThUBTptotNruUg2vhomzmeQJ9g1CfPvAWK++
+urwtTQcddOE5Le97W3l5eVpZ0DOv9cgNmzYgKeZxH07ZQHRwOiWDGoeUpVc
qi+RrKgsEJOzzz77pptu+sMf/oArXy6//PLbbrsNLc2KiopPfOITb7zxBsSC
kO985ztvuOGG48ePJ+xlQR/84AevvPJK/NYGNvj73/9+GBNCyO985zu33nor
pgDPIYUtW7Y0NzcDo4BpIKcQ5siRI+eee+7MmTOxWh955JEf//jHcAGpQTpI
CQQD+xpPbPTRMGqh4rrmPVT8jytKfuvWrSM2/2HevHl00uLdd9/t1TgRs2fP
pqYiZEploNAncbflKzim6oq4YtnxXjLuCK+XAuQqi5JV6eG59/vdlpLlIXlJ
iRgxeKYUYo7/issX1/miWySyVetYpCNo9uc/LzVdDLf/gRrSypUrzzjjDDQM
aeaDl8vr2WefjbkHSKKKiRu8OtQqVstOt9yKF91rXKcK/NsMb9s8F6FjeS2L
Vp1wnEj0lUrQrxImFIha42qPxtuY4Iy2SxXBuHz5RE8wUKb8K9Xw+R9qampA
86PzQV12Idrb888/j+svOJNFkQX61ee87XFuc7lW1RcpipgzXUGtLx6e7Aj+
l4sDBfOqfTFPTKgFUSLRrrhgcnZREURDUlsLpUNuWyE1A+U/FzQiwPgf8g9B
9j/E3FaPqhzirFv36sTFhdqJx5hDWCgB0f6FWhOJc9q8NJ6q5TrYDFLaK4be
0lxokZEoptrLaDtKUShVi/Jgqvhr+8oB8T/u9Owjuf/DoUOHzjnnHFx2oU6D
5yFx/0nOHM469Vu8lv9eylYd7ophj+jdREsQOYraEcDOS232cXdnEVckQu1r
Ev0N4TiRQjZFXGr8CfeXF7WYvGWqzVvwSs1XpEbDgCGc/+A10k4mk2BN85kP
afcepxTRa/8HbRHUh8IzqWoA4YHhVdBvXridCG71D9i8efPHP/5x/pkbRgLT
pk1L2AvtISTIMjXaj370oy+++CKFhEFjcXExpPCJT3yCVorF7bmU1157LZhL
GJ0ofOKJJ37wgx9gmIcffvi2226Di7q6uve9731HjhzB5wcPHvz973+vCoiP
UCTc35T9A2t5Ih76e4YhzZHxP1Bzmjdv3pvf/GZ0PqiNkz/h519oVbpaWB+1
IMKrz2MO4h5aIs66YJWN2urgvVXcrcp4vyZ6JTGlIcZsk4QDIkbQH9e1By9R
EqmpXara5/L0tfzREqDGGrH9J+EvdOJnnnnmddddhzMftI0NgesvBOuojvh5
f2pd+4wrvHxNHOr8OpWH2harbW9xpdZE7pSLT3fJX/mrcTW8th+n7LjjRZ1M
4sWEGINKhjZH/ny493+A3gGU/0UXXYRHbXq1NLiGDgtXNPgXhMNHn6vKSg2g
slQdLHG9xINRmgk21Ff1pFqDWs3An4v2mXBb93FFEYkUtNzjrwQNIjsvpT0g
/qvXwB/jf8g/BNn/wKXDR5+rUJWA2rC13b2I4jMkiDPXgVbiVL2kKv+E8iGG
6zQ1kbi7z9VSLhSdNtO4zhwWuXuZ21y9e8GHLYgR3n/y0KFDXns+EKD/Eusv
tApTrSPOdi0ffLgk0okp7iCfBL3GEtphhlfDVl95ZeHFjbjvQhIvDqhkxxXv
nP8UaK2kxN0SJwgY1vUXNBZKJpPV1dVpDzOQnBLofxC2iVYL8cbg1cay1HVx
nfyq8g7CMnbsWNpeHoaX55577oMPPviAg9tuu+2zn/1s3N7D5LTTTuNTUD71
qU+98cYblNE111wzc+ZMTAEiUiK33nrrP//zPzc3N+OxLEQG7ruFqhUPsse3
99xzz9lnn33jjTfOmDEDd+VV9ZjKNO2gSAQbEv6rHcRI7v+ALSpLjYr7T8Z1
+sdHxn0CeDFHO0xVWadee4Xxz50qgjua1FG3MCWEGtGOwL3YoqVZK1/q6N1L
YBO+/t5+KRnJ/Seh1dXW1qqnXajA9Rde7aHfEYUQZFFZPpzhzPRpPLzPVUPy
StFmxDtcH7tMje7VTrzgVQRtRioNMcVz4qPWVMK8xgkjcP7Fjh07VOcDgbpU
3H/SR5MT5Vnqc5WT2nGLNoW4h8LRot8RtQ8lXrWv5iuutXIUV8TK560QFtEX
eynPbPivhfE/5B+C7H/Qtkw+YuxXbXrdascbXmMVoXu1YqvVOSoNgv5+yesX
1GlqtYRKv5du5CF5eKGm+NuB8p9j+fLlaKONDLLcaAL9DyqH4+5aUzWk/zBV
TVA0AG2leI3K1O4VQ3qNXigMn+OnRb/jHzVNbUHU5+r4TY2o5u4VUpDhVRY1
7nDv/8DRb5PbsGEDnmYiyuLFw35rxKf5ebUBvnyMckzYsxpoLxrAH//4x4su
umiejRdffBH/lpaWxuz1FxCSZ/3JT35yy5YtRNLVV189c+ZMTAHka54DSKGk
pOTIkSNnnnkmrzU8LQizfuSRR/D8CwQEhhq89957P/7xj99yyy1aptEtL47K
B7W9nSL/VYZXVlaClhuZxpYeyMme5H8QBKtMyLKkQrTjbnFWAwyUwxjAazc5
VR96PYx7D3f9NadPjv3Sz4uZDf38IhvOiBKNpP+B4NX26Ln2/Aterf5eF39o
99bgWfBbCkZNkcJoV+L32zy8miWhX4tVawli1kJdxxjU1LwUnUjBZzjnUwqf
V5FI5JlnnhmBvbx4o1LXM6bZ+gvOk4Fqm2yglVZirzYvIc7+4dWqVFdJD4jU
fumn50SPlmBRFh6SWC0Gw6fIf95lGP9D/iGH/A9xDxMvlsWnLlVevKReuBNV
CY072oBLqJe/tF/JIvrV1V7+lHtJtA/9Qm948UqQ129Bsuc/bb0II/OKiopR
aVo+HSXYR/v371c5oC2Uuo+fV6m19UXhvSa0iAuvfk1LrTaMcAJ40e81jPGi
38eDrTZCHlf7mcmrOCq0W6+olPD+dCT9D/1iw4YNuP4iS7eVqC+xmkDls1pf
Pt8jxAX5H1DRgbR+4Qtf4FFef/31xx57LO7smstfkf8Bcc0118yaNWvFihXn
nXcezwLK/vjjjzc3N+Mhdwh4C2PIK6+8Eokn/8OaNWtmzJhBaba0tLz//e9v
bGzUliKutDcB7fejfpEl/2lLupGc/zAgkP+B+ODvuRJtiXOP6yutIRbTucV4
gH69Q9oaVGcMahOM6zSPKgVYldQ39QsvwlR1nU1qp8J/DuT/qPgf+oW6/iLu
0TYEG7UinHAmPuFb7UIzHjKh252J5yVUpZYkIpUmivvTr6bJFQ5vIV4L5Xgp
RF5irNgv/YIb2dAf9+U/px/9D6PdxCyI8zf9MdD+NO5RQV7yy1lHUby+AXlp
MNF4eES1DXiVNKZATVmbaTZiItwOXoVSkQ3/xfcR43/IPwTZ/6AKjhCiuNIj
c0mhhs3dBTHFWBZDHVXKuLhpZTCuqKZsUMj0w8h8JNdfZAn0P3gVVltqUQv+
7OKx1PA0DObDA690VF3tn29h0i8adqD8D3z9xVCVV01noPWFonrixInTTz+d
p3PBBRc8+eSTeAs2znnnnbd06VIMiZ4KAvc/wC3Of4CL888/H1LA583NzZgC
+h94Rrj+Am/BbLnuuusS9pFeH/rQhxoaGjBkfX39//k//wd3vIwpesyLnyPT
3mjIVFlZGUz/w9y5c7XFVHnFh9a8l6H2o3oJfMILDnvR4EUPv8gmfGHSf+zY
sdmzZ2NFj9gn6X6B+08KdvGyi4LzIpOg8TDiA1DMsYC0uZCi4xlp2a7SIMKr
E8YM/SOw/sIHvJGDfdra2qpSKzgWL5jxT37QT8GM/yH/EGT/A7VM7iIWDVtt
q3wxsiojHewETGEX+0hWXPd9J+ZW7Pg3EolAFvBXHdUb+knJjPD+D1mC1l/E
3ApTcCzu7n9jbh0rOC8+Fqjc84nlE4bqC//ysai21gqQfvHZKBaw+Q8bN25c
vXp1MOtLzGoAhbBr166vf/3rX/jCFyZMmPC5z33uoYceQqrIU0FxP/WpT23Z
siXmqIJp06Y999xzcAspXHjhheeffz6kcN555/3P//wPBDh8+DD6H+iL9syZ
M6+66ipMDaJ88pOfhMAbNmyYNWvWueee+41vfGPq1KnnnHPOiy++yMvCB+ej
0t5Ew4O/I3n+xYDwwgsvoGEriKe/WiOF3mq93yRlNIjVxo0r8GqZ/LmYnxB1
9mSmSjT0E/3Nzc04/yEgzgckA9dfdDinKqvF0RYWN7z1mpSiKjou4+JVnH0f
0VaZsIZ4lSXY4QIxZShV4PTDRTgcDsj8B+gj2traiLFUTOG6iRfG+CfX6acE
sW1Hzf6T+YjA+h/q6upUjxyXEa3O5HJB+pM7kGPupX8cXkJBz32y5n5FzIg2
ezf080EdxkX/Q0DGSASa/8BLHXV7e7Q6XB0xYqnplVDCMUW384j9urJ5rcWc
maWUkTrkwGAFSH/CvawpCP4H9fyLoNWXahORAjl06BDu/UghOcFCL4nhNOLA
gQP19fU8cVW4BP1HjhwhTdLY2FhZWRkKhTgNsf70kijaMLU3VJjEz2D6H6D5
4fmbPiNGAaoLwQEqtTCl1bg8ikhT20gEz0XrwuwM/Vr6A7v+IqZ8x48rywCp
gNz8IWGMMptapKNyhrOIaxgf8NSEohD9iDpYKmT6o+75DyM8qNPOf4gro9bY
wPV5Hox/cp1+UY/G/5B/CKz/gfZ/EG1eqwDjzLwVjVlt9qTJ47aVTXKqdfqR
2Koyoo4rYqyTVV2Ohn56Hvz5D5x4KgLnjBiO8lI7AwGXdqXwaKeonEH0a09R
LDF4iDPwHHlrKSj66ZqCBcH/QODzH4JZXyI8/5LCA8SYmNCwBz0Gojoorlr1
/C9PjZPEC4WvyGSjMqoYmfYmShoLqv8hzfZ/4CUilsaY9cFrhN+KliYYHneb
S+TH1taOqFOVw3G7j1Nt8zjrcQz9hObmZlp/ERyg/0GwN+4YszG3QHmxkQJw
ZSVYRE9I/3Cd41WJggYh9aqRbujnjTA4+z/MmjWrtbWVxIf3I0R24Yx/cp1+
uqa/xv+Qfwis/6Gurk40YC+QouZt1Qfcsqam7hVLKwgxx/bnOlyAnhv6KREa
yy1dujSY/of9+/eLUotRorY3F6wWDKSIGIYf26rlEl34cz7qTFPBShTdihdt
hUM/Tw27y6D5H3D/h6DVV9wZhYrPFlnqAZ543DG+xFsan1Begn4xaIkzV4NK
vxhLe2EE2hunIZj7T+L8B1VRizGqWiKVCTSe5MEoZfHJlUKqjUTLT94gVb86
ZscJNvTjxdGjR7n/ISAzDMn/IJig8i3GRF4wM+62aPh0oyj7SCrS5EpGK+mU
JmkGQacYQfF5oYZ+vA3U/g9qX8YvCmf8k+v0C0BE43/IPwTW/7DNnv/A+2Xt
qEl77SNB/pOL1ASFlhYDBq0QiUQM/TGlUwvs/Id9+/YR2YIVal+m3mqHkXyg
qGW4ykmvUS5/pSVD9CBaOguKfp5s0PwPa9asCWB9+UT0GZDw0Q5PzUtfZanu
KEGv3P0fjmR7QyLJTxJM/0Panv8Qc1sTdOE1AuQhuWWkcsmnhcTd5rb/4NaL
BkGPoV/QT/s/BArPPvusKuD+5kY2AxWfpLS6yD9HGm36kGToV6OP7v4P3P/w
/PPPt7a2xt0f2VU1XlDjn5ymX4Q0/of8Q2D9D7W1taLP8hqjejVsbXRxwXt2
rp+zGV2o4wcfMgz9NF6CiyDPf+D0x519MLT8V0stxqheFUEp+4TxR5StNyca
VCuSj0kKk370z2OYV199dbSbWB/Q/zDk5T31+hLpYyyhJYhOYQ3FlOmdPul7
6Tc1DC9ITFltkY3SG+72Rvwh2rZs2bJ8+fLRbmUa4PqLqNtzMlBBJmaK4hNj
1W7FJ3Gv6lAT4QF4v2Poxwu+/iIgkx/S7vUXKt/8FYWqLqKKkeVVWV7891E1
Qt2p9Bj6Bf3BWX+B/gdRBFV+s9HnvLwqZ6K5M/7JafqFmPz5z38e7SbmB+N/
GAQC63+oq6uLefez/k0XwQWEywiPpd0jUZU1rtK1fQEXQB7A0K/tWAPufyBm
9tv7Cz546WERi6fvU2uC89oAMXfDoBrkVVmY9KvDrQD6HwJYXyS2goGivlSS
1PGMV9Vr6ddSNQj6R1deKEqQ93/IkmPaUhPTvJoHBY4yg8grfZUGYe+oPOet
y6fWCpP+I0eOBHn/B23HKgoihEu99mepV3UIRmXT7L10iKGfP4wq6y9Gy/FF
/gdtM/NhS16Of/KDfg4z/yH/EGT/Q5b9cpR588j9i6NoYcJHFfiIGO8Coh67
6XqlwxM09KsEw8g8mP6Hffv2Rd3KWdsLk9IW1cFLLVgkmCA26FOrgxgbZx8r
RY0Irvo0hsKkX7x9+eWXR7uJ9YHWX5j6yhv6eZgtW7YsXbp0tFuZBJgGc+bM
ibpXi/uAl4hreLXUasWp6QiGc84LYniTUDkfczveDf0UPrD+B85AL2OWj0wE
x2hcofKH14J6EWUWFgYm/cAVhWC1mrKakaEfIdZfjOKsm+eff76lpYUX04zf
cpd+ao0EqN/RalrZwPgfBoGA+x+o5fN5ZRyg/cCyxl3OaK2xtvFzYRQNG2/F
ITJaASFhjNmKF4UF5QVvuZSRCBv6Bf2B3f+B5j9w1mnLTs4cYikpTyq+OtDi
b2OsFxDpiJqNO/v8UBSsNQpDiOucS4VJv+jsAAHc/8HUVz7Rz7Fly5Ycmv/A
+SNKTWXnsYgbotQ8zRjrCCg8f8VrjexxwWHqpGjIiqDOjqxyQ38swP4HEjTi
oReIUVR2fquWmvhPF7zKKIy27riioOgR90cf0TDo1tCP6Yzu/g8cYJ+2t7dz
dkUcaIsZy/f+KHfpF00OYeY/5B8C7n8gCaKmSK2XSwQp3mgWMwd4383bPyhS
UlkURdW3lJcqlWoKhn6V/liw119EPUZ9UXcPLrSl0NhCA0eZJqeeEbkqvEDE
VZ4LpsBrDePSsJbzXEAlqRDoV0sBFwGc/2DqKz/o53HxIsjrL4RlQaz2KhEf
E6qKnV9Qyjw10TXwWCIXvOZ9E11g30SJYDMw9IuLoPkf8Gv4c889F/Owuznb
+QUVWUgcjygUBd7ygUrMMZBJCSBo7BRhxpRaZV5KRqRf4PRDgGeffXa0G5oF
df8HQS2Xl/zuj3KdforCteKsWbNGu4n5wfgfBoGA+x84uFVITTSiOOuijiJF
vU2yI+RRGzHKunjS8zwu19jUL3iJDw05DP28O4sF2P+wd+/eGBtwCo6ppY4p
A0JRU4LzEfdqYs4uob15FIJa9YIGSt/QL+QlFkj/g6mvPKOfEEz/A66/oFLH
bEOYykW6nfQ25wk+5AehRpm5JFgU1VlSnO2CsSI8gbOXKl3N19CP6QTN/4AA
+1QdJ2QjRFzMean5Q+IzZ2PUPRGFtAQliPpBWws8I54LqRRDPz2M2DN8gjP/
4cSJE9TGIo6ZHC3g/ihH6RelwFuz/iL/EHD/A5cFapm8VcecXlgo3qh74QCZ
wzE3ePMWIiNEWEgW/SWxEvnG2Nlzhv64ex5FYPd/OHDgABGvdspcY/Nrrid5
AGIavxDBeA3yjIjD/JYzn0BuIp4pr2KV1EKgX/Rr0UCuvzD1lR/081cYOMjr
L7hmVvkjmEO3+KWM5sgR6+JsPp6aIK8aXkcqKGXBeT7uFTa+V1IFS38A/Q+p
VIrvP8lFmAorBiH0V9g1ZAcJu1jUnYjFP6NorRv/iqC3wtg39GP4QPkf6PxN
4cETXBKSxdnLA8Rytj/KdfrFh1EMY/wP+YeA+x94301CpB31qXIhgqnPUZdq
HyLUBL3S9MrI0K8Gg+eBnf+A+09ypa2y14tX/gG0rBApcJ2fDRu90uTjB0M/
IYDzH4a1vFre8hQCXl85TX9g/Q9z587lw0uh4YkhPuzinBfDVAqgssWrEtUA
XizVDl8pvKE/Fkj/Q5rtP6nlm+BnjBnL2le87CrPI+7vI+pfbT36UxVVat/Q
T5SEQqEZM2aMdhOzQPtPEpGmP8pd+lUijf8h/xBw/4Pokb3GS9qGTd26eO6j
wEWYCIOIK5IVIdXwhn6OpUuXVlZWjnYrk0D/g3YcGHGDyqUdD2RTQSJ9Lcey
7EoEYdruo5Dpp5DB9D+Y+soz+jFkYP0PYJ+qxCPN4XCYF1ktVDYQIb0ql+fC
9W3UveZXaGD/TA39AfQ/pFKpZ555RrAoyqaLCCkWUIVLZXuW4HnFFA8PheEB
qF5Uegz9+CpQ8x9aWlpI6FTpG5w+90FO9Ed5QD/Wptl/Mv8QcP+D2izpL11k
o0i5FIgwXtdaiBR88lJh6Cf9E/D5D1HFu8LLrq2RqLfa9+eMVxSedYQNJ7wG
Hj4pFCz9EfcwDOp3tJtYH/j8h6EqL4XM0frKafrFWDew/gc8/6JfDqil1nKS
GIK2sxcntRzjTFPtdK9aG9DzQqM/gP6HtDP/IUtxFkUWm1CpYbxS1lYcdxBx
ReFTBQNFodEfCoWCs/8kzX/QMrOg+qOcpl+ExDBm/kP+IbD+h9raWm2fLqSJ
t14fSVEFkMJ7gW9YHWXjE2Fue6WvlTJDP14E3P8gCstLzflPFxG3netVapV1
AoJjvB5pv3TK2is7/1orZPoD638w9ZUf9NPbiO1/WL58+Wi3Mg1o/oPKT5Xh
NG7st9Z4eJWrgqV0gZUFJgzVWlQHzmGvxmDojwTV//DMM8+IckUUQYvoxC3i
Hk6oXNWyQiSrhonYWiLChkPaKhM0G/rVLKLBm/+gslEUU9jCJFmCSyq7tGxU
0+f8j7j7I85Jn9pXa9DQHzX+h3xEkP0PXBMKpYfgOz75S5naqlUB5KNZMXbV
uhZ5XBJSyovvymLoF5ZCYNdf4PmbophabgvWaYNF7aGpUK38Lc8l0t/6u5gz
3VElBiuOb01m6I84oyPabS9o6y9WrVpl6is/6Fe/ngd2/gP3P6gFibpXAaic
V7kaYx9JRWCRAh9qCgNHrUcKTPsu8vqiXCiWoR9w+PDhAPofZsyYobY30fai
zqiDCxTxkNhIRabUtALOX0XZKEjlNtUCp4H0A/mXtCrC0B+x5z8Eyv/AhTfq
lmXOarHWifOcV4FgnZdURhX9IHhLyKY/irr954VJv/hOCn+N/yH/EHz/AzU/
oVhE2+Z9uiogUbc6UlMQkgViG3Fr8ogCHpcPQiIeQ5pCpl/kG9j5D3v37hXF
9K+IqLvrF1EE37QM53lRDQpFzeuCD0XomvZ81lJLw4aCol8NOYr+h1QqJS42
bty4du1aU195Qz8PAxfBPH8zbe8/qSVYcJ7rc/6Xj2/pQih/biXxUSivNeqb
KBFxq61BnoKwxQz9kUDOf0gmk88995za3qJuqGXn7OLDmCgTeRU8C8FwSkfw
XOV8jC1ziOjsMkM/173B8T+cOHGCKBTl5VITZT2CKKzWWlerSfRHCK1m4AJL
Phz//ijKRFtUd4HQzwWE6tH4H/IPueJ/iLrta947k9TwWwHe8sE27zc8l19t
OmH3YVgRx2ZXZdbQz4lBBHb+w969ezmjom79Scznb/GJqCM1EeIeeqTpOy+H
cPlGlYGx6kfiiWtrTQQuNPp51kFbf7Fq1SpTX/lEf5QNljZv3hxM/8OcOXOo
gFxp4xPeuWiZw61mwTE1oqggkaYX58P2nCXMCy6oCiJuC4jTY+jH22DOfwD7
VJUXsmWEMHI2xpzP7mSkcD5EHAmNuL2OamC1HjkPw+xbP9EW0UmHoV/QHwnq
/AfBNGIFF8Yo0+eCpeJvhA2JvfojwT3OMZ6OACdVVJMYYxcU/VG3+wuzMP6H
/EPA/Q/cIiZlSEo7yhZgcokgoVDlRaQjmr3a74t0uPoVJjwFUzsCQ7/wmQR2
/sOePXt4ry264Ih98jUpW97vU8FVZU7Bws5nLx7LH3xYIhLnYww1FlUBP6q7
MOmPOH1uEPwPfP7DmjVrTH3lE/2UBSCw6y9eeOGFKBsBIrV03noikeBLYIg5
XCv6MJ9XVphN2BY5RpW+idhI/QuG5ONVno6ocUM/hgza/AdUd7j/Q8z5wEFC
ygWcOBBhksVFj3OeyzJFibnXCPjwnFcZz4tXt+CzyNfQz/8Gx/9w/PhxXmQu
0Woxie38VstqUU0RXX+kFe2Ie1WCtrNQY3G2Fyz9XDpQQxr/Q/4h4P4H0Va5
DoyyMaEIKYSC30Z14wcegMQnwr41kEmuSqsqtlxaDf0RtwaLOP6HYM5/2Ldv
H3e/eOlzwXberYuHXtAGI/YKPquxRGVxPgtWa8koQPrDwZv/oO4/aeorR+kX
VEUDvP8D+h+0HOPFF30K/fVSiV6veDeBFzG2uI/4L9iorcSweyTMP5wZ+vFV
wOc/RJgFRHzwYpdaNZw/Xpz34kxY+WTjFVGVZVFHPm8LkP6gzX8gqfTvZfhD
tRZ8egE1nQiTTZ8+xYexlFTUPVZX4xYI/ZQCf2L8D/mHwPofampqtLLTr6L2
f+7TfWujqPlmnwJHgdMvAgR2/gPu/xDR6cN+SxfVGS/ah17Q6mrKNPt01KSI
GJ8oeUk/R9D8D6tXrx7y8uZ6feUu/SJwYP0PYJ96FcenyGHm9PbniderLHsQ
n7gice1tgdMftPkPCH7+hT8PyfbhwbLhfJYDD5GRyM4rKWErGfpFUsHxP9D8
h7DjJ/TnajbIfuwddi9DGFzuaqxTLEXu0i/cIMb/kH8IuP+By0LU7X0VDXVw
ZnW/jT/iaG88YyviliZ6wnPX9rOGfo4g+x+os0amaTmm8tlHx57iwJXglbuX
wtfGKkD66W1g/Q+mvvKMfkBg93944YUXOJ1UFq0CV505YcUQ9mJ1Ngg7y/d4
FWSTVNT9fdPQj38D63/gUiNY5DWWyN5uojD9RsGso8qclmwSN/RrEaj5D7j/
ZDgLO5rK6FM67UrkLOHTpwgyxCuKoh2xFwj92uoz/of8Q2D9D9XV1dS5q8sw
veRFPfeBi4CPIGhTizh+1IiilvlfvlOKgKFfS3l5eXkA/Q8vvvgi+h8iShcm
uC1eURQsPu2GoVYfMVCsvxPBeHgBlQZBiXgY1jmXCoR+Ch8OpP9h1apVpr7y
hn4eK2zv/7B8+fLRbmUagH1Kul3Vb4ItvLxUWHzLVb0IL1ih1pSoBW1EesKj
ECWcJDWpgqU/sOsveNm1jFLBZVPUghf/xUPBeZGgUA78VkQnnou4hn5MfMaM
GaPdxCzg/Acf9lKp6SKsQFvesHv7i4jSgLXCqIZXeyVBqhCTgqVfpSpi/A/5
iID4H2hbNgTNf+B9Lv9LoI2ehECRmMTcO7hGmZVNtxg4zIavJLAixwjbr5WL
RsRD4xn6Y7oddJctWxYQ/wNveLT+Isz0thcizN6JsX2h1fGANq5211909Xjl
FXH3LF6cjyi9ibYs+U0/Lwg17xdffHEUW5oAP//C1Feu0x9hh9zh7ebNm5cu
XTrarUwDXH8RdTYN5vasKD7nWJid5x5zb5zOWcqj81ei1uBve3u7yI6ie/Gf
y7XIy9CPaQbZ/8AFlrjHIdwyUTakEUXmeiOsE3ARhl7x6hD1wusu4jageC54
beinv5AUzn8QY/gRA+WL/vyEg3g8Tn/Fk5h9MA2go6Ojs7MTHnZ1deEtjwK3
+JAuKBakgLcYHcPQQ7iAh/iXZ00XSAAEBgZiFHpL4LeFRj/RjBtXYlMMoGbj
MP6HQSAg/gcBdf+HiHt8SGo26jGO0v7lqhUToZEnvUVwfR51j1e5zqe3PLoa
xtAvIi5evDiA+0+CfUrnX4Tddgq3UATH1ArijBIuXD5ixDFAiAECwEOV86Ky
xLAE4xIBat1RHRUO/So9EOuVV14Z7SbWB/I/mPrKJ/qRnnBQ5z/AWB39D2G3
fR12myfEB6oUKiNcQxn9eYi1FmJGU8g9F1ebr1p9vElQjYeUL2uqeVWw9AfT
/zBjxgw63CHkOBKpyIL54jkJO8k+rxFRfFXAw45dH1J2+xTXHDydiC3UYQYt
nYVJf8S9/mLkXRCYI/6dOXMmnr/J+UDFIXGOuF06vB+hUocVRNxSrx33Euep
dvCVEGq8QFmg2qFktcP1AqSf36JT4q9//esIt64BwfgfBoFg+h/APq2qquKK
TpUg0Vy9VDEpSbV5c3ARUwWHHnINTCkTnaT2+StDf4SNwVDPBHb9xZ49e7R8
5qpY/XZAHPCqAqFUtfpcJMhrnKeDg096mE2/U7D08z4uHLzzL2j9hamvPKA/
6nzeRUUaTP9D2pn/IIpDvgjBGc5Y4czxqjUemDNThOeVSIZS2LGvKc0Qs9nD
zF7jvVjIPU+gkOkPoP8BbEOc/8CNQcFVLmLaGuESJ1xDPLyoHe0tuTEjbFjC
6wIvSFFQGEO/Sj+m/PTTT49uA8O/s2bNwv0n+SiX81CMovnAWB2+cq+gliE8
ijpIDjNx5tExJDGcV1PY7eFB8GoqKPopAGTR2dkZj8dffvnlUWxm/cL4HwaB
YPof6PxNoQ+pAXOtwqVDq9u5toy4lTbJC8qRkB2eHb7iy5C5OHNp1Y4NDP1h
p9eD28D6H2j9BW971HGjMuSlU4vPb4mNdGQb1SBVkFpl/JZbW6qW5k1CTETn
dndh0h9ypklTqwuy/8HUV07Tj4SR9gNs2rQpsOsvVM7zIvPCag0lusBYWvNc
9BS8psRz/iTqAJPCay3DxdjY0I/PA+h/SHvsP8n5yYvA+a810lF4aeKTeMvr
hWekVoHIiKqMLnh4MSgy9BP9bW1tzz777GgtvkBg7rNmzTpx4oTgUoQNlbnI
+NjCVExV4tTa4fwJu/sjVWMQSBzUauJOHp5IQdFP1gr+Rf/Da6+9NoptrF8Y
/8MgEFj/A+4/yVtmWKecVQmK6AYP/nG1qQlx5hCDXjUjLrmGfhXl5eVQv6Pd
yiRo/QXnoQ9z/HkoGE5JaaPzmuIaWIDsL69Ewu6q1xJWCPRrEUz/g6mvPKBf
vQ3m+RcwUMfzL0Tx6ZY4L1jHw2i5RAxXq0A88TJqKLwYA0eUyS08X1FrBU5/
YP0PvLyqxHmBc5IzyoufPIoXw8UrrcGlJigoMfRzkRnF+Q8pG3j9/PPPHzt2
jNPpJddeKj2sc3FrmenToYQ9pNUrWa/ROK+mQqYfbnF3iOLi4tFqZtnA+B8G
gUD5H0iTLF68GP0P2lYthKXfJn2KCLk9dRw0FBG9RjZ9RyHTHxz/g9h/kvsf
tJz0L6wP90SUbHp/NVmvYYM/81WyC4d+/iRQ8/e81l+cYnm9WJor9eWVRa7Q
T082b94c2PUXqo3Dn2j3pssS/LO+F1fD7i5JxBX9C41dVQNKm3iB0x9A/wOt
v/BBNhqg3+eDAFcUYWXCOZlC/WqeQqYfmmugzr8IOd/L1LL7S5bW2ULPRWrZ
d0ZhdzX125FpNUah0S8ednV1JRIJM/8h/xAo/wNB63/oV0CyhNeo0mcw7J/R
4IS632S9kNP0Y8jArr/g/oeQsuPccKDf+lKtG4FsjClDfyTA528OR3l9+OD/
NiD15YXA0i/yCub8hzQ7f5No1n5y0vYmg+4gROL9PlEpGVCaBUt/AP0PaXv/
SdXTJTjj9RU1G3b5R/Qa8wiHkjDew+5xkaHfi/7g+B9w/wdhhmv1+ZC7gHze
8roQ/qJsUitw+rn/oaioaLSbmB+M/2EQCJr/Ab9H4/oL0ZipJWfZmLmwCCkI
uacEaNPv9+OXoIHgFaWQ6Q+7e8zy8vIgn3/BQZuN92uYaHVvxPkMEVFmLar8
D/fnIlbT94lLDw39GCto52+uXLly+Mqb6/WV6/QH1v/wwgsvhJUxpE9h1Y5G
+9Cr1riLIxuu8mQpbpjVmogrwhQ4/cH0P+D8B85b4gYhG5aGFGcOVcrQDof4
UTthnalu6Od5Bcr/IEqUveTmd3+Uo/TjX+N/yFcEyv9AO9n67P9A9jh1ZFx1
82uttlelRpUI7Su85vSo6fBY3Og29AsEZ/0Fhzh/k5dayx/ijAipVpmoO56I
4Cf1F5SdFtoqFmMYQz+nJxw8/wPNfzD1lev0i2Rh0BVY/wPNfxCl9tmRkjOK
32r5zOOKGuSJa0WVx4q4R84iWfWvoR9w6NChwPofwh6CRuX1EjQSef6JX1UU
QsBF4pSIyjTBVdxZkR9iIviv7qVZyPQHzf8g5CXMRLJw+qM8oJ9ihc38h/xF
oPwPhEWLFlVVVfEWi0BnGp31gO2W9G2IHY3t5cfj44GwW/nzh+KJ0PCUPhcl
IfJtbW2Gfg6uW3D9RTKZHO2G5gLYp7t37+as45wUJ4zgRbsNwZ+Qt94WlShq
Lez4kMV5WBheeJJFAF6zIR0KjX61FEFbf7Fy5UpTX/lEP9EJfzdt2hRY/4NK
P0eYyY54SFHCrO/wqbWQThKpytS8fGpf0EPEqA8Lmf7Azn+g4YFaXlFkzl6M
QkUmMfequ5DOLyQqNMIO4aVbToB2OCRqzdBPGQXK/3Ds2DFOOb8owP4ob+g3
/od8RZD9D9RQqa3SNW/YQl5C7NN82O2UCzHjnZSqFqTSvXpMnm/I3WtwCg39
asoQeOnSpcHc/wH9D6IU3H/LS038F2MGPtqk+goxfRtm5yaLWuP9ArqARF2o
9RVm5xmpNVKY9IvhGUYJgv+B9jvF+Q+mvvKGfpFaYP0Pc+bMQTq5IdPOvpmG
2TCSjxi5B5sXnHMJq0B0B2FljMov1FteI+32+ac8jDCveEsw9Ad2/gM1OfzL
j+cj85BYx8sbYZND1CkiVGV4wY1xissfhtiISLCOax5R3dSJ0K2hn2gAsgPl
fyCGCKkJucElNy/7o1ynn1PS1dUVi8Vy4fyLauN/GBAC63/A9RfUAtUOmivY
sGMdq+a20K6o5CkuvVWdeyEdRI6ia+ASKhIx9PN0Arv/JPofuB5W+25S4KKM
/JZqBP9CrZFOpjEY5xvxE0OGmOuG85xuBavFNQ9TmPRzyom2oJ1/QfMfTH3l
Ov0i5XCA95/E8zdDbkTcH1WxCBHmu0MukXnO//IegY8kRVyVb4KZvPchllIN
Ukac24Z+QX8A5z/g+RchRRhJooWAq5IbduwmKjJdc7Yju9AUojCc/xSep0yZ
isDEUq1KMfTzlhk0/4PgWHvh9Ud5Qz/CzH/IVwTf/8AHS7zjFp242qdTJy50
tVdgVbK43HHpEOKjJsWjGPrDDihYkPefFB5jcZElKLw61OcDA6oIrqJ57qIP
pVfq6IX3GtqkCpN+HisI+z+I+Q+mvvKDfopI9Ad2/gOuvxClFuM9zk/OB5VL
ovqI1drUeCyRlLY/Uh9qCQg79pGhP7DzHzj3uCBzXgmrVhTcq+xa9nqxS1Uy
XDPw6FqNwUth6Me/gZr/gPtPhpidK/wqWULLarVSwkHtj/KDfoqC/odcmP9g
/A9ZIWUDLm5Z1RRA/8PixYur7PUXWsGha61trpUOtYVzuROqWJuvUN1e0uQj
ZYZ+ehjk+Q8+nhkx80QtrxrXx83rz3auz9vd8+K01ZeNei9A+nmmQVh/QaD5
D0Nb3lyvr5ymn6u7TZs2LV26dLRbmQYvvPCCV/HbdZNmxUjSq1KEzveBauOE
dWaCfzrajs/QH8D5D2ln/YUPQ9SP71RkrWfGHypXeXSvvPptGD4oWPrb7Tk5
wfE/8PUXKsGF1h/lAf0IXH+RC/MfzPqLrED+h5tXNk4sqYJfoPwPuP9DNppT
bfZZStwpQjt+GAQKhH6RUZD9Dz7FOUWIftwrZZ9XIpjXxTAh1+kPmv+B9n8Y
JuR6feUi/URMwOc/qHwbXL+j2iNeIYdKkXrlaOgPBdv/IKCWUWtKew0wfLTB
gBiYPUS+hn68Dbj/YQiRi/0RR+7S39XVFY/Hc8H/YOY/ZAWaBnzzysbxxVsn
FVXO2d7M31KAUQHtPylatWjhPID6l8NL95JbzysivSXnsBcB/k8M/VytLVmy
JMj+B6+hoD9ztEqbDyf49zIeV4ThVSbyFRH7nVsoSCo0+sWT4Ky/gL9gn/Y7
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
cKpv3M3+y08M+/KxlNzj0bHyku55JvSqz4xiNlRvxqWQdL5KO2FsK6ynz9tA
GzWwRNTCtXSlKk7ED0d7Vh5sebb24L3rG79fXn/Z/OqLS6snlFonM4IhOfm1
avsbd5V9PmZmhsO3SysnWzMcaiYVVcPzSWVV15dvu2t105NV+0v2nNgV6nDW
cCQzMysc2y3zIdp+3pvqsxwVN4txZQ8LyFqXS3V0ga0wvdZchV4rUg9fI4Nx
Mma73RRPJtPb22Lz97Y8VXvo5xt23rSy4coFtdamH6W1dMQnzpRYsOe4dW35
rKpwpsSEEmszkMnFVfaCHauNTSmtuLhs65WLq29Y1nD7qqb7N+x+vGLfzPqD
RbtOrG0O1bfFWzq6bSJ6MmUhnwl3EbjXptnSQRMk+uYReZbfzRzH75ItXAtb
Cgwo5spjMzQ0MDAwMBgCTLfnP+D5F31LKUeRIAODvEM/49hkZoU//F23bt2n
P/UJEMm3vOUt9913X3d3l+7LflYTIcjnYI/tkym+J0AewqW7UuzJkCDlnrHg
8uo4j2yfAfP0OFZS3+qMJI/mfI3uSybzxDLqU71tHUmw0VYfib629/isbYcf
q9j38417bl3ddOOyhqsX118xv25KadWUIntfwdLKZQdPPLH1gDXDobTa2rQB
D14sykytt05jtE5DsKzCccVwW33Vwrqblzfcv77p6Zr98/ce39Ya6el17ySQ
cXMl027bLeMn69uSwmULF6yxNlpQF7w4dejMiOjNNMU+pxCrzszKCC9JscNE
T6ZrWqLz97Y8V3fk4c2771y7E1rgsv0teOjJxNcq2AGsmZ/t5spc45Gg5LvA
Bmkt67Am4VTh0p6pZdbqnu8sqIGG/b0ldTcsr7955fafrmn62bo9D2zc99iW
/X+sOTi74ei8ncdK97aX729debBl/ZH2ypbYtvbE3kjiaKIr2t3bpdsgwme3
VQMXyDGVkgrKwMDAwMBgyGHt/zB2rNj/IZ/NFAOD0YbmS32qt7Oz87777gNh
HDN2zOc+97nqyip/r0X2tl6KzOG8luuRMX5ZHnJ83ptMR7uTRztO7o11bG+L
VRwPrW8OrzwUXrSvpWRP67ymE39qaP5/dfvBnvrVhr33vb7np2t23Ly84fvl
28DmumZJw+ULay8u2zrZPi1xUmktM+LwCIOqSaWZ8y7xFVpz6FJYtvfE4xX7
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
D1BDAAAAJQDyD8AMw/e4CYodxLCHypUrjx071s2eDpe8kAAoGOYfYmJihPOv
t1Lyz+Pi4twsQqeYwqwwRQpHjhwZP368nB1ClhGRAoUq/L0J2qoUpkBDmf+B
Yop169b9+uuvH330UadOna655hoSICMj44orrvj8889vuOGG9u3by8KkcU2b
Nv2aQYHD3XffrUQ3ShxEJ8jHP+Tm5tIRf/nllw8//JCOSIosXiohBg8eXKtW
rd69ewcHB9NFEysHDRpEK19//fWgoCDxDovMP4gCX3zxxZAhQ8Ry7dq1Dx06
RHI2btxYl/P06dN0+nJWT8P5IgDwH0SSkEyK4fdojh8/TusTExPdrB8UWYJP
P/20T58+cpiQKCleTeKVuz36RSVJuXr16qVMlvLEE0/Mnz+fbJSS/ZgwYYLM
P9x0000if8hVafHixbfffrt4d0PuKwqI3AWfGFOOf4AyAgAAKAGQfwCGGKYU
jh079uyzz4phD08++WR8fLzhXgDYCM8/yAaZnp4unX9lMnmKuN955x03yz8k
JydTYTGZCS9MyxQpUGEZKXCP/fHHH6dIIS0tTYkURP5BFqNQhecfTpw48cAD
D7z00kthYWE7d+6koP7BBx9cunSpGCfw7rvvkuTNmzf/9ttvRfnRo0c/9thj
MxgRERGRkZFJSUkWcRDJLM8uNTW1ZcuW8ogUH9EVoyNKCSlgmTNnDp0pxS/i
ysiVVJVcycdv8/EPN99888GDB0nOtm3bknjh4eFSVLo+FzCvJgD2QrpDynj5
5ZfzlXIowltvvdWnTx9ll1OnTtWpU2fJkiU87/fmm29KhXIX6CmVJJWhkps2
bbrtttt4H5qRkVGtWrWEhASRQ+CbeP6hffv2P/30E6+T+Oqrr5577jm35+WR
q6++2s3MgrBIev5BqQEAAAAoJpB/AEUiHJIpU6Zcd911YtiDnJcbAH/DcPyD
2+P8m4UJ4pMW3CE3iynEtyQ2b9586623ygCEdhEzJ8THx1OkQN6+HilI518Z
/zBu3Ljnn3/ezaKDmjVrivzDFVdcIcocOnTohhtuEGe0atWqZs2acak2btwo
oo833njD4gRlHETRhwhMpPC1atUS0++vW7cuKChICp+ZmVm9evXZs2fTSlme
BKOVBw8e5OMfhg4dKr5/4S54/4LkvO+++7gkGzZsGDFihHyvxA1AgJCbm0sm
RU4byxXf7UlXNmzY8L333pOjeo4ePdq2bVvxdVo5zaMs+e6775JmiTVkMR57
7DFRkmpr3759v3795EF79uxJSu32ZP8qVqzIRSItlvmHTZs2XX/99StXrpRb
lyxZUqVKlR07doh9Ze5CSC725fobEhJCx3KbPHcAAAAAfAvyD8AC4YccP368
c+fO4iMXTzzxhBisrrgowrGB3wJsxyz/QM347rvvJuefhwmPPvroyy+/LH7y
J5UUKSiFExISZEzh9jxzVCKF3r17u1mkIHWBv3/h1r6/OWHChFatWkn1+fLL
L2+44YbQ0FA6Lh/vPW/evFq1aokhGRTXjxo1yl3wbkXTpk2XLVvm9iIOEmdH
lbdu3Vo54sSJE92eUSJ0FDn/5IEDB6699lq6buKVCnFGsbGxFNrQIUSFYliI
GP8g9hL5By6nuCzNmjVbsWIFxj+AgINauBj1Z1aAWvXrr79es2ZNUsbmzZtX
rVp12LBhYlIXHuYrJe+///5q1ap99dVXcjIWUpOuXbuSFnfp0uX2229/6623
xAy3IqvJj8jzDwSZuzvvvPOuu+56/PHHafd77rlnzZo1YpPZuxt8/hbq0++4
4w4SCd/fBAAAUAIg/wCsCQ8PJx+JGgn5P7///rvd4gBQBGb5B7d5mCCccP6k
UhR+4403DGMKt2dcAUUK5PDLSIF2dxd8B5O/msFHStMaJf9AFT711FNUT7du
3Ro3bvz999//+OOPFPXv3LlTGe/9ySefPProoxTvJyQkPPTQQxTO045NmjT5
7rvvijxBN8s/0II4IklFR6TdR44cWblyZTHbA0lLdT7yyCOdOnVq0KDBjBkz
3J5gh1bS0Wll/fr1IyIi3IUDq88++0zmH2rXri0+lkFy0r0gSdq3by/lRP4B
BBZCi0lnyarw+VQNoZYfHR1tNoqArzl8+DBpnFJSLJCO7Nixw/DTtNYZ/rS0
tK1bt5IJurAHASdPnlSGdgAAAADFAfIPwIzk5OTnnntOPPdp27atfCoqgH8C
/BOL/IOEGrNhmKAEArLw/v37+QBmCUUK27dvF88oLShSWegQW7ZsIf9fli9S
qtTUVIvvV+pxkCIDhT+bN2+WR1QKHDlyZPfu3Tk5OXwrX2l9Rt7LCUBAcNll
l5FVkelHHUUjvOkfz+tlB7NiFjruPdapEgAAAMC3IP8AdMj3iIiIuOGGGxwO
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
rH+Rbth5dQdFwj1GucbwWHrvJnsZZfyD7oXaIr9YGRcXN3HixISEBH4L6tat
K164uPvuuzdu3Gh2jwDwf8SLsdR0jx07Ru59YmJiDhvlbjY2SVGWHCM/UFF5
ZaWyo/zJ36vS048XrOOQv2zKb9FxKEGWPMTatWvDw8Pt1ssyiuGHUAWRkZFr
1qyR905Z4LfVojUqW81aXY5541eaq1wpkZku5c01Q0kgv2/lzymYGSwzMzMk
JER4bgAAALzE8BPn9Jfsqsvlol540qRJS5cupZBBt9W8XzDsI7gvZx1f6NZe
WRC7Z2Vl6UfRMYtozJxDG+XnGYm9e/d+/fXXp06dErfgxIkTl112mcPhKFeu
XNWqVe+7775nn332gw8+kNOUIQsBAgXZVp1OJ3lre/bsURRHmR1F10Fdxfh6
HvoZ2iVej1ypa2uOufW4MCB/WZNfOWhO4e5S/ty/f//48eOpk7VXMcs4fLZA
8dpjXFzc2LFjKajkbSNHa6L6JovmahFW6+1QbzD6jrwteenkQP6LlF8RQHRY
5NGRkzx//nwb2zAAAAQ6si8mo7py5UqReUhNTeX9hT4WMddoGnDFNxNxd67R
i3WGu3PEvrxOb/xSM/eVD46VvZjt8ssaDhw4IF/EoJ/Lli378ccfX3jhhdtv
v13M/3DttddigmUQWPAkp/jsrLXy6tGcEgwqcZ+ho5irffVSKWCW8ZBleFiq
+8m6/ko5IX8Zl5/LrBxLQBY+ODg4MTGRKwiwEdmrTp48effu3fwOis9mGbYr
pYGZNU7ezAydDb6Qy75CzluUkr9S9iIhef2GygL5L0x+QyshfpJ7HBQU5HQ6
ocIAAOAl+tce3Z5eeM2aNaGhoStWrEhOTpbmV3Yfui+nhOQ5zFeU/YWcYEGx
9rxDUQoYdkNy/IBYkN/Gyi742ESu+dsWYhfRzeWafz6+JOUXjo3yvvDBgwcn
TZokviLN71FGRsby5cuV1wzR64EAYuHChREREUJtpRZIG8I1iG+SmiLjPsOA
Ua6k+sVPuaCUlIZC+akoMldtHoYo0soEI5cE8pdB+Q3jFLlG/k1PT58wYcLe
vXvtVkegjv+MioqiHla5ZYa3VXEY9GasNwDDlbJZ6oUNA14uDH8swhcMq4L8
Fym/QHhrctOcOXPWr18PNwwAAM4Xbjm3bNkyefLkpUuXpqWl5TA/TcTs3BqL
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
SypNkdsc5bhmh/YmTjczmES3bt3ENBqK6gnkK1f6dbM4hF3XnwsjF2JiYkJD
Q/mHdAEAoIyze/duPuGkbjyVNbqFF/2Ck+G9h2Zo0r30FRUJuX9rKAPk11G8
ayk/RQFLliyRjQTOMCg+Fi5cGBERIfxkXaEUr1XRGovEmqECikG2UnGKVA3h
95I6bNq06eTJky4jTTeUR+oU913N1NPQFCgnIpdlQGEov8W+XEKzJIBSA3fI
ra2KWVDA95JxhHL9eZmuXbuKSMRlchP1DIOhDMo1N5Oz+NqPtfy6MGlpaePH
j9+3b59QCphc/0EPGxctWrRgwQJ5i3nna9gMZDv0pkyR9sFlqYyicL169SpV
qlSlSpXKlSvT39atW3/66adiah2z48rT2blzJ5k7izJmB5XFpI7wwrxarjt0
xG7duq1atUqpR6k/iz1nUdYbHs5Q/uK7/mbJHHGypNoxMTFQagAAEBw5cmTi
xIlHjx41M7NF2mEda8/WrJtQnjS5Cvc4vB6z3k2vB/J7Lz8vQ+KdOHEiNDTU
7uYJSj9RUVHjxo2j0F5x/JyFQzzeYi1iRoutZmqixIbyuLSQmpras2fPatWq
NW7cuEWLFlWrVn3//fdppShDMpcrV86sWl4Pl9/QJtDf9PT0Sy+9VKxJTEx8
6KGH6tatO23atNq1a+/Zs8f6HPmloyPedtttV1999XXXXUdxx7XXXlvFw5gx
Y5RKnIXnr3CyYNnQmvETpJ8iJ+PyjPU6deoUCW/ours0S2jxEFNEIitXrpSB
gNIMFPmLtGZ2tR9r+WXGWB7X6fnwMYVgdqsjMEUGj8nJyaRNKSkpPJ9maL7M
mqi+XmkMFmX01s7brSxDRmDhwoVCx0ngtWvXdujQoV69erGxsbwe3RwRw4cP
79Onj6vAROhP/xUnhyuCU5sqQb7S9e23377zzjtOhiz2wgsv8PyDchGUaXYM
VczwmpTk9dePKxvG5s2bZ82aZZZ8QFICAFDWoF5p0qRJBw8eVOwqf55uaG8V
M6t0KIol17sbxcs1PJZ196FX7mI+nuytIL838hvOpEcL1GMeOHAAnSMoPhIS
EkaPHn306FGnFgubKYtexktNUerhwy0MtZVka9iw4SuvvJKamio0JT4+vl27
dk899ZTY9+TJkzLoVqqy0FYzK3H69On//Oc/Yv1vv/32/PPPi+V33303Li7O
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
vnrjjTfee++9zZo1u/7664cOHSrmmcwsyD+IBXK277jjji5dukgvXXy+c+zY
sbTvww8/TC56/fr1yQgLrQ8ODqb1wnUn2zV16lRZGyHyD2JZzP9Auxw4cICC
CHLp6Vi0Lx1FCCnev8hkRoxiAfnok/+dP38+nQJFE+3bt6eAgkIq8QZEUlKS
SA5I5PwPTs/oCCpMZ9e5c+e6deuSbOISUTRBVZE869atk0NBnJ4hInQdqHyn
Tp1Iktdee02kXGSKQx5C5B/4/aIFOq54/0JvA7qVVu6pYfuxyEs4jR6qKhfN
sP2YNRiLesRCenr65MmTN27caLc6Am8h94m09dChQ/I+FvnMPVPrqeWLBny8
hJkpk3tlatFuVsFntQ1bJm/k/OjK4xK5cs+ePWvWrCHd5LovleLo0aPiM5p7
9+5du3atmLFHb+r79u2LioqikvJAtHt8fPzOnTtl1C/XOz1vq4lquZBkiMSo
J/2ayDIubXLvkr/+cr3cyq+tkJAuSGhoKBKJAAAgfB7qEQzdJ8X8yueAZqZe
wbBO/g0FHZ6LdrHPJfMeUO8m9AEM/Hua5NuTy63EzgIl9S2PJV+INkxo8y4s
k3m2fJMP5ffD6y/+UtQzb948vJUMLgwxgXxsbKyYc1JvtFxB9MfWTs1A6Tvq
Foz/5Lpvpk2GAQV348ml3LFjh+HUZ3INeenSmVcGSNOmLVu2iPSvKC90cP/+
/bReuO6KhHwNV3Yy47s8zyiVqyGFUVby2efEnBV0RHEjlCvMn9crMQ79TElJ
WbdunfzcnrPAcCUlJZH8YlgCFzg5OXnTpk1paWnKd4jkd5f4/eLLXbt2lfNP
ZrLJgZVT5hZYN7CKMIZtwMUmH85kgYbyEUBlX+WmZ7KnrsoF5/dCyhMZGUn9
lFQNe3UTWCNs1+LFi8XEjLqGni6Ms3CvrdsKPnpHYPhcnrcfWS2fW5IQg1fv
vffexo0bN2nSRCzQ30aNGtFf5RDiKLyjdxYeYKmrYSYLrmVLlkfn+sVPRDl9
WQ9Jqzg5YmbX/2/vzeO7qK7/f7XW+mjd6o5LqwKtuFRUENe61H0XBYuKxaW2
1dbWr3VfPp9+3K1adyUhAYJkIexLWGQLS4CAASRAAkG2BMKS/f0OUOXn7zze
55HzOO9z70wCBt4JeT3/eD/mPXPnzpk7596zzJ0ZaZB77rmHer1uN9Myptcn
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
J554gh8B00epqKg46aSTxo8fX1lZeeCBB5ouH/TXSBJ1MhW62Msvv/zss8+6
OZZI/JRmd5BhaIScOHGitADtxQpgZJP6TTuIhGZoMgHRW2+9xTdh3SzuNvUs
hpTnYt6R9oILLigsLPQeXcsg92H1WctRovEpaH12FL0OGjRo6dKl1C8oKkls
9wRNhAexwYMHS/5T9NnNN2rdNioto4G5byK1ybKMk6Ye3kWXdDWZ9xXZyGN5
/vnn6xuseTSWr3v88cdp4eSTT87JyTniiCP06zS3bNly2GGHLViwYL/99tu0
aRPtUlRUdPvtt5MrdW6MYcOG8YFuuukmquG4446jXjNnzhwahWgN/T733HOX
XXYZHfeiiy4iGUjhe/XqJS+codquvPLKmTNnHnLIIStXrjSDEkE9ixw2fiok
Gp+0pHrIOoi3E3WGuIS3v+xLbiT5jbQJmQcAQFvDjHuzZ8+ePn269pHEFdT2
NKpuxpm/4v5FldtsEshR5Z26ZlrKeG8b6ZezRePvDMpKPdRvi71FTdZrQ2bk
lznYZj0vkxs/b948nmqozY14y1p+PjvaZf78+fSrDZDsLiFM0+VvLe0vu5Dk
ZWVlY8aMSZR6gxaOHn+WL18+YMAAnlUrSiVx2VdffUVxLnc3mf9gOstDDz2U
lpam9VCnxaKx0exnP/vZokWLtEtJK1NSUqqrq2+++WZ2lbt16zZ37lzqueIq
X3rppeRmk6tM5Wnh8ssvp0rI377wwgvPOOOMp556ir/YS7v8/e9/J/f77LPP
vvbaa6mSq6++2mQJdG+Sv1Tyvffe4/uPukOZ8UqGAjMmRBveSMPPzekRhqBY
YPz48fyoNbcYufe33XYbBf7nn3/+eeedRwX4WBRo0KlRpEAnRY28YcMGroTW
U7BA6zt16sTr62Mzu6hBbrjhhhNOOKFdu3Zdu3alCOWWW26ReIHa5Mknn6T1
Xbp0+d3vfsfBOLUntTP9Pvvss1QntRiJ8eWXX5pLRssU45Aw2gyNHDmSoiRq
pSuuuILOlNqfrtSZZ5759NNP65Z59dVX6aTo1OjysT7IlaVTyMvLI8H4UnKT
vvLKK1SYrhpt/eijj7geGurp6EuWLLnjjjtoPR2FrzLVRuVfeuklGdJ54py+
uDwwchyUn5//7rvvUqChL5YJSLc1vOqT19Bp0o4hPQW0TAoKCoYMGWKMoL7R
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
mghnaydMmDB37lwZzGWMdc1cJN6vq3Ny7+6QHol32KQMLbBjWafQhfWBTKBh
rJK2p/xLJuaUU07h7+txmfLy8qOPPnrlypVkoX70ox+VlZWJ2I888kjPnj1Z
GH57g1jA/fbbb+zYsfosrr766gEDBlRUVJCZKy0tldP54x//KM9fUA3Gvjdd
fk0Lb3/+S600ZMiQRCsySDDksefl5Q0ePFh3OtGoOudGnlZI0XOvjmnnVmuv
1m3dHYwz7HYcVwbdgzjOjahoWsvpnoK367ll9K+JJvao/Lva/m1Nfimgr2+4
/LpOs8AtkJ6e7n0fDpIPrQK6TOQk9O3bd+vWrV6VM1rkqr1eFuVk3njjjQcf
fNA1u/x72WWXLV682N1Ellq0qy7e1dFKK51IZBDMibhb5aS6du3K+QeRn7Ov
5jT1J2yi8YliOQqLzb8mTVFVVUUeVF28A6MLkMP2k5/8RBdwhwv36rB3p0sa
+RcsWHDNNdcYc6ObWhZGjx594YUXSvO6aRZ94vn5+aNGjfre+QJ14rQYAABa
NDxC0vhMIWRJSYlYFtfdknS6pOuN/1bneHeyO+/LZsg1JcZg8SfptaUzhlXQ
RkTMnJik66+//oknnpBN9913H9l9/nvmmWe+8847XMPcuXPPOOOMu+66i+v5
/PPP7733Xl7etGkT2TKyVuvWreMdKbw67bTT+K3+Z5111nvvvcciUSWnn356
jx49aJlq6N27t7FTTZdft7xu55bW/nUN0zNIbXJychKtyGAvYXwq+UtqwN8d
025kkL8aUakz1reIzxWU9SYL5/rS2gHmChs9rnEm3b6mZZCVUeceOifxImrY
ZDHMQp3y3rVse1r+3Wj/tiy/Xhl03Do1MtfFB2X0O27cuAkTJrgdBMFIK2L4
8OHz5s2rU0OQNnxaeRjzrUkx1qwqrKKsM//85z9feOEFo+G84/Tp08nZqIsP
dfWwYxILMgxKVaLAUsCYbLcL1Cmzzmu6dOny5Zdf6kNrGXSbBCHH0mJL+3AZ
SRTIN811T4zE7mtw/sF0eX0I8+1dWuYbQ6bpTBt27dr166+/1jZFDqH79fz5
8zt06BCJx5wpX9mtW7fyR1ISrbYAANCaYL9o/fr1WVlZNIQaX07QHp2OhbUB
ZcR/M3kME33LJjGjtWqGs9mqD+QaI288XlZWduedd55++ul33HFHx44dH374
YTITXJji5WOPPfbXv/71TTfddNddd6Wnp8v3L1asWNGpU6dzzz139uzZmzZt
Igs4fvx4WnP99ddfeOGF5513HlkuPgRVcvTRR1P9N998M1WSmZnZo0cPqp9q
oJq5BhGy6fIbg8toU95y2p8XCgoK8vLyEq3FYG+j46mqqqqkpKSVK1dGAtA3
ASMNMWNUPVVhdF4v6I4QbXguKaKcVSkp2TkTM5qIUnTYdDF9lIgzoTrqu//O
wuhAoC4+PeLmcnXYogXYo/LvUvu3NfnlV2dog+SXEVIjwufn5w8ZMuTbb79N
YMcEP5CSkpK0tDTTqbWu1jmBvFhJo1Gi86KNTz755AsvvKDLSHd44IEHBgwY
EI19eIucCgqln3322csuu2zDhg1PPPFEly5dzj///KuuumratGlSM2ns//3f
/50X48Ybb+zfvz8fi9a/8sorVJ78kG7dun3wwQe8y5YtW6gY/VLNl156KS2Q
y/fMM8907tz5rLPOIg9nwoQJ/PyFexa6m5uzk3OcM2fOO++8w18+isbfXjGO
BD8owWuWLVt22223tW/f/twY2dnZtJLzD4sXL77mmmvIATvnnHOofcipk9qo
hn/84x+6Wepi+Ycf/ehHRjDTW6nF6BJoseUqaEeLHBvOP5gL7VY4adKk3Nzc
RKstAAC0JnQQMW/ePLI+eugOR8Zt4142WoOYMF2PDO/6Vxt0r01v1D3YtGkT
nRdnHvQRac38+fPXr1+vnWGpjQwohVS078EHH0x/aZkqIbfEeB1SifZ1GTKU
1dXVdfHWuSny63MPbf7Etz//kq9SVFSUQB0GexP3Mfbvvvtu4MCB1BHqAtwz
7ZzrrcaV9Wqa8RL1vfUg3ZaDmttbburM7U3eOk1nMfuaaFfiVn27sE4FGub2
6F6Tv4nt3wblD4olg+Q39Uux4uLi1NRUWtA9xXQc7ybQoqDRjCJiryoaPXGt
oatIepkKPP744//617+8xpRC6by8PFomx+OEE054+OGH//Of/3z99dd33HHH
o48+ysmx/Pz8jh078twMgkLynj17UqhOey1fvvz000+fO3cure/Tp0+PHj3K
y8tpmfyT3/3ud88//3xdzB3imt9///0lS5bQXvfdd98f/vAHvvG0evVqCvZP
OumkyZMnu/1Cn6b2PXQ/2rJlywcffNCtW7e//OUvixYtMr1Vn7LkH6iSs88+
+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
X35POBW48cYbqUKup7y8/JJLLpk1a1Yk9vHxf/zjH3wDgiJofj6Cy8hHLfm4
11577XPPPVcXy5+QKb/99tuPP/548v10YsGcbJ3yYYwzQxQXF//zn/8855xz
Xn311bVr13I76PQCI4mC1NTUCy64QHIgL7300rHHHksrSdTDDz+cxFu9ejVX
np6efuqpp9KO/Pe888579913ea+ysrLOnTtTs8hrJYLkp7/9+/fv3bs3C0MO
zP3338/iZWRk0Hq5gqQMdDh9fbVucLaK2hCzngAAoHkZN26cfEFScux6GOcF
sbN6yqLXu9M2S7t2rm0yO5qSJIwcS++lP9AmzoOxGrVOHB0kv+u4yssnW4X8
zdX+ej03CCsDsXHjRjz82KYQFys7O5t8VFFI42wHpbm0ZnrVUtawponzz+8Z
0zW4wawcRTv/pvvUNeTNTEktFeSH/CHyyynQwrp16yhQ2rRpk7ePgJaMuUyL
Fy+m8Dbiu9evNccsiO7p9UZRTTGKzV988UXdC6QL/PGPf6TQmP7yLIWaGLWx
b4JffPHFFF9fd911FNe/8sorIhJFwXfddVenTp26d+9+2mmnPf/887UNEx5o
/emnn87fteSPj9Mmqvmggw7Sna60tPT6668/66yzbr311jPOOOOjjz6io/D8
B51UMWchPgAvSLfNzc0lUQcOHMjvuNAukOnsJA+/KHLLli10RBL1zjvv5LN7
++23DzvssHnz5h1//PFUIa284YYbLrroImoBznhTPeQsrVy58pJLLjn33HNJ
ft6xLpbWkPdPeuWvi6WA3n33XRbptddea9euHa9//fXXZbku9nrPDh061MYn
lOT6jho1igog+QAAAM3Ot99+O3z4cP4chvblzDjMbzusbZjtXxeQeTZGXHY3
Mb4uw/WwgaNl9iF1eQl8XMG0H2u2im8ZLr/35pr4Jy1f/uZq/xoFHUKXLygo
mDlzJixvW0Bf5alTpw4ZMkQGBK1pRovclbpDmZnMom+18dm/OueZL9lLq7rp
F3UqNacPXeukFk0ECvkhv8hvDspwtRTpUJy1dOnSoJ6CgbG1sHPnzpSUlFWr
Vpm8kyhAUApC/noxKsoln3zySZ5voJWN66dY+9ZbbzU1yO+6deuWxL6YWRvv
DHC+Ii8vr6ysrLbBJWDtpfVz587VH8gwPU4kXL9+PZWk8tKV9CkEdRDTIHWx
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
h02pViSH/LtXrO3I/30TQhUMevsAriruqj/QioD8zU4LFAkAAEALgX2MIEuh
t7qhdEjavInZiR8e4zexnnDHaTfkDykG2gLNrgatXZcgf2JJlPytvd3ALtGK
LncrEtVLa5f/+33iFAAAACSQ8Kl9QZv2nPVpSs3hZRIrP9j32O1pP3s/fdG8
ig35d7WS1i4/aCMg2Q4AAACAhLBLyYe2CRoEAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAoJXy/wN+DsX6
    "], {{0, 820.}, {1408., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "Exif" -> <|
       "Orientation" -> <|
         "CameraTopOrientation" -> Top, "Mirrored" -> False|>, "ExifTag" -> 
        38, "ColorSpace" -> "RGB", "PixelXDimension" -> 1408, 
        "PixelYDimension" -> 820|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{746.2398475609792, Automatic},
  ImageSizeRaw->{1408., 820.},
  PlotRange->{{0, 1408.}, {0, 820.}}]], "Text",
 Editable->False,
 CellChangeTimes->{3.93250651268251*^9},
 CellID->817462226,ExpressionUUID->"c612e99c-953e-4869-9349-526ca85b283c"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " It is a good idea to compare the diagram with formulas (1) and (2)."
}], "Text",
 CellChangeTimes->{{3.734869351143935*^9, 3.734869421613852*^9}, {
  3.734869459406073*^9, 3.7348694844467*^9}},
 CellID->1935952229,ExpressionUUID->"171664dd-fee7-4a3b-925b-e6d0c6f219bb"],

Cell[CellGroupData[{

Cell["\<\
Let us examine a concrete ClCon pipeline that corresponds to the diagram \
above. In the following table each pipeline operation is combined together \
with a short explanation and the context keys after its execution.\
\>", "Text",
 CellChangeTimes->{{3.7346379904490643`*^9, 3.7346381511813507`*^9}, {
  3.734868520926853*^9, 3.7348685226558447`*^9}, {3.734869499555018*^9, 
  3.734869500218869*^9}},
 CellID->1024377106,ExpressionUUID->"2bb27078-089b-48b4-ad65-d8e31880d881"],

Cell[BoxData[
 FrameBox[
  TagBox[GridBox[{
     {
      StyleBox["\<\"operation\"\>",
       StripOnInput->False,
       LineColor->RGBColor[0, 0, 1],
       FrontFaceColor->RGBColor[0, 0, 1],
       BackFaceColor->RGBColor[0, 0, 1],
       GraphicsColor->RGBColor[0, 0, 1],
       FontFamily->"Times",
       FontWeight->Bold,
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\<\"explanation\"\>",
       StripOnInput->False,
       LineColor->RGBColor[0, 0, 1],
       FrontFaceColor->RGBColor[0, 0, 1],
       BackFaceColor->RGBColor[0, 0, 1],
       GraphicsColor->RGBColor[0, 0, 1],
       FontFamily->"Times",
       FontWeight->Bold,
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["\<\"context keys\"\>",
       StripOnInput->False,
       LineColor->RGBColor[0, 0, 1],
       FrontFaceColor->RGBColor[0, 0, 1],
       BackFaceColor->RGBColor[0, 0, 1],
       GraphicsColor->RGBColor[0, 0, 1],
       FontFamily->"Times",
       FontWeight->Bold,
       FontColor->RGBColor[0, 0, 1]]},
     {
      TemplateBox[{
        StyleBox[
         TagBox[
          RowBox[{"ClConUnit", "[", "dsTitanic", "]"}], HoldForm], "Input", 
         StripOnInput -> False], 
        StyleBox[
        "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
         False]},
       "RowDefault"], 
      StyleBox["\<\"lift data to the monad\"\>",
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]], 
      StyleBox[
       RowBox[{"{", "}"}],
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]]},
     {
      TemplateBox[{"\"  \"", 
        StyleBox[
         TagBox[
          RowBox[{"ClConSplitData", "[", 
            RowBox[{"0.7`", ",", "0.1`"}], "]"}], HoldForm], "Input", 
         StripOnInput -> False], 
        StyleBox[
        "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
         False]},
       "RowDefault"], 
      StyleBox["\<\"split the data 0.7 for training, 0.07 for validation\"\>",
       
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{"\<\"trainingData\"\>", ",", "\<\"testData\"\>", 
         ",", "\<\"validationData\"\>"}], "}"}],
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]]},
     {
      TemplateBox[{"\"  \"", 
        StyleBox[
         TagBox["ClConMakeClassifier", HoldForm], "Input", StripOnInput -> 
         False], 
        StyleBox[
        "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
         False]},
       "RowDefault"], 
      StyleBox["\<\"make a classifer\"\>",
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{"\<\"trainingData\"\>", ",", "\<\"testData\"\>", 
         ",", "\<\"validationData\"\>", ",", "\<\"classifier\"\>"}], "}"}],
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]]},
     {
      TemplateBox[{"\"  \"", 
        StyleBox[
         TagBox[
          
          RowBox[{"ClConClassifierMeasurements", "[", "\"\\\"Accuracy\\\"\"", 
            "]"}], HoldForm], "Input", StripOnInput -> False], 
        StyleBox[
        "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
         False]},
       "RowDefault"], 
      StyleBox["\<\"compute classifier accuracy (over the test data)\"\>",
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{"\<\"trainingData\"\>", ",", "\<\"testData\"\>", 
         ",", "\<\"validationData\"\>", ",", "\<\"classifier\"\>"}], "}"}],
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]]},
     {
      TemplateBox[{"\"  \"", 
        StyleBox[
         TagBox["ClConEchoValue", HoldForm], "Input", StripOnInput -> False], 
        
        StyleBox[
        "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
         False]},
       "RowDefault"], 
      StyleBox["\<\"echo the pipeline value\"\>",
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{"\<\"trainingData\"\>", ",", "\<\"testData\"\>", 
         ",", "\<\"validationData\"\>", ",", "\<\"classifier\"\>"}], "}"}],
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]]},
     {
      TemplateBox[{"\"  \"", 
        StyleBox[
         TagBox["ClConROCData", HoldForm], "Input", StripOnInput -> False], 
        StyleBox[
        "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
         False]},
       "RowDefault"], 
      StyleBox["\<\"compute ROC data\"\>",
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{"\<\"trainingData\"\>", ",", "\<\"testData\"\>", 
         ",", "\<\"validationData\"\>", ",", "\<\"classifier\"\>", 
         ",", "\<\"rocData\"\>"}], "}"}],
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]]},
     {
      TemplateBox[{"\"  \"", 
        StyleBox[
         TagBox[
          RowBox[{"ClConROCPlot", "[", 
            
            RowBox[{"\"\\\"FalsePositiveRate\\\"\"", ",", 
              "\"\\\"Recall\\\"\""}], "]"}], HoldForm], "Input", StripOnInput -> 
         False], 
        StyleBox[
        "\"\[ThinSpace]\[DoubleLongRightArrow]\"", "Input", StripOnInput -> 
         False]},
       "RowDefault"], 
      StyleBox["\<\"plot ROC curve\"\>",
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]], 
      StyleBox[
       RowBox[{"{", 
        RowBox[{"\<\"trainingData\"\>", ",", "\<\"testData\"\>", 
         ",", "\<\"validationData\"\>", ",", "\<\"classifier\"\>", 
         ",", "\<\"rocData\"\>"}], "}"}],
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]]},
     {
      TemplateBox[{"\"  \"", 
        StyleBox[
         TagBox["ClConTakeClassifier", HoldForm], "Input", StripOnInput -> 
         False]},
       "RowDefault"], 
      StyleBox["\<\"take the classifer from the context\"\>",
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]], 
      StyleBox[
       RowBox[{"{", "}"}],
       StripOnInput->False,
       ShowAutoStyles->False,
       ShowSyntaxStyles->False,
       TranslationOptions->{"Enabled"->False},
       AutoNumberFormatting->False,
       FontWeight->"Normal",
       FontColor->RGBColor[0.27, 0.58, 0.68]]}
    },
    AutoDelete->False,
    FrameStyle->Directive[
      Dashing[2], 
      GrayLevel[0.87]],
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Grid"],
  StripOnInput->False]], "Output",
 CellChangeTimes->{{3.7346376441046886`*^9, 3.734637654368876*^9}, 
   3.734637687312894*^9, 3.7353279078175087`*^9},
 CellLabel->"Out[53]=",
 CellID->329622543,ExpressionUUID->"4d41a645-5162-429a-bf69-91067d55d11f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Here is the output of the pipeline:", "Text",
 CellChangeTimes->{{3.734638158910803*^9, 3.734638182231596*^9}},
 CellID->1605754588,ExpressionUUID->"0fb5bcca-7cff-4221-b1e3-fe3e42377bc4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7709923664122137`"}], 
   "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.734636956920623*^9},
 CellID->490368667,ExpressionUUID->"bb6f7107-cce7-4233-9040-62eae5680dd8"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"ROC plot(s):\"\>",
   "EchoLabel"], " ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"died\"\>", "\[Rule]", 
     GraphicsBox[{
       {RGBColor[
         NCache[
          Rational[5, 9], 0.5555555555555556], 
         NCache[
          Rational[5, 9], 0.5555555555555556], 1], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {Rational[74, 75], 1}, {
           Rational[139, 150], Rational[242, 243]}, {
           Rational[62, 75], Rational[242, 243]}, {
           Rational[56, 75], Rational[242, 243]}, {
           Rational[7, 10], Rational[242, 243]}, {
           Rational[103, 150], Rational[242, 243]}, {
           Rational[33, 50], Rational[80, 81]}, {
           Rational[3, 5], Rational[238, 243]}, {
           Rational[14, 25], Rational[79, 81]}, {
           Rational[73, 150], Rational[236, 243]}, {
           Rational[11, 25], Rational[235, 243]}, {
           Rational[32, 75], Rational[232, 243]}, {
           Rational[59, 150], Rational[227, 243]}, {
           Rational[11, 30], Rational[224, 243]}, {
           Rational[26, 75], Rational[217, 243]}, {
           Rational[1, 3], Rational[211, 243]}, {
           Rational[8, 25], Rational[23, 27]}, {
           Rational[23, 75], Rational[199, 243]}, {
           Rational[3, 10], Rational[196, 243]}, {
           Rational[43, 150], Rational[194, 243]}, {
           Rational[41, 150], Rational[64, 81]}, {
           Rational[13, 50], Rational[190, 243]}, {
           Rational[6, 25], Rational[62, 81]}, {
           Rational[6, 25], Rational[184, 243]}, {
           Rational[16, 75], Rational[179, 243]}, {
           Rational[1, 5], Rational[175, 243]}, {
           Rational[13, 75], Rational[167, 243]}, {
           Rational[1, 6], Rational[163, 243]}, {
           Rational[4, 25], Rational[155, 243]}, {
           Rational[23, 150], Rational[146, 243]}, {
           Rational[19, 150], Rational[131, 243]}, {
           Rational[7, 75], Rational[110, 243]}, {
           Rational[1, 15], Rational[1, 3]}, {
           Rational[1, 25], Rational[52, 243]}, {
           Rational[1, 75], Rational[8, 81]}, {0, Rational[4, 243]}, {0, 0}, {
           0, 0}}, {{1, 1}, {1, 1}, {1, 1}, {0.9866666666666667, 1}, {
           0.9266666666666666, 0.9958847736625515}, {0.8266666666666667, 
           0.9958847736625515}, {0.7466666666666667, 0.9958847736625515}, {
           0.7, 0.9958847736625515}, {0.6866666666666666, 
           0.9958847736625515}, {0.66, 0.9876543209876543}, {0.6, 
           0.9794238683127572}, {0.56, 0.9753086419753086}, {
           0.4866666666666667, 0.9711934156378601}, {0.44, 
           0.9670781893004116}, {0.4266666666666667, 0.9547325102880658}, {
           0.3933333333333333, 0.934156378600823}, {0.36666666666666664`, 
           0.9218106995884774}, {0.3466666666666667, 0.8930041152263375}, {
           0.3333333333333333, 0.8683127572016461}, {0.32, 
           0.8518518518518519}, {0.30666666666666664`, 0.8189300411522634}, {
           0.3, 0.8065843621399177}, {0.2866666666666667, 
           0.7983539094650206}, {0.2733333333333333, 0.7901234567901234}, {
           0.26, 0.7818930041152263}, {0.24, 0.7654320987654321}, {0.24, 
           0.757201646090535}, {0.21333333333333335`, 0.7366255144032922}, {
           0.2, 0.720164609053498}, {0.17333333333333334`, 
           0.6872427983539094}, {0.16666666666666666`, 0.6707818930041153}, {
           0.16, 0.6378600823045267}, {0.15333333333333332`, 
           0.6008230452674898}, {0.12666666666666668`, 0.5390946502057613}, {
           0.09333333333333334, 0.45267489711934156`}, {0.06666666666666667, 
           0.3333333333333333}, {0.04, 0.2139917695473251}, {
           0.013333333333333334`, 0.09876543209876543}, {
           0, 0.01646090534979424}, {0, 0}, {0, 0}}]]}, 
       {RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 
         NCache[
          Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {Rational[74, 75], 1}, {
           Rational[139, 150], Rational[242, 243]}, {
           Rational[62, 75], Rational[242, 243]}, {
           Rational[56, 75], Rational[242, 243]}, {
           Rational[7, 10], Rational[242, 243]}, {
           Rational[103, 150], Rational[242, 243]}, {
           Rational[33, 50], Rational[80, 81]}, {
           Rational[3, 5], Rational[238, 243]}, {
           Rational[14, 25], Rational[79, 81]}, {
           Rational[73, 150], Rational[236, 243]}, {
           Rational[11, 25], Rational[235, 243]}, {
           Rational[32, 75], Rational[232, 243]}, {
           Rational[59, 150], Rational[227, 243]}, {
           Rational[11, 30], Rational[224, 243]}, {
           Rational[26, 75], Rational[217, 243]}, {
           Rational[1, 3], Rational[211, 243]}, {
           Rational[8, 25], Rational[23, 27]}, {
           Rational[23, 75], Rational[199, 243]}, {
           Rational[3, 10], Rational[196, 243]}, {
           Rational[43, 150], Rational[194, 243]}, {
           Rational[41, 150], Rational[64, 81]}, {
           Rational[13, 50], Rational[190, 243]}, {
           Rational[6, 25], Rational[62, 81]}, {
           Rational[6, 25], Rational[184, 243]}, {
           Rational[16, 75], Rational[179, 243]}, {
           Rational[1, 5], Rational[175, 243]}, {
           Rational[13, 75], Rational[167, 243]}, {
           Rational[1, 6], Rational[163, 243]}, {
           Rational[4, 25], Rational[155, 243]}, {
           Rational[23, 150], Rational[146, 243]}, {
           Rational[19, 150], Rational[131, 243]}, {
           Rational[7, 75], Rational[110, 243]}, {
           Rational[1, 15], Rational[1, 3]}, {
           Rational[1, 25], Rational[52, 243]}, {
           Rational[1, 75], Rational[8, 81]}, {0, Rational[4, 243]}, {0, 0}, {
           0, 0}}, {{1, 1}, {1, 1}, {1, 1}, {0.9866666666666667, 1}, {
           0.9266666666666666, 0.9958847736625515}, {0.8266666666666667, 
           0.9958847736625515}, {0.7466666666666667, 0.9958847736625515}, {
           0.7, 0.9958847736625515}, {0.6866666666666666, 
           0.9958847736625515}, {0.66, 0.9876543209876543}, {0.6, 
           0.9794238683127572}, {0.56, 0.9753086419753086}, {
           0.4866666666666667, 0.9711934156378601}, {0.44, 
           0.9670781893004116}, {0.4266666666666667, 0.9547325102880658}, {
           0.3933333333333333, 0.934156378600823}, {0.36666666666666664`, 
           0.9218106995884774}, {0.3466666666666667, 0.8930041152263375}, {
           0.3333333333333333, 0.8683127572016461}, {0.32, 
           0.8518518518518519}, {0.30666666666666664`, 0.8189300411522634}, {
           0.3, 0.8065843621399177}, {0.2866666666666667, 
           0.7983539094650206}, {0.2733333333333333, 0.7901234567901234}, {
           0.26, 0.7818930041152263}, {0.24, 0.7654320987654321}, {0.24, 
           0.757201646090535}, {0.21333333333333335`, 0.7366255144032922}, {
           0.2, 0.720164609053498}, {0.17333333333333334`, 
           0.6872427983539094}, {0.16666666666666666`, 0.6707818930041153}, {
           0.16, 0.6378600823045267}, {0.15333333333333332`, 
           0.6008230452674898}, {0.12666666666666668`, 0.5390946502057613}, {
           0.09333333333333334, 0.45267489711934156`}, {0.06666666666666667, 
           0.3333333333333333}, {0.04, 0.2139917695473251}, {
           0.013333333333333334`, 0.09876543209876543}, {
           0, 0.01646090534979424}, {0, 0}, {0, 0}}]], {
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.`"],
          Annotation[#, 0., "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.025`"],
          Annotation[#, 0.025, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.05`"],
          Annotation[#, 0.05, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[74, 75], 1}, {0.9866666666666667, 1}]],
           "0.07500000000000001`"],
          Annotation[#, 0.07500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[139, 150], Rational[242, 243]}, {
             0.9266666666666666, 0.9958847736625515}]],
           "0.1`"],
          Annotation[#, 0.1, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[62, 75], Rational[242, 243]}, {
             0.8266666666666667, 0.9958847736625515}]],
           "0.125`"],
          Annotation[#, 0.125, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[56, 75], Rational[242, 243]}, {
             0.7466666666666667, 0.9958847736625515}]],
           "0.15000000000000002`"],
          Annotation[#, 0.15000000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[7, 10], Rational[242, 243]}, {0.7, 
             0.9958847736625515}]],
           "0.17500000000000002`"],
          Annotation[#, 0.17500000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[103, 150], Rational[242, 243]}, {
             0.6866666666666666, 0.9958847736625515}]],
           "0.2`"],
          Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[33, 50], Rational[80, 81]}, {0.66, 
             0.9876543209876543}]],
           "0.225`"],
          Annotation[#, 0.225, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[3, 5], Rational[238, 243]}, {0.6, 
             0.9794238683127572}]],
           "0.25`"],
          Annotation[#, 0.25, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[14, 25], Rational[79, 81]}, {0.56, 
             0.9753086419753086}]],
           "0.275`"],
          Annotation[#, 0.275, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[73, 150], Rational[236, 243]}, {
             0.4866666666666667, 0.9711934156378601}]],
           "0.30000000000000004`"],
          Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[11, 25], Rational[235, 243]}, {0.44, 
             0.9670781893004116}]],
           "0.325`"],
          Annotation[#, 0.325, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[32, 75], Rational[232, 243]}, {
             0.4266666666666667, 0.9547325102880658}]],
           "0.35000000000000003`"],
          Annotation[#, 0.35000000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[59, 150], Rational[227, 243]}, {
             0.3933333333333333, 0.934156378600823}]],
           "0.375`"],
          Annotation[#, 0.375, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[11, 30], Rational[224, 243]}, {
             0.36666666666666664`, 0.9218106995884774}]],
           "0.4`"],
          Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[26, 75], Rational[217, 243]}, {
             0.3466666666666667, 0.8930041152263375}]],
           "0.42500000000000004`"],
          Annotation[#, 0.42500000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 3], Rational[211, 243]}, {0.3333333333333333, 
             0.8683127572016461}]],
           "0.45`"],
          Annotation[#, 0.45, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[8, 25], Rational[23, 27]}, {0.32, 
             0.8518518518518519}]],
           "0.47500000000000003`"],
          Annotation[#, 0.47500000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[23, 75], Rational[199, 243]}, {
             0.30666666666666664`, 0.8189300411522634}]],
           "0.5`"],
          Annotation[#, 0.5, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[3, 10], Rational[196, 243]}, {0.3, 
             0.8065843621399177}]],
           "0.525`"],
          Annotation[#, 0.525, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[43, 150], Rational[194, 243]}, {
             0.2866666666666667, 0.7983539094650206}]],
           "0.55`"],
          Annotation[#, 0.55, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[41, 150], Rational[64, 81]}, {0.2733333333333333,
              0.7901234567901234}]],
           "0.5750000000000001`"],
          Annotation[#, 0.5750000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[13, 50], Rational[190, 243]}, {0.26, 
             0.7818930041152263}]],
           "0.6000000000000001`"],
          Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[6, 25], Rational[62, 81]}, {0.24, 
             0.7654320987654321}]],
           "0.625`"],
          Annotation[#, 0.625, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[6, 25], Rational[184, 243]}, {0.24, 
             0.757201646090535}]],
           "0.65`"],
          Annotation[#, 0.65, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[16, 75], Rational[179, 243]}, {
             0.21333333333333335`, 0.7366255144032922}]],
           "0.675`"],
          Annotation[#, 0.675, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 5], Rational[175, 243]}, {0.2, 
             0.720164609053498}]],
           "0.7000000000000001`"],
          Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[13, 75], Rational[167, 243]}, {
             0.17333333333333334`, 0.6872427983539094}]],
           "0.7250000000000001`"],
          Annotation[#, 0.7250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 6], Rational[163, 243]}, {
             0.16666666666666666`, 0.6707818930041153}]],
           "0.75`"],
          Annotation[#, 0.75, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[4, 25], Rational[155, 243]}, {0.16, 
             0.6378600823045267}]],
           "0.775`"],
          Annotation[#, 0.775, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[23, 150], Rational[146, 243]}, {
             0.15333333333333332`, 0.6008230452674898}]],
           "0.8`"],
          Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[19, 150], Rational[131, 243]}, {
             0.12666666666666668`, 0.5390946502057613}]],
           "0.8250000000000001`"],
          Annotation[#, 0.8250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[7, 75], Rational[110, 243]}, {
             0.09333333333333334, 0.45267489711934156`}]],
           "0.8500000000000001`"],
          Annotation[#, 0.8500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 15], Rational[1, 3]}, {0.06666666666666667, 
             0.3333333333333333}]],
           "0.875`"],
          Annotation[#, 0.875, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 25], Rational[52, 243]}, {0.04, 
             0.2139917695473251}]],
           "0.9`"],
          Annotation[#, 0.9, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 75], Rational[8, 81]}, {0.013333333333333334`,
              0.09876543209876543}]],
           "0.925`"],
          Annotation[#, 0.925, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{0, Rational[4, 243]}, {0, 0.01646090534979424}]],
           "0.9500000000000001`"],
          Annotation[#, 0.9500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9750000000000001`"],
          Annotation[#, 0.9750000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "1.`"],
          Annotation[#, 1., "Tooltip"]& ]}, 
        {GrayLevel[0], InsetBox["0.`", {1, 1}, {-1, 2}], 
         InsetBox["0.025`", {1, 1}, {-1, 2}], 
         InsetBox["0.05`", {1, 1}, {-1, 2}], 
         InsetBox["0.07500000000000001`", 
          NCache[{Rational[74, 75], 1}, {0.9866666666666667, 1}], {-1, 2}], 
         InsetBox["0.1`", 
          NCache[{Rational[139, 150], Rational[242, 243]}, {
           0.9266666666666666, 0.9958847736625515}], {-1, 2}], 
         InsetBox["0.125`", 
          NCache[{Rational[62, 75], Rational[242, 243]}, {0.8266666666666667, 
           0.9958847736625515}], {-1, 2}], 
         InsetBox["0.15000000000000002`", 
          NCache[{Rational[56, 75], Rational[242, 243]}, {0.7466666666666667, 
           0.9958847736625515}], {-1, 2}], 
         InsetBox["0.17500000000000002`", 
          NCache[{Rational[7, 10], Rational[242, 243]}, {0.7, 
           0.9958847736625515}], {-1, 2}], 
         InsetBox["0.2`", 
          NCache[{Rational[103, 150], Rational[242, 243]}, {
           0.6866666666666666, 0.9958847736625515}], {-1, 2}], 
         InsetBox["0.225`", 
          NCache[{Rational[33, 50], Rational[80, 81]}, {0.66, 
           0.9876543209876543}], {-1, 2}], 
         InsetBox["0.25`", 
          NCache[{Rational[3, 5], Rational[238, 243]}, {0.6, 
           0.9794238683127572}], {-1, 2}], 
         InsetBox["0.275`", 
          NCache[{Rational[14, 25], Rational[79, 81]}, {0.56, 
           0.9753086419753086}], {-1, 2}], 
         InsetBox["0.30000000000000004`", 
          NCache[{Rational[73, 150], Rational[236, 243]}, {0.4866666666666667,
            0.9711934156378601}], {-1, 2}], 
         InsetBox["0.325`", 
          NCache[{Rational[11, 25], Rational[235, 243]}, {0.44, 
           0.9670781893004116}], {-1, 2}], 
         InsetBox["0.35000000000000003`", 
          NCache[{Rational[32, 75], Rational[232, 243]}, {0.4266666666666667, 
           0.9547325102880658}], {-1, 2}], 
         InsetBox["0.375`", 
          NCache[{Rational[59, 150], Rational[227, 243]}, {0.3933333333333333,
            0.934156378600823}], {-1, 2}], 
         InsetBox["0.4`", 
          NCache[{Rational[11, 30], Rational[224, 243]}, {
           0.36666666666666664`, 0.9218106995884774}], {-1, 2}], 
         InsetBox["0.42500000000000004`", 
          NCache[{Rational[26, 75], Rational[217, 243]}, {0.3466666666666667, 
           0.8930041152263375}], {-1, 2}], 
         InsetBox["0.45`", 
          NCache[{Rational[1, 3], Rational[211, 243]}, {0.3333333333333333, 
           0.8683127572016461}], {-1, 2}], 
         InsetBox["0.47500000000000003`", 
          NCache[{Rational[8, 25], Rational[23, 27]}, {0.32, 
           0.8518518518518519}], {-1, 2}], 
         InsetBox["0.5`", 
          NCache[{Rational[23, 75], Rational[199, 243]}, {
           0.30666666666666664`, 0.8189300411522634}], {-1, 2}], 
         InsetBox["0.525`", 
          NCache[{Rational[3, 10], Rational[196, 243]}, {0.3, 
           0.8065843621399177}], {-1, 2}], 
         InsetBox["0.55`", 
          NCache[{Rational[43, 150], Rational[194, 243]}, {0.2866666666666667,
            0.7983539094650206}], {-1, 2}], 
         InsetBox["0.5750000000000001`", 
          NCache[{Rational[41, 150], Rational[64, 81]}, {0.2733333333333333, 
           0.7901234567901234}], {-1, 2}], 
         InsetBox["0.6000000000000001`", 
          NCache[{Rational[13, 50], Rational[190, 243]}, {0.26, 
           0.7818930041152263}], {-1, 2}], 
         InsetBox["0.625`", 
          NCache[{Rational[6, 25], Rational[62, 81]}, {0.24, 
           0.7654320987654321}], {-1, 2}], 
         InsetBox["0.65`", 
          NCache[{Rational[6, 25], Rational[184, 243]}, {0.24, 
           0.757201646090535}], {-1, 2}], 
         InsetBox["0.675`", 
          NCache[{Rational[16, 75], Rational[179, 243]}, {
           0.21333333333333335`, 0.7366255144032922}], {-1, 2}], 
         InsetBox["0.7000000000000001`", 
          NCache[{Rational[1, 5], Rational[175, 243]}, {0.2, 
           0.720164609053498}], {-1, 2}], 
         InsetBox["0.7250000000000001`", 
          NCache[{Rational[13, 75], Rational[167, 243]}, {
           0.17333333333333334`, 0.6872427983539094}], {-1, 2}], 
         InsetBox["0.75`", 
          NCache[{Rational[1, 6], Rational[163, 243]}, {0.16666666666666666`, 
           0.6707818930041153}], {-1, 2}], 
         InsetBox["0.775`", 
          NCache[{Rational[4, 25], Rational[155, 243]}, {0.16, 
           0.6378600823045267}], {-1, 2}], 
         InsetBox["0.8`", 
          NCache[{Rational[23, 150], Rational[146, 243]}, {
           0.15333333333333332`, 0.6008230452674898}], {-1, 2}], 
         InsetBox["0.8250000000000001`", 
          NCache[{Rational[19, 150], Rational[131, 243]}, {
           0.12666666666666668`, 0.5390946502057613}], {-1, 2}], 
         InsetBox["0.8500000000000001`", 
          NCache[{Rational[7, 75], Rational[110, 243]}, {0.09333333333333334, 
           0.45267489711934156`}], {-1, 2}], 
         InsetBox["0.875`", 
          NCache[{Rational[1, 15], Rational[1, 3]}, {0.06666666666666667, 
           0.3333333333333333}], {-1, 2}], 
         InsetBox["0.9`", 
          NCache[{Rational[1, 25], Rational[52, 243]}, {0.04, 
           0.2139917695473251}], {-1, 2}], 
         InsetBox["0.925`", 
          NCache[{Rational[1, 75], Rational[8, 81]}, {0.013333333333333334`, 
           0.09876543209876543}], {-1, 2}], 
         InsetBox["0.9500000000000001`", 
          NCache[{0, Rational[4, 243]}, {0, 0.01646090534979424}], {-1, 2}], 
         InsetBox["0.9750000000000001`", {0, 0}, {-1, 2}], 
         InsetBox["1.`", {0, 0}, {-1, 2}]}}},
      AspectRatio->1,
      Frame->True,
      FrameLabel->{
        FormBox[
         StyleBox[
         "\"FalsePositiveRate\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm], 
        FormBox[
         StyleBox[
         "\"Recall, same as TPR\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm]},
      GridLines->Automatic,
      ImageSize->{281.9875000000003, Automatic}]}], ",", 
    RowBox[{"\<\"survived\"\>", "\[Rule]", 
     GraphicsBox[{
       {RGBColor[
         NCache[
          Rational[5, 9], 0.5555555555555556], 
         NCache[
          Rational[5, 9], 0.5555555555555556], 1], 
        LineBox[NCache[{{1, 1}, {1, 1}, {Rational[239, 243], 1}, {
           Rational[73, 81], Rational[74, 75]}, {
           Rational[191, 243], Rational[24, 25]}, {
           Rational[2, 3], Rational[14, 15]}, {
           Rational[133, 243], Rational[68, 75]}, {
           Rational[112, 243], Rational[131, 150]}, {
           Rational[97, 243], Rational[127, 150]}, {
           Rational[88, 243], Rational[21, 25]}, {
           Rational[80, 243], Rational[5, 6]}, {
           Rational[76, 243], Rational[62, 75]}, {
           Rational[68, 243], Rational[4, 5]}, {
           Rational[64, 243], Rational[59, 75]}, {
           Rational[59, 243], Rational[19, 25]}, {
           Rational[19, 81], Rational[19, 25]}, {
           Rational[53, 243], Rational[37, 50]}, {
           Rational[17, 81], Rational[109, 150]}, {
           Rational[49, 243], Rational[107, 150]}, {
           Rational[47, 243], Rational[7, 10]}, {
           Rational[44, 243], Rational[52, 75]}, {
           Rational[4, 27], Rational[17, 25]}, {
           Rational[32, 243], Rational[2, 3]}, {
           Rational[26, 243], Rational[49, 75]}, {
           Rational[19, 243], Rational[19, 30]}, {
           Rational[16, 243], Rational[91, 150]}, {
           Rational[11, 243], Rational[43, 75]}, {
           Rational[8, 243], Rational[14, 25]}, {
           Rational[7, 243], Rational[77, 150]}, {
           Rational[2, 81], Rational[11, 25]}, {
           Rational[5, 243], Rational[2, 5]}, {
           Rational[1, 81], Rational[17, 50]}, {
           Rational[1, 243], Rational[47, 150]}, {
           Rational[1, 243], Rational[3, 10]}, {
           Rational[1, 243], Rational[19, 75]}, {
           Rational[1, 243], Rational[13, 75]}, {
           Rational[1, 243], Rational[11, 150]}, {0, Rational[1, 75]}, {0, 
           0}, {0, 0}, {0, 0}}, {{1, 1}, {1, 1}, {0.9835390946502057, 1}, {
           0.9012345679012346, 0.9866666666666667}, {0.7860082304526749, 
           0.96}, {0.6666666666666666, 0.9333333333333333}, {
           0.5473251028806584, 0.9066666666666666}, {0.4609053497942387, 
           0.8733333333333333}, {0.3991769547325103, 0.8466666666666667}, {
           0.36213991769547327`, 0.84}, {0.3292181069958848, 
           0.8333333333333334}, {0.31275720164609055`, 0.8266666666666667}, {
           0.27983539094650206`, 0.8}, {0.26337448559670784`, 
           0.7866666666666666}, {0.24279835390946503`, 0.76}, {
           0.2345679012345679, 0.76}, {0.21810699588477367`, 0.74}, {
           0.20987654320987653`, 0.7266666666666667}, {0.20164609053497942`, 
           0.7133333333333334}, {0.1934156378600823, 0.7}, {
           0.18106995884773663`, 0.6933333333333334}, {0.14814814814814814`, 
           0.68}, {0.13168724279835392`, 0.6666666666666666}, {
           0.10699588477366255`, 0.6533333333333333}, {0.07818930041152264, 
           0.6333333333333333}, {0.06584362139917696, 0.6066666666666667}, {
           0.04526748971193416, 0.5733333333333334}, {0.03292181069958848, 
           0.56}, {0.02880658436213992, 0.5133333333333333}, {
           0.024691358024691357`, 0.44}, {0.0205761316872428, 0.4}, {
           0.012345679012345678`, 0.34}, {0.00411522633744856, 
           0.31333333333333335`}, {0.00411522633744856, 0.3}, {
           0.00411522633744856, 0.25333333333333335`}, {0.00411522633744856, 
           0.17333333333333334`}, {0.00411522633744856, 
           0.07333333333333333}, {0, 0.013333333333333334`}, {0, 0}, {0, 0}, {
           0, 0}}]]}, 
       {RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 
         NCache[
          Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
        LineBox[NCache[{{1, 1}, {1, 1}, {Rational[239, 243], 1}, {
           Rational[73, 81], Rational[74, 75]}, {
           Rational[191, 243], Rational[24, 25]}, {
           Rational[2, 3], Rational[14, 15]}, {
           Rational[133, 243], Rational[68, 75]}, {
           Rational[112, 243], Rational[131, 150]}, {
           Rational[97, 243], Rational[127, 150]}, {
           Rational[88, 243], Rational[21, 25]}, {
           Rational[80, 243], Rational[5, 6]}, {
           Rational[76, 243], Rational[62, 75]}, {
           Rational[68, 243], Rational[4, 5]}, {
           Rational[64, 243], Rational[59, 75]}, {
           Rational[59, 243], Rational[19, 25]}, {
           Rational[19, 81], Rational[19, 25]}, {
           Rational[53, 243], Rational[37, 50]}, {
           Rational[17, 81], Rational[109, 150]}, {
           Rational[49, 243], Rational[107, 150]}, {
           Rational[47, 243], Rational[7, 10]}, {
           Rational[44, 243], Rational[52, 75]}, {
           Rational[4, 27], Rational[17, 25]}, {
           Rational[32, 243], Rational[2, 3]}, {
           Rational[26, 243], Rational[49, 75]}, {
           Rational[19, 243], Rational[19, 30]}, {
           Rational[16, 243], Rational[91, 150]}, {
           Rational[11, 243], Rational[43, 75]}, {
           Rational[8, 243], Rational[14, 25]}, {
           Rational[7, 243], Rational[77, 150]}, {
           Rational[2, 81], Rational[11, 25]}, {
           Rational[5, 243], Rational[2, 5]}, {
           Rational[1, 81], Rational[17, 50]}, {
           Rational[1, 243], Rational[47, 150]}, {
           Rational[1, 243], Rational[3, 10]}, {
           Rational[1, 243], Rational[19, 75]}, {
           Rational[1, 243], Rational[13, 75]}, {
           Rational[1, 243], Rational[11, 150]}, {0, Rational[1, 75]}, {0, 
           0}, {0, 0}, {0, 0}}, {{1, 1}, {1, 1}, {0.9835390946502057, 1}, {
           0.9012345679012346, 0.9866666666666667}, {0.7860082304526749, 
           0.96}, {0.6666666666666666, 0.9333333333333333}, {
           0.5473251028806584, 0.9066666666666666}, {0.4609053497942387, 
           0.8733333333333333}, {0.3991769547325103, 0.8466666666666667}, {
           0.36213991769547327`, 0.84}, {0.3292181069958848, 
           0.8333333333333334}, {0.31275720164609055`, 0.8266666666666667}, {
           0.27983539094650206`, 0.8}, {0.26337448559670784`, 
           0.7866666666666666}, {0.24279835390946503`, 0.76}, {
           0.2345679012345679, 0.76}, {0.21810699588477367`, 0.74}, {
           0.20987654320987653`, 0.7266666666666667}, {0.20164609053497942`, 
           0.7133333333333334}, {0.1934156378600823, 0.7}, {
           0.18106995884773663`, 0.6933333333333334}, {0.14814814814814814`, 
           0.68}, {0.13168724279835392`, 0.6666666666666666}, {
           0.10699588477366255`, 0.6533333333333333}, {0.07818930041152264, 
           0.6333333333333333}, {0.06584362139917696, 0.6066666666666667}, {
           0.04526748971193416, 0.5733333333333334}, {0.03292181069958848, 
           0.56}, {0.02880658436213992, 0.5133333333333333}, {
           0.024691358024691357`, 0.44}, {0.0205761316872428, 0.4}, {
           0.012345679012345678`, 0.34}, {0.00411522633744856, 
           0.31333333333333335`}, {0.00411522633744856, 0.3}, {
           0.00411522633744856, 0.25333333333333335`}, {0.00411522633744856, 
           0.17333333333333334`}, {0.00411522633744856, 
           0.07333333333333333}, {0, 0.013333333333333334`}, {0, 0}, {0, 0}, {
           0, 0}}]], {
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.`"],
          Annotation[#, 0., "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.025`"],
          Annotation[#, 0.025, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[239, 243], 1}, {0.9835390946502057, 1}]],
           
           "0.05`"],
          Annotation[#, 0.05, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[73, 81], Rational[74, 75]}, {0.9012345679012346, 
             0.9866666666666667}]],
           "0.07500000000000001`"],
          Annotation[#, 0.07500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[191, 243], Rational[24, 25]}, {
             0.7860082304526749, 0.96}]],
           "0.1`"],
          Annotation[#, 0.1, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[2, 3], Rational[14, 15]}, {0.6666666666666666, 
             0.9333333333333333}]],
           "0.125`"],
          Annotation[#, 0.125, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[133, 243], Rational[68, 75]}, {
             0.5473251028806584, 0.9066666666666666}]],
           "0.15000000000000002`"],
          Annotation[#, 0.15000000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[112, 243], Rational[131, 150]}, {
             0.4609053497942387, 0.8733333333333333}]],
           "0.17500000000000002`"],
          Annotation[#, 0.17500000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[97, 243], Rational[127, 150]}, {
             0.3991769547325103, 0.8466666666666667}]],
           "0.2`"],
          Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[88, 243], Rational[21, 25]}, {
             0.36213991769547327`, 0.84}]],
           "0.225`"],
          Annotation[#, 0.225, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[80, 243], Rational[5, 6]}, {0.3292181069958848, 
             0.8333333333333334}]],
           "0.25`"],
          Annotation[#, 0.25, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[76, 243], Rational[62, 75]}, {
             0.31275720164609055`, 0.8266666666666667}]],
           "0.275`"],
          Annotation[#, 0.275, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[68, 243], Rational[4, 5]}, {0.27983539094650206`,
              0.8}]],
           "0.30000000000000004`"],
          Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[64, 243], Rational[59, 75]}, {
             0.26337448559670784`, 0.7866666666666666}]],
           "0.325`"],
          Annotation[#, 0.325, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[59, 243], Rational[19, 25]}, {
             0.24279835390946503`, 0.76}]],
           "0.35000000000000003`"],
          Annotation[#, 0.35000000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[19, 81], Rational[19, 25]}, {0.2345679012345679, 
             0.76}]],
           "0.375`"],
          Annotation[#, 0.375, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[53, 243], Rational[37, 50]}, {
             0.21810699588477367`, 0.74}]],
           "0.4`"],
          Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[17, 81], Rational[109, 150]}, {
             0.20987654320987653`, 0.7266666666666667}]],
           "0.42500000000000004`"],
          Annotation[#, 0.42500000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[49, 243], Rational[107, 150]}, {
             0.20164609053497942`, 0.7133333333333334}]],
           "0.45`"],
          Annotation[#, 0.45, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[47, 243], Rational[7, 10]}, {0.1934156378600823, 
             0.7}]],
           "0.47500000000000003`"],
          Annotation[#, 0.47500000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[44, 243], Rational[52, 75]}, {
             0.18106995884773663`, 0.6933333333333334}]],
           "0.5`"],
          Annotation[#, 0.5, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[4, 27], Rational[17, 25]}, {0.14814814814814814`,
              0.68}]],
           "0.525`"],
          Annotation[#, 0.525, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[32, 243], Rational[2, 3]}, {0.13168724279835392`,
              0.6666666666666666}]],
           "0.55`"],
          Annotation[#, 0.55, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[26, 243], Rational[49, 75]}, {
             0.10699588477366255`, 0.6533333333333333}]],
           "0.5750000000000001`"],
          Annotation[#, 0.5750000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[19, 243], Rational[19, 30]}, {
             0.07818930041152264, 0.6333333333333333}]],
           "0.6000000000000001`"],
          Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[16, 243], Rational[91, 150]}, {
             0.06584362139917696, 0.6066666666666667}]],
           "0.625`"],
          Annotation[#, 0.625, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[11, 243], Rational[43, 75]}, {
             0.04526748971193416, 0.5733333333333334}]],
           "0.65`"],
          Annotation[#, 0.65, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[8, 243], Rational[14, 25]}, {0.03292181069958848,
              0.56}]],
           "0.675`"],
          Annotation[#, 0.675, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[7, 243], Rational[77, 150]}, {
             0.02880658436213992, 0.5133333333333333}]],
           "0.7000000000000001`"],
          Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[2, 81], Rational[11, 25]}, {
             0.024691358024691357`, 0.44}]],
           "0.7250000000000001`"],
          Annotation[#, 0.7250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[5, 243], Rational[2, 5]}, {0.0205761316872428, 
             0.4}]],
           "0.75`"],
          Annotation[#, 0.75, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 81], Rational[17, 50]}, {
             0.012345679012345678`, 0.34}]],
           "0.775`"],
          Annotation[#, 0.775, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 243], Rational[47, 150]}, {
             0.00411522633744856, 0.31333333333333335`}]],
           "0.8`"],
          Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 243], Rational[3, 10]}, {0.00411522633744856, 
             0.3}]],
           "0.8250000000000001`"],
          Annotation[#, 0.8250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 243], Rational[19, 75]}, {0.00411522633744856,
              0.25333333333333335`}]],
           "0.8500000000000001`"],
          Annotation[#, 0.8500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 243], Rational[13, 75]}, {0.00411522633744856,
              0.17333333333333334`}]],
           "0.875`"],
          Annotation[#, 0.875, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 243], Rational[11, 150]}, {
             0.00411522633744856, 0.07333333333333333}]],
           "0.9`"],
          Annotation[#, 0.9, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{0, Rational[1, 75]}, {0, 0.013333333333333334`}]],
           
           "0.925`"],
          Annotation[#, 0.925, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9500000000000001`"],
          Annotation[#, 0.9500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9750000000000001`"],
          Annotation[#, 0.9750000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "1.`"],
          Annotation[#, 1., "Tooltip"]& ]}, 
        {GrayLevel[0], InsetBox["0.`", {1, 1}, {-1, 2}], 
         InsetBox["0.025`", {1, 1}, {-1, 2}], 
         InsetBox["0.05`", 
          NCache[{Rational[239, 243], 1}, {0.9835390946502057, 1}], {-1, 2}], 
         InsetBox["0.07500000000000001`", 
          NCache[{Rational[73, 81], Rational[74, 75]}, {0.9012345679012346, 
           0.9866666666666667}], {-1, 2}], 
         InsetBox["0.1`", 
          NCache[{Rational[191, 243], Rational[24, 25]}, {0.7860082304526749, 
           0.96}], {-1, 2}], 
         InsetBox["0.125`", 
          NCache[{Rational[2, 3], Rational[14, 15]}, {0.6666666666666666, 
           0.9333333333333333}], {-1, 2}], 
         InsetBox["0.15000000000000002`", 
          NCache[{Rational[133, 243], Rational[68, 75]}, {0.5473251028806584, 
           0.9066666666666666}], {-1, 2}], 
         InsetBox["0.17500000000000002`", 
          NCache[{Rational[112, 243], Rational[131, 150]}, {
           0.4609053497942387, 0.8733333333333333}], {-1, 2}], 
         InsetBox["0.2`", 
          NCache[{Rational[97, 243], Rational[127, 150]}, {0.3991769547325103,
            0.8466666666666667}], {-1, 2}], 
         InsetBox["0.225`", 
          NCache[{Rational[88, 243], Rational[21, 25]}, {0.36213991769547327`,
            0.84}], {-1, 2}], 
         InsetBox["0.25`", 
          NCache[{Rational[80, 243], Rational[5, 6]}, {0.3292181069958848, 
           0.8333333333333334}], {-1, 2}], 
         InsetBox["0.275`", 
          NCache[{Rational[76, 243], Rational[62, 75]}, {0.31275720164609055`,
            0.8266666666666667}], {-1, 2}], 
         InsetBox["0.30000000000000004`", 
          NCache[{Rational[68, 243], Rational[4, 5]}, {0.27983539094650206`, 
           0.8}], {-1, 2}], 
         InsetBox["0.325`", 
          NCache[{Rational[64, 243], Rational[59, 75]}, {0.26337448559670784`,
            0.7866666666666666}], {-1, 2}], 
         InsetBox["0.35000000000000003`", 
          NCache[{Rational[59, 243], Rational[19, 25]}, {0.24279835390946503`,
            0.76}], {-1, 2}], 
         InsetBox["0.375`", 
          NCache[{Rational[19, 81], Rational[19, 25]}, {0.2345679012345679, 
           0.76}], {-1, 2}], 
         InsetBox["0.4`", 
          NCache[{Rational[53, 243], Rational[37, 50]}, {0.21810699588477367`,
            0.74}], {-1, 2}], 
         InsetBox["0.42500000000000004`", 
          NCache[{Rational[17, 81], Rational[109, 150]}, {
           0.20987654320987653`, 0.7266666666666667}], {-1, 2}], 
         InsetBox["0.45`", 
          NCache[{Rational[49, 243], Rational[107, 150]}, {
           0.20164609053497942`, 0.7133333333333334}], {-1, 2}], 
         InsetBox["0.47500000000000003`", 
          NCache[{Rational[47, 243], Rational[7, 10]}, {0.1934156378600823, 
           0.7}], {-1, 2}], 
         InsetBox["0.5`", 
          NCache[{Rational[44, 243], Rational[52, 75]}, {0.18106995884773663`,
            0.6933333333333334}], {-1, 2}], 
         InsetBox["0.525`", 
          NCache[{Rational[4, 27], Rational[17, 25]}, {0.14814814814814814`, 
           0.68}], {-1, 2}], 
         InsetBox["0.55`", 
          NCache[{Rational[32, 243], Rational[2, 3]}, {0.13168724279835392`, 
           0.6666666666666666}], {-1, 2}], 
         InsetBox["0.5750000000000001`", 
          NCache[{Rational[26, 243], Rational[49, 75]}, {0.10699588477366255`,
            0.6533333333333333}], {-1, 2}], 
         InsetBox["0.6000000000000001`", 
          NCache[{Rational[19, 243], Rational[19, 30]}, {0.07818930041152264, 
           0.6333333333333333}], {-1, 2}], 
         InsetBox["0.625`", 
          NCache[{Rational[16, 243], Rational[91, 150]}, {0.06584362139917696,
            0.6066666666666667}], {-1, 2}], 
         InsetBox["0.65`", 
          NCache[{Rational[11, 243], Rational[43, 75]}, {0.04526748971193416, 
           0.5733333333333334}], {-1, 2}], 
         InsetBox["0.675`", 
          NCache[{Rational[8, 243], Rational[14, 25]}, {0.03292181069958848, 
           0.56}], {-1, 2}], 
         InsetBox["0.7000000000000001`", 
          NCache[{Rational[7, 243], Rational[77, 150]}, {0.02880658436213992, 
           0.5133333333333333}], {-1, 2}], 
         InsetBox["0.7250000000000001`", 
          NCache[{Rational[2, 81], Rational[11, 25]}, {0.024691358024691357`, 
           0.44}], {-1, 2}], 
         InsetBox["0.75`", 
          NCache[{Rational[5, 243], Rational[2, 5]}, {0.0205761316872428, 
           0.4}], {-1, 2}], 
         InsetBox["0.775`", 
          NCache[{Rational[1, 81], Rational[17, 50]}, {0.012345679012345678`, 
           0.34}], {-1, 2}], 
         InsetBox["0.8`", 
          NCache[{Rational[1, 243], Rational[47, 150]}, {0.00411522633744856, 
           0.31333333333333335`}], {-1, 2}], 
         InsetBox["0.8250000000000001`", 
          NCache[{Rational[1, 243], Rational[3, 10]}, {0.00411522633744856, 
           0.3}], {-1, 2}], 
         InsetBox["0.8500000000000001`", 
          NCache[{Rational[1, 243], Rational[19, 75]}, {0.00411522633744856, 
           0.25333333333333335`}], {-1, 2}], 
         InsetBox["0.875`", 
          NCache[{Rational[1, 243], Rational[13, 75]}, {0.00411522633744856, 
           0.17333333333333334`}], {-1, 2}], 
         InsetBox["0.9`", 
          NCache[{Rational[1, 243], Rational[11, 150]}, {0.00411522633744856, 
           0.07333333333333333}], {-1, 2}], 
         InsetBox["0.925`", 
          NCache[{0, Rational[1, 75]}, {0, 0.013333333333333334`}], {-1, 2}], 
         InsetBox["0.9500000000000001`", {0, 0}, {-1, 2}], 
         InsetBox["0.9750000000000001`", {0, 0}, {-1, 2}], 
         InsetBox["1.`", {0, 0}, {-1, 2}]}}},
      AspectRatio->1,
      Frame->True,
      FrameLabel->{
        FormBox[
         StyleBox[
         "\"FalsePositiveRate\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm], 
        FormBox[
         StyleBox[
         "\"Recall, same as TPR\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm]},
      GridLines->Automatic,
      ImageSize->{Automatic, 258.0998503728423}]}]}], 
   "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.734636957088619*^9},
 CellID->1731432730,ExpressionUUID->"989fe400-b94c-4edd-90d7-d8281cd81ac3"]
}, Open  ]]
}, Open  ]],

Cell["\<\
In the specified pipeline computation the last column of the dataset is \
assumed to be the one with the class labels. \
\>", "Text",
 CellChangeTimes->{{3.734637920045762*^9, 3.734637948159217*^9}, {
  3.734868546982519*^9, 3.7348685679047403`*^9}, {3.7348686351155033`*^9, 
  3.734868679844048*^9}},
 CellID->1786476260,ExpressionUUID->"eb82122f-adca-4897-a112-4105746c57b4"],

Cell[TextData[{
 "The ",
 StyleBox["ClCon", "Program"],
 " functions are separated into four groups:"
}], "Text",
 CellChangeTimes->{{3.734868962980047*^9, 3.7348689750432787`*^9}},
 CellID->1337633113,ExpressionUUID->"14b6d3b1-f0ad-4048-a8db-f267cb45029b"],

Cell["operations,", "Item",
 CellChangeTimes->{{3.734868962980047*^9, 3.734869015761685*^9}},
 CellID->1740913395,ExpressionUUID->"20918151-4260-45fe-a5db-602209af42c6"],

Cell["setters,", "Item",
 CellChangeTimes->{{3.734868962980047*^9, 3.734869014491653*^9}},
 CellID->66739390,ExpressionUUID->"d5514269-fb9d-4582-9c9f-314cfa477cd6"],

Cell["takers,", "Item",
 CellChangeTimes->{{3.734868962980047*^9, 3.734868994533287*^9}},
 CellID->702463996,ExpressionUUID->"6f93bb87-d7fc-4ab2-9620-09353cd1dc3f"],

Cell["State Monad generic functions.", "Item",
 CellChangeTimes->{{3.734868962980047*^9, 3.734869030354196*^9}},
 CellID->1594773213,ExpressionUUID->"822c45d2-824b-4542-8b24-73946ecec8c0"],

Cell[TextData[{
 "An overview of the those functions is given in the tables in next two \
sub-sections. The next section, \[OpenCurlyDoubleQuote]Monad elements\
\[CloseCurlyDoubleQuote], gives details and examples for the usage of the ",
 StyleBox["ClCon", "Program"],
 " operations."
}], "Text",
 CellChangeTimes->{{3.7348690338082743`*^9, 3.734869140843939*^9}, {
  3.734870918958952*^9, 3.7348709214438143`*^9}},
 CellID->609992684,ExpressionUUID->"fd4f6b83-68ee-4d57-a723-9def8fef911c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Monad elements", "Section",
 CellChangeTimes->{{3.733921508073859*^9, 3.73392151629746*^9}, {
  3.7339221559495983`*^9, 3.73392215672471*^9}},
 CellID->1536322582,ExpressionUUID->"d39aae5d-6951-4898-95f7-ef2af435e7a6"],

Cell[TextData[{
 "In this section we show that ",
 StyleBox["ClCon", "Program"],
 " has all of the properties listed in the previous section."
}], "Text",
 CellChangeTimes->{{3.734131938148789*^9, 3.7341320087538443`*^9}, {
  3.7341320415833883`*^9, 3.7341320499295387`*^9}, {3.734132082073056*^9, 
  3.734132127229663*^9}},
 CellID->1777747793,ExpressionUUID->"0e2c60fb-70d1-4b1a-a31c-f0971415835b"],

Cell[CellGroupData[{

Cell["The monad head", "Subsection",
 CellChangeTimes->{{3.734687316600999*^9, 3.734687327840061*^9}},
 CellID->667176240,ExpressionUUID->"273198ac-dfb0-4b71-8aa4-6538bcb3d483"],

Cell[CellGroupData[{

Cell[TextData[{
 "The monad head is ",
 StyleBox["ClCon", "Program"],
 ". Anything wrapped in ClCon can serve as monad\[CloseCurlyQuote]s pipeline \
value. It is better though to use the constructor ",
 StyleBox["ClConUnit", "Program"],
 ". (Which adheres to the definition in [Wk1].)"
}], "Text",
 CellChangeTimes->{{3.734687329068925*^9, 3.734687340742635*^9}, {
  3.7346874523558207`*^9, 3.7346874790213537`*^9}, {3.734688347721861*^9, 
  3.734688409834035*^9}, {3.73487842347259*^9, 3.734878444511842*^9}},
 CellID->1218944693,ExpressionUUID->"611c4eb8-efe7-4ebe-8175-7a5170b5c24d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClCon", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "\"\<a\>\""}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "\"\<b\>\""}], "}"}]}], "}"}], ",", 
     RowBox[{"<|", "|>"}]}], "]"}], "\[DoubleLongRightArrow]", 
   "ClConSummarizeData"}], ";"}]], "Input",
 CellChangeTimes->{{3.7346883504452543`*^9, 3.734688351063603*^9}, {
  3.734688553938512*^9, 3.73468859971346*^9}, {3.73468874809447*^9, 
  3.734688767565894*^9}},
 CellLabel->"In[30]:=",
 CellID->1956946518,ExpressionUUID->"be8c59fe-6e75-41b6-a1fc-0a6f5ac62e8e"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"Anonymous", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      TagBox[GridBox[{
         {
          StyleBox["\<\"1 column 1\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"1st Qu\"\>", "1"},
             {"\<\"Min\"\>", "1"},
             {"\<\"Mean\"\>", "1.5`"},
             {"\<\"Median\"\>", "1.5`"},
             {"\<\"3rd Qu\"\>", "2"},
             {"\<\"Max\"\>", "2"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"2 column 2\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"a\"\>", "1"},
             {"\<\"b\"\>", "1"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"]}], "}"}]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.932509169328228*^9},
 CellID->601331791,ExpressionUUID->"813db96c-022f-46f4-84ec-fb0a3acbe9b1"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lifting data to the monad", "Subsection",
 CellChangeTimes->{{3.733921532249325*^9, 3.733921540123241*^9}, {
  3.7346865988676777`*^9, 3.73468659952069*^9}},
 CellID->1056971830,ExpressionUUID->"87b1ec8c-8a92-4d94-a7c4-583ed38ec989"],

Cell[TextData[{
 "The function lifting the data into the monad ",
 StyleBox["ClCon", "Program"],
 " is ",
 StyleBox["ClConUnit", "Program"],
 "."
}], "Text",
 CellChangeTimes->{{3.733921542834402*^9, 3.733921559901147*^9}},
 CellID->540818826,ExpressionUUID->"a6142788-bc94-4059-9d60-7eb5b67c6691"],

Cell[CellGroupData[{

Cell["\<\
The lifting to the monad marks the beginning of the monadic pipeline. It can \
be done with data or without data. Examples follow.\
\>", "Text",
 CellChangeTimes->{{3.7339413879010677`*^9, 3.733941426633851*^9}, {
  3.734687273085582*^9, 3.734687297937179*^9}, {3.735328265825605*^9, 
  3.735328269165793*^9}},
 CellID->1391214478,ExpressionUUID->"dd294405-2af1-4710-bdf3-282448f6c069"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClConUnit", "[", "dsData", "]"}], "\[DoubleLongRightArrow]", 
   "ClConSummarizeData"}], ";"}]], "Input",
 CellChangeTimes->{{3.7346872993898563`*^9, 3.734687309907775*^9}, {
  3.7346884173266563`*^9, 3.7346884693816843`*^9}},
 CellLabel->"In[31]:=",
 CellID->339783210,ExpressionUUID->"e2f78e27-7559-41da-bcf8-da5bc1931de4"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"Anonymous", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      TagBox[GridBox[{
         {
          StyleBox["\<\"1 number\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"Min\"\>", "20"},
             {"\<\"1st Qu\"\>", "278"},
             {"\<\"Mean\"\>", "531.17`"},
             {"\<\"Median\"\>", "531.5`"},
             {"\<\"3rd Qu\"\>", "801.5`"},
             {"\<\"Max\"\>", "998"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"2 feature1\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"1st Qu\"\>", "0"},
             {"\<\"Min\"\>", "0"},
             {"\<\"Mean\"\>", "0.92`"},
             {"\<\"Median\"\>", "1"},
             {"\<\"3rd Qu\"\>", "2"},
             {"\<\"Max\"\>", "2"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"3 feature2\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"Min\"\>", "0"},
             {"\<\"1st Qu\"\>", "2"},
             {"\<\"Mean\"\>", "4.27`"},
             {"\<\"Median\"\>", "4.5`"},
             {"\<\"3rd Qu\"\>", "6"},
             {"\<\"Max\"\>", "9"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"4 label\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"0\"\>", "40"},
             {"\<\"2\"\>", "32"},
             {"\<\"1\"\>", "28"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"]}], "}"}]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.9325091693463793`*^9},
 CellID->525368555,ExpressionUUID->"ded6388e-a871-4b24-bfb5-d6da4bcf13e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClConUnit", "[", "]"}], "\[DoubleLongRightArrow]", 
   RowBox[{"ClConSetTrainingData", "[", "dsData", "]"}], 
   "\[DoubleLongRightArrow]", "ClConSummarizeData"}], ";"}]], "Input",
 CellChangeTimes->{{3.7346872993898563`*^9, 3.734687309907775*^9}, {
  3.7346884173266563`*^9, 3.7346884414477654`*^9}},
 CellLabel->"In[32]:=",
 CellID->1914664133,ExpressionUUID->"817561a5-ad67-45a0-950a-dbe7ac245f46"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{"\<\"trainingData\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      TagBox[GridBox[{
         {
          StyleBox["\<\"1 number\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"Min\"\>", "20"},
             {"\<\"1st Qu\"\>", "278"},
             {"\<\"Mean\"\>", "531.17`"},
             {"\<\"Median\"\>", "531.5`"},
             {"\<\"3rd Qu\"\>", "801.5`"},
             {"\<\"Max\"\>", "998"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"2 feature1\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"1st Qu\"\>", "0"},
             {"\<\"Min\"\>", "0"},
             {"\<\"Mean\"\>", "0.92`"},
             {"\<\"Median\"\>", "1"},
             {"\<\"3rd Qu\"\>", "2"},
             {"\<\"Max\"\>", "2"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"3 feature2\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"Min\"\>", "0"},
             {"\<\"1st Qu\"\>", "2"},
             {"\<\"Mean\"\>", "4.27`"},
             {"\<\"Median\"\>", "4.5`"},
             {"\<\"3rd Qu\"\>", "6"},
             {"\<\"Max\"\>", "9"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"], ",", 
      TagBox[GridBox[{
         {
          StyleBox["\<\"4 label\"\>",
           StripOnInput->False,
           LineColor->RGBColor[0, 0, 1],
           FrontFaceColor->RGBColor[0, 0, 1],
           BackFaceColor->RGBColor[0, 0, 1],
           GraphicsColor->RGBColor[0, 0, 1],
           FontFamily->"Times",
           FontColor->RGBColor[0, 0, 1]]},
         {
          TagBox[GridBox[{
             {"\<\"0\"\>", "40"},
             {"\<\"2\"\>", "32"},
             {"\<\"1\"\>", "28"}
            },
            AutoDelete->False,
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
           "Grid"]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Column"]}], "}"}]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.932509169368966*^9},
 CellID->1564031068,ExpressionUUID->"c866b3fe-782d-4f9b-962b-dfcaaf430ba0"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "(See the sub-section \[OpenCurlyDoubleQuote]Setters and takers\
\[CloseCurlyDoubleQuote] for more details of setting and taking values in ",
 StyleBox["ClCon", "Program"],
 " contexts.)"
}], "Text",
 CellChangeTimes->{{3.7346888000791397`*^9, 3.73468886782712*^9}, {
  3.734878467485321*^9, 3.7348784971609507`*^9}, {3.734878541061511*^9, 
  3.734878542273687*^9}, {3.735374688473239*^9, 3.735374688594043*^9}},
 CellID->197295922,ExpressionUUID->"c24b7acb-96fc-4d0a-940c-8653ef68d3c1"],

Cell["\<\
Currently the monad can deal with data in the following forms: \
\>", "Text",
 CellChangeTimes->{{3.7351260714175453`*^9, 3.7351261717575912`*^9}, {
   3.735126209919693*^9, 3.7351262380654287`*^9}, 3.735161310212017*^9},
 CellID->237810086,ExpressionUUID->"29291269-176b-4170-ac5e-bee39f7b3398"],

Cell["datasets, ", "Item",
 CellChangeTimes->{{3.7351260714175453`*^9, 3.7351261717575912`*^9}, {
  3.735126209919693*^9, 3.7351262380654287`*^9}, {3.7351613196297207`*^9, 
  3.735161319636055*^9}},
 CellID->407048335,ExpressionUUID->"8f1679e1-1828-4e47-9aae-67afff6aa97e"],

Cell["matrices, ", "Item",
 CellChangeTimes->{{3.7351260714175453`*^9, 3.7351261717575912`*^9}, {
  3.735126209919693*^9, 3.7351262380654287`*^9}, {3.735161322243122*^9, 
  3.735161322249592*^9}},
 CellID->1525950650,ExpressionUUID->"1e4b49b9-af37-47c7-b91f-baf1f51f010d"],

Cell["lists of example\[Rule]label rules. ", "Item",
 CellChangeTimes->{{3.7351260714175453`*^9, 3.7351261717575912`*^9}, {
  3.735126209919693*^9, 3.7351262380654287`*^9}},
 CellID->1402862076,ExpressionUUID->"2d1f649d-aae0-4f78-b251-094e1759e738"],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 StyleBox["ClCon", "Program"],
 " monad also has the non-monadic function ",
 StyleBox["ClConToNormalClassifierData", "Program"],
 " which can be used to convert datasets and matrices to lists of example\
\[Rule]label rules. Here is an example:"
}], "Text",
 CellChangeTimes->{{3.735126241013011*^9, 3.73512624932758*^9}, {
  3.735126302596754*^9, 3.7351263033500843`*^9}, {3.735126337023381*^9, 
  3.735126373270364*^9}},
 CellID->679950919,ExpressionUUID->"b3b6cb9e-10ca-4d0e-9ab6-6007c6b2075f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{
   RowBox[{"ClConToNormalClassifierData", "[", "dsData", "]"}], ",", "3"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.735126304376667*^9, 3.735126328044395*^9}, {
  3.73516134119734*^9, 3.735161356946927*^9}},
 CellLabel->"In[33]:=",
 CellID->1174609946,ExpressionUUID->"d4da1cd0-bca9-4d73-a5c5-2d80a1884f60"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"639", ",", "0", ",", "9"}], "}"}], "\[Rule]", "\<\"0\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"121", ",", "1", ",", "1"}], "}"}], "\[Rule]", "\<\"1\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"309", ",", "0", ",", "9"}], "}"}], "\[Rule]", "\<\"0\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"648", ",", "0", ",", "8"}], "}"}], "\[Rule]", "\<\"0\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"995", ",", "2", ",", "5"}], "}"}], "\[Rule]", "\<\"2\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"127", ",", "1", ",", "7"}], "}"}], "\[Rule]", "\<\"1\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"908", ",", "2", ",", "8"}], "}"}], "\[Rule]", "\<\"2\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"564", ",", "0", ",", "4"}], "}"}], "\[Rule]", "\<\"0\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"380", ",", "2", ",", "0"}], "}"}], "\[Rule]", "\<\"2\"\>"}], 
    ",", 
    RowBox[{"\[LeftSkeleton]", "82", "\[RightSkeleton]"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"449", ",", "2", ",", "9"}], "}"}], "\[Rule]", "\<\"2\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"522", ",", "0", ",", "2"}], "}"}], "\[Rule]", "\<\"0\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"288", ",", "0", ",", "8"}], "}"}], "\[Rule]", "\<\"0\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"51", ",", "0", ",", "1"}], "}"}], "\[Rule]", "\<\"0\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"108", ",", "0", ",", "8"}], "}"}], "\[Rule]", "\<\"0\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"76", ",", "1", ",", "6"}], "}"}], "\[Rule]", "\<\"1\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"706", ",", "1", ",", "6"}], "}"}], "\[Rule]", "\<\"1\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"765", ",", "0", ",", "5"}], "}"}], "\[Rule]", "\<\"0\"\>"}], 
    ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"195", ",", "0", ",", "5"}], "}"}], "\[Rule]", "\<\"0\"\>"}]}], 
   "}"}],
  Short[#, 3]& ]], "Output",
 CellChangeTimes->{3.9325066063519077`*^9, 3.93250916938918*^9},
 CellLabel->"Out[33]//Short=",
 CellID->1470320596,ExpressionUUID->"2b72b1f1-450d-463b-9f86-922f33aa1db9"]
}, Open  ]]
}, Open  ]],

Cell["\<\
When the data lifted to the monad is a dataset or a matrix it is assumed that \
the last column has the class labels. WL makes it easy to rearrange columns \
in such a way the any column of dataset or a matrix to be the last.\
\>", "Text",
 CellChangeTimes->{{3.735328107715454*^9, 3.735328248566517*^9}, {
  3.735328329051725*^9, 3.735328355837473*^9}, {3.735328390265596*^9, 
  3.735328396866338*^9}},
 CellID->489205236,ExpressionUUID->"19d30db6-33c9-4714-968a-e0cbec63e8cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Data splitting", "Subsection",
 CellChangeTimes->{{3.733922012689569*^9, 3.733922016704852*^9}, {
  3.733922076870631*^9, 3.733922086748624*^9}},
 CellID->1505000736,ExpressionUUID->"d051e7b5-9e4d-4836-8581-4df31424d0c4"],

Cell[TextData[{
 "The splitting is made with ",
 StyleBox["ClConSplitData", "Program"],
 StyleBox[", which takes up to two arguments and options. The first argument",
   "Item"],
 " specifies the fraction of training data. The second argument -- if given \
-- specifies the fraction of the validation part of the training data. If the \
value of option ",
 StyleBox["Method", "Program"],
 " is \[CloseCurlyDoubleQuote]LabelsProportional\[CloseCurlyDoubleQuote], \
then the splitting is done in correspondence of the class labels tallies. (\
\[CloseCurlyDoubleQuote]LabelsProportional\[CloseCurlyDoubleQuote] is the \
default value.) Data splitting demonstration examples follow."
}], "Text",
 CellChangeTimes->{{3.7339539807789707`*^9, 3.733953991129416*^9}, {
  3.733954153662915*^9, 3.73395427709735*^9}, {3.733954325675865*^9, 
  3.733954512350341*^9}, {3.734688488350547*^9, 3.734688515831637*^9}, {
  3.73516138894419*^9, 3.735161390482462*^9}, {3.7351616190482273`*^9, 
  3.735161700840213*^9}, {3.735161844183435*^9, 3.735161897983094*^9}, {
  3.735330879847302*^9, 3.735330880105454*^9}, {3.73533112812647*^9, 
  3.7353311883237133`*^9}},
 CellID->1484975586,ExpressionUUID->"d6287112-5b08-426b-a3a4-adeedd6dfd4f"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here are the dimensions of the dataset ",
 StyleBox["dsData", "Program"],
 ": "
}], "Text",
 CellChangeTimes->{{3.7346891099147787`*^9, 3.734689134713678*^9}},
 CellID->2077212115,ExpressionUUID->"8d0a26ba-6d47-4a9f-b2f1-c7a3b7b4d3ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "dsData", "]"}]], "Input",
 CellChangeTimes->{{3.734689059445869*^9, 3.734689064839088*^9}},
 CellLabel->"In[34]:=",
 CellID->62367526,ExpressionUUID->"0c2325dd-1696-4cb8-8496-2ce405d9f620"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"100", ",", "4"}], "}"}]], "Output",
 CellChangeTimes->{3.932506606359138*^9, 3.932509169396757*^9},
 CellLabel->"Out[34]=",
 CellID->583930943,ExpressionUUID->"b2821d25-910e-4b13-b4ed-7d8ab9681c7f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Here we split the data into ",
 Cell[BoxData[
  FormBox["70", TraditionalForm]],ExpressionUUID->
  "c5e16463-eed7-4e39-9f7c-e6b394deba41"],
 "% for training and ",
 Cell[BoxData[
  FormBox["30", TraditionalForm]],ExpressionUUID->
  "ba147684-a9f1-41d6-b064-a462e45df5ba"],
 "% for testing and then we verify that the corresponding number of rows add \
to the number of rows of ",
 StyleBox["dsData", "Program"],
 ":"
}], "Text",
 CellChangeTimes->{{3.734689143804523*^9, 3.7346891526128674`*^9}, {
  3.734689199079227*^9, 3.734689283455797*^9}},
 CellID->906241132,ExpressionUUID->"05aa8897-7408-4d85-b374-8d61493096ff"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"val", "=", 
   RowBox[{
    RowBox[{"ClConUnit", "[", "dsData", "]"}], "\[DoubleLongRightArrow]", 
    RowBox[{"ClConSplitData", "[", "0.7", "]"}], "\[DoubleLongRightArrow]", 
    "ClConTakeValue"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Map", "[", 
  RowBox[{"Dimensions", ",", "val"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Total", "[", 
  RowBox[{"First", "/@", "%"}], "]"}]}], "Input",
 CellChangeTimes->{{3.733954002686771*^9, 3.733954132050289*^9}, {
  3.73395429109369*^9, 3.7339542913743343`*^9}, {3.7346889792395163`*^9, 
  3.734688982128633*^9}, {3.7346890202238913`*^9, 3.7346890820745287`*^9}, {
  3.7346891706969*^9, 3.734689196393091*^9}, {3.735161961806447*^9, 
  3.7351619667726307`*^9}, {3.735162047296319*^9, 3.7351620524892273`*^9}},
 CellLabel->"In[35]:=",
 CellID->1240681000,ExpressionUUID->"5f80e6ec-2fd4-4699-853d-4eb772b8706e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"trainingData\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"69", ",", "4"}], "}"}]}], ",", 
   RowBox[{"\<\"testData\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"31", ",", "4"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932506606372409*^9, 3.932509169410264*^9},
 CellLabel->"Out[36]=",
 CellID->127092211,ExpressionUUID->"d48ddcae-6c60-4f32-845d-a38c681cb86e"],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{3.932506606372409*^9, 3.932509169410841*^9},
 CellLabel->"Out[37]=",
 CellID->1440045159,ExpressionUUID->"c4eb0053-05c7-4223-a6b6-18f7fe00f4e6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Note that if ",
 StyleBox["Method", "Program"],
 " is not \[OpenCurlyDoubleQuote]LabelsProportional\[CloseCurlyDoubleQuote] \
we get slightly different results."
}], "Text",
 CellChangeTimes->{{3.735330991614417*^9, 3.7353310076232567`*^9}, {
  3.735331071008127*^9, 3.735331075484551*^9}, {3.735331110721192*^9, 
  3.735331122498879*^9}, {3.7353312017135344`*^9, 3.7353312031627007`*^9}},
 CellID->1602572598,ExpressionUUID->"9fe8fbad-4644-4984-bf19-bc8f47edcb31"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"val", "=", 
   RowBox[{
    RowBox[{"ClConUnit", "[", "dsData", "]"}], "\[DoubleLongRightArrow]", 
    RowBox[{"ClConSplitData", "[", 
     RowBox[{"0.7", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<Random\>\""}]}], "]"}], 
    "\[DoubleLongRightArrow]", "ClConTakeValue"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Map", "[", 
  RowBox[{"Dimensions", ",", "val"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Total", "[", 
  RowBox[{"First", "/@", "%"}], "]"}]}], "Input",
 CellChangeTimes->{{3.733954002686771*^9, 3.733954132050289*^9}, {
  3.73395429109369*^9, 3.7339542913743343`*^9}, {3.7346889792395163`*^9, 
  3.734688982128633*^9}, {3.7346890202238913`*^9, 3.7346890820745287`*^9}, {
  3.7346891706969*^9, 3.734689196393091*^9}, {3.735161961806447*^9, 
  3.7351619667726307`*^9}, {3.735162047296319*^9, 3.7351620524892273`*^9}, {
  3.735331011707706*^9, 3.7353310235311747`*^9}},
 CellLabel->"In[38]:=",
 CellID->697753912,ExpressionUUID->"cc8b0e85-e6e3-49e1-a6d7-fd7cc2fda216"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"trainingData\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"70", ",", "4"}], "}"}]}], ",", 
   RowBox[{"\<\"testData\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"30", ",", "4"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.9325066063861523`*^9, 3.9325091694243393`*^9},
 CellLabel->"Out[39]=",
 CellID->698285623,ExpressionUUID->"c3323e68-750f-4b8e-83ac-5bb911acaf08"],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{3.9325066063861523`*^9, 3.932509169424904*^9},
 CellLabel->"Out[40]=",
 CellID->88334906,ExpressionUUID->"00ba3849-cddb-4e04-aeeb-0624469eb266"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "In the following code we split the data into ",
 Cell[BoxData[
  FormBox["70", TraditionalForm]],ExpressionUUID->
  "99863ef1-cffb-4104-9dbc-cc194f161d5b"],
 "% for training and ",
 Cell[BoxData[
  FormBox["30", TraditionalForm]],ExpressionUUID->
  "07133eb7-f342-4014-b04e-9461f02b6b94"],
 "% for testing, then the training data is further split into ",
 Cell[BoxData[
  FormBox["90", TraditionalForm]],ExpressionUUID->
  "779f95b0-94c0-44fe-b8de-8a1ba5cad9ed"],
 "% for training and ",
 Cell[BoxData[
  FormBox["10", TraditionalForm]],ExpressionUUID->
  "44f900a2-e396-4148-b5ba-980c952e607e"],
 "% for classifier training validation; then we verify that the number of \
rows add up."
}], "Text",
 CellChangeTimes->{{3.734689143804523*^9, 3.7346891526128674`*^9}, {
  3.734689199079227*^9, 3.7346894036530733`*^9}, {3.735330935297398*^9, 
  3.7353309359261513`*^9}},
 CellID->1051418433,ExpressionUUID->"e4af2c6d-6901-47d1-b9f6-9c81db296512"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"val", "=", 
   RowBox[{
    RowBox[{"ClConUnit", "[", "dsData", "]"}], "\[DoubleLongRightArrow]", 
    RowBox[{"ClConSplitData", "[", 
     RowBox[{"0.7", ",", "0.1"}], "]"}], "\[DoubleLongRightArrow]", 
    "ClConTakeValue"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Map", "[", 
  RowBox[{"Dimensions", ",", "val"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Total", "[", 
  RowBox[{"First", "/@", "%"}], "]"}]}], "Input",
 CellChangeTimes->{{3.733954002686771*^9, 3.733954132050289*^9}, 
   3.7339542868846073`*^9, {3.734689095644271*^9, 3.734689095912136*^9}, {
   3.735169021426214*^9, 3.735169027078023*^9}},
 CellLabel->"In[41]:=",
 CellID->1694155915,ExpressionUUID->"d2919d39-3cc0-4c33-953a-72bbd26b8ef2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"trainingData\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"61", ",", "4"}], "}"}]}], ",", 
   RowBox[{"\<\"testData\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"31", ",", "4"}], "}"}]}], ",", 
   RowBox[{"\<\"validationData\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"8", ",", "4"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932506606399629*^9, 3.932509169431942*^9},
 CellLabel->"Out[42]=",
 CellID->733565065,ExpressionUUID->"b520cace-0be1-4784-8928-aeb69ffca7a9"],

Cell[BoxData["100"], "Output",
 CellChangeTimes->{3.932506606399629*^9, 3.932509169432629*^9},
 CellLabel->"Out[43]=",
 CellID->324430028,ExpressionUUID->"fadbe65e-8b15-4a2e-9e16-1222ccce34d1"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classifier training", "Subsection",
 CellChangeTimes->{{3.7339220261198874`*^9, 3.73392203158743*^9}, {
  3.7339220887619343`*^9, 3.733922094679783*^9}},
 CellID->4716573,ExpressionUUID->"fe80ff4f-90b8-41aa-945c-3776094018ca"],

Cell[TextData[{
 "The monad ",
 StyleBox["ClCon", "Program"],
 " supports both single classifiers obtained with ",
 StyleBox["Classify", "Program"],
 " and classifier ensembles obtained with ",
 StyleBox["Classify", "Program"],
 " and managed with the package ",
 ButtonBox["\[OpenCurlyDoubleQuote]ClassifierEnsembles.m\
\[CloseCurlyDoubleQuote]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"],
 ", [",
 ButtonBox["AAp4",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ClassifierEnsembles.m"],
 "]."
}], "Text",
 CellChangeTimes->{{3.73468943066537*^9, 3.734689509055559*^9}, {
  3.734689791602713*^9, 3.7346897964394617`*^9}, {3.734689837750044*^9, 
  3.734689841364778*^9}},
 CellID->1962031119,ExpressionUUID->"c043c679-1cf1-467b-80a1-39f291432d74"],

Cell[CellGroupData[{

Cell["Single classifier training", "Subsubsection",
 CellChangeTimes->{{3.733922039160398*^9, 3.733922041668968*^9}, {
  3.7346898474384336`*^9, 3.734689849147419*^9}},
 CellID->1245617348,ExpressionUUID->"19ba1cee-2ad6-4f65-bf4d-580a7603c94f"],

Cell[CellGroupData[{

Cell["\<\
With the following pipeline we take the Titanic data, split it into 75/25 % \
parts, train a Logistic Regression classifier, and finally take that \
classifier from the monad.\
\>", "Text",
 CellChangeTimes->{{3.734689866394849*^9, 3.73468988008465*^9}, {
  3.734690006121298*^9, 3.7346901238867893`*^9}, {3.734690559641461*^9, 
  3.734690560009749*^9}, {3.735331261069954*^9, 3.735331261472341*^9}},
 CellID->1420176880,ExpressionUUID->"9e6b4731-f01c-4e99-a960-5286c57e3b03"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cf", "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClConUnit", "[", "dsTitanic", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConSplitData", "[", "0.75", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConMakeClassifier", "[", "\"\<LogisticRegression\>\"", "]"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    "ClConTakeClassifier"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.73395456414038*^9, 3.7339545745637197`*^9}, {
  3.733955225906279*^9, 3.733955269655431*^9}},
 CellLabel->"In[44]:=",
 CellID->1779569402,ExpressionUUID->"60686a0e-b323-4283-9591-fc9fb6b1b696"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Here is information about the obtained classifier:", "Text",
 CellChangeTimes->{{3.7346900981577463`*^9, 3.734690112378025*^9}, {
  3.734732426450191*^9, 3.7347324272375507`*^9}},
 CellID->1218187645,ExpressionUUID->"8e6b2915-1df5-4014-972f-a990a9aaa717"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"cf", ",", "\"\<TrainingTime\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.73395527285888*^9, 3.733955296059392*^9}, 
   3.73473243537682*^9, {3.7348791621520643`*^9, 3.734879175951651*^9}, 
   3.932505654900463*^9},
 CellLabel->"In[45]:=",
 CellID->2118142664,ExpressionUUID->"c84606cf-bb6f-48a1-90d0-61ce21f7873e"],

Cell[BoxData[
 TemplateBox[{"1.451258`", "\"s\"", "seconds", "\"Seconds\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.932506608709715*^9, 3.932509171813755*^9},
 CellLabel->"Out[45]=",
 CellID->623512196,ExpressionUUID->"93beb2de-0387-42c4-896d-14182fdcf157"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "If we want to pass parameters to the classifier training we can use the ",
 StyleBox["Method", "Program"],
 " option. Here we train a Random Forest classifier with ",
 Cell[BoxData[
  FormBox["400", TraditionalForm]],ExpressionUUID->
  "f2fe309b-8a93-4b49-a4b0-2188850d80f2"],
 " trees:"
}], "Text",
 CellChangeTimes->{{3.734690890159359*^9, 3.7346909609338617`*^9}},
 CellID->2135100736,ExpressionUUID->"2a7db967-10b2-4f58-86c7-f2d07ee21039"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cf", "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClConUnit", "[", "dsTitanic", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConSplitData", "[", "0.75", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConMakeClassifier", "[", 
     RowBox[{"Method", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<RandomForest\>\"", ",", 
        RowBox[{"\"\<TreeNumber\>\"", "\[Rule]", "400"}]}], "}"}]}], "]"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    "ClConTakeClassifier"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.734690926114839*^9, 3.7346909325053883`*^9}, {
  3.734690965230816*^9, 3.734690974557603*^9}},
 CellLabel->"In[46]:=",
 CellID->186328582,ExpressionUUID->"818feef1-2fa8-4728-ac7e-79509eabcb30"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"cf", ",", "\"\<TreeNumber\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.73469098552076*^9, 3.734691008224483*^9}, 
   3.9325091618088303`*^9},
 CellLabel->"In[47]:=",
 CellID->593320348,ExpressionUUID->"2ee98623-5b06-42be-b607-6bc3eee266f2"],

Cell[BoxData["400"], "Output",
 CellChangeTimes->{
  3.932506609227868*^9, {3.93250916401917*^9, 3.932509172281148*^9}},
 CellLabel->"Out[47]=",
 CellID->1796764459,ExpressionUUID->"0af48ad6-a492-44d3-b668-8e1c8fdb551e"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classifier ensemble training", "Subsubsection",
 CellChangeTimes->{{3.733922043738882*^9, 3.733922054201681*^9}, {
  3.734691725676712*^9, 3.734691732255945*^9}},
 CellID->507350890,ExpressionUUID->"3a2d8325-6112-4b4b-9867-a0e5822443c5"],

Cell[CellGroupData[{

Cell[TextData[{
 "With the following pipeline we take the Titanic data, split it into 75/25 % \
parts, train a classifier ensemble of three Logistic Regression classifiers \
and two Nearest Neighbors classifiers using random sampling of ",
 Cell[BoxData[
  FormBox["90", TraditionalForm]],ExpressionUUID->
  "8d9db137-938e-46a0-88c6-1c8caf151c15"],
 "% of the training data, and finally take that classifier ensemble from the \
monad."
}], "Text",
 CellChangeTimes->{{3.734689866394849*^9, 3.73468988008465*^9}, {
  3.734690006121298*^9, 3.7346901238867893`*^9}, {3.734690559641461*^9, 
  3.7346906979372873`*^9}, {3.735331304211732*^9, 3.735331312851694*^9}},
 CellID->1536329640,ExpressionUUID->"d2ca8962-7bfe-4a66-9f62-b0f2c1f08757"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ensemble", "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClConUnit", "[", "dsTitanic", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConSplitData", "[", "0.75", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConMakeClassifier", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<LogisticRegression\>\"", ",", "0.9", ",", "3"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"\"\<NearestNeighbors\>\"", ",", "0.9", ",", "2"}], "}"}]}], 
      "}"}], "]"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    "ClConTakeClassifier"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.73395456414038*^9, 3.7339545745637197`*^9}, {
  3.733955225906279*^9, 3.733955269655431*^9}, {3.733955331129032*^9, 
  3.733955342534296*^9}, {3.733955384374886*^9, 3.733955403060371*^9}},
 CellLabel->"In[48]:=",
 CellID->1896371599,ExpressionUUID->"76d30e94-30f3-4e92-84fc-3bb74b0adcc3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
The classifier ensemble is simply an association with keys that are \
automatically assigned names and corresponding values that are classifiers.\
\>", "Text",
 CellChangeTimes->{{3.734690765033105*^9, 3.734690834807434*^9}, {
  3.735331354906321*^9, 3.735331370812298*^9}},
 CellID->1512659266,ExpressionUUID->"eb51c456-19d8-456e-b4c1-0fde455e9154"],

Cell[CellGroupData[{

Cell[BoxData["ensemble"], "Input",
 CellLabel->"In[49]:=",
 CellID->1352870476,ExpressionUUID->"9cdda323-8e55-4e04-8606-d346ef3c8fa1"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"LogisticRegression[1,0.9]\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["703", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[<|
      "ExampleNumber" -> 703, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f2(f1f3))" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 703, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.559862731152208`}, 
                    "StandardDeviation" -> {14.740610232517628`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{0.9938571377602139, 
                    0.07596044808007153, -0.08048602394546574}, \
{-0.11058461794917349`, 0.7102865575383436, -0.6951719560320054}, {
                    0.0043625676052825735`, 0.6998021266813955, 
                    0.7143234221947964}}, 
                    "Precisions" -> {0.9888334481029248, 10.870475092311231`, 
                    16.06582680536087}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00023790643107985958`, 0.0659983556228947, 
                    0.061557851220761926`}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4130431088627503879|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00023790643107983805`, 0.06599835562289469, 
                    0.06155785122076185}, 
                    "StandardDeviation" -> {0.999920177110341, 
                    0.29809069284654877`, 0.2771830572003526}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00023790643107983805`, 0.06599835562289469, 
                    0.06155785122076185}, 
                    "StandardDeviation" -> {0.999920177110341, 
                    0.29809069284654877`, 0.2771830572003526}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {20.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.045421, "MaxTrainingMemory" -> 313592,
                     "DataMemory" -> 78752, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 12, 23, 39, 32.3424`8.262347224452547}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.184822771233954, -4.184822771233954, \
-2.7606548705695904`, -2.291126946931899, -2.175194894083311, \
-1.8971788527914066`, -1.8877551330137619`, -1.8740347159524937`, \
-1.8685115483308818`, -1.7409335377419557`, -1.6324095688354432`}, 
                    "LeftBoundary" -> -2.7606548705695904`, "LeftScale" -> 
                    0.7120839503321816, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[6.69378685184541, 0.7205024500535722], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 616651398117295976|>], 
              MachineLearning`MLProcessor[
              "Threads", <|
               "Input" -> <|
                 "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {29.559862731152208`}, 
                "StandardDeviation" -> {14.740610232517628`}, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                  "female" -> 1, "male" -> 2|>}, 
                "Output" -> <|
                 "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>,
                 "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 0.}, {-0.722159743309021, 
                   0.4213116466999054, -0.7273886203765869}, \
{-1.041688323020935, -0.3814893066883087, 0.39698874950408936`}, {
                   1.2774958610534668`, -0.9317017197608948, 
                   0.5576431155204773}}], 
                  RawArray["Real32",{{0., 
                   0.}, {-0.5635325908660889, -0.1972825676202774}, {
                   0.23993441462516785`, 1.1908897161483765`}}]}, 
                "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
              MachineLearning`MLProcessor[
              "MergeVectors", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|
                   "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                  Span[1, 1], 
                  Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                7619735631186802745|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "died" -> 0.573049645390071, "survived" -> 0.4269503546099291|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "LogProbabilitiesFunction" -> 
         LinearLayer[<|
           "Type" -> "Linear", 
            "Arrays" -> <|
             "Weights" -> 
              RawArray["Real32",{{0.6345114707946777, 
                0.04000334441661835, -0.014364148490130901`, 
                1.6390726566314697`, -2.492424488067627, 3.29396390914917}}], 
              "Biases" -> RawArray["Real32",{-2.301715850830078}]|>, 
            "Parameters" -> <|
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 6,
               "$InputDimensions" -> {6}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "14.1.1", "Unstable" -> False|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|
             "Weight" -> {0.3333333333333333, 0.9444444444444444, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`}, "Type" -> "NumericalVector"|>, "Key" -> 
            "(f2(f1f3))", "Invertibility" -> "Perfect", "StructurePreserving" -> 
            False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "LogisticRegression", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> 1.*^-6, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
           MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.106613`5.479355157699052, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.4483740877522894, 0.029736600462586835`], "Accuracy" -> 
            Around[0.8184812808130252, 0.022909450176412327`], 
            "EvaluationTime" -> 2.7495634179341004`*^-6, "TestSize" -> 553, 
            "ModelMemory" -> 8968, "ModelUtility" -> 0.09580010087123747, 
            "Round" -> 3, "Iteration" -> 25, 
            "Time" -> {
             0.508843`6.158128797932017, 0.530047`6.175859374296101}, 
            "TrainingSize" -> 150, "TrainingTime" -> 0.015848931924611134`, 
            "TrainingMemory" -> 98664, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.4483740877522894, 0.021026951836530177`]}, 
            "AccuracyHistory" -> {
              Around[0.8184812808130252, 0.016199427572996503`]}, 
            "IterationHistory" -> {25}, 
            "TimeHistory" -> {{
              0.508843`6.158128797932017, 0.530047`6.175859374296101}}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 1.*^-6, "OptimizationMethod" -> Automatic,
               MaxIterations -> 30}, "FinalTrainingSize" -> 703|>, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
         "Configurations" -> 
         Dataset[<|<|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6036422261001566, 0.013067848603070331`], 
                 "Accuracy" -> 
                 Around[0.7647718144072654, 0.026415879828774583`], 
                 "EvaluationTime" -> 2.6419646772413395`*^-6, "TestSize" -> 
                 500, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.192697006983941, "Round" -> 1, 
                 "Iteration" -> 1, 
                 "Time" -> {
                  0.122439`5.539464767408403, 0.134798`5.581228442109166}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.007943282347242814, 
                 "TrainingMemory" -> 73696, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6036422261001566, 0.009240364362750183]}, 
                 "AccuracyHistory" -> {
                   Around[0.7647718144072654, 0.018678847757935442`]}, 
                 "IterationHistory" -> {1}, 
                 "TimeHistory" -> {{
                   0.122439`5.539464767408403, 
                    0.134798`5.581228442109166}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5618256109841274, 0.024942300807241906`], 
                 "Accuracy" -> 
                 Around[0.7725285128538868, 0.023865765010497246`], 
                 "EvaluationTime" -> 2.62028496961938*^-6, "TestSize" -> 600, 
                 "ModelMemory" -> 8968, "ModelUtility" -> -0.1254263377399596,
                  "Round" -> 2, "Iteration" -> 8, 
                 "Time" -> {
                  0.226456`5.806528825392279, 0.242217`5.835749614330664}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 79352, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5618256109841274, 0.017636870039195448`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7725285128538868, 0.016875644277127236`]}, 
                 "IterationHistory" -> {8}, 
                 "TimeHistory" -> {{
                   0.226456`5.806528825392279, 
                    0.242217`5.835749614330664}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.49299659665407897`, 0.02528533285179251], 
                 "Accuracy" -> 
                 Around[0.7991573893182672, 0.023797049451459086`], 
                 "EvaluationTime" -> 2.7495634179341004`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, "ModelUtility" -> 
                 0.0038971665331678507`, "Round" -> 3, "Iteration" -> 27, 
                 "Time" -> {
                  0.552018`6.193498232770862, 0.569664`6.207163768516367}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 98840, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.49299659665407897`, 0.017879430324061467`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7991573893182672, 0.01682705503935833]}, 
                 "IterationHistory" -> {27}, 
                 "TimeHistory" -> {{
                   0.552018`6.193498232770862, 
                    0.569664`6.207163768516367}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4744045659384429, 0.036372758629697376`], 
                 "Accuracy" -> 
                 Around[0.8126243810102816, 0.02594687878512057], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., "ModelUtility" -> 
                 0.03732683341762566, "Round" -> 4, "Iteration" -> 51, 
                 "Time" -> {
                  1.111343`6.497393111858338, 1.132227`6.505478500705207}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.018926700343419374`, "TrainingMemory" -> 196424., 
                 "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[0.48744655568168244`, 0.045879788522023006`], 
                   Around[0.42112842907408027`, 0.034664853666266864`], 
                   Around[0.5146387130595661, 0.04449580316359796]}, 
                 "AccuracyHistory" -> {
                   Around[0.8237611819200443, 0.031840116461142876`], 
                   Around[0.8369197447550687, 0.030272478406317145`], 
                   Around[0.7771922163557315, 0.03489258079278834]}, 
                 "IterationHistory" -> {33, 41, 51}, 
                 "TimeHistory" -> {{
                   0.795831`6.3523658457060925, 0.816601`6.363554900915204}, {
                   0.930412`6.420220296570808, 0.948966`6.428795646095129}, {
                   1.111343`6.497393111858338, 
                    1.132227`6.505478500705207}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.4744045659384429, 0.036372758629697376`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196424., 
                "TrainingTime" -> 0.03161849647789018|>, "Index" -> 1|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.00001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[8.01888730796452, 0.9114554843818183], "Accuracy" -> 
                 Around[0.7027539261655832, 0.024373943355116442`], 
                 "EvaluationTime" -> 2.7171205004150585`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -2.7974281355711432`, "Round" -> 1, 
                 "Iteration" -> 6, 
                 "Time" -> {
                  0.197412`5.746918541907526, 0.216572`5.78714730067197}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77168, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[8.01888730796452, 0.6444963537560531]}, 
                 "AccuracyHistory" -> {
                   Around[0.7027539261655832, 0.017234980630659626`]}, 
                 "IterationHistory" -> {6}, 
                 "TimeHistory" -> {{
                   0.197412`5.746918541907526, 
                    0.216572`5.78714730067197}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5597969713491695, 0.051305534943970686`], 
                 "Accuracy" -> Around[0.7745586087626426, 0.0224863847733029],
                  "EvaluationTime" -> 2.7093010771509443`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.1311332521875126, "Round" -> 2, 
                 "Iteration" -> 23, 
                 "Time" -> {
                  0.467003`6.120864663953438, 0.486443`6.138576951695906}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80416, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5597969713491695, 0.036278491671285044`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7745586087626426, 0.015900275157572405`]}, 
                 "IterationHistory" -> {23}, 
                 "TimeHistory" -> {{
                   0.467003`6.120864663953438, 
                    0.486443`6.138576951695906}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.46915965369052026`, 0.03167998884078002], 
                 "Accuracy" -> 
                 Around[0.8134851196270578, 0.023279285522160534`], 
                 "EvaluationTime" -> 2.0521389119992617`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, "ModelUtility" -> 
                 0.05024725918230377, "Round" -> 3, "Iteration" -> 35, 
                 "Time" -> {
                  0.829175`6.370191192940802, 0.848974`6.380439383587475}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98840, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.46915965369052026`, 0.022401134937229707`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8134851196270578, 0.01646094065389753]}, 
                 "IterationHistory" -> {35}, 
                 "TimeHistory" -> {{
                   0.829175`6.370191192940802, 
                    0.848974`6.380439383587475}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4465660364155868, 0.04438278373609358], "Accuracy" -> 
                 Around[0.8284265264922859, 0.022504972067116446`], 
                 "EvaluationTime" -> 3.440826116434226*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., "ModelUtility" -> 
                 0.09333531616044444, "Round" -> 4, "Iteration" -> 49, 
                 "Time" -> {
                  1.076252`6.483458965008239, 1.096822`6.4916811464214685}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 196389.3333333333,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.47845416283911946`, 0.052195249157573495`], 
                   Around[0.4146779099920541, 0.038284110958532985`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8237611819200443, 0.031840116461142876`], 
                   Around[0.8330918710645274, 0.030475601885106694`]}, 
                 "IterationHistory" -> {36, 49}, 
                 "TimeHistory" -> {{
                   0.85005`6.380989465193151, 0.87039`6.391258886224885}, {
                   1.076252`6.483458965008239, 
                    1.096822`6.4916811464214685}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.440826116434226*^-6, "MeanCrossEntropy" -> 
                Around[0.4465660364155868, 0.04438278373609358], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196389.3333333333,
                 "TrainingTime" -> 0.04080746230580547|>, "Index" -> 2|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6910956383031768, 0.0018731908286190957`], 
                 "Accuracy" -> 
                 Around[0.7760395946439232, 0.022082196446554236`], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3242151705926454, "Round" -> 1, 
                 "Iteration" -> 5, 
                 "Time" -> {
                  0.186143`5.721391702497692, 0.196272`5.744403341425896}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 70392, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6910956383031768, 0.0013245459373730105`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7760395946439232, 0.015614470850851983`]}, 
                 "IterationHistory" -> {5}, 
                 "TimeHistory" -> {{
                   0.186143`5.721391702497692, 
                    0.196272`5.744403341425896}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6861445123864598, 0.0021215992286628123`], 
                 "Accuracy" -> 
                 Around[0.7377174480061313, 0.02353600437558022], 
                 "EvaluationTime" -> 2.6126604785389387`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3171014902648054, "Round" -> 2, 
                 "Iteration" -> 9, 
                 "Time" -> {
                  0.243248`5.8375942716551315, 0.255306`5.858606014866116}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.007943282347242814,
                  "TrainingMemory" -> 73856, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6861445123864598, 0.0015001972015476232`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7377174480061313, 0.016642468296009027`]}, 
                 "IterationHistory" -> {9}, 
                 "TimeHistory" -> {{
                   0.243248`5.8375942716551315, 
                    0.255306`5.858606014866116}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6687603419114858, 0.004187217786009912], "Accuracy" -> 
                 Around[0.6987927934762648, 0.027347337123330272`], 
                 "EvaluationTime" -> 2.1697503457531132`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.2920722161137028, "Round" -> 3, 
                 "Iteration" -> 34, 
                 "Time" -> {
                  0.817674`6.364125181983004, 0.828049`6.369601030522355}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.007943282347242814, "TrainingMemory" -> 93384, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6687603419114858, 0.0029608100907925305`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6987927934762648, 0.019337487527301446`]}, 
                 "IterationHistory" -> {34}, 
                 "TimeHistory" -> {{
                   0.817674`6.364125181983004, 
                    0.828049`6.369601030522355}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.628587033219991, 0.015447055391841094`], "Accuracy" -> 
                 Around[0.7576930601081855, 0.060373051671514924`], 
                 "EvaluationTime" -> 3.440826116434226*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.23377231328899384`, "Round" -> 4, 
                 "Iteration" -> 50, 
                 "Time" -> {
                  1.098302`6.492266767944998, 1.109938`6.496843713715152}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.009999999999999998, "TrainingMemory" -> 
                 196346.66666666666`, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6417780114585575, 0.01228769512745574], 
                   Around[0.6153960549814244, 0.010627175027668427`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7026309634475139, 0.038192369471219866`], 
                   Around[0.8127551567688571, 0.032520184585547]}, 
                 "IterationHistory" -> {38, 50}, 
                 "TimeHistory" -> {{
                   0.880652`6.396349319232591, 0.892231`6.402022301949938}, {
                   1.098302`6.492266767944998, 
                    1.109938`6.496843713715152}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.440826116434226*^-6, "MeanCrossEntropy" -> 
                Around[0.628587033219991, 0.015447055391841094`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196346.66666666666`, "TrainingTime" -> 
                0.018818470241954953`|>, "Index" -> 3|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6930151868648043, 0.0018610029860509948`], 
                 "Accuracy" -> 
                 Around[0.7760395946439232, 0.022082196446554236`], 
                 "EvaluationTime" -> 2.623539028665591*^-6, "TestSize" -> 695,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32698384831670446`, "Round" -> 1, 
                 "Iteration" -> 10, 
                 "Time" -> {
                  0.256352`5.860381703552382, 0.265585`5.875748536326032}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 68952, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6930151868648043, 0.0013159278312450723`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7760395946439232, 0.015614470850851983`]}, 
                 "IterationHistory" -> {10}, 
                 "TimeHistory" -> {{
                   0.256352`5.860381703552382, 
                    0.265585`5.875748536326032}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.692960577456017, 0.001912638984122462], "Accuracy" -> 
                 Around[0.7306573796530978, 0.02375012547892284], 
                 "EvaluationTime" -> 2.6126604785389387`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3269199826745145, "Round" -> 2, 
                 "Iteration" -> 14, 
                 "Time" -> {
                  0.321247`5.958384074148076, 0.330615`5.970867547115695}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.005011872336272719,
                  "TrainingMemory" -> 71744, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.692960577456017, 0.0013524399956347422`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7306573796530978, 0.01679387478017774]}, 
                 "IterationHistory" -> {14}, 
                 "TimeHistory" -> {{
                   0.321247`5.958384074148076, 
                    0.330615`5.970867547115695}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6927351131354915, 0.0021273287261470543`], 
                 "Accuracy" -> 
                 Around[0.7080976865840071, 0.02681000703425702], 
                 "EvaluationTime" -> 2.725374066737338*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3266566926492158, "Round" -> 3, 
                 "Iteration" -> 22, 
                 "Time" -> {
                  0.456153`6.110655528947373, 0.465847`6.119788296524445}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 90832, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6927351131354915, 0.0015042485680715218`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7080976865840071, 0.01895753777758218]}, 
                 "IterationHistory" -> {22}, 
                 "TimeHistory" -> {{
                   0.456153`6.110655528947373, 
                    0.465847`6.119788296524445}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6920235587028527, 0.0022706757400207454`], 
                 "Accuracy" -> 
                 Around[0.7538450046585979, 0.06393480390017242], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.32567103171281786`, "Round" -> 4, 
                 "Iteration" -> 47, 
                 "Time" -> {
                  1.044656`6.470518296481834, 1.053136`6.474029452274683}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 196424., "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6921051296364416, 0.003209782620538195], 
                   Around[0.691941987769264, 0.0032085131678644806`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6949348525483388, 0.038503989802951916`], 
                   Around[0.8127551567688571, 0.032520184585547]}, 
                 "IterationHistory" -> {37, 47}, 
                 "TimeHistory" -> {{
                   0.871493`6.391808896618886, 0.879597`6.395828732959549}, {
                   1.044656`6.470518296481834, 
                    1.053136`6.474029452274683}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6920235587028527, 0.0022706757400207454`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196424., 
                "TrainingTime" -> 0.012904452641781184`|>, "Index" -> 4|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6930328487330553, 0.001861004923728385], "Accuracy" -> 
                 Around[0.7760395946439232, 0.022082196446554236`], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32700932032019236`, "Round" -> 1, 
                 "Iteration" -> 3, 
                 "Time" -> {
                  0.155907`5.6444106083199985, 0.164749`5.668367780672191}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.003981071705534969, 
                 "TrainingMemory" -> 68456, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6930328487330553, 0.0013159292013898947`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7760395946439232, 0.015614470850851983`]}, 
                 "IterationHistory" -> {3}, 
                 "TimeHistory" -> {{
                   0.155907`5.6444106083199985, 
                    0.164749`5.668367780672191}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6930303966921744, 0.0024439425202963812`], 
                 "Accuracy" -> 
                 Around[0.6617330196658968, 0.033329567359487014`], 
                 "EvaluationTime" -> 2.3827304023744043`*^-6, "TestSize" -> 
                 400, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32717390808024527`, "Round" -> 2, 
                 "Iteration" -> 7, 
                 "Time" -> {
                  0.217599`5.789201888678917, 0.225447`5.804589454065092}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.005011872336272719,
                  "TrainingMemory" -> 71808, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6930303966921744, 0.0017281283289317126`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6617330196658968, 0.02356756309390708]}, 
                 "IterationHistory" -> {7}, 
                 "TimeHistory" -> {{
                   0.217599`5.789201888678917, 
                    0.225447`5.804589454065092}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6930121520073371, 0.0028220232749924415`], 
                 "Accuracy" -> 
                 Around[0.6457831890657926, 0.03891822084574015], 
                 "EvaluationTime" -> 2.556475468882279*^-6, "TestSize" -> 300,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32725662996440075`, "Round" -> 3, 
                 "Iteration" -> 16, 
                 "Time" -> {
                  0.345876`5.990465421283159, 0.353698`6.000177597581523}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 90400, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6930121520073371, 0.0019954717944134243`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6457831890657926, 0.02751933787173851]}, 
                 "IterationHistory" -> {16}, 
                 "TimeHistory" -> {{
                   0.345876`5.990465421283159, 
                    0.353698`6.000177597581523}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6929130059139637, 0.00226504395234031], "Accuracy" -> 
                 Around[0.7538450046585979, 0.06393480390017242], 
                 "EvaluationTime" -> 3.870473060608764*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.32695302539900883`, "Round" -> 4, 
                 "Iteration" -> 42, 
                 "Time" -> {
                  0.950439`6.4294692421950534, 0.958797`6.433271659986624}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 196426.66666666666`, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6929211804055642, 0.003203243769723982], 
                   Around[0.692904831422363, 0.003203226262258014]}, 
                 "AccuracyHistory" -> {
                   Around[0.6949348525483388, 0.038503989802951916`], 
                   Around[0.8127551567688571, 0.032520184585547]}, 
                 "IterationHistory" -> {31, 42}, 
                 "TimeHistory" -> {{
                   0.762914`6.33402057806884, 0.771633`6.33895578609592}, {
                   0.950439`6.4294692421950534, 
                    0.958797`6.433271659986624}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.870473060608764*^-6, "MeanCrossEntropy" -> 
                Around[0.6929130059139637, 0.00226504395234031], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196426.66666666666`, "TrainingTime" -> 
                0.011873652011043432`|>, "Index" -> 5|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5168117138555244, 0.029400358760576176`], 
                 "Accuracy" -> 
                 Around[0.7864145140576114, 0.02183479630448592], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.044386974834930704`, "Round" -> 1, 
                 "Iteration" -> 11, 
                 "Time" -> {
                  0.266599`5.8774035095592, 0.282073`5.901906511015405}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 77336, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5168117138555244, 0.020789193048920733`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7864145140576114, 0.01543953253272896]}, 
                 "IterationHistory" -> {11}, 
                 "TimeHistory" -> {{
                   0.266599`5.8774035095592, 0.282073`5.901906511015405}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5615374973224991, 0.022219224312069148`], 
                 "Accuracy" -> 
                 Around[0.7338109493128997, 0.042424981667141745`], 
                 "EvaluationTime" -> 2.7737281428922815`*^-6, "TestSize" -> 
                 673., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.12395611811521146`, "Round" -> 2, 
                 "Iteration" -> 24, 
                 "Time" -> {
                  0.487501`6.139520504390093, 0.507454`6.156941673674115}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.013675813386831489`, "TrainingMemory" -> 80309.33333333333,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5440743080655865, 0.02963126171844813], 
                   Around[0.5790006865794118, 0.015505066799794728`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7745586087626426, 0.015900275157572405`], 
                   Around[0.6930632898631567, 0.017642749724941526`]}, 
                 "IterationHistory" -> {12, 24}, 
                 "TimeHistory" -> {{
                   0.283157`5.903572295901381, 0.300208`5.928967254719557}, {
                   0.487501`6.139520504390093, 
                    0.507454`6.156941673674115}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4546821985984203, 0.02903727440591394], "Accuracy" -> 
                 Around[0.813096841611871, 0.023200993049812355`], 
                 "EvaluationTime" -> 2.842985500491189*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, "ModelUtility" -> 
                 0.08231460770870802, "Round" -> 3, "Iteration" -> 17, 
                 "Time" -> {
                  0.354754`6.001472294505357, 0.374864`6.025418728523934}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98728, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4546821985984203, 0.020532453639596323`]}, 
                 "AccuracyHistory" -> {
                   Around[0.813096841611871, 0.016405579515784273`]}, 
                 "IterationHistory" -> {17}, 
                 "TimeHistory" -> {{
                   0.354754`6.001472294505357, 
                    0.374864`6.025418728523934}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4471999024565124, 0.04416405635982304], "Accuracy" -> 
                 Around[0.8284265264922859, 0.022504972067116446`], 
                 "EvaluationTime" -> 3.440826116434226*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., "ModelUtility" -> 
                 0.09204044696615299, "Round" -> 4, "Iteration" -> 46, 
                 "Time" -> {
                  1.022734`6.461307687468327, 1.043227`6.469923812105511}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 
                 196410.66666666666`, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.4792013160800547, 0.051319577399600164`], 
                   Around[0.4151984888329701, 0.03780227441002232]}, 
                 "AccuracyHistory" -> {
                   Around[0.8237611819200443, 0.031840116461142876`], 
                   Around[0.8330918710645274, 0.030475601885106694`]}, 
                 "IterationHistory" -> {28, 46}, 
                 "TimeHistory" -> {{
                   0.57072`6.207968085490252, 0.591821`6.22373536496998}, {
                   1.022734`6.461307687468327, 
                    1.043227`6.469923812105511}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.440826116434226*^-6, "MeanCrossEntropy" -> 
                Around[0.4471999024565124, 0.04416405635982304], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196410.66666666666`, "TrainingTime" -> 
                0.034958530381194335`|>, "Index" -> 6|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.0001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[6.733395418917255, 0.7609013151637469], "Accuracy" -> 
                 Around[0.7064374127404852, 0.024264547252178838`], 
                 "EvaluationTime" -> 2.549204623407936*^-6, "TestSize" -> 695,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -2.6225790261718487`, "Round" -> 1, 
                 "Iteration" -> 13, 
                 "Time" -> {
                  0.301255`5.93047925722625, 0.320191`5.956954114004709}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77456, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[6.733395418917255, 0.5380384797660478]}, 
                 "AccuracyHistory" -> {
                   Around[0.7064374127404852, 0.017157625904437063`]}, 
                 "IterationHistory" -> {13}, 
                 "TimeHistory" -> {{
                   0.301255`5.93047925722625, 
                    0.320191`5.956954114004709}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5597939146383513, 0.051304112677363414`], 
                 "Accuracy" -> Around[0.7745586087626426, 0.0224863847733029],
                  "EvaluationTime" -> 2.535896122440766*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.1311273909026558, "Round" -> 2, 
                 "Iteration" -> 20, 
                 "Time" -> {
                  0.41604`6.070680081199997, 0.435292`6.090325679059572}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80368, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5597939146383513, 0.03627748597692239]}, 
                 "AccuracyHistory" -> {
                   Around[0.7745586087626426, 0.015900275157572405`]}, 
                 "IterationHistory" -> {20}, 
                 "TimeHistory" -> {{
                   0.41604`6.070680081199997, 
                    0.435292`6.090325679059572}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4484355339401537, 0.02973981211011428], "Accuracy" -> 
                 Around[0.8184812808130252, 0.022909450176412327`], 
                 "EvaluationTime" -> 2.842985500491189*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, "ModelUtility" -> 
                 0.09566344801589244, "Round" -> 3, "Iteration" -> 30, 
                 "Time" -> {
                  0.615316`6.2406432016465185, 0.638793`6.256905141917287}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 190496, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.4484355339401537, 0.021029222814275612`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8184812808130252, 0.016199427572996503`]}, 
                 "IterationHistory" -> {30}, 
                 "TimeHistory" -> {{
                   0.615316`6.2406432016465185, 
                    0.638793`6.256905141917287}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.44656605781258774`, 0.04438032641180995], 
                 "Accuracy" -> 
                 Around[0.8284265264922859, 0.022504972067116446`], 
                 "EvaluationTime" -> 3.6262063388401123`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., "ModelUtility" -> 
                 0.09333634808779456, "Round" -> 4, "Iteration" -> 48, 
                 "Time" -> {
                  1.054547`6.4746109340302525, 1.074826`6.482883156951147}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 196368., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.4784537433885073, 0.05219423806498937], 
                   Around[0.41467837223666815`, 0.03827864016369007]}, 
                 "AccuracyHistory" -> {
                   Around[0.8237611819200443, 0.031840116461142876`], 
                   Around[0.8330918710645274, 0.030475601885106694`]}, 
                 "IterationHistory" -> {32, 48}, 
                 "TimeHistory" -> {{
                   0.772742`6.339579511115056, 0.794744`6.351772251345158}, {
                   1.054547`6.4746109340302525, 
                    1.074826`6.482883156951147}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.6262063388401123`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.44656605781258774`, 0.04438032641180995], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196368., 
                "TrainingTime" -> 0.04080746230580547|>, "Index" -> 7|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.084558932055911, 0.4582588515429773], "Accuracy" -> 
                 Around[0.7033410784323495, 0.024347994638848635`], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -2.122554588385896, "Round" -> 1, 
                 "Iteration" -> 4, 
                 "Time" -> {
                  0.165769`5.671048311099183, 0.18512`5.71899833510365}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77336, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[4.084558932055911, 0.3240379414647986]}, 
                 "AccuracyHistory" -> {
                   Around[0.7033410784323495, 0.017216632117423573`]}, 
                 "IterationHistory" -> {4}, 
                 "TimeHistory" -> {{
                   0.165769`5.671048311099183, 0.18512`5.71899833510365}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5597642000702481, 0.051289977275160784`], 
                 "Accuracy" -> Around[0.7745586087626426, 0.0224863847733029],
                  "EvaluationTime" -> 2.6325367210527713`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.13107030424029054`, "Round" -> 2, 
                 "Iteration" -> 18, 
                 "Time" -> {
                  0.375899`6.026616163862463, 0.399356`6.052905207235833}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.01995262314968879, 
                 "TrainingMemory" -> 80176, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5597642000702481, 0.03626749073817011]}, 
                 "AccuracyHistory" -> {
                   Around[0.7745586087626426, 0.015900275157572405`]}, 
                 "IterationHistory" -> {18}, 
                 "TimeHistory" -> {{
                   0.375899`6.026616163862463, 
                    0.399356`6.052905207235833}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4717540672500382, 0.04089319032969379], "Accuracy" -> 
                 Around[0.8120458957531786, 0.02492406769870733], 
                 "EvaluationTime" -> 3.610394623459722*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., "ModelUtility" -> 
                 0.040959097555358426`, "Round" -> 4, "Iteration" -> 53, 
                 "Time" -> {
                  1.155922`6.514473522984915, 1.176636`6.522187125293595}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 196468., 
                 "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[0.4784543913937672, 0.05219341060922387], 
                   Around[0.4146790582692833, 0.038277885177502996`], 
                   Around[0.5221287520870641, 0.051217373000437334`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8237611819200443, 0.031840116461142876`], 
                   Around[0.8330918710645274, 0.030475601885106694`], 
                   Around[0.7792846342749643, 0.034706746729276365`]}, 
                 "IterationHistory" -> {40, 44, 53}, 
                 "TimeHistory" -> {{
                   0.908965`6.410092154386247, 0.92933`6.419714950471794}, {
                   0.982531`6.443891255257482, 1.003399`6.453018657364606}, {
                   1.155922`6.514473522984915, 
                    1.176636`6.522187125293595}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.610394623459722*^-6, "MeanCrossEntropy" -> 
                Around[0.4717540672500382, 0.04089319032969379], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196468., 
                "TrainingTime" -> 0.04080746230580547|>, "Index" -> 8|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6428033135534362, 0.007171351659529813], "Accuracy" -> 
                 Around[0.7515469358311743, 0.023188060918759686`], 
                 "EvaluationTime" -> 2.7093010771509443`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.25346258187560855`, "Round" -> 2, 
                 "Iteration" -> 15, 
                 "Time" -> {
                  0.331747`5.972351997709655, 0.344794`5.989104693254324}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.007943282347242814,
                  "TrainingMemory" -> 75344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6428033135534362, 0.005070911388726932]}, 
                 "AccuracyHistory" -> {
                   Around[0.7515469358311743, 0.01639643511822174]}, 
                 "IterationHistory" -> {15}, 
                 "TimeHistory" -> {{
                   0.331747`5.972351997709655, 
                    0.344794`5.989104693254324}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5881986285501711, 0.015247242917193028`], 
                 "Accuracy" -> 
                 Around[0.7729151903029318, 0.024820579107416123`], 
                 "EvaluationTime" -> 2.7495634179341004`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.16763069236435235`, "Round" -> 3, 
                 "Iteration" -> 19, 
                 "Time" -> {
                  0.400366`6.054002182584601, 0.414983`6.06957529946731}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 97352, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5881986285501711, 0.010781428861145746`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7729151903029318, 0.017550799799831086`]}, 
                 "IterationHistory" -> {19}, 
                 "TimeHistory" -> {{
                   0.400366`6.054002182584601, 
                    0.414983`6.06957529946731}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5111271760396258, 0.040044382107822726`], 
                 "Accuracy" -> 
                 Around[0.805472551602398, 0.034924525102843995`], 
                 "EvaluationTime" -> 3.3186927555499*^-6, "TestSize" -> 141., 
                 "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.03756099762073284, "Round" -> 4, 
                 "Iteration" -> 45, 
                 "Time" -> {
                  1.004837`6.45364061172825, 1.02129`6.460694073013514}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.013675813386831489`, "TrainingMemory" -> 196368., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5463963052228897, 0.030588602419654384`], 
                   Around[0.47585804685636174`, 0.024169903305799996`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7793311175167613, 0.034706140499331045`], 
                   Around[0.8316139856880345, 0.031094721151787682`]}, 
                 "IterationHistory" -> {39, 45}, 
                 "TimeHistory" -> {{
                   0.893336`6.4025598292046055, 0.907874`6.409570572301423}, {
                   1.004837`6.45364061172825, 1.02129`6.460694073013514}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.3186927555499*^-6, "MeanCrossEntropy" -> 
                Around[0.5111271760396258, 0.040044382107822726`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196368., 
                "TrainingTime" -> 0.0250502161745427|>, "Index" -> 9|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[7.849585539289693, 0.8576154621201534], "Accuracy" -> 
                 Around[0.7055503366161163, 0.02435526241065563], 
                 "EvaluationTime" -> 2.623539028665591*^-6, "TestSize" -> 695,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -2.7752269293307545`, "Round" -> 1, 
                 "Iteration" -> 2, 
                 "Time" -> {
                  0.135804`5.5844575554312055, 0.154888`5.641562765447172}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77168, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[7.849585539289693, 0.6064257089155951]}, 
                 "AccuracyHistory" -> {
                   Around[0.7055503366161163, 0.017221771208152416`]}, 
                 "IterationHistory" -> {2}, 
                 "TimeHistory" -> {{
                   0.135804`5.5844575554312055, 
                    0.154888`5.641562765447172}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5991054310307418, 0.04421292609252299], "Accuracy" -> 
                 Around[0.7259670803429219, 0.05002418191099937], 
                 "EvaluationTime" -> 2.644874011409607*^-6, "TestSize" -> 
                 673., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.19548438338493312`, "Round" -> 2, 
                 "Iteration" -> 26, 
                 "Time" -> {
                  0.531133`6.176748279047419, 0.55062`6.192396975583958}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80298.66666666666,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5597645725476706, 0.03627613930302103], 
                   Around[0.6384462895138128, 0.024277716705374517`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7745586087626426, 0.015900275157572405`], 
                   Around[0.6773755519232013, 0.01789532366429379]}, 
                 "IterationHistory" -> {21, 26}, 
                 "TimeHistory" -> {{
                   0.436356`6.0913859454934, 0.455085`6.109637514511953}, {
                   0.531133`6.176748279047419, 
                    0.55062`6.192396975583958}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4483740877522894, 0.029736600462586835`], 
                 "Accuracy" -> 
                 Around[0.8184812808130252, 0.022909450176412327`], 
                 "EvaluationTime" -> 2.7495634179341004`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, "ModelUtility" -> 
                 0.09580010087123747, "Round" -> 3, "Iteration" -> 25, 
                 "Time" -> {
                  0.508843`6.158128797932017, 0.530047`6.175859374296101}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4483740877522894, 0.021026951836530177`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8184812808130252, 0.016199427572996503`]}, 
                 "IterationHistory" -> {25}, 
                 "TimeHistory" -> {{
                   0.508843`6.158128797932017, 
                    0.530047`6.175859374296101}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4717382661634196, 0.040904863362603766`], 
                 "Accuracy" -> 
                 Around[0.8120458957531786, 0.02492406769870733], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., "ModelUtility" -> 
                 0.04098715746340953, "Round" -> 4, "Iteration" -> 52, 
                 "Time" -> {
                  1.13372`6.506050801606605, 1.154506`6.5139411877956155}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 196468., 
                 "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[0.47840776487768794`, 0.05222584430914511], 
                   Around[0.41466660169941616`, 0.03829810351856581], 
                   Around[0.5221404319131546, 0.0512243137551645]}, 
                 "AccuracyHistory" -> {
                   Around[0.8237611819200443, 0.031840116461142876`], 
                   Around[0.8330918710645274, 0.030475601885106694`], 
                   Around[0.7792846342749643, 0.034706746729276365`]}, 
                 "IterationHistory" -> {29, 43, 52}, 
                 "TimeHistory" -> {{
                   0.592884`6.22451472381147, 0.614275`6.23990783409149}, {
                   0.96022`6.433915740952052, 0.981091`6.443254285243856}, {
                   1.13372`6.506050801606605, 
                    1.154506`6.5139411877956155}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.4717382661634196, 0.040904863362603766`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196468., 
                "TrainingTime" -> 0.04080746230580547|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["LogisticRegression"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "Round", "Iteration", "Time", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ExperimentCount", "MeanCrossEntropyHistory", 
                 "AccuracyHistory", "IterationHistory", "TimeHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Real], 2], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                  TypeSystem`Vector[
                   TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], 
         "TrainingSizes" -> {8, 30, 150, 562}, "MaxTrainingSize" -> 703, 
         "PreprocessorEvaluationTime" -> 2.1640625*^-6, "PreprocessorMemory" -> 
         97488, "InputDimension" -> 6, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.682436383825437, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.13719999999999996`, 
             "ElapsedTimes" -> 0.134455, "ExperimentCounts" -> 9|>, <|
            "TrainingSizes" -> 30, "TimeBudgets" -> 0.19599999999999995`, 
             "ElapsedTimes" -> 0.19878500000000002`, "ExperimentCounts" -> 
             12|>, <|"TrainingSizes" -> 150, "TimeBudgets" -> 
             0.27999999999999997`, "ElapsedTimes" -> 0.26978, 
             "ExperimentCounts" -> 9|>, <|
            "TrainingSizes" -> 562, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.407744, "ExperimentCounts" -> 23|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
              7168142382301173801|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {20.}, "ID" -> 
              1978735388468315165|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
              9071588231046195481|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 1.213305, 
         "MaxTrainingMemory" -> 1327136, "DataMemory" -> 171384, 
         "FunctionMemory" -> 349200, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 8, 12, 23, 39, 33.507003`8.277710564700739}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
         "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"LogisticRegression[2,0.9]\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["703", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[<|
      "ExampleNumber" -> 703, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f2(f1f3))" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 703, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.94879089615932}, 
                    "StandardDeviation" -> {14.631114410681011`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{0.9921782732951582, 
                    0.07697933798112533, -0.0982672657858453}, \
{-0.12414999855330888`, 0.6905220009845401, -0.7125771144343048}, {
                    0.013001994472068198`, 0.7192034118942254, 
                    0.6946779113081497}}, 
                    "Precisions" -> {0.9861891279038822, 11.320154298931937`, 
                    16.124078544672113`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00023790643107991422`, 0.08306805690312226, 
                    0.07151517696756135}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4130431088627503879|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00023790643107987427`, 0.08306805690312227, 
                    0.07151517696756134}, 
                    "StandardDeviation" -> {0.9996630182821032, 
                    0.2987333862685946, 0.275306308874959}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00023790643107987427`, 0.08306805690312227, 
                    0.07151517696756134}, 
                    "StandardDeviation" -> {0.9996630182821032, 
                    0.2987333862685946, 0.275306308874959}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.045463, "MaxTrainingMemory" -> 309848,
                     "DataMemory" -> 78752, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 12, 23, 39, 33.556708`8.278354328991554}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-4.2615179044385005`, \
-4.2615179044385005`, -2.8663401254751335`, -2.279260350412081, \
-2.1405990515248847`, -2.0285743202029995`, -1.9221820308712045`, \
-1.8938637532877363`, -1.8516161796991812`, -1.7471847222636772`, \
-1.6207890731044745`}, "LeftBoundary" -> -2.8663401254751335`, "LeftScale" -> 
                    0.6975888894816835, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[6.783578253383962, 0.7435332965045743], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 616651398117295976|>], 
              MachineLearning`MLProcessor[
              "Threads", <|
               "Input" -> <|
                 "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {29.94879089615932}, 
                "StandardDeviation" -> {14.631114410681011`}, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                  "female" -> 1, "male" -> 2|>}, 
                "Output" -> <|
                 "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>,
                 "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 0.}, {-0.722159743309021, 
                   0.4213116466999054, -0.7273886203765869}, \
{-1.041688323020935, -0.3814893066883087, 0.39698874950408936`}, {
                   1.2774958610534668`, -0.9317017197608948, 
                   0.5576431155204773}}], 
                  RawArray["Real32",{{0., 
                   0.}, {-0.5635325908660889, -0.1972825676202774}, {
                   0.23993441462516785`, 1.1908897161483765`}}]}, 
                "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
              MachineLearning`MLProcessor[
              "MergeVectors", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|
                   "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                  Span[1, 1], 
                  Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                7619735631186802745|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "died" -> 0.6170212765957447, "survived" -> 0.3829787234042554|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "LogProbabilitiesFunction" -> 
         LinearLayer[<|
           "Type" -> "Linear", 
            "Arrays" -> <|
             "Weights" -> 
              RawArray["Real32",{{0.49413639307022095`, 
                0.19958414137363434`, -0.4823749363422394, 0.7709355354309082,
                 0.8802823424339294, 1.1021449565887451`}}], "Biases" -> 
              RawArray["Real32",{-0.5396912693977356}]|>, 
            "Parameters" -> <|
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 6,
               "$InputDimensions" -> {6}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "14.1.1", "Unstable" -> False|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|
             "Weight" -> {0.3333333333333333, 0.9444444444444444, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`}, "Type" -> "NumericalVector"|>, "Key" -> 
            "(f2(f1f3))", "Invertibility" -> "Perfect", "StructurePreserving" -> 
            False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "LogisticRegression", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
           MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.1017`5.458865946418717, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.5086682596226959, 0.033359579844374765`], "Accuracy" -> 
            Around[0.7824746091496426, 0.024614095856870483`], 
            "EvaluationTime" -> 2.5385299016231603`*^-6, "TestSize" -> 553, 
            "ModelMemory" -> 8968, "ModelUtility" -> -0.03022222228565241, 
            "Round" -> 3, "Iteration" -> 38, 
            "Time" -> {
             0.842538`6.377134490954061, 0.867999`6.3900642183329115}, 
            "TrainingSize" -> 150, "TrainingTime" -> 0.015848931924611134`, 
            "TrainingMemory" -> 98600, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.5086682596226959, 0.023588785125491465`]}, 
            "AccuracyHistory" -> {
              Around[0.7824746091496426, 0.01740479409316882]}, 
            "IterationHistory" -> {38}, 
            "TimeHistory" -> {{
              0.842538`6.377134490954061, 0.867999`6.3900642183329115}}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 0.1, "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 703|>, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
         "Configurations" -> 
         Dataset[<|<|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6508265292800274, 0.009680773816761796], "Accuracy" -> 
                 Around[0.7082648583380856, 0.02839055655511842], 
                 "EvaluationTime" -> 2.5386398539331997`*^-6, "TestSize" -> 
                 500, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.26660864364236403`, "Round" -> 1, 
                 "Iteration" -> 1, 
                 "Time" -> {
                  0.117585`5.521896916998643, 0.129521`5.563885182335834}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.007943282347242814, 
                 "TrainingMemory" -> 73200, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6508265292800274, 0.006845340812965441]}, 
                 "AccuracyHistory" -> {
                   Around[0.7082648583380856, 0.020075155061784422`]}, 
                 "IterationHistory" -> {1}, 
                 "TimeHistory" -> {{
                   0.117585`5.521896916998643, 
                    0.129521`5.563885182335834}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.641037095043467, 0.05594183848410934], "Accuracy" -> 
                 Around[0.6753086666107386, 0.05214713838905194], 
                 "EvaluationTime" -> 2.484719885041984*^-6, "TestSize" -> 
                 673., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.2657853083960705, "Round" -> 2, 
                 "Iteration" -> 25, 
                 "Time" -> {
                  0.489258`6.141082929159584, 0.503877`6.153869528471997}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.009999999999999998,
                  "TrainingMemory" -> 79421.33333333333, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5857296940683322, 0.010228850148879576`], 
                   Around[0.6963444960186017, 0.014727180015902216`]}, 
                 "AccuracyHistory" -> {
                   Around[0.725925067946529, 0.017092232458484197`], 
                   Around[0.6246922652749483, 0.018461139978241694`]}, 
                 "IterationHistory" -> {9, 25}, 
                 "TimeHistory" -> {{
                   0.228879`5.811150940812269, 0.243452`5.837958340196313}, {
                   0.489258`6.141082929159584, 
                    0.503877`6.153869528471997}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5277444273988857, 0.015130628388369429`], 
                 "Accuracy" -> 
                 Around[0.7856439701344198, 0.012301435182669173`], 
                 "EvaluationTime" -> 2.502074122567966*^-6, "TestSize" -> 
                 553., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.059724828937881336`, "Round" -> 3, 
                 "Iteration" -> 40, 
                 "Time" -> {
                  0.892177`6.401996016591401, 0.91992`6.415295054461931}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 98717.33333333333,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5221393310118814, 0.019252668081655894`], 
                   Around[0.5333495237858901, 0.020563091006101597`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7847134701894928, 0.01735994458648413], 
                   Around[0.7865744700793468, 0.017334115721248242`]}, 
                 "IterationHistory" -> {17, 40}, 
                 "TimeHistory" -> {{
                   0.35081`5.996616958129883, 0.367377`6.016656956881781}, {
                   0.892177`6.401996016591401, 
                    0.91992`6.415295054461931}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5388355422588549, 0.06696602487054938], "Accuracy" -> 
                 Around[0.7579721534112625, 0.050898820573562986`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.09935736280746599, "Round" -> 4, 
                 "Iteration" -> 55, 
                 "Time" -> {
                  1.155132`6.514176608543218, 1.176477`6.522128434680156}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 
                 196426.66666666666`, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5982520260495812, 0.04882479741344887], 
                   Around[0.47941905846812854`, 0.039885685470854734`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7136022047063663, 0.03793206949564554], 
                   Around[0.8023421021161588, 0.03310024772279708]}, 
                 "IterationHistory" -> {29, 55}, 
                 "TimeHistory" -> {{
                   0.558025`6.1981986496357635, 0.578782`6.214060009684799}, {
                   1.155132`6.514176608543218, 
                    1.176477`6.522128434680156}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5388355422588549, 0.06696602487054938], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196426.66666666666`, "TrainingTime" -> 
                0.032901812728437146`|>, "Index" -> 1|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.00001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5954393487418368, 0.018195241260203898`], 
                 "Accuracy" -> 
                 Around[0.7147286727645434, 0.023950526271591024`], 
                 "EvaluationTime" -> 2.4556231516584687`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.18078747380793836`, "Round" -> 1, 
                 "Iteration" -> 6, 
                 "Time" -> {
                  0.190554`5.731563063159892, 0.209029`5.7717515363834515}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77168, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5954393487418368, 0.012865978480415437`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7147286727645434, 0.01693557953962857]}, 
                 "IterationHistory" -> {6}, 
                 "TimeHistory" -> {{
                   0.190554`5.731563063159892, 
                    0.209029`5.7717515363834515}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7457971635033702, 0.20927430962471735`], "Accuracy" -> 
                 Around[0.6491986573544303, 0.08424242820239912], 
                 "EvaluationTime" -> 2.5169334179126526`*^-6, "TestSize" -> 
                 673., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.45445140475969403`, "Round" -> 2, 
                 "Iteration" -> 27, 
                 "Time" -> {
                  0.516371`6.1645068372885925, 0.535803`6.180550134421391}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80426.66666666666,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.537131429919814, 0.01741837668277024], 
                   Around[0.9544628970869264, 0.03966392886209555]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324900279014863, 0.016922580522626192`], 
                   Around[0.5659072868073742, 0.018951865360347535`]}, 
                 "IterationHistory" -> {14, 27}, 
                 "TimeHistory" -> {{
                   0.301237`5.930453307335871, 0.320317`5.957124981832829}, {
                   0.516371`6.1645068372885925, 
                    0.535803`6.180550134421391}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5086664180017904, 0.03347529620460389], "Accuracy" -> 
                 Around[0.7824746091496426, 0.024614095856870483`], 
                 "EvaluationTime" -> 2.631951984180249*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.030263556650897305`, "Round" -> 3, 
                 "Iteration" -> 23, 
                 "Time" -> {
                  0.455592`6.110121082945268, 0.475335`6.128544787061165}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98840, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5086664180017904, 0.023670608948503705`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7824746091496426, 0.01740479409316882]}, 
                 "IterationHistory" -> {23}, 
                 "TimeHistory" -> {{
                   0.455592`6.110121082945268, 
                    0.475335`6.128544787061165}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5975906955059522, 0.07368913849991443], "Accuracy" -> 
                 Around[0.7136022047063663, 0.05364404712962069], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.20266394631740758`, "Round" -> 4, 
                 "Iteration" -> 32, 
                 "Time" -> {
                  0.603259`6.232048803349371, 0.627171`6.248930962127788}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196400, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5975906955059522, 0.05210608953308418]}, 
                 "AccuracyHistory" -> {
                   Around[0.7136022047063663, 0.03793206949564554]}, 
                 "IterationHistory" -> {32}, 
                 "TimeHistory" -> {{
                   0.603259`6.232048803349371, 
                    0.627171`6.248930962127788}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5975906955059522, 0.07368913849991443], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196400, 
                "TrainingTime" -> 0.04080746230580547|>, "Index" -> 2|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6915639622864633, 0.0018743925039770104`], 
                 "Accuracy" -> 
                 Around[0.7183691365243213, 0.023795537295222116`], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32489257588805276`, "Round" -> 1, 
                 "Iteration" -> 5, 
                 "Time" -> {
                  0.179966`5.706735457448569, 0.189535`5.729234413094616}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 69664, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6915639622864633, 0.0013253956501673768`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7183691365243213, 0.016825985783428955`]}, 
                 "IterationHistory" -> {5}, 
                 "TimeHistory" -> {{
                   0.179966`5.706735457448569, 
                    0.189535`5.729234413094616}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6870150943821827, 0.0023222786750385993`], 
                 "Accuracy" -> 
                 Around[0.6994069106160394, 0.02880290713474401], 
                 "EvaluationTime" -> 2.5118864315095793`*^-6, "TestSize" -> 
                 500, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3184270883375597, "Round" -> 2, 
                 "Iteration" -> 8, 
                 "Time" -> {
                  0.218194`5.790387797481028, 0.227848`5.809190214289027}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 74072, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6870150943821827, 0.0016420989989247043`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6994069106160394, 0.02036673095286388]}, 
                 "IterationHistory" -> {8}, 
                 "TimeHistory" -> {{
                   0.218194`5.790387797481028, 
                    0.227848`5.809190214289027}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6644359496061135, 0.0042282621826444005`], 
                 "Accuracy" -> 
                 Around[0.7396116864284553, 0.026031470351057098`], 
                 "EvaluationTime" -> 2.725374066737338*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.2856054174763111, "Round" -> 3, 
                 "Iteration" -> 18, 
                 "Time" -> {
                  0.368451`6.017924733059878, 0.379791`6.0310896624366}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.007943282347242814, "TrainingMemory" -> 93320, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6644359496061135, 0.0029898328619824876`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7396116864284553, 0.01840702920948903]}, 
                 "IterationHistory" -> {18}, 
                 "TimeHistory" -> {{
                   0.368451`6.017924733059878, 0.379791`6.0310896624366}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6354113725069397, 0.025103727445610905`], 
                 "Accuracy" -> 
                 Around[0.753261450854307, 0.051641869601504076`], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.24753813855740914`, "Round" -> 4, 
                 "Iteration" -> 52, 
                 "Time" -> {
                  1.116415`6.499370656473322, 1.128674`6.504113514299836}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.009999999999999998, "TrainingMemory" -> 
                 196346.66666666666`, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6586698367816133, 0.014599374435688255`], 
                   Around[0.612152908232266, 0.012390230948666002`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7081911398409874, 0.038070100270871245`], 
                   Around[0.7983317618676264, 0.03364376218374362]}, 
                 "IterationHistory" -> {50, 52}, 
                 "TimeHistory" -> {{
                   1.093294`6.490281958198143, 1.104879`6.494859712684821}, {
                   1.116415`6.499370656473322, 
                    1.128674`6.504113514299836}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.6354113725069397, 0.025103727445610905`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196346.66666666666`, "TrainingTime" -> 0.01752076913342574|>, 
              "Index" -> 3|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6928440025571192, 0.001866442297142522], "Accuracy" -> 
                 Around[0.7183691365243213, 0.023795537295222116`], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32673850583480357`, "Round" -> 1, 
                 "Iteration" -> 10, 
                 "Time" -> {
                  0.244498`5.839820304429983, 0.253206`5.855018986057791}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 68848, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6928440025571192, 0.0013197740050028743`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7183691365243213, 0.016825985783428955`]}, 
                 "IterationHistory" -> {10}, 
                 "TimeHistory" -> {{
                   0.244498`5.839820304429983, 
                    0.253206`5.855018986057791}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6927882445504548, 0.0019182026867440036`], 
                 "Accuracy" -> 
                 Around[0.7131760820885749, 0.02448177752550138], 
                 "EvaluationTime" -> 2.459131766342593*^-6, "TestSize" -> 673,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3266730033357377, "Round" -> 2, 
                 "Iteration" -> 11, 
                 "Time" -> {
                  0.25422`5.856754707880608, 0.263348`5.872075017946594}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.005011872336272719,
                  "TrainingMemory" -> 72304, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6927882445504548, 0.0013563741274869397`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7131760820885749, 0.01731123090378244]}, 
                 "IterationHistory" -> {11}, 
                 "TimeHistory" -> {{
                   0.25422`5.856754707880608, 
                    0.263348`5.872075017946594}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6924939266251667, 0.002133394621825434], "Accuracy" -> 
                 Around[0.7396116864284553, 0.026031470351057098`], 
                 "EvaluationTime" -> 2.631951984180249*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3263104309634761, "Round" -> 3, 
                 "Iteration" -> 21, 
                 "Time" -> {
                  0.421362`6.076200360234476, 0.430677`6.085696672688803}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 90832, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6924939266251667, 0.0015085378040396744`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7396116864284553, 0.01840702920948903]}, 
                 "IterationHistory" -> {21}, 
                 "TimeHistory" -> {{
                   0.421362`6.076200360234476, 
                    0.430677`6.085696672688803}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6916865902946758, 0.002309678786454275], "Accuracy" -> 
                 Around[0.753261450854307, 0.051641869601504076`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.3251955708183636, "Round" -> 4, 
                 "Iteration" -> 53, 
                 "Time" -> {
                  1.130293`6.504736031482772, 1.141254`6.508927306206902}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.006854143078948891, "TrainingMemory" -> 196368., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6920687666040717, 0.0032238899102917753`], 
                   Around[0.6913044139852801, 0.0032188219390772597`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7081911398409874, 0.038070100270871245`], 
                   Around[0.7983317618676264, 0.03364376218374362]}, 
                 "IterationHistory" -> {43, 53}, 
                 "TimeHistory" -> {{
                   0.95474`6.431430111740531, 0.963209`6.43526552537492}, {
                   1.130293`6.504736031482772, 
                    1.141254`6.508927306206902}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6916865902946758, 0.002309678786454275], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196368., 
                "TrainingTime" -> 0.013585649177021954`|>, "Index" -> 4|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6928558490284874, 0.0018664469645527507`], 
                 "Accuracy" -> 
                 Around[0.7183691365243213, 0.023795537295222116`], 
                 "EvaluationTime" -> 2.4556231516584687`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32675559607798743`, "Round" -> 1, 
                 "Iteration" -> 3, 
                 "Time" -> {
                  0.150416`5.6288390288348715, 0.159326`5.653831646479475}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.003981071705534969, 
                 "TrainingMemory" -> 68416, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6928558490284874, 0.0013197773053602977`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7183691365243213, 0.016825985783428955`]}, 
                 "IterationHistory" -> {3}, 
                 "TimeHistory" -> {{
                   0.150416`5.6288390288348715, 
                    0.159326`5.653831646479475}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6928504720965285, 0.0011228100457469751`], 
                 "Accuracy" -> 
                 Around[0.6751753915732178, 0.014899644428245208`], 
                 "EvaluationTime" -> 2.3794961838893173`*^-6, "TestSize" -> 
                 424.3333333333333, "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.32653327204235894`, "Round" -> 2, 
                 "Iteration" -> 26, 
                 "Time" -> {
                  0.505309`6.155102026971745, 0.514899`6.163267041868357}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.005011872336272719,
                  "TrainingMemory" -> 71882.66666666666, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6928540956422682, 0.0020013049896690444`], 
                   Around[0.6928468485507887, 0.0013563854601315957`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6745773573266922, 0.02688093150611495], 
                   Around[0.6757734258197434, 0.017880352397872102`]}, 
                 "IterationHistory" -> {7, 26}, 
                 "TimeHistory" -> {{
                   0.210038`5.773842867741069, 0.217139`5.788282826916517}, {
                   0.505309`6.155102026971745, 
                    0.514899`6.163267041868357}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6928176055105897, 0.0012045992835695535`], 
                 "Accuracy" -> 
                 Around[0.7327427794467284, 0.043063847091309754`], 
                 "EvaluationTime" -> 2.7356434777974864`*^-6, "TestSize" -> 
                 384.3333333333333, "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.32650945256056585`, "Round" -> 3, 
                 "Iteration" -> 39, 
                 "Time" -> {
                  0.869224`6.390676702543067, 0.890601`6.401228171933483}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 90232., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6928300508329676, 0.002001297429938084], 
                   Around[0.6928051601882117, 0.0015083294977934847`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6922487000242165, 0.026345777461135863`], 
                   Around[0.7732368588692403, 0.017632498073566434`]}, 
                 "IterationHistory" -> {16, 39}, 
                 "TimeHistory" -> {{
                   0.341758`5.985263682983647, 0.34968`5.995215786977572}, {
                   0.869224`6.390676702543067, 
                    0.890601`6.401228171933483}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.692687559735462, 0.0022719471232103996`], 
                 "Accuracy" -> 
                 Around[0.753261450854307, 0.051641869601504076`], 
                 "EvaluationTime" -> 3.472449547195006*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.32662981654126655`, "Round" -> 4, 
                 "Iteration" -> 51, 
                 "Time" -> {
                  1.106158`6.495362158102343, 1.114771`6.498730655812274}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 196426.66666666666`, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.692725990257749, 0.003212612307805795], 
                   Around[0.6926491292131752, 0.0032125051727854986`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7081911398409874, 0.038070100270871245`], 
                   Around[0.7983317618676264, 0.03364376218374362]}, 
                 "IterationHistory" -> {30, 51}, 
                 "TimeHistory" -> {{
                   0.579853`6.214862901920224, 0.587816`6.220786396629541}, {
                   1.106158`6.495362158102343, 
                    1.114771`6.498730655812274}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.472449547195006*^-6, "MeanCrossEntropy" -> 
                Around[0.692687559735462, 0.0022719471232103996`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196426.66666666666`, "TrainingTime" -> 
                0.011873652011043432`|>, "Index" -> 5|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6173360265644062, 0.01475513886540459], "Accuracy" -> 
                 Around[0.7153365394504524, 0.023963152868147142`], 
                 "EvaluationTime" -> 2.717120500415058*^-6, "TestSize" -> 695,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.21557736648740522`, "Round" -> 1, 
                 "Iteration" -> 12, 
                 "Time" -> {
                  0.26441`5.873822869660156, 0.280184`5.898988324623779}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.012589254117941668`,
                  "TrainingMemory" -> 77104, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6173360265644062, 0.010433458749076766`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7153365394504524, 0.01694450789167671]}, 
                 "IterationHistory" -> {12}, 
                 "TimeHistory" -> {{
                   0.26441`5.873822869660156, 
                    0.280184`5.898988324623779}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5421364055761985, 0.020727762738818965`], 
                 "Accuracy" -> 
                 Around[0.7440473667774461, 0.023638394228739833`], 
                 "EvaluationTime" -> 2.7093010771509443`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.08853025399396774, "Round" -> 2, 
                 "Iteration" -> 19, 
                 "Time" -> {
                  0.380882`6.032335442435761, 0.400212`6.053835099924228}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80304, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5421364055761985, 0.014656741591444733`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7440473667774461, 0.016714868855502885`]}, 
                 "IterationHistory" -> {19}, 
                 "TimeHistory" -> {{
                   0.380882`6.032335442435761, 
                    0.400212`6.053835099924228}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5090685886353069, 0.032421111671105445`], 
                 "Accuracy" -> 
                 Around[0.7812104213272877, 0.024651940260881085`], 
                 "EvaluationTime" -> 2.7495634179341004`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.03063474908042363, "Round" -> 3, 
                 "Iteration" -> 33, 
                 "Time" -> {
                  0.736555`6.318750175502414, 0.756176`6.3301678828237735}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98728, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5090685886353069, 0.02292518791624498]}, 
                 "AccuracyHistory" -> {
                   Around[0.7812104213272877, 0.01743155412787468]}, 
                 "IterationHistory" -> {33}, 
                 "TimeHistory" -> {{
                   0.736555`6.318750175502414, 
                    0.756176`6.3301678828237735}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5975314624292535, 0.07314862594398747], "Accuracy" -> 
                 Around[0.7136022047063663, 0.05364404712962069], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.20239063196443874`, "Round" -> 4, 
                 "Iteration" -> 45, 
                 "Time" -> {
                  0.983197`6.444185538226455, 1.003873`6.453223767173589}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196224, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5975314624292535, 0.05172388943947176]}, 
                 "AccuracyHistory" -> {
                   Around[0.7136022047063663, 0.03793206949564554]}, 
                 "IterationHistory" -> {45}, 
                 "TimeHistory" -> {{
                   0.983197`6.444185538226455, 
                    1.003873`6.453223767173589}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.5975314624292535, 0.07314862594398747], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196224, 
                "TrainingTime" -> 0.037547784499136004`|>, "Index" -> 6|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.0001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.59534542489827, 0.01819506498357649], "Accuracy" -> 
                 Around[0.7147286727645434, 0.023950526271591024`], 
                 "EvaluationTime" -> 2.7171205004150585`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.18063062236458582`, "Round" -> 1, 
                 "Iteration" -> 13, 
                 "Time" -> {
                  0.281189`5.900543320751509, 0.300172`5.928915172367155}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77384, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.59534542489827, 0.012865853834016835`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7147286727645434, 0.01693557953962857]}, 
                 "IterationHistory" -> {13}, 
                 "TimeHistory" -> {{
                   0.281189`5.900543320751509, 
                    0.300172`5.928915172367155}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5371266792479983, 0.024631553841847925`], 
                 "Accuracy" -> 
                 Around[0.7324900279014863, 0.023932142885448742`], 
                 "EvaluationTime" -> 2.7093010771509443`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.08075876893931866, "Round" -> 2, 
                 "Iteration" -> 20, 
                 "Time" -> {
                  0.401322`6.055037961395061, 0.420233`6.075035147123185}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80288, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5371266792479983, 0.017417138752732222`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324900279014863, 0.016922580522626192`]}, 
                 "IterationHistory" -> {20}, 
                 "TimeHistory" -> {{
                   0.401322`6.055037961395061, 
                    0.420233`6.075035147123185}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5086673821304267, 0.03347547278838487], "Accuracy" -> 
                 Around[0.7824746091496426, 0.024614095856870483`], 
                 "EvaluationTime" -> 2.4451078190660713`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.030265495771641504`, "Round" -> 3, 
                 "Iteration" -> 34, 
                 "Time" -> {
                  0.757261`6.330790584123653, 0.776124`6.341476106781953}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98880, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5086673821304267, 0.023670733812092684`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7824746091496426, 0.01740479409316882]}, 
                 "IterationHistory" -> {34}, 
                 "TimeHistory" -> {{
                   0.757261`6.330790584123653, 
                    0.776124`6.341476106781953}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5975893351287154, 0.07368997987778537], "Accuracy" -> 
                 Around[0.7136022047063663, 0.05364404712962069], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.20266199994331435`, "Round" -> 4, 
                 "Iteration" -> 49, 
                 "Time" -> {
                  1.071306`6.481458530742585, 1.092054`6.489789107434462}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196336, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5975893351287154, 0.05210668447708227]}, 
                 "AccuracyHistory" -> {
                   Around[0.7136022047063663, 0.03793206949564554]}, 
                 "IterationHistory" -> {49}, 
                 "TimeHistory" -> {{
                   1.071306`6.481458530742585, 
                    1.092054`6.489789107434462}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.5975893351287154, 0.07368997987778537], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196336, 
                "TrainingTime" -> 0.04080746230580547|>, "Index" -> 7|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5953736712858051, 0.01818886348198154], "Accuracy" -> 
                 Around[0.7147286727645434, 0.023950526271591024`], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.18067570761991758`, "Round" -> 1, 
                 "Iteration" -> 4, 
                 "Time" -> {
                  0.160319`5.656529988752009, 0.17895`5.704276696221997}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77384, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5953736712858051, 0.012861468710185505`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7147286727645434, 0.01693557953962857]}, 
                 "IterationHistory" -> {4}, 
                 "TimeHistory" -> {{
                   0.160319`5.656529988752009, 
                    0.17895`5.704276696221997}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5371190308359162, 0.024624756513656726`], 
                 "Accuracy" -> 
                 Around[0.7324900279014863, 0.023932142885448742`], 
                 "EvaluationTime" -> 2.632536721052772*^-6, "TestSize" -> 673,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.08074215064859014, "Round" -> 2, 
                 "Iteration" -> 15, 
                 "Time" -> {
                  0.321394`5.958582758296623, 0.340682`5.983894181636248}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80176, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5371190308359162, 0.017412332315874277`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324900279014863, 0.016922580522626192`]}, 
                 "IterationHistory" -> {15}, 
                 "TimeHistory" -> {{
                   0.321394`5.958582758296623, 
                    0.340682`5.983894181636248}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5086673568923101, 0.033474417709755545`], 
                 "Accuracy" -> 
                 Around[0.7824746091496426, 0.024614095856870483`], 
                 "EvaluationTime" -> 2.6561413353770114`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.030265037559900176`, "Round" -> 3, 
                 "Iteration" -> 28, 
                 "Time" -> {
                  0.53724`6.1817133339270445, 0.556965`6.197372898212872}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98704, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5086673568923101, 0.023669987758839203`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7824746091496426, 0.01740479409316882]}, 
                 "IterationHistory" -> {28}, 
                 "TimeHistory" -> {{
                   0.53724`6.1817133339270445, 
                    0.556965`6.197372898212872}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.597589148469901, 0.07368948433912824], "Accuracy" -> 
                 Around[0.7136022047063663, 0.05364404712962069], 
                 "EvaluationTime" -> 3.5629594773185525`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.2026615331591458, "Round" -> 4, 
                 "Iteration" -> 48, 
                 "Time" -> {
                  1.049089`6.472357326846161, 1.070039`6.48094460031775}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196336, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.597589148469901, 0.05210633407833747]}, 
                 "AccuracyHistory" -> {
                   Around[0.7136022047063663, 0.03793206949564554]}, 
                 "IterationHistory" -> {48}, 
                 "TimeHistory" -> {{
                   1.049089`6.472357326846161, 1.070039`6.48094460031775}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.5629594773185525`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.597589148469901, 0.07368948433912824], "ModelMemory" -> 
                8968, "TrainingMemory" -> 196336, "TrainingTime" -> 
                0.04080746230580547|>, "Index" -> 8|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6518233733226402, 0.005214236302060016], "Accuracy" -> 
                 Around[0.723926091090818, 0.024191790123841386`], 
                 "EvaluationTime" -> 2.535896122440766*^-6, "TestSize" -> 673,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.26676724389658857`, "Round" -> 2, 
                 "Iteration" -> 24, 
                 "Time" -> {
                  0.47636`6.129480280083769, 0.48818`6.1401249765501875}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.007943282347242814,
                  "TrainingMemory" -> 75840, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6518233733226402, 0.003687021847895704]}, 
                 "AccuracyHistory" -> {
                   Around[0.723926091090818, 0.01710617884560999]}, 
                 "IterationHistory" -> {24}, 
                 "TimeHistory" -> {{
                   0.47636`6.129480280083769, 
                    0.48818`6.1401249765501875}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5870175202820855, 0.01540449135781482], "Accuracy" -> 
                 Around[0.7918971634988572, 0.024122548891075877`], 
                 "EvaluationTime" -> 2.725374066737338*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.16568433883302558`, "Round" -> 3, 
                 "Iteration" -> 31, 
                 "Time" -> {
                  0.588842`6.2215437726068625, 0.602233`6.2313095429544045}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 96848, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5870175202820855, 0.010892620299840425`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7918971634988572, 0.017057217900383784`]}, 
                 "IterationHistory" -> {31}, 
                 "TimeHistory" -> {{
                   0.588842`6.2215437726068625, 
                    0.602233`6.2313095429544045}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6160071655051133, 0.05031925154430693], "Accuracy" -> 
                 Around[0.7234106389414675, 0.052914465430827985`], 
                 "EvaluationTime" -> 4.024229852253871*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.22485881449379308`, "Round" -> 4, 
                 "Iteration" -> 44, 
                 "Time" -> {
                  0.964459`6.435828763628052, 0.981847`6.4435888109849175}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 196224, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6160071655051133, 0.03558108399121108]}, 
                 "AccuracyHistory" -> {
                   Around[0.7234106389414675, 0.037416177328999614`]}, 
                 "IterationHistory" -> {44}, 
                 "TimeHistory" -> {{
                   0.964459`6.435828763628052, 
                    0.981847`6.4435888109849175}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6816835294515484, 0.0024493224782195814`], 
                 "Accuracy" -> 
                 Around[0.7183691365243213, 0.023795537295222116`], 
                 "EvaluationTime" -> 2.4556231516584687`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3106788733204905, "Round" -> 1, 
                 "Iteration" -> 57, 
                 "Time" -> {
                  1.188765`6.526641003463424, 1.19902`6.530371420812666}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 70896, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6816835294515484, 0.0017319325336617058`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7183691365243213, 0.016825985783428955`]}, 
                 "IterationHistory" -> {57}, 
                 "TimeHistory" -> {{
                   1.188765`6.526641003463424, 1.19902`6.530371420812666}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 2.4556231516584687`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6816835294515484, 0.0024493224782195814`], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 70896, 
                "TrainingTime" -> 0.052299583664200386`|>, "Index" -> 9|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5964937910581567, 0.018201421577615753`], 
                 "Accuracy" -> 
                 Around[0.7205728736221181, 0.023800841341507048`], 
                 "EvaluationTime" -> 2.4556231516584687`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.18254809367610203`, "Round" -> 1, 
                 "Iteration" -> 2, 
                 "Time" -> {
                  0.13056`5.5673551349057595, 0.149357`5.625770575241156}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5964937910581567, 0.012870348624767245`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7205728736221181, 0.016829736310524757`]}, 
                 "IterationHistory" -> {2}, 
                 "TimeHistory" -> {{
                   0.13056`5.5673551349057595, 
                    0.149357`5.625770575241156}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5371483474802189, 0.02463917282406746], "Accuracy" -> 
                 Around[0.7324900279014863, 0.023932142885448742`], 
                 "EvaluationTime" -> 2.7093010771509443`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.08080155356178942, "Round" -> 2, 
                 "Iteration" -> 22, 
                 "Time" -> {
                  0.431815`6.086842717886221, 0.45454`6.109117101108716}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.01995262314968879, 
                 "TrainingMemory" -> 80280, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5371483474802189, 0.017422526186725396`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324900279014863, 0.016922580522626192`]}, 
                 "IterationHistory" -> {22}, 
                 "TimeHistory" -> {{
                   0.431815`6.086842717886221, 
                    0.45454`6.109117101108716}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5086646373414809, 0.03347479032849774], "Accuracy" -> 
                 Around[0.7824746091496426, 0.024614095856870483`], 
                 "EvaluationTime" -> 2.7495634179341004`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.030259905275237586`, "Round" -> 3, 
                 "Iteration" -> 35, 
                 "Time" -> {
                  0.777205`6.34208057938335, 0.796532`6.352748221397415}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98600, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5086646373414809, 0.023670251240078606`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7824746091496426, 0.01740479409316882]}, 
                 "IterationHistory" -> {35}, 
                 "TimeHistory" -> {{
                   0.777205`6.34208057938335, 
                    0.796532`6.352748221397415}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5975924534174545, 0.07368777350341099], "Accuracy" -> 
                 Around[0.7136022047063663, 0.05364404712962069], 
                 "EvaluationTime" -> 3.5629594773185525`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.20266637170623403`, "Round" -> 4, 
                 "Iteration" -> 47, 
                 "Time" -> {
                  1.027037`6.463131083253309, 1.047715`6.471788155189156}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196160, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5975924534174545, 0.05210512433480031]}, 
                 "AccuracyHistory" -> {
                   Around[0.7136022047063663, 0.03793206949564554]}, 
                 "IterationHistory" -> {47}, 
                 "TimeHistory" -> {{
                   1.027037`6.463131083253309, 
                    1.047715`6.471788155189156}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.5629594773185525`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5975924534174545, 0.07368777350341099], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196160, 
                "TrainingTime" -> 0.04080746230580547|>, "Index" -> 10|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.01|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5086670245004298, 0.03346386585811389], "Accuracy" -> 
                 Around[0.7824746091496426, 0.024614095856870483`], 
                 "EvaluationTime" -> 2.631951984180249*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.0302602976308316, "Round" -> 3, 
                 "Iteration" -> 36, 
                 "Time" -> {
                  0.797615`6.353338306246882, 0.822441`6.366649745961768}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98776, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5086670245004298, 0.023662526472989314`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7824746091496426, 0.01740479409316882]}, 
                 "IterationHistory" -> {36}, 
                 "TimeHistory" -> {{
                   0.797615`6.353338306246882, 
                    0.822441`6.366649745961768}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5975883853445642, 0.07368452084545689], "Accuracy" -> 
                 Around[0.7136022047063663, 0.05364404712962069], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.20265866532739063`, "Round" -> 4, 
                 "Iteration" -> 41, 
                 "Time" -> {
                  0.921576`6.416076149675714, 0.942589`6.425867360738839}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196224, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5975883853445642, 0.05210282435830408]}, 
                 "AccuracyHistory" -> {
                   Around[0.7136022047063663, 0.03793206949564554]}, 
                 "IterationHistory" -> {41}, 
                 "TimeHistory" -> {{
                   0.921576`6.416076149675714, 
                    0.942589`6.425867360738839}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5370456117870857, 0.024557484531180986`], 
                 "Accuracy" -> 
                 Around[0.7324900279014863, 0.023932142885448742`], 
                 "EvaluationTime" -> 2.459131766342593*^-6, "TestSize" -> 673,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.08058186752667829, "Round" -> 2, 
                 "Iteration" -> 59, 
                 "Time" -> {
                  1.21969`6.53779445663213, 1.238275`6.544362098373725}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80304, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5370456117870857, 0.017364763840881817`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324900279014863, 0.016922580522626192`]}, 
                 "IterationHistory" -> {59}, 
                 "TimeHistory" -> {{
                   1.21969`6.53779445663213, 1.238275`6.544362098373725}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 2.459131766342593*^-6, "MeanCrossEntropy" -> 
                Around[0.5370456117870857, 0.024557484531180986`], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 80304, 
                "TrainingTime" -> 0.12726692335462741`|>, "Index" -> 11|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6894057391534373, 0.0021758398309465236`], 
                 "Accuracy" -> 
                 Around[0.7396116864284553, 0.026031470351057098`], 
                 "EvaluationTime" -> 2.53852990162316*^-6, "TestSize" -> 553, 
                 "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32185600616421384`, "Round" -> 3, 
                 "Iteration" -> 37, 
                 "Time" -> {
                  0.823547`6.367233382986184, 0.841377`6.376535629404179}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 91896, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6894057391534373, 0.001538551099238078]}, 
                 "AccuracyHistory" -> {
                   Around[0.7396116864284553, 0.01840702920948903]}, 
                 "IterationHistory" -> {37}, 
                 "TimeHistory" -> {{
                   0.823547`6.367233382986184, 
                    0.841377`6.376535629404179}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6825670632157705, 0.004573801214881263], "Accuracy" -> 
                 Around[0.753261450854307, 0.051641869601504076`], 
                 "EvaluationTime" -> 3.5945829080793324`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.3125950680861215, "Round" -> 4, 
                 "Iteration" -> 54, 
                 "Time" -> {
                  1.142931`6.509565005847701, 1.153543`6.513578781615897}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.007943282347242814, "TrainingMemory" -> 196368., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6861991325877759, 0.0040874727026805596`], 
                   Around[0.6789349938437652, 0.0037918384597588747`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7081911398409874, 0.038070100270871245`], 
                   Around[0.7983317618676264, 0.03364376218374362]}, 
                 "IterationHistory" -> {42, 54}, 
                 "TimeHistory" -> {{
                   0.943834`6.426440611498053, 0.953533`6.430880721260698}, {
                   1.142931`6.509565005847701, 
                    1.153543`6.513578781615897}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6927257496329567, 0.0018664739126202077`], 
                 "Accuracy" -> 
                 Around[0.7183691365243213, 0.023795537295222116`], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32656791475348745`, "Round" -> 1, 
                 "Iteration" -> 56, 
                 "Time" -> {
                  1.178043`6.522706136512332, 1.187508`6.526181537556376}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 69168, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6927257496329567, 0.0013197963605215363`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7183691365243213, 0.016825985783428955`]}, 
                 "IterationHistory" -> {56}, 
                 "TimeHistory" -> {{
                   1.178043`6.522706136512332, 
                    1.187508`6.526181537556376}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6923408535792288, 0.0014232494835992539`], 
                 "Accuracy" -> 
                 Around[0.7131903608928142, 0.024540088364055634`], 
                 "EvaluationTime" -> 1.7828706407154111`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3258844578914234, "Round" -> 2, 
                 "Iteration" -> 60, 
                 "Time" -> {
                  1.358229`6.584517992491902, 1.367025`6.587321450465234}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 72680, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6923408535792288, 0.0010063893611732843`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7131903608928142, 0.017352462893140828`]}, 
                 "IterationHistory" -> {60}, 
                 "TimeHistory" -> {{
                   1.358229`6.584517992491902, 
                    1.367025`6.587321450465234}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1.7828706407154111`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6923408535792288, 0.0014232494835992539`], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 72680, 
                "TrainingTime" -> 0.0506658747617595|>, "Index" -> 12|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.1|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5086682596226959, 0.033359579844374765`], 
                 "Accuracy" -> 
                 Around[0.7824746091496426, 0.024614095856870483`], 
                 "EvaluationTime" -> 2.5385299016231603`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.03022222228565241, "Round" -> 3, 
                 "Iteration" -> 38, 
                 "Time" -> {
                  0.842538`6.377134490954061, 0.867999`6.3900642183329115}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98600, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5086682596226959, 0.023588785125491465`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7824746091496426, 0.01740479409316882]}, 
                 "IterationHistory" -> {38}, 
                 "TimeHistory" -> {{
                   0.842538`6.377134490954061, 
                    0.867999`6.3900642183329115}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5975806967333148, 0.07363489902560941], "Accuracy" -> 
                 Around[0.7136022047063663, 0.05364404712962069], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.20262990129234526`, "Round" -> 4, 
                 "Iteration" -> 46, 
                 "Time" -> {
                  1.005099`6.453753834392956, 1.025803`6.4626089583383415}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5975806967333148, 0.05206773643299511]}, 
                 "AccuracyHistory" -> {
                   Around[0.7136022047063663, 0.03793206949564554]}, 
                 "IterationHistory" -> {46}, 
                 "TimeHistory" -> {{
                   1.005099`6.453753834392956, 
                    1.025803`6.4626089583383415}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5992329622562612, 0.01757775355060605], "Accuracy" -> 
                 Around[0.708977117771265, 0.02409195661475928], 
                 "EvaluationTime" -> 2.381288746400814*^-6, "TestSize" -> 695,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.1868950543690554, "Round" -> 1, 
                 "Iteration" -> 58, 
                 "Time" -> {
                  1.200243`6.530814175272993, 1.218468`6.537359121513301}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.012589254117941668`,
                  "TrainingMemory" -> 77344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5992329622562612, 0.012429348733659449`]}, 
                 "AccuracyHistory" -> {
                   Around[0.708977117771265, 0.017035585894348386`]}, 
                 "IterationHistory" -> {58}, 
                 "TimeHistory" -> {{
                   1.200243`6.530814175272993, 
                    1.218468`6.537359121513301}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5384572920587323, 0.024272934951772965`], 
                 "Accuracy" -> 
                 Around[0.7406400193393181, 0.023809138972514934`], 
                 "EvaluationTime" -> 1.7828706407154111`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.08307852173466967, "Round" -> 2, 
                 "Iteration" -> 61, 
                 "Time" -> {
                  1.368266`6.587715528820351, 1.385471`6.593142433270102}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80520, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5384572920587323, 0.017163556903698626`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7406400193393181, 0.016835603621678217`]}, 
                 "IterationHistory" -> {61}, 
                 "TimeHistory" -> {{
                   1.368266`6.587715528820351, 
                    1.385471`6.593142433270102}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1.7828706407154111`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5384572920587323, 0.024272934951772965`], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 80520, 
                "TrainingTime" -> 0.12726692335462741`|>, "Index" -> 13|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["LogisticRegression"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "Round", "Iteration", "Time", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ExperimentCount", "MeanCrossEntropyHistory", 
                 "AccuracyHistory", "IterationHistory", "TimeHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Real], 2], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                  TypeSystem`Vector[
                   TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 13], <||>], 
         "TrainingSizes" -> {8, 30, 150, 562}, "MaxTrainingSize" -> 703, 
         "PreprocessorEvaluationTime" -> 2.15625*^-6, "PreprocessorMemory" -> 
         97488, "InputDimension" -> 6, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6655035440134902, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.13719999999999996`, 
             "ElapsedTimes" -> 0.170187, "ExperimentCounts" -> 12|>, <|
            "TrainingSizes" -> 30, "TimeBudgets" -> 0.19599999999999995`, 
             "ElapsedTimes" -> 0.363159, "ExperimentCounts" -> 16|>, <|
            "TrainingSizes" -> 150, "TimeBudgets" -> 0.27999999999999997`, 
             "ElapsedTimes" -> 0.27705300000000005`, "ExperimentCounts" -> 
             15|>, <|"TrainingSizes" -> 562, "TimeBudgets" -> 0.4, 
             "ElapsedTimes" -> 0.4025009999999999, "ExperimentCounts" -> 
             18|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
              7168142382301173801|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {25.}, "ID" -> 
              1978735388468315165|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
              9071588231046195481|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 1.425079, 
         "MaxTrainingMemory" -> 1483720, "DataMemory" -> 171136, 
         "FunctionMemory" -> 406032, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 8, 12, 23, 39, 34.933024`8.295811162136308}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
         "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"LogisticRegression[3,0.9]\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["703", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[<|
      "ExampleNumber" -> 703, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f2(f1f3))" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 703, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.369369701280235`}, 
                    "StandardDeviation" -> {15.317927882103213`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.9919264081238692, 
                    0.0686189139266396, -0.10664635726553194`}, {
                    0.12488870976110633`, 
                    0.6745879479880538, -0.7275533730273488}, \
{-0.022018425027356087`, 0.7349983299850381, 0.6777113278369483}}, 
                    "Precisions" -> {0.9847578555557661, 11.663798359979454`, 
                    16.424801743166515`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002379064310796331, 0.08022310668975116, 
                    0.06440280143413318}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4130431088627503879|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002379064310796505, 0.08022310668975112, 
                    0.06440280143413316}, 
                    "StandardDeviation" -> {1.000121637356343, 
                    0.29509629255887676`, 0.2734444214100357}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002379064310796505, 0.08022310668975112, 
                    0.06440280143413316}, 
                    "StandardDeviation" -> {1.000121637356343, 
                    0.29509629255887676`, 0.2734444214100357}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {29.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.045755, "MaxTrainingMemory" -> 310200,
                     "DataMemory" -> 78752, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 12, 23, 39, 34.982964`8.296431583036743}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-3.8794770002501213`, \
-3.8794770002501213`, -2.3790106283532406`, -2.2459862305909035`, \
-2.151301987689467, -2.1037187549855303`, -1.917342561721489, \
-1.8473332669101332`, -1.8020666154899623`, -1.7530125852777756`, \
-1.6353678287412827`}, "LeftBoundary" -> -2.3790106283532406`, "LeftScale" -> 
                    0.7502331859484404, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[6.514385238002973, 0.6115167255487305], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 616651398117295976|>], 
              MachineLearning`MLProcessor[
              "Threads", <|
               "Input" -> <|
                 "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {29.369369701280235`}, 
                "StandardDeviation" -> {15.317927882103213`}, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                  "female" -> 1, "male" -> 2|>}, 
                "Output" -> <|
                 "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>,
                 "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 0.}, {-0.722159743309021, 
                   0.4213116466999054, -0.7273886203765869}, \
{-1.041688323020935, -0.3814893066883087, 0.39698874950408936`}, {
                   1.2774958610534668`, -0.9317017197608948, 
                   0.5576431155204773}}], 
                  RawArray["Real32",{{0., 
                   0.}, {-0.5635325908660889, -0.1972825676202774}, {
                   0.23993441462516785`, 1.1908897161483765`}}]}, 
                "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
              MachineLearning`MLProcessor[
              "MergeVectors", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|
                   "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                  Span[1, 1], 
                  Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                7619735631186802745|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "died" -> 0.5900709219858157, "survived" -> 
           0.40992907801418443`|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "LogProbabilitiesFunction" -> 
         LinearLayer[<|
           "Type" -> "Linear", 
            "Arrays" -> <|
             "Weights" -> 
              RawArray["Real32",{{0.6186358332633972, 
                0.11439214646816254`, -0.9568260312080383, 0.6984077095985413,
                 0.5236193537712097, 1.3905572891235352`}}], "Biases" -> 
              RawArray["Real32",{-1.0297026634216309`}]|>, 
            "Parameters" -> <|
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 6,
               "$InputDimensions" -> {6}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "14.1.1", "Unstable" -> False|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|
             "Weight" -> {0.3333333333333333, 0.9444444444444444, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`}, "Type" -> "NumericalVector"|>, "Key" -> 
            "(f2(f1f3))", "Invertibility" -> "Perfect", "StructurePreserving" -> 
            False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "LogisticRegression", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> 1.*^-6, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
           MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.103861`5.467997493272354, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.49141006037350926`, 0.031435270921678894`], "Accuracy" -> 
            Around[0.7743139608350078, 0.020351190029776325`], 
            "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 141., 
            "ModelMemory" -> 8968., "ModelUtility" -> 0.00461330642704616, 
            "Round" -> 4, "Iteration" -> 55, 
            "Time" -> {
             1.167698`6.518875529857512, 1.188355`6.526491191304725}, 
            "TrainingSize" -> 562, "TrainingTime" -> 0.019952623149688785`, 
            "TrainingMemory" -> 196440., "ExperimentCount" -> 3, 
            "MeanCrossEntropyHistory" -> {
              Around[0.5243677533474342, 0.050460922053062414`], 
              Around[0.4606615450271494, 0.039475000179386356`], 
              Around[0.48920088274594425`, 0.04441303577394329]}, 
            "AccuracyHistory" -> {
              Around[0.776350655726131, 0.0349665833098723], 
              Around[0.7693608476431436, 0.0350975090009001], 
              Around[0.7772303791357489, 0.03489052211033747]}, 
            "IterationHistory" -> {42, 46, 55}, 
            "TimeHistory" -> {{
              0.937157`6.423357346947208, 0.957408`6.43264204557583}, {
              1.00396`6.453261403391294, 1.02454`6.462073912250912}, {
              1.167698`6.518875529857512, 1.188355`6.526491191304725}}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 1.*^-6, "OptimizationMethod" -> Automatic,
               MaxIterations -> 30}, "FinalTrainingSize" -> 703|>, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
         "Configurations" -> 
         Dataset[<|<|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6583167802479208, 0.0240394681772381], "Accuracy" -> 
                 Around[0.6178266762893585, 0.03059146191441099], 
                 "EvaluationTime" -> 2.6419646772413395`*^-6, "TestSize" -> 
                 500, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.28235802230426843`, "Round" -> 1, 
                 "Iteration" -> 1, 
                 "Time" -> {
                  0.125243`5.549298455409883, 0.137862`5.590989568123194}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.007943282347242814, 
                 "TrainingMemory" -> 73632, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6583167802479208, 0.016998470964243274`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6178266762893585, 0.021631430166090013`]}, 
                 "IterationHistory" -> {1}, 
                 "TimeHistory" -> {{
                   0.125243`5.549298455409883, 
                    0.137862`5.590989568123194}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5747659196498107, 0.02738032766297961], "Accuracy" -> 
                 Around[0.7987891888190152, 0.022957306463500457`], 
                 "EvaluationTime" -> 2.7286835077291796`*^-6, "TestSize" -> 
                 600, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.14884023717230543`, "Round" -> 2, 
                 "Iteration" -> 9, 
                 "Time" -> {
                  0.244686`5.840154114884198, 0.258769`5.864457241012984}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 78688, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5747659196498107, 0.019360815361602498`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7987891888190152, 0.01623326707811893]}, 
                 "IterationHistory" -> {9}, 
                 "TimeHistory" -> {{
                   0.244686`5.840154114884198, 
                    0.258769`5.864457241012984}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5471490868443558, 0.033303535479371434`], 
                 "Accuracy" -> 
                 Around[0.7776154164647637, 0.024868824236672957`], 
                 "EvaluationTime" -> 2.7495634179341004`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.10221630038873475`, "Round" -> 3, 
                 "Iteration" -> 17, 
                 "Time" -> {
                  0.371618`6.021641735177504, 0.390639`6.043320593019438}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98840, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5471490868443558, 0.023549155774950314`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7776154164647637, 0.017584914257887812`]}, 
                 "IterationHistory" -> {17}, 
                 "TimeHistory" -> {{
                   0.371618`6.021641735177504, 
                    0.390639`6.043320593019438}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4961345017202616, 0.02892692637119216], "Accuracy" -> 
                 Around[0.7756194780455418, 0.020798039203018388`], 
                 "EvaluationTime" -> 3.4271945821332324`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.0038355248048453916`, "Round" -> 4, 
                 "Iteration" -> 53, 
                 "Time" -> {
                  1.138048`6.507705573389389, 1.156653`6.514748082103509}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.018926700343419374`, "TrainingMemory" -> 196428., 
                 "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[0.528692115087152, 0.04586135482402812], 
                   Around[0.471175180060935, 0.03670737124806267], 
                   Around[0.48853621001269787`, 0.040431913686592796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7834678375570974, 0.03455967854370725], 
                   Around[0.7661602174437793, 0.035386199100119725`], 
                   Around[0.7772303791357489, 0.03489052211033747]}, 
                 "IterationHistory" -> {35, 44, 53}, 
                 "TimeHistory" -> {{
                   0.789611`6.348958183317162, 0.810498`6.360296941008656}, {
                   0.968512`6.437649999554197, 0.98927`6.446859832622905}, {
                   1.138048`6.507705573389389, 
                    1.156653`6.514748082103509}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.4271945821332324`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.4961345017202616, 0.02892692637119216], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196428., 
                "TrainingTime" -> 0.03161849647789018|>, "Index" -> 1|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.00001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.83612419452716, 0.2809530682937679], "Accuracy" -> 
                 Around[0.6380856635938191, 0.025618947063552604`], 
                 "EvaluationTime" -> 2.717120500415058*^-6, "TestSize" -> 695,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -2.0521543308012724`, "Round" -> 1, 
                 "Iteration" -> 6, 
                 "Time" -> {
                  0.204705`5.762673444101273, 0.223827`5.801457467304655}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.83612419452716, 0.19866381978569048`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6380856635938191, 0.018115331195497235`]}, 
                 "IterationHistory" -> {6}, 
                 "TimeHistory" -> {{
                   0.204705`5.762673444101273, 
                    0.223827`5.801457467304655}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.4351881171235044`, 0.5447664628319603], "Accuracy" -> 
                 Around[0.768314219462624, 0.02279420150503271], 
                 "EvaluationTime" -> 2.7093010771509443`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.9584462168740226`, "Round" -> 2, 
                 "Iteration" -> 22, 
                 "Time" -> {
                  0.455581`6.110110597034689, 0.476847`6.129924048186794}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80304, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.4351881171235044`, 0.3852080600314884]}, 
                 "AccuracyHistory" -> {
                   Around[0.768314219462624, 0.016117934455941237`]}, 
                 "IterationHistory" -> {22}, 
                 "TimeHistory" -> {{
                   0.455581`6.110110597034689, 
                    0.476847`6.129924048186794}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5494438615217364, 0.045691355130434784`], 
                 "Accuracy" -> 
                 Around[0.7760769336094926, 0.025014665727218874`], 
                 "EvaluationTime" -> 2.1067808521124427`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.11079667105811009`, "Round" -> 3, 
                 "Iteration" -> 37, 
                 "Time" -> {
                  0.831251`6.371277174266349, 0.850178`6.381054856062835}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98712, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5494438615217364, 0.03230866705433318]}, 
                 "AccuracyHistory" -> {
                   Around[0.7760769336094926, 0.017688039764831184`]}, 
                 "IterationHistory" -> {37}, 
                 "TimeHistory" -> {{
                   0.831251`6.371277174266349, 
                    0.850178`6.381054856062835}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.49251833122398864`, 0.04450915534634299], 
                 "Accuracy" -> 
                 Around[0.7728557516846373, 0.025016595594315356`], 
                 "EvaluationTime" -> 3.504072977955786*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.0028394024944656815`, "Round" -> 4, 
                 "Iteration" -> 51, 
                 "Time" -> {
                  1.094381`6.490713537971811, 1.114678`6.498694423194404}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 196389.3333333333,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5243673957036444, 0.050458181018806864`], 
                   Around[0.46066926674433284`, 0.03947680556428033]}, 
                 "AccuracyHistory" -> {
                   Around[0.776350655726131, 0.0349665833098723], 
                   Around[0.7693608476431436, 0.0350975090009001]}, 
                 "IterationHistory" -> {39, 51}, 
                 "TimeHistory" -> {{
                   0.873151`6.392634349224424, 0.893609`6.40269252763067}, {
                   1.094381`6.490713537971811, 
                    1.114678`6.498694423194404}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.504072977955786*^-6, "MeanCrossEntropy" -> 
                Around[0.49251833122398864`, 0.04450915534634299], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196389.3333333333,
                 "TrainingTime" -> 0.04080746230580547|>, "Index" -> 2|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6901319119473314, 0.0019133084406205334`], 
                 "Accuracy" -> 
                 Around[0.7192468175615002, 0.023905146529352213`], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3228320831549859, "Round" -> 1, 
                 "Iteration" -> 5, 
                 "Time" -> {
                  0.193581`5.738407722500939, 0.203675`5.760482718478656}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 70440, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6901319119473314, 0.0013529133728642378`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7192468175615002, 0.01690349121616301]}, 
                 "IterationHistory" -> {5}, 
                 "TimeHistory" -> {{
                   0.193581`5.738407722500939, 
                    0.203675`5.760482718478656}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6865076565775382, 0.0024950558876156784`], 
                 "Accuracy" -> 
                 Around[0.7573158582304735, 0.026943855980044742`], 
                 "EvaluationTime" -> 2.6419646772413395`*^-6, "TestSize" -> 
                 500, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.31773900251040377`, "Round" -> 2, 
                 "Iteration" -> 8, 
                 "Time" -> {
                  0.233672`5.820151669200048, 0.243629`5.8382739761036095}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 73904, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6865076565775382, 0.0017642709375724664`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7573158582304735, 0.019052183274803347`]}, 
                 "IterationHistory" -> {8}, 
                 "TimeHistory" -> {{
                   0.233672`5.820151669200048, 
                    0.243629`5.8382739761036095}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6657763063500663, 0.004991629355357839], "Accuracy" -> 
                 Around[0.7626569444481335, 0.02541348048033418], 
                 "EvaluationTime" -> 2.631951984180249*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.28784711080716185`, "Round" -> 3, 
                 "Iteration" -> 18, 
                 "Time" -> {
                  0.391761`6.044566193077525, 0.403231`6.057098906346661}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.007943282347242814, "TrainingMemory" -> 93376, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6657763063500663, 0.003529614966343362]}, 
                 "AccuracyHistory" -> {
                   Around[0.7626569444481335, 0.017970044381196256`]}, 
                 "IterationHistory" -> {18}, 
                 "TimeHistory" -> {{
                   0.391761`6.044566193077525, 
                    0.403231`6.057098906346661}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6333766571715913, 0.015866787189135062`], 
                 "Accuracy" -> 
                 Around[0.7733837938425183, 0.025080541044857206`], 
                 "EvaluationTime" -> 3.504072977955786*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.24145799804440893`, "Round" -> 4, 
                 "Iteration" -> 45, 
                 "Time" -> {
                  0.990665`6.4474718132207585, 1.002622`6.452682223369834}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.009999999999999998, "TrainingMemory" -> 
                 196346.66666666666`, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6467313911694967, 0.012383544199882801`], 
                   Around[0.6200219231736858, 0.011866209276513856`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7698223159357973, 0.03530936800676121], 
                   Around[0.7769452717492392, 0.03491359968595978]}, 
                 "IterationHistory" -> {34, 45}, 
                 "TimeHistory" -> {{
                   0.776622`6.341754682491572, 0.788513`6.348353851315268}, {
                   0.990665`6.4474718132207585, 
                    1.002622`6.452682223369834}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.504072977955786*^-6, "MeanCrossEntropy" -> 
                Around[0.6333766571715913, 0.015866787189135062`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196346.66666666666`, "TrainingTime" -> 
                0.018818470241954953`|>, "Index" -> 3|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.692946836390622, 0.001862273078205408], "Accuracy" -> 
                 Around[0.7192468175615002, 0.023905146529352213`], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3268856350775041, "Round" -> 1, 
                 "Iteration" -> 10, 
                 "Time" -> {
                  0.259842`5.866254343828073, 0.268969`5.881247221807842}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 68736, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.692946836390622, 0.0013168259220201898`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7192468175615002, 0.01690349121616301]}, 
                 "IterationHistory" -> {10}, 
                 "TimeHistory" -> {{
                   0.259842`5.866254343828073, 
                    0.268969`5.881247221807842}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6929030814588923, 0.0009770416628364545], 
                 "Accuracy" -> 
                 Around[0.7356416443227771, 0.04029498185432675], 
                 "EvaluationTime" -> 2.6177434725925653`*^-6, "TestSize" -> 
                 624.3333333333333, "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.32656711470236965`, "Round" -> 2, 
                 "Iteration" -> 25, 
                 "Time" -> {
                  0.508128`6.1575181205268095, 0.518184`6.166028992614736}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.006966145676919448,
                  "TrainingMemory" -> 72405.33333333333, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6928993542965545, 0.0014119813748625669`], 
                   Around[0.6929068086212302, 0.0013533536171904449`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7740489142669005, 0.01692595558162496], 
                   Around[0.6972343743786537, 0.017567087287598628`]}, 
                 "IterationHistory" -> {11, 25}, 
                 "TimeHistory" -> {{
                   0.269994`5.882899106559241, 0.282831`5.90307200254973}, {
                   0.508128`6.1575181205268095, 
                    0.518184`6.166028992614736}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6926187680150073, 0.0021289746499180157`], 
                 "Accuracy" -> 
                 Around[0.7626569444481335, 0.02541348048033418], 
                 "EvaluationTime" -> 2.5385299016231603`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3264893061366665, "Round" -> 3, 
                 "Iteration" -> 24, 
                 "Time" -> {
                  0.498127`6.148885075949527, 0.507105`6.156642886161191}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 90728, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6926187680150073, 0.001505412411931285]}, 
                 "AccuracyHistory" -> {
                   Around[0.7626569444481335, 0.017970044381196256`]}, 
                 "IterationHistory" -> {24}, 
                 "TimeHistory" -> {{
                   0.498127`6.148885075949527, 
                    0.507105`6.156642886161191}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6918320728179349, 0.0022829450061397933`], 
                 "Accuracy" -> 
                 Around[0.7733837938425183, 0.025080541044857206`], 
                 "EvaluationTime" -> 3.35031618631068*^-6, "TestSize" -> 141.,
                  "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.3253980154276349, "Round" -> 4, 
                 "Iteration" -> 43, 
                 "Time" -> {
                  0.958412`6.4330972362511, 
                   0.9671309999999999999`6.4370302976967055}, "TrainingSize" -> 
                 562, "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 196448., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6920665119998882, 0.003211623738355794], 
                   Around[0.6915976336359816, 0.003211382531509673]}, 
                 "AccuracyHistory" -> {
                   Around[0.7698223159357973, 0.03530936800676121], 
                   Around[0.7769452717492392, 0.03491359968595978]}, 
                 "IterationHistory" -> {28, 43}, 
                 "TimeHistory" -> {{
                   0.561727`6.201070292695594, 0.570287`6.207638465216775}, {
                   0.958412`6.4330972362511, 
                    0.9671309999999999999`6.4370302976967055}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.35031618631068*^-6, "MeanCrossEntropy" -> 
                Around[0.6918320728179349, 0.0022829450061397933`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196448., 
                "TrainingTime" -> 0.012904452641781184`|>, "Index" -> 4|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6929731029905442, 0.0018622749870521695`], 
                 "Accuracy" -> 
                 Around[0.7192468175615002, 0.023905146529352213`], 
                 "EvaluationTime" -> 2.4556231516584687`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3269235201225822, "Round" -> 1, 
                 "Iteration" -> 3, 
                 "Time" -> {
                  0.160002`5.655670404798993, 0.169055`5.679573013556635}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 68608, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6929731029905442, 0.001316827271778679]}, 
                 "AccuracyHistory" -> {
                   Around[0.7192468175615002, 0.01690349121616301]}, 
                 "IterationHistory" -> {3}, 
                 "TimeHistory" -> {{
                   0.160002`5.655670404798993, 
                    0.169055`5.679573013556635}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6929688523315553, 0.0011202998723252478`], 
                 "Accuracy" -> 
                 Around[0.7155747839970286, 0.023345131958367658`], 
                 "EvaluationTime" -> 2.5454777805193658`*^-6, "TestSize" -> 
                 424.3333333333333, "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.32670333781458594`, "Round" -> 2, 
                 "Iteration" -> 31, 
                 "Time" -> {
                  0.600215`6.2298518381933174, 0.609723`6.236677571303989}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.005011872336272719,
                  "TrainingMemory" -> 71786.66666666666, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6929721314005204, 0.0019968326259436156`], 
                   Around[0.6929655732625901, 0.001353354369584543]}, 
                 "AccuracyHistory" -> {
                   Around[0.7339151936154034, 0.025376414923610327`], 
                   Around[0.6972343743786537, 0.017567087287598628`]}, 
                 "IterationHistory" -> {7, 31}, 
                 "TimeHistory" -> {{
                   0.224936`5.803603961382284, 0.232646`5.818240583385411}, {
                   0.600215`6.2298518381933174, 
                    0.609723`6.236677571303989}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6929520360308317, 0.002823948680096729], "Accuracy" -> 
                 Around[0.7339151936154034, 0.03588767014937674], 
                 "EvaluationTime" -> 2.5118864315095797`*^-6, "TestSize" -> 
                 300, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32717050615492116`, "Round" -> 3, 
                 "Iteration" -> 16, 
                 "Time" -> {
                  0.363053`6.011515023290642, 0.37054`6.020380090673926}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 90232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6929520360308317, 0.0019968332614191974`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7339151936154034, 0.025376414923610327`]}, 
                 "IterationHistory" -> {16}, 
                 "TimeHistory" -> {{
                   0.363053`6.011515023290642, 
                    0.37054`6.020380090673926}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6928190352629991, 0.0018507178074328775`], 
                 "Accuracy" -> 
                 Around[0.7861308250066822, 0.023634854039257837`], 
                 "EvaluationTime" -> 3.610394623459722*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.3266979529450499, "Round" -> 4, 
                 "Iteration" -> 54, 
                 "Time" -> {
                  1.158054`6.515273804489493, 1.166302`6.518356013860058}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 196424., "ExperimentCount" -> 3, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6928539140508087, 0.003205410435342242], 
                   Around[0.6928067417053153, 0.0032053878222470817`], 
                   Around[0.6927964500328734, 0.003205374213158355]}, 
                 "AccuracyHistory" -> {
                   Around[0.7698223159357973, 0.03530936800676121], 
                   Around[0.7769452717492392, 0.03491359968595978], 
                   Around[0.8116248873350103, 0.0328041602162596]}, 
                 "IterationHistory" -> {30, 47, 54}, 
                 "TimeHistory" -> {{
                   0.590985`6.223121451534758, 0.599176`6.229099402866439}, {
                   1.025964`6.462677115601552, 1.033958`6.46604789130738}, {
                   1.158054`6.515273804489493, 
                    1.166302`6.518356013860058}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.610394623459722*^-6, "MeanCrossEntropy" -> 
                Around[0.6928190352629991, 0.0018507178074328775`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196424., 
                "TrainingTime" -> 0.012904452641781184`|>, "Index" -> 5|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8031942368078554, 0.051555497818063845`], 
                 "Accuracy" -> 
                 Around[0.6380856635938191, 0.025618947063552604`], 
                 "EvaluationTime" -> 2.623539028665591*^-6, "TestSize" -> 695,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.48674749111110827`, "Round" -> 1, 
                 "Iteration" -> 12, 
                 "Time" -> {
                  0.28386`5.9046491919281845, 0.299725`5.928267962364974}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.012589254117941668`,
                  "TrainingMemory" -> 77232, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8031942368078554, 0.036455242114601195`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6380856635938191, 0.018115331195497235`]}, 
                 "IterationHistory" -> {12}, 
                 "TimeHistory" -> {{
                   0.28386`5.9046491919281845, 
                    0.299725`5.928267962364974}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6090865447140883, 0.05529818281156166], "Accuracy" -> 
                 Around[0.7888134899349739, 0.022032003378629608`], 
                 "EvaluationTime" -> 2.6325367210527713`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.21535023121482655`, "Round" -> 2, 
                 "Iteration" -> 14, 
                 "Time" -> {
                  0.320447`5.957301203603781, 0.341216`5.984574381023087}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80176, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6090865447140883, 0.03910172005334863]}, 
                 "AccuracyHistory" -> {
                   Around[0.7888134899349739, 0.015578978992153922`]}, 
                 "IterationHistory" -> {14}, 
                 "TimeHistory" -> {{
                   0.320447`5.957301203603781, 
                    0.341216`5.984574381023087}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5430949183762026, 0.04239946435546147], "Accuracy" -> 
                 Around[0.7696145450974267, 0.025201042772770955`], 
                 "EvaluationTime" -> 2.867174851687952*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.09817248493651665, "Round" -> 3, 
                 "Iteration" -> 27, 
                 "Time" -> {
                  0.53637`6.181009472595721, 0.56067`6.200252312242908}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 98832, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5430949183762026, 0.029980948764424115`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7696145450974267, 0.017819828237598576`]}, 
                 "IterationHistory" -> {27}, 
                 "TimeHistory" -> {{
                   0.53637`6.181009472595721, 0.56067`6.200252312242908}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4932417520525675, 0.04397604147339551], "Accuracy" -> 
                 Around[0.7728557516846373, 0.025016595594315356`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.004068748449493675, "Round" -> 4, 
                 "Iteration" -> 50, 
                 "Time" -> {
                  1.072492`6.481939054848016, 1.092957`6.49014806941633}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 196384., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5246454257563705, 0.04987185128874746], 
                   Around[0.4618380783487644, 0.039129240716080364`]}, 
                 "AccuracyHistory" -> {
                   Around[0.776350655726131, 0.0349665833098723], 
                   Around[0.7693608476431436, 0.0350975090009001]}, 
                 "IterationHistory" -> {41, 50}, 
                 "TimeHistory" -> {{
                   0.916133`6.41350352062795, 0.936106`6.422870022371456}, {
                   1.072492`6.481939054848016, 1.092957`6.49014806941633}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.4932417520525675, 0.04397604147339551], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196384., 
                "TrainingTime" -> 0.037547784499136|>, "Index" -> 6|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.0001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.139291567339593, 0.23096945750492331`], "Accuracy" -> 
                 Around[0.6380856635938191, 0.025618947063552604`], 
                 "EvaluationTime" -> 2.1582855306278496`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.8517549809896017`, "Round" -> 1, 
                 "Iteration" -> 13, 
                 "Time" -> {
                  0.300795`5.9298156063648575, 
                   0.3194249999999999999`5.955913896961424}, "TrainingSize" -> 
                 8, "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 81112, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.139291567339593, 0.16332006964870938`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6380856635938191, 0.018115331195497235`]}, 
                 "IterationHistory" -> {13}, 
                 "TimeHistory" -> {{
                   0.300795`5.9298156063648575, 
                    0.3194249999999999999`5.955913896961424}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.9776717796725893`, 0.27971851117098806`], 
                 "Accuracy" -> 
                 Around[0.7626236021995542, 0.023010032933389005`], 
                 "EvaluationTime" -> 2.7093010771509443`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.4029655182513423`, "Round" -> 2, 
                 "Iteration" -> 19, 
                 "Time" -> {
                  0.4042629999999999999`6.058208988029851, 
                   0.426115`6.081071815897712}, "TrainingSize" -> 30, 
                 "TrainingTime" -> 0.015848931924611134`, "TrainingMemory" -> 
                 80408, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.9776717796725893`, 0.1977908560724107]}, 
                 "AccuracyHistory" -> {
                   Around[0.7626236021995542, 0.01627055032252515]}, 
                 "IterationHistory" -> {19}, 
                 "TimeHistory" -> {{
                   0.4042629999999999999`6.058208988029851, 
                    0.426115`6.081071815897712}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5494439290563546, 0.04569166911233591], "Accuracy" -> 
                 Around[0.7760769336094926, 0.025014665727218874`], 
                 "EvaluationTime" -> 1.7234939619344697`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.11079690399947795`, "Round" -> 3, 
                 "Iteration" -> 36, 
                 "Time" -> {
                  0.811547`6.360858670153075, 0.830197`6.370726153174708}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98928, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5494439290563546, 0.03230888907306464]}, 
                 "AccuracyHistory" -> {
                   Around[0.7760769336094926, 0.017688039764831184`]}, 
                 "IterationHistory" -> {36}, 
                 "TimeHistory" -> {{
                   0.811547`6.360858670153075, 
                    0.830197`6.370726153174708}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4925209196658934, 0.04450689747049109], "Accuracy" -> 
                 Around[0.7728557516846373, 0.025016595594315356`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.00284366380693013, "Round" -> 4, 
                 "Iteration" -> 48, 
                 "Time" -> {
                  1.0353559999999999999`6.466634698121685, 
                   1.055756`6.475108551752511}, "TrainingSize" -> 562, 
                 "TrainingTime" -> 0.019952623149688785`, "TrainingMemory" -> 
                 196325.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5243671193463849, 0.05045373393667286], 
                   Around[0.4606747199854019, 0.039478326181985504`]}, 
                 "AccuracyHistory" -> {
                   Around[0.776350655726131, 0.0349665833098723], 
                   Around[0.7693608476431436, 0.0350975090009001]}, 
                 "IterationHistory" -> {40, 48}, 
                 "TimeHistory" -> {{
                   0.894648`6.403197188892975, 0.915118`6.413022091327136}, {
                   1.0353559999999999999`6.466634698121685, 
                    1.055756`6.475108551752511}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.4925209196658934, 0.04450689747049109], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196325.3333333333,
                 "TrainingTime" -> 0.04080746230580547|>, "Index" -> 7|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[2.4629316482982304`, 0.18228603379128075`], 
                 "Accuracy" -> 
                 Around[0.6380856635938191, 0.025618947063552604`], 
                 "EvaluationTime" -> 2.5299575569161234`*^-6, "TestSize" -> 
                 695, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.6091965276058682`, "Round" -> 1, 
                 "Iteration" -> 4, 
                 "Time" -> {
                  0.170029`5.682067994085173, 0.19252`5.7360208465012965}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.01995262314968879, 
                 "TrainingMemory" -> 77296, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.4629316482982304`, 0.12889569060941475`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6380856635938191, 0.018115331195497235`]}, 
                 "IterationHistory" -> {4}, 
                 "TimeHistory" -> {{
                   0.170029`5.682067994085173, 
                    0.19252`5.7360208465012965}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.575613218511209, 0.21647350353721098`], "Accuracy" -> 
                 Around[0.7593767108625331, 0.023123196037649375`], 
                 "EvaluationTime" -> 2.7093010771509443`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.1749020817546612`, "Round" -> 2, 
                 "Iteration" -> 15, 
                 "Time" -> {
                  0.342378`5.9860508441694185, 0.362033`6.010293152605663}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80520, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.575613218511209, 0.15306988229837196`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7593767108625331, 0.01635056872092778]}, 
                 "IterationHistory" -> {15}, 
                 "TimeHistory" -> {{
                   0.342378`5.9860508441694185, 
                    0.362033`6.010293152605663}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5484553677189528, 0.04509832229740564], "Accuracy" -> 
                 Around[0.775319193403803, 0.025017067166405713`], 
                 "EvaluationTime" -> 2.842985500491189*^-6, "TestSize" -> 553,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.10881272192594882`, "Round" -> 3, 
                 "Iteration" -> 32, 
                 "Time" -> {
                  0.611074`6.237638799230619, 0.633845`6.253528062300919}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98776, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5484553677189528, 0.031889329516632]}, 
                 "AccuracyHistory" -> {
                   Around[0.775319193403803, 0.017689737838764805`]}, 
                 "IterationHistory" -> {32}, 
                 "TimeHistory" -> {{
                   0.611074`6.237638799230619, 
                    0.633845`6.253528062300919}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.49252122777918605`, 0.04450612498602298], 
                 "Accuracy" -> 
                 Around[0.7728557516846373, 0.025016595594315356`], 
                 "EvaluationTime" -> 3.748339699724438*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.002843970719986766, "Round" -> 4, 
                 "Iteration" -> 52, 
                 "Time" -> {
                  1.116062`6.49923331489857, 1.136658`6.507174806419959}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.023396783926626794`, "TrainingMemory" -> 196304., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5243669444079614, 0.05045226133472566], 
                   Around[0.4606755111504108, 0.039477780813703116`]}, 
                 "AccuracyHistory" -> {
                   Around[0.776350655726131, 0.0349665833098723], 
                   Around[0.7693608476431436, 0.0350975090009001]}, 
                 "IterationHistory" -> {33, 52}, 
                 "TimeHistory" -> {{
                   0.750398`6.3268366613641565, 0.775567`6.341164315276027}, {
                   1.116062`6.49923331489857, 1.136658`6.507174806419959}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.748339699724438*^-6, "MeanCrossEntropy" -> 
                Around[0.49252122777918605`, 0.04450612498602298], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196304., 
                "TrainingTime" -> 0.04921941870203511|>, "Index" -> 8|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6459434071045949, 0.005123046254813377], "Accuracy" -> 
                 Around[0.7350971110729168, 0.039669618240658434`], 
                 "EvaluationTime" -> 2.5936977740108255`*^-6, "TestSize" -> 
                 673., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.25769186419179335`, "Round" -> 2, 
                 "Iteration" -> 26, 
                 "Time" -> {
                  0.519556`6.167177358055686, 0.53498`6.179882539905996}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.008628854898161877,
                  "TrainingMemory" -> 75853.33333333333, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6420597200358914, 0.005578756332249544], 
                   Around[0.6498270941732983, 0.0041719584535623334`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7729598477671799, 0.016017408468575287`], 
                   Around[0.6972343743786537, 0.017567087287598628`]}, 
                 "IterationHistory" -> {20, 26}, 
                 "TimeHistory" -> {{
                   0.427133`6.082108119510152, 0.439002`6.094011492296149}, {
                   0.519556`6.167177358055686, 
                    0.53498`6.179882539905996}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6008017100489109, 0.018314977066765506`], 
                 "Accuracy" -> 
                 Around[0.7640603807480457, 0.025372046262998535`], 
                 "EvaluationTime" -> 2.7495634179341004`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.18973828684953897`, "Round" -> 3, 
                 "Iteration" -> 21, 
                 "Time" -> {
                  0.440116`6.095112150710138, 0.454476`6.109055947406497}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 96680, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6008017100489109, 0.012950644481185993`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7640603807480457, 0.017940745965145066`]}, 
                 "IterationHistory" -> {21}, 
                 "TimeHistory" -> {{
                   0.440116`6.095112150710138, 
                    0.454476`6.109055947406497}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5452781778265778, 0.031849203444308735`], 
                 "Accuracy" -> 
                 Around[0.7939098284887147, 0.029680487281765856`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.09830520055473879, "Round" -> 4, 
                 "Iteration" -> 49, 
                 "Time" -> {
                  1.057194`6.4756996831672575, 1.07109`6.481370958129113}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 0.01476237265572131,
                  "TrainingMemory" -> 196346.66666666666`, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5695379636454165, 0.03146776703971607], 
                   Around[0.5210183920077391, 0.027333694221387705`]}, 
                 "AccuracyHistory" -> {
                   Around[0.776350655726131, 0.0349665833098723], 
                   Around[0.8114690012512983, 0.032817563282619415`]}, 
                 "IterationHistory" -> {29, 49}, 
                 "TimeHistory" -> {{
                   0.571347`6.2084449448470345, 
                    0.589908`6.2223292793621825}, {
                   1.057194`6.4756996831672575, 
                    1.07109`6.481370958129113}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5452781778265778, 0.031849203444308735`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196346.66666666666`, "TrainingTime" -> 
                0.027094954501315046`|>, "Index" -> 9|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.547040779112702, 0.3318826092150093], "Accuracy" -> 
                 Around[0.6380856635938191, 0.025618947063552604`], 
                 "EvaluationTime" -> 2.623539028665591*^-6, "TestSize" -> 695,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -2.2221191461174117`, "Round" -> 1, 
                 "Iteration" -> 2, 
                 "Time" -> {
                  0.138931`5.594344155193254, 0.15897`5.6528601677299655}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77168, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[4.547040779112702, 0.234676443533818]}, 
                 "AccuracyHistory" -> {
                   Around[0.6380856635938191, 0.018115331195497235`]}, 
                 "IterationHistory" -> {2}, 
                 "TimeHistory" -> {{
                   0.138931`5.594344155193254, 
                    0.15897`5.6528601677299655}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.912463758560368, 0.8048708089699816], "Accuracy" -> 
                 Around[0.7666588877228633, 0.022881622945848373`], 
                 "EvaluationTime" -> 2.6325367210527713`*^-6, "TestSize" -> 
                 673, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -2.3171689622994998`, "Round" -> 2, 
                 "Iteration" -> 23, 
                 "Time" -> {
                  0.477876`6.130860213325626, 0.497095`6.147984388332156}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80240, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.912463758560368, 0.5691296070017763]}, 
                 "AccuracyHistory" -> {
                   Around[0.7666588877228633, 0.01617975074956309]}, 
                 "IterationHistory" -> {23}, 
                 "TimeHistory" -> {{
                   0.477876`6.130860213325626, 
                    0.497095`6.147984388332156}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5494359602917797, 0.045684413248081646`], 
                 "Accuracy" -> 
                 Around[0.7760769336094926, 0.025014665727218874`], 
                 "EvaluationTime" -> 1.9587168294421727`*^-6, "TestSize" -> 
                 553, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.11078004008150122`, "Round" -> 3, 
                 "Iteration" -> 38, 
                 "Time" -> {
                  0.851194`6.381573547149867, 0.872091`6.392106798079738}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 98720, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5494359602917797, 0.03230375840224708]}, 
                 "AccuracyHistory" -> {
                   Around[0.7760769336094926, 0.017688039764831184`]}, 
                 "IterationHistory" -> {38}, 
                 "TimeHistory" -> {{
                   0.851194`6.381573547149867, 
                    0.872091`6.392106798079738}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.49141006037350926`, 0.031435270921678894`], 
                 "Accuracy" -> 
                 Around[0.7743139608350078, 0.020351190029776325`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., "ModelUtility" -> 
                 0.00461330642704616, "Round" -> 4, "Iteration" -> 55, 
                 "Time" -> {
                  1.167698`6.518875529857512, 1.188355`6.526491191304725}, 
                 "TrainingSize" -> 562, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 196440., 
                 "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[0.5243677533474342, 0.050460922053062414`], 
                   Around[0.4606615450271494, 0.039475000179386356`], 
                   Around[0.48920088274594425`, 0.04441303577394329]}, 
                 "AccuracyHistory" -> {
                   Around[0.776350655726131, 0.0349665833098723], 
                   Around[0.7693608476431436, 0.0350975090009001], 
                   Around[0.7772303791357489, 0.03489052211033747]}, 
                 "IterationHistory" -> {42, 46, 55}, 
                 "TimeHistory" -> {{
                   0.937157`6.423357346947208, 0.957408`6.43264204557583}, {
                   1.00396`6.453261403391294, 1.02454`6.462073912250912}, {
                   1.167698`6.518875529857512, 
                    1.188355`6.526491191304725}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.49141006037350926`, 0.031435270921678894`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196440., 
                "TrainingTime" -> 0.04080746230580547|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["LogisticRegression"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "Round", "Iteration", "Time", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ExperimentCount", "MeanCrossEntropyHistory", 
                 "AccuracyHistory", "IterationHistory", "TimeHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Real], 2], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                  TypeSystem`Vector[
                   TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], 
         "TrainingSizes" -> {8, 30, 150, 562}, "MaxTrainingSize" -> 703, 
         "PreprocessorEvaluationTime" -> 2.2265625*^-6, "PreprocessorMemory" -> 
         97488, "InputDimension" -> 6, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.676832723190739, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.13719999999999996`, 
             "ElapsedTimes" -> 0.13895000000000002`, "ExperimentCounts" -> 
             9|>, <|"TrainingSizes" -> 30, "TimeBudgets" -> 
             0.19599999999999995`, "ElapsedTimes" -> 0.197994, 
             "ExperimentCounts" -> 13|>, <|
            "TrainingSizes" -> 150, "TimeBudgets" -> 0.27999999999999997`, 
             "ElapsedTimes" -> 0.284443, "ExperimentCounts" -> 10|>, <|
            "TrainingSizes" -> 562, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.39736600000000005`, "ExperimentCounts" -> 23|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, "ID" -> 
              7168142382301173801|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {29.}, "ID" -> 
              1978735388468315165|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
              9071588231046195481|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 1.22511, 
         "MaxTrainingMemory" -> 1174648, "DataMemory" -> 171288, 
         "FunctionMemory" -> 354064, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 8, 12, 23, 39, 36.159069`8.310792219358559}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
         "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"NearestNeighbors[1,0.9]\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["703", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[<|
      "ExampleNumber" -> 703, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f2(f1f3))" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 703, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {30.24632546230441}, 
                    "StandardDeviation" -> {14.460721264396316`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.9921485257052823, 
                    0.07759435172716315, -0.09808373729052089}, {
                    0.12406781319720595`, 
                    0.7094994664456753, -0.6936985547352432}, \
{-0.01576326962587114, 0.7004210331603008, 0.7135558111580053}}, 
                    "Precisions" -> {0.9854210664462002, 12.04487971443731, 
                    14.612583313416785`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00023790643108017416`, 0.06694667236068512, 
                    0.07293765207424693}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4130431088627503879|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002379064310801457, 0.06694667236068515, 
                    0.0729376520742469}, 
                    "StandardDeviation" -> {1.00004007392511, 
                    0.3005746264007814, 0.27536587859068407`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002379064310801457, 0.06694667236068515, 
                    0.0729376520742469}, 
                    "StandardDeviation" -> {1.00004007392511, 
                    0.3005746264007814, 0.27536587859068407`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {30.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.045749, "MaxTrainingMemory" -> 310376,
                     "DataMemory" -> 78752, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 12, 23, 39, 36.2089`8.31139031080833}, "Instant",
                     "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-3.87882279073527, -3.87882279073527, \
-2.381320060811418, -2.2134958569745327`, -2.113273076400425, \
-2.0853764700989244`, -1.912096259369827, -1.8258014436283314`, \
-1.780571363174323, -1.746278257014861, -1.6201721092130508`}, 
                    "LeftBoundary" -> -2.381320060811418, "LeftScale" -> 
                    0.7487513649619263, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[6.46716230622629, 0.615910381696662], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 616651398117295976|>], 
              MachineLearning`MLProcessor[
              "Threads", <|
               "Input" -> <|
                 "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {30.24632546230441}, 
                "StandardDeviation" -> {14.460721264396316`}, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                  "female" -> 1, "male" -> 2|>}, 
                "Output" -> <|
                 "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>,
                 "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 0.}, {-0.722159743309021, 
                   0.4213116466999054, -0.7273886203765869}, \
{-1.041688323020935, -0.3814893066883087, 0.39698874950408936`}, {
                   1.2774958610534668`, -0.9317017197608948, 
                   0.5576431155204773}}], 
                  RawArray["Real32",{{0., 
                   0.}, {-0.5635325908660889, -0.1972825676202774}, {
                   0.23993441462516785`, 1.1908897161483765`}}]}, 
                "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
              MachineLearning`MLProcessor[
              "MergeVectors", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|
                   "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                  Span[1, 1], 
                  Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                7619735631186802745|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "died" -> 0.6141843971631206, "survived" -> 
           0.38581560283687943`|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "NeighborsFunction" -> 
         MachineLearning`PackageScope`NeighborsFunction["Nearest", 
           NearestFunction[
            Hold[
             Nearest[CompressedData["
1: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
s2h2nt8U75sA8t7Z3eh0GOa92rsDXsj3tu3lwZhnHC4eJu9tP6SWH8xf00kF
nX+4CfpvHCpej3w5dlNkKfjP5WdfjPUu69rwAfY3tzOtdbduoPKNBm/A3tu6
rxTxCrws9hb2OXuiniJeXDXLSX7991X57qZjLdQ2baFU9JeouTgW4DH5HC+B
fF/1/hz5vrPechX5/VWtUB7P4qpCuv3ATAK5n/bIeiPOcyyXn38H/CnlokyY
P9focJL3Si5571hSxBqoY598rkP/9cyMTuhHr0RfSJDfa7LpPop+5DQ5U4l6
OyZ1mUEqbp76dil7Cfn+tcNBA/55RsbZEK+pffb+0LPwXTEvnM880k++8VKw
g1Y8mk3uAxSXPCW/V6DJaWhB7n/a6t0CnpU7bpHzBx2JkKKAoc/U7mmBPdCb
xMNLk7AP7z5mB/tbqStvkfcv2+ry8L1YpaHh3FqpX7TP+SJR6OFtuK4e9FP/
d6Ib/OwqLH8L/jcOlpDfW/sZM5YnNFpL2TatTUc93HUgn9j/SuU+Cn52WF9K
Qr2q4lJSQT35UrbTO0nrH/073PM72b+zz5PzEL2+nivgZ2Pg3uvAE/SFnQt4
uGtiMurrK6lV1XfOQm829yUFUP+/LmfXRf0v89mkAH4MBHSM8P29+fTHh/pq
f2jh5qW2sGevlfNGfVhiE78B5425zEH6mB/e7H76Dvki32pwZwNbH1U3sKES
9rL8UVHQsylP40ec/yvsMXSAfn5f/zoDPvnueqh+mq6mM3dMEj4vajY6k3nY
5eAV6O0/ufQ8+KdytpHfB8vY/2s0aE8fJVV6Yhx81gYsrgE/EWf+kP21c0gj
H/QgefAvO+on692SKrVTY7QEe2EW2b/nSuUhXgaPTnehPmT3NWxDvlx95kt+
X+5aiKXh9tFBOo5tWwLq4e6KHXex3rMeaQyoD9P1j8nvDzhZ5LfgPPlP1kvG
U3N9tE8HD/n9q4DYte2oh8mO483I31ORm2WQ73el9ch51FcO1s1M0ZN0lKAC
eZ91iU/zGfgPs4uuRv3c3rzhFdb74VLzA9iHXNbxyDBvp4ZiLArJ9/0g21rE
V531pij42ZSRRiO/mEb1T8J+7+7TW94+76ZYA5jUof/cVT/nwY+SiIY79HN9
rVgD9PP5n3Mj9teJuh+9haWSqdKh7bvAZ+YPNkN8n1U5m+UOPod5Pcj31ntv
15LviXFVmul6Hxeptyr4ZJPv3fcek9/H/lrseRLzwDTz53n4Nz/XzIx8TH/U
Y38osp4u8kn1Qv7uWj4gg/h+/Jn+CvzPajKPYP97XKCUnC85P7cWcfcOpleO
xdXBv+PhhkD0rx6HvAzUzx82t6wwn7SsulCC/UirxsynvRtyqR6NAfJ7syN7
9W+An2269YvBz1p+RXJfZd3gn1nE90bx2oY/5fX067s3BMDPxWaFZVjv9Uuq
weS+1nKbPai3BzJ+kN+nvdCg1yg3ME/FnKrhRbz2qrU4oF80npW9hP14TT2X
Cuo/i94kuZ82Kx2XnrG5g26/V6MAPfyvpOuOC/Hr4i1tq4GSkaIoLSmpPCFF
mhKFJKRIETJKhRaKBlqikjYlClE9LcpoaVHS0M6mJfT+vuf9/37Oc+65Z93z
nPO9/geObcH58uxea438Nmxf1mvIJ29Ttgn8z/nuXzIjkT8YUR0Rws+MnZ61
F/IJV59tCP5Pi8sGw140i3Y+o/4oUY4pL9eVsTe6o5thXzt4DzST/VakuYMf
JlHjJ+xdblczH+ZNMl7HmFo29rBmldFLoD+dg2alhE9i0zoZ9EvCwtYjXntN
T6H5+vnq/bVOav2s8WplB+jD3s51KYhfMm7NzfT/9/PKOtC/Z6sUgXyJ36gq
VZtnkFVTekT5fJC2ey3sZV6rpQ/0eTPfhfOIvzZjq66CvsBmz0faPHeY3Okp
hL+6da09/U+/NFdaDv5Hyc/nBOGNCOmehv4Ij2brjQt0sqaBWrehD6aCovR/
08FfkPCQ5wY2tOF8v81xo/qb8aPwU5lX+li9PTyPQN89pz4S9rhzkloX7PH6
e0maFzCWHXFCffL+5Cpri64+tl8oh/pFO1YK2KF+W7uotBf8h/d9ovzBqVfv
IfUDH6rZ1vH8FbtHZ9E8qp/PdLoIfUuYG+IKf+sw5dJ12PtvAy+qD9/dEBJt
tb2DcfMaIDyr2sGlH6m+rTDBh34h/QMhXKivFp0v7Mb6pkSvwt3P7zB+wzoB
kH+LVHAz8ufnXdP5sV/HiiRR+r88Y/EI8EDGNuSt6LhVxCzIjrcF/0t2hupA
P/22N9+Gf7acZBcGfoQjeCk/Uap/P3Gbt5OdP9m+CPFlQVjHOuh/7VG9CpqP
LlrWBfp5s5SEke/d4dS68DSkgKla2UL2+8ZNkfC1em56qsF+TSVtfkA+jspT
H+J8i7OSlmQNjLP7Hy4MJ3ts/7WP5l96U1WRn+/S/TOP+nU5eSRgv7yOk5V0
Uv4wrmkulThfrpi2feAncSoHzde/e6EniHrdE1/z2fAPNuGeL1Oiolgufp9D
iNczDCdO0f81ziZ6r6H14nSaJ7KKlVgB/dmpfHdeucQgK7IkWQrr54r7GZF9
Of6ci/Wjg/bD4CfC4LoX+In8skrJ7v4Q0254rgn+Qet++hr4T7cbGhXUn7+u
7y3oH/ldZIX4+/Xoi8MXK0pZGZuNVA+ZfTzMA/RnfDhP+LSeq09Qfnhu2jzS
n3THt7aezS3swUTlvTivj2Xfh6H/p95KT4J+erRsJ3y8qN2sP+KXYZTTvdpT
3cykg13WWM9Ofu6C803ST/KHvTzdvuYI+qMET1XbUT1z7PnyeovP7KVt4lKQ
5xy3ZcWQp3TeV6pP7gyZQ/HricufT7jfnbTIt9SRL2UnJwVR/rNvx8g3nJeV
koQOzutL2q+ZhCdp9DkC+cNc5d2nnS9cZTM9HNMpXoReI3z+MPstdZAPr6+w
EfW3L47voX7d2vyoxnV1rHVGnh/0X7C5tpvwsf3ldoL/oD7TFcjnj4c6BWB9
9AOPyQnCtUzou9d0vxgNvlcEe0m5OUr9fotD2kvgP8v2P1KD/c4ZfM/nnTvB
TO/ZG4D1XXLJayGfxldvjsMfGiwRzQY/fbfaCH/VdkMuU6fTwl7QmH8H9ntd
v4jm92O7RYep/jaUYgt/MpvPIR/rzZuvVu/m59TbuWFKHORZek1hJfLJlXUO
h7Dfnur6GMTrTEc1wnsvvbplVvPNbsbCqvkh3b+sx0Jhv8yFkj1YH+ygYIXz
ddrH7kF+da5QqmZfySO2ZmVrKc3nTtZdRHggH4LXUH/+sxkPCU9+eT3FX9td
UvrPDL4xlro9PIgvWYYKwyb/7ddMOHMa4kvO+uc0XxbdPn8d4WMcdZT9ubWS
zdz4bzfhrZ2UjYL8lc7NcYM8ZU253BDfFds30f+pkXALgQe7GhiXarul0P/u
Y5L0Psh06Utq0J/1De8IH2BRzh8B0ocv7w3T2lpY3fGY45C/3JTfkjivab/L
giD//SJXkui9jMAH+bCX2y87f9wo/u9efS4xFfTfq/Lsgv4ozxtIhv/J3LXc
C/nYReW3J6DPI+U/N5zKG2JeFg+7Qp7pUkE0/5KouZCFPM+2Jk5GfNxe1X8B
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
               "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
         2, "ClassPriors" -> {0.6141843971631206, 0.38581560283687943`}, 
         "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UHA/UC0jI9MoGuZoGEMAbG4Q6Q==
          "], "DistributionSmoothing" -> 0.5, "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|
             "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
              "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "NearestNeighbors", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NeighborsNumber" -> <|"Value" -> 2, "Options" -> <||>|>, 
           "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
           "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NearestNeighbors", 
              "Options" -> <|
               "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                "NearestMethod" -> <|"Value" -> Automatic|>|>, "NaiveImputer" -> 
              Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
              Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
           TypeSystem`Assoc[
            
            TypeSystem`Struct[{
             "Value", "Options", "NaiveImputer", "EMIterations"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 
            TypeSystem`Assoc[
            TypeSystem`UnknownType, TypeSystem`UnknownType, 
             TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
         Dataset[<|
           "Configuration" -> {
             "NearestNeighbors", "NeighborsNumber" -> Automatic, 
              "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
            "ModelUtility" -> Missing[]|>, 
           TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
         "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, "ID" -> 
              7168142382301173801|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {30.}, "ID" -> 
              1978735388468315165|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
              9071588231046195481|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 0.08632, 
         "MaxTrainingMemory" -> 2577592, "DataMemory" -> 171152, 
         "FunctionMemory" -> 184112, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 8, 12, 23, 39, 36.246225`8.311837761363993}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
         "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"NearestNeighbors[2,0.9]\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["703", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[<|
      "ExampleNumber" -> 703, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f2(f1f3))" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 703, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {30.586178520625896`}, 
                    "StandardDeviation" -> {14.40347490107595}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.9934074220779879, \
-0.05956826397878957, -0.09794547302922879}, {
                    0.11208219932381225`, -0.6840739012212198, \
-0.7207499415627572}, {-0.024068119060354762`, -0.7269762854416463, 
                    0.6862406327596484}}, 
                    "Precisions" -> {0.9878435982545948, 10.668918834573164`, 
                    16.35723773137968}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002379064310795663, 0.052247762924933605`, 
                    0.06298032632744749}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4130431088627503879|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00023790643107958226`, 0.05224776292493356, 
                    0.06298032632744753}, 
                    "StandardDeviation" -> {0.9999608295917106, 
                    0.29721570873855185`, 0.28091348576864605`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00023790643107958226`, 0.05224776292493356, 
                    0.06298032632744753}, 
                    "StandardDeviation" -> {0.9999608295917106, 
                    0.29721570873855185`, 0.28091348576864605`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {50.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.044476, "MaxTrainingMemory" -> 310296,
                     "DataMemory" -> 78752, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 12, 23, 39, 36.294604`8.312417041643657}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-3.8558461108166813`, \
-3.8558461108166813`, -2.6483714133748997`, -2.391841553999628, \
-2.1259060733658064`, -1.9816269522947632`, -1.9319094916317905`, \
-1.9044291602166465`, -1.8369292132051236`, -1.7826822379918508`, \
-1.6239075595707697`}, "LeftBoundary" -> -2.6483714133748997`, "LeftScale" -> 
                    0.6037373487208908, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[6.625034929940389, 0.6188084043622665], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 616651398117295976|>], 
              MachineLearning`MLProcessor[
              "Threads", <|
               "Input" -> <|
                 "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {30.586178520625896`}, 
                "StandardDeviation" -> {14.40347490107595}, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                  "female" -> 1, "male" -> 2|>}, 
                "Output" -> <|
                 "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>,
                 "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 0.}, {-0.722159743309021, 
                   0.4213116466999054, -0.7273886203765869}, \
{-1.041688323020935, -0.3814893066883087, 0.39698874950408936`}, {
                   1.2774958610534668`, -0.9317017197608948, 
                   0.5576431155204773}}], 
                  RawArray["Real32",{{0., 
                   0.}, {-0.5635325908660889, -0.1972825676202774}, {
                   0.23993441462516785`, 1.1908897161483765`}}]}, 
                "Version" -> {14.1, 0}, "ID" -> 5988483279055413579|>], 
              MachineLearning`MLProcessor[
              "MergeVectors", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|
                   "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                  Span[1, 1], 
                  Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                7619735631186802745|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "died" -> 0.6198581560283688, "survived" -> 
           0.38014184397163125`|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "NeighborsFunction" -> 
         MachineLearning`PackageScope`NeighborsFunction["Nearest", 
           NearestFunction[
            Hold[
             Nearest[CompressedData["
1:eJwkXHc8l28XRoMG2hkNM/qRraF4EFJJEQ1JNg2RMqJhtJRNRCkqexRFEh5b
ZRYyIjKy9yZ5Xff7T/1zPsd1n3Od65x7PF9eY2ttMyYGBgZ64Z+lC/+/49fj
SUrvpY1DEsde2IxRtRl6jLcr+2mqY536zrrfVPPAgJs9SyutJcpAeyp+oe+o
P9r99F8r7bBh+PfzBftWl337Yf/uxKYh2HvcXtcgmFZO2UucvNTKOkqNjJZN
fY6dpFa1l/MMcHfSIoVnv+VNNFC++yOMCtQ66d+X19iJLdiL/i0/0rZgb+4t
sGuFchttFfD3WPiC/7GoRW3wX+EQ0Cq74F/f3dVIasFeUlX21e8FeyX6wme9
jEK6/lbTB+DxjxAxuLVgLytkOr1rwf5vFyPPtQX8LPu+3fdewH/rgUuf19d2
SjDqq3NO3BD9fus23WMX6uhvB8xyKct6yuSI6XGsd/klqT8PF+z1MgPmM0eq
aZH0wquwH8zr5zuxYF8zbblr/4L9RqYjTwUW8Bhdu8kL/PuCNaOPni6imkMD
TwL/Ee/oDtcFPNJlXqXAs9jLO5h/wT41T9kQ8XnjP8G7rKuVDpnf3Iz4v32e
3eWyYC+z6Fwq7BVs41kQT/47f/fBPqHh7QBbVDa9/vOrBtiPthSwwX5g5bIf
iP/00asBdgv4+VyFHj5awM+3lLK+mvaPnhi7sRF4Hv9imCL+f3itRjwvLSne
ivjMfpHOCliw7/WtqnLk6qNNtKg05Cv75NW/uQv5Gp1wskC+4hU4hWAftW67
FeLzRu/ukW6JEapv+Q0J2Bscvrz284L91DjD9fwFe5c2ptQdC/gjZQ+NAr+d
Y4eFhm443WOxoQ/xlD62Vf/oQjwFGaviEM/MqDlPoQX7AsnJc7B31m78Yr5u
lmquDvvSv+A/dfHQluIF/7lbu5Ph/4fYlLvDAp6E1S7aXgt47C/uOvHzRy3V
qyY2BT6oenwYBh9ePylZg/W+PLUiB/G/tXdRMPyPfTIsLvjcS29Y2pcL+8yu
LA7Y3wm4sB/xf9vAIS+8YL/tJBOJ//YdW827NauotWmBfcBzT9s8FOutdh14
WLiAp0WuPBh8tr982g/2+oJpvKaKI9TJGv/FiP+z4+4WiH+uvfwN+Pc0E9EF
3yzNaZOgBfyKDz7PpUi/on53r9ZBfq+FyZN6PFN/6wrye9OHDoC9muDkrccL
9lnGK98rOzDksEZWyuUuxJO5IJfWWYin/4+ur4inm9IFDfAhUC+3EvGRe7Hr
jLJXK0W5njSHPavhmWrY2zd7bVNesH/0+/U38Nla6JU8qcdVwmPUiwlqkC+k
BHiiVdZxIj6bFGVlgYc9iSEe63U+4vAS633C6XDCvmeStltt44b1MinYH8F6
bYZ052FfL7oyF3hGOW6sAX9OHjVo5ed/Rf/aIXoH9h3TSwmfafVZu90L9m0e
CSuxXj1hVX7oD9OuwUV7vUdpucRONdgP3FipivjIOKSnIb+fTwcfk1jAI/P1
xWPg2XxEgdPTjlFxtdyOWOTr5Tm1OujPMlO5dvCnnyfcF/5XpImPIJ5RDswC
94P+0YHB0q7gg3XVHhH4VzZdoQD/7zlKj4D//xkvO+W7YP9ZLPjv5tAM+srN
njeI57feHW26C/GMFJlnPrAQT5ULPkwyC3hyHmR3AM/76xc26r2Yp7nt1nXD
/8oz/W1Y72Nq/ybEZ2jZPRbE5/luzabABf+zvMHuIh866b4fF4wQ/4CNOQ2w
N7vO8VwGevt6kZHIgv+Qf+854b+w0MN87WQt9aHX4EDeAp4cnx2Ox8GHAzwT
iuDD+m/1ogv2VssOnYN+MlUvqt28rIOSH7G0HVqIT8+TXHPU+yL2NWyIjzRz
1WPUy6X+LYWwL1CL4mWe7aU5uOYmgJ9/H+dO6NuKvOp3wH/omdt36HNjR7ot
7LknFvNzOXbQG+sYdyFfosFu1rA/tupyIOL57fPskPSC/V0P3jew/1h622v9
vjJK74T8f8BPsax20VzAbzXXyQ4+P1LW5EN81rxv8L63EB9//k1ZJxY3UWM3
p1uhP6nzPVuhD4ZtV9xRjy5DnszQzxS74HmiJ76irq8XVVFVfcEHkK/le14p
ay/47/H91Qv/GtJ3Pm1fsGd226dA9KH6RGVmcyulqLVeC/7L9or2Fi34f22Z
WwY9tHUUCLi6gMfcQNXowQKew75qh0plhyn7wVgD+PfzN/kP/aVLe7W70oL/
M/oHbyJfZ1UcvxM+2IhbmzcHUmz9bY6wv5ogJwN70youd/Sj/4IVV0su2Bff
r+eHPaftlsV6+mNUffz5TcDzovI1P/SHs/dCENa7r/WgD9arlvnrEOzLH376
8tgxnbIRZskDf8Qr2pLAZ58gq0Loz47rS5qht5TofUPE/7HFUrZG6Q66PjWs
kMwDNyzDka/nKb/GwTe/XVlL/1uw/3iifh38z7w4YsT1uZV+FDEy3LeAp8st
KaYQepjUVg48Z4xCwpGvW1oJ69B/I789s78YtvD3THU+QP/fRt67Bv0J+2Rz
BfXixh7pgfWOqIefhP4U5GlLd236Q7XnLtUAf36v3CQDPC0aBf7Ak69fswL2
ic6CZcCfErBLNE+hmjoocnAa+OelfP+iXs4OzU+Bbw/LrBOBR7LVWRX5qpVY
Z/R0cS9t+anvBvBoqieUgm+FCgbjagt4hkJ7n2G9c8V/RLDeR0+iD31OnaA2
HtvLAn5WJxtMw/6rlYSgyoJ9suzefagvtS8n52AvvKIq6P2vaWp443pu1Nf8
z/pf4Kdba+sbxKeOS+gJ+pfhjM8b6Nu6V97Vqbx99K9l174gnqfaCvthz6SZ
WQ174xEJXdSL/3GvHqxXPs74ReuxYtpU9Zop+LNhc8JD8Nk5fsQEeq46FXYT
es4Xw8eBeJ5MC0gyc5ilo8KDU2D/bHPGE8T/4+bDX2Fv3C9XBX17e1YsyH8B
j3TTg87VP/5QZ53tjkA/736VlAGe8Pta/0EfHnbsaEW9C5fXEL3d82XPvYrm
Kopxh/ph5CuRIes1+sWFxVfOgG93rpUtFof+7CwwBv77Fu79pyoHqeMfPpkj
/vH5swLgvxCnx17olfqRzmfAc2aKkgCegjS2y41ZL+m3JRdvI7+e/i9i4P9M
9HgJ/E+Yya2C//Kl/uXA0/F5LrmokUHx92GjR1hv9m03f8wbVirUS+TX3mmm
EvUyPv7AHvZClyQNL7xuojNlEruw3jbLi+YFC+t1YsxtyVtYb9v6M43A49A4
yIh8PZQ6X3f8WBv95vdLDqzX5MmOr8BjyaEfBL7tfF/+APODVbOuC9b75emH
hCaFejokzX4b+MN29vYF9Itgm2U64L/XU497mJeWm8guBx5Pre4bckXtlOTG
hJvAky8asD9/Ac9Jydp90B/Pgh11wLP2VWUR5jdFvcr+lt+tdN7ZiC7EZ2by
ColPhULweTI/q6uywd6NS3MT4rmrVdtfrWqSui7qQua9N7tYKfTHhANej7Fe
o9mtguAby2C3LPD8Yhcp+zzSSif39p3FepM+xZdAT042MzrA/w5R4UPgf5Z9
2U3Y63mKui2jq+no5P/4sF4BLiY/9KOrHIs1sV6BQNZqzA+6rlynEZ8OT0Pn
Z0G1lJCz4B7gV+CxtIb/0MQ4WcwDBoUbuhDPixsthuE/58Xf81v+FtJHHJK5
gV9Rvd4X8TE6ynod9VJOu8aD/1ud3U6D/9oxX7jMIhtp5WTB9+hfAVbuvxGf
42d52cGfFZs+vsd6s7J8hGA/ILKP45BrHd0bIdwH+w8MbYbQk8RSvQnojwRz
lDjy1TZ15gnwb+IpLBcaLaCkpzf6AU+b7cFO6GF/5Kkx5Evoc9AZzBv1IU+v
gj8ulel7WzQaqS+HC14gv3JsDntgf9yl3x71VbenwQ31FfQypJHM/2WdpWr1
4/Q33T+KiP9VX+9M6OGO1l1RwMM0uN0eevX8nLUH8IQO1LaLxH6gvn17QfRw
Z/imedj37Kr/g/Ue7JD5hnpZHdM2Bvs78lMyO5N66ddVYx8GF/BEmf1hA/8t
Y3/rIp7HH7sYw3/l+yTSTw2nVcVqM2opu18Ce5HfqwdWtGkt5Hej0dWT6F8c
CVkDsF+dT9+H/5ng+AbbySDKoeV5HPTwei0/E9arvFFDDvFxHVB4h366cseL
2PsL8TEe2GPnwzBM/T24Zw38L5p9fBT69nev+R/008D49PWY97Z8/EH2j/I/
lvz1GGuhm9T27Ed8to9MZiO/Dv1DYZhPtARiP4OftWkXAoBHbv870bu/QqlS
p+Ex6M+hgI950IeoZbwFwC+lVX4X9XL0AautD/YXwb0r2be30coej22Rr1im
QiHo4TO9ZjL/v3S8Lwc9ceOgCxCf4BGOd3pUG62itvYW+BPmqB8E/mRL7FkK
PJGFOnvRjx4xdFzEfL5LtPROw/Ve6t3ch0rwJ4gznwt8ZijTlwQfduxm/wL8
me7PPsL/JOP1FeZiHfTRDydqkd+x6XUfsF6LXcNk/7uyWqoe89sh2dtfYJ/i
dSPX+XAZdThiQxP08PHPvjLE8+Eq6wTU4/YbJ6bRT59oLp0i/S5q2X7u2Wr6
p9p7U+CZGtfOAZ6Vt7cMQR98CjdxAL/otvlT4HN4XYB929kmuuXbXTH45zue
zU/8W/4Ngd5uqdlWDv4/dr1NQX8++Vx8GvLfMGXlWJpP5vO5n1rgm+rUIbWi
Bf+TZU4a2xbwPJhymUC+9H3OHmsSrKbFXzPWoD8+cagWxPzz1G4mFPEp89ku
AzxHuA5qYz+V2rdNRapzmpIo5NtE9jvcTqLo18WZnKqqC3imCzekYR6bk62u
hX/24xKRB8/M0Lzi63uQr0Knhm7Es0Cw4jD0TcS/dTPq5dvH9xcQn5MRTyZU
6pvox3nHrYE/ZKfmDsyHff+pS4PPGd/FroHPN19GPEZ+tZ9eHBBo6KUfreDo
R77UVzeQ+V8wfugl+PDWsXA/5oG497c6Yb8q46r6B97PdH1523fY519gSYYe
WktpnUd+r2v3bcW8msx28wD4v4hJxyvzxgh9WNH2MfCPad4j+/1fISyrYe97
pVsa6006w7MJ+BsubbE+vHGaPqJlxI96mfn7uBT2DT56ItDb3c0spYjnhtKO
KOx3suyeZ4Waz1F3pBxmEP+RglRpxF94eUcM1itxaO1/4H92v/J9+GdiYNmw
tbWO1jFe0gg8Ij62HvBvziThBr3KO/2nAvat2xwfIf6MS0P0e/2qqLdXWcaR
r69LOWTQL0L3TQ1hvtpdKx2P9doqPdcj816F4n8iegtz/04TF8TnSIvAUcRH
qytND/Hc+4y1G/W7OVxeBXrS3Zf5VZCpjXZy1X6I9ar9N7zKbcE+2JdeivW2
qi26D37yc022YH8a8KapTGn3KKXMaquB/LYc0lwM/t86frQD653lXa4BfVbW
/k4h/tMzh9xrzhbTxd7Na4Cn1OiFFvT21p/d1uDPuHMDK+p3q8eXD8AvZqyx
+GB3OR2WX5+D9Z4TqxwDP/fLbwkDPy0yNy0DH3Z8Xm+K+G/4peyWpjFKbYxJ
OQk9rHf0lkF9JU+PRGJ+67l6aRT5PWgjchh4eDvr6zWrh+lc3zSih894h4qB
Z/518U7Ex1M9ag753Tt0URX7zUdTUeeaVRkUz6p8fwz9N1RRbcB6zbv2NKHe
g4UZviH+NvKRUsjvnV0Ot5pMGHLqvg1shv+PfwPn4H/PvixHrHe1ztA99GuF
xL1LYf9Aei5+cw+DYsok70Osd3z2vzDMe894Pgdh3ptg6MxFP73ZnSkG++Nb
mQ+f72ihuU4JZUF/Dtqx7f6ygEfnZRsFvWXYFD0J/JxMOfE473LM6PrD7V5L
TZT8qAXf9tSknkH9Miszv8Z6tx1dtRj5esEewoX4yIUalqV8mqDtg3TKkS8e
ucsrgd83vDcb9vsMjhtBP20lvm8GnscXCnXYD3RTp4o0ORGfa7qhuzEvPesN
qkB89Kadb8J/VvBfd9iHz6fMvUnqpI+WhfwH/629R/Ph//fpJlbEJ8/PTx3x
ubk6ehp8GJ9M1ORe3UcH6lc6I55XWh1XgM/7+nz5gMfp55lW8POJMX0X897Z
Ni+l2+vrqDV+Zazop8t/+KxDvqp8Vf4gPp4JHKsQH6s2z1PYL5s2tW93Vmqk
pFfufYZ4Rk94D0Jv1UJljkFvj1S1bUW/vvxW4y/RWw/1+eYj3RQ7h/dZ4N+g
1GoM/CWTZx8C/3aOPZNYb/TskyVYb0H9JoN7YVXUshafxaiXQhXn1+iPkkYN
09DnrRt5v0APhVs4QqD/04V7DlzKb6Xirzx6BTwuhiN5sNdc+8Ya+N0fBqtC
H7pSB/4Bj99wSMJuTyZFOSerEKx3o/eQJeYHaoonCvXIHhzCBH1eOs++CfkV
6vRSyfVa6KP/ttagv4+M0ZPo7wK317uAbwPbk4PA5z3HbA8Df5X3IpETGz/T
TE5G75FfV47zn6Bv/pV5uvA/rDzCCf+dpXzVsJfd6iUdG91CLwv/zgU+697X
0EM91hwt8kK/85iMGkc/LZQ/FgT8Ei49HE8Eh+gClTU3sd5WpZdG8C/7WvIj
+LPro6As8hWqZ56NftrV11KevWB/z3GK7JfvbPP7Cn3olDvNhPMKB43pLPi/
e0onmuwXBrmVfxyqosz1sogeuvRE1EFvX3DabES+ju0pEIP9YvXwrbAfDzc+
NbN1hpr5R29GvuoEbQ4i/gfHP7Ij/nJmrBeIPrA8eAb9dCu+5iJs20k9i4v/
Av8CbHb8RD9Vaxign7qOhlGYt7mbXlzEeqeuvZrT+JdODQas5iPnLYHlrNjv
dCdedsP8VmNufR/8d1S/7gI8yraeLOe2ddDx5adJ/K/o1Xugn94QMVoMPKMW
d35j3js8s30F7CPFLqx4a1G3oDes5LxLPyhdAOfzPUe0/iI+MR9M2aAnn57F
kvPn8uCJGM/RaNoqp5Cct0+WTc6ivrbMnHZCfb0QYlIF/xXka4bIfPtsrQrL
+QrKnaWanP/L2BoqQa9Sd/vrgT+RRUHuiM93byU/nB8aVeY5WL0opsV+3D+I
9f68VcECPG/+SN2GnicuXzyA+HNrF5PzpZBHCuNMwQt1ZS4xC3vRi1OX4L9A
VPAf7FmeP9YH/7nXu+UhntdvSzKLJPbSYjvvMkIfXAqsGBF/kRMzNDk/ZLin
gn73sJxXy28BT0V2mN1ijQ76xKNGoidhviv0wQde7X9KpD+eMz4M/7euPGUH
HhX1nknTH4OUycODZD7X3xQ9DH3jMrqTCP5rcp0eQfwtxNnTgOfd7bZo30Md
9L7fqQrgj8WefmnU47a8ZmvUu4DYFBv0as+xF2nQ55Itia9004vpqtSXo9Dn
9fUNNtDn8diEDPDTauW5G+DP25Lz4/D/tTk2J22qlzZWT9YH/lAtahvyJXTg
vi3wD+ixuqLfMf9eG0P08xEjt1BsFp2ou20K+TqalDB+ZCGel2bsrFGPlr0/
rpD9V0SEOPpdu9D6XrYfTfS2gX5pxD/U87cN+Bn/vOIi+mlFVHIJmU9OP8iH
/xW3ync+HWqkt1m5pcG/cwhVi3oPHkyQh/2fOKdz6Nd9n6uVoW8yV5Ij3lu/
pjOOnOdHfErWNl2A3vbwOgiCzxHixh/An2FnZmvEJzBRWNVvdRt9xsqfzJ8P
vS93YL2M68aSyP3FAHc2+Cy79fca6Jt7tqecvE8vtS7ZJAv2F5UeLYM+h55b
FYL5qm8tXz7Wuz3MXx7zZEX4g8DnPVWUcnLsVuiPZqL2KPTn6pM5PXJ+GGJE
wf7ohLg8+HzN59QZ9w919Aa1ozHw7zn+QgD5Wn+y7ijqnX3O0xT1IqbS/RP8
yYwaceBNbqRXZkY7Il/f17l/BJ4aQ/5PmD/txMqq4f+PpEUB+PnG51ZH0P1u
2iByqSLq0X4t82Gs96LWohPwfyhzdAPs1wscPAr9aejkcfYb66U31yi9AR5v
x6cC4LO8C20A+2Ert7+wr7zLmILzPbXUoT4fzSb61MtqX+T3OsdzKeh/4HfJ
lcjXMkPBNeBbyE6nN8DvWjo47Ph2oU8xPN1B+u+IPi/wPzaJdQbfMqz1fTG/
JdfeigYfVHtm5i4pd1Oa+2+Wwf/udw1J4M9Q5BzRh1NXBmvBz2KFM3vh/8bQ
3zXx+z7T94q5HmK9MiYHVgL/jzodEeS3aWLDZ5yHyPYm5cJ/+VJxHamSQSrO
7O8F+C8MusGFeXjVkouj2J8Op1d+B3+27VvXBL4p7siwHZ1tpCc6427Afzqb
/DXgFx730AEfnr6a9QV/HAybJYBnedx8h/70DHVd7MIr8LMn0WwIevv2O6sE
+JD/78JJ8F/C8tsx8E1Ux/PtZ/Fq+qtxxjXw/4Sv/Vfw3zW81R56NfPLXQzx
v87bO4D9cuWB6vx/jxlypm5NOSBfMyYca8EflVzGNOCJ6Fv/BnhOLbPMBp6l
BuHR5zuq6b5nHnXAb71intw3He75cw38uRhf2ID+m3jvnyvs52OW/eAvbaV/
aZ4j903rxdXFEM+8HVYjsI9XiFmBegw7WrIR/ZRtfb28qk43Ne319i85//xP
/RfOK/IuFq/A/iLPbf8R9KOfVweEyPmtt/n5+9pF9JFDpWnAb3ai2Ax4ynsL
l4BvLvEvOcj5m5n8GcxXfuVcQ0ZOlfTz2Slv2K81G3oAPsf0XFsG/vAdK7QD
HneBybvQHw+T6bLsdZ/ptlen7GC/ev0VQ/gv+RdG7rPkdUPyoLdyVSvI/VHp
0lON3uZj1PV3VcfJfpDN2w/27evm87Bej6b5cvDZpCeP3N9JjonbaLkxKjoo
cRUhv2fbzr6DPsucPP0Q+twrYnQb+Rp7/GIO/AlkqP8YHF640P9+WiGeESmB
38GfU+1Zf5Cvwa4ZH8xLP+5cZAEe1hVHf/X8DadZbPu9yPnGuohXwPNUvFcT
9p4+EuT84VIcswH4rDzX1Xj+cTfN9Do9DvhvPDqxBfnabPqZB/EM2hW7BvOk
SGZWAPwryQu0sGydpbzGrhQC/5bK4+XQz02H5d6hHx37dc4R/FEINSP8bCh/
subyt17644loDcwDU2v1v+B8O+9O9m7MG9d9fJzBZ5kSGRPg4ZvktLK366bX
L+c6Dv95+5qmwX8Hx/V/yTyWv1sX9WX6fcNH6A+PyLTp4rAO+rzNpw/Ar6Xm
tg3rNf7yxQz53RktyI/zCjlXaRbgmbNsXG9ztJc6sGULG+x377X4hnhOhmwZ
Rb6YD/pJQj+TXPXLsF4uH1axV+WRdKSlhj7671JRkwngSWM+8RLrFQveMQ6+
XddI6sZ+kHtZvvCTf0GUdyRbJfzrR/Ptgn+TPaH98H82rPo77Hs+OX6H/psv
2hvi9qyW8rtyUQ/8r8s9uQXzSaxRTwnmJdk1O9ZgPvk8UJ0APNZ9A12Cgb3U
z/h398g8XzP5FfG//GRlLvRhqtdoAvwJUnt6E3p7UmGC2cO4m7JWrzJA/PcP
Bz6EHgY+ZWmEHu7f9ZEV9dUx0/EP/nVYVGTvnKyju+6PKwHPwPMmGdRjlf1i
Btj70AGu4NvdDZriiGdc7PLNhS61VE0kNyf6V0D63HncV7qtoLKAR2I8rQj6
3Mq0XRv+Kx8+M3dJGqKWXaw2xDz5jYHbEfb8/+LIPKNyS/sV7KW8+w/CfpOP
waqAhfoVHj3OAP4fyu35gHh28yrMoB5jXFJVUb9tl6Z00a8TMkS7Q9wZcgqu
lGxEvt6x/I4g/Dx5rRD15bg2gpwvWTRNmwC/vQG/+3PlXkpAwkIP+RLKfvIM
/I/b0yIM/lf02Qfg/Hl+87gK7HmMra5YlE5S/nX2AoiPjcFpCeTrd2jrG+jt
P5bpdNi3L9t8GXx+zt3OLH+AQTGftvuN+LjHLxVAvTswDheAz4XrfDRQL3vH
5p/CnuF8+Qr2tmlqcdT4BPTcsH9oL+bPw0yhSqiX+Fi+TMT/s9EbZcTnsq2F
QvPfdoqvcaUN7FdUSz1CP1puGceP+SpncZAG9DlNJSwD/l333RYxOT9MSz34
wY717t8ezwM9VKg0e494Bl34w4p4blw+RIE/2XxfJ9bzf6btFx1Yj/j3MVkw
ID7f2v9kgs9xP7kp6GHjz2wbcv9l++mg0N1xqsNspxT8Dy0+4kvOW1K/ccB/
ZKV7BPg288ef9BeRl8HurlxD1KZd/+dP/GnxOKKHQxd0sP/deUlSH/Vyu+GX
Gs5/ikf03tlmTFDqjccsgce/+Cov6t0q4oM8/C9/UnQM9T7NP/EWeAI4Vjo5
fJukpO5c4ke+Ts//dkd81iR5BSOel933zIIPFQmtJF+Kq+K5/+tupO9cGTKG
fV/2jTHYR47MnUR+/3thI4X4JJqY93jg/EqKhTHvXyO9WFxGF3gabp+dBR6J
nCfSwHNyjy8P+KBsKpUF/++LkjdXJhVS+Suiz4Ofzo8fdWN/90/z11rwP8tM
2Qt6G1tzMAPxuWJ1bK65upu2bZvWg73IXNEczhNuVN8QQ3x0hsNvQQ8r+270
Qk8aTWI/UNUtdK2k5nvwoetqSzbwu9i/bQIfHBuzG4HHgiGRzOd1Zz+uD+ka
pK5PyPbj/LB+eIkg9hdTbpudUL9n095tB3+Yfc57kv3XgzMip9rSqTztISes
95FFTynW+9hW6CPWm3XgVRj4uapqHS85j71VwfzWtZsO9L06Dzzat9knoCf5
Hx9lQN9CbZcEwv+YSqsq6mt79omtLhmtVKqz/zT0zaX8bQjm4TVvfPdjvXe1
nyohXze/XCbvtc5oFfiNME5Tzg1ui8j7qJmoLYjPnbNbzYF/6/U6TuRLLrve
EeczjbJr/VlMPlBLYvrfgp+rMld/Bv4Naw+R814jttmPqMfnyc5O8N/3R/D7
ivxWeudPmw7006Tk1HWEb415DeT9yctdNdDnCwL1TLAfzBPVKvdtoRjUezcg
X64KN/URz3fV3F6o9w+lY4cxD/RVPXyA+AuUpH+6K/CJdtS/WAq+tatuuYd6
f7x/9xvEx0SI7STsVdaUWJLznF3RR9uPDdMld+bekHnyl04x8ITNXd1H9ptd
H8vxfuBsYJI57EcTD8VHiXfQ7X63NMg8771+EPV7ccPTedTv+DaTDPgvyjl0
BvavNqX8VyU5Rx11ifdEvvZOrHMAf8YZ5KKAh3c1ly74+bY1fIycV4QVyj09
UU1bfpD4Af9/lTp54H8vO9NPxGfeM8KOnK/WvLdAfk+XMM9cLu6meVlkrLDe
nRvTyXuYB4yvN8F/9NsvV8Dn7jvPM/A+QYfjQfAARwW1VkwxHf7Nn2T8hJ6c
71xbR84zX6iqYX44UhkkBf87Q4Sjms5X088XP1+Jfif0JuQN9hdlKrGNqN+7
bE27kV/J++anEP+HX0KNo5ULKZ82nhastya3qwT2/llMmtAHu5jSR9Afy/GE
a6ivMHExbzaeNnpJBRM57z2n2tEO/KlZ+hHAn956fyvwSzPIl8JejEvrQoNv
N517NJXsv96WGipBb8eokuOYx8T2/ciBHo49bE8m+ln4w6WQc5Z6HbfED3h+
SYwFoV7So/mr4b92542d5Hz18V4W+O810GpmtA2kUke0teFfRf1rDuLPZmpq
CD4cfHfoEuol+ZFXIDm/3bPtT/nLDOq+90tRxHP9NZbdiKdiOdtH4EncYTqA
/Y7gdEIo8DhG7bbbVvCRlspsEMd6z8SezMT8kLDlgwPup8Tm7zVDT9ImV0zD
f/QjR0fJwy3Uf/uePgZ+/3HzZvB51TsJX8Q/UvQ0iU9u3VIzoue5I+ucttVR
TrNn4lFflyPcOIEn8LQNB/pvS1IFH/K7d0nKBeRX955q3S2mAap0/pwW1jvh
ef8c+J+cVbCYzOd2u+8inkExDLHAT920vPs6qZ/SVYwk854Rb1ks4t/wgzkL
8XFjyuAD//+cy6uG/Y2GTCm6qpbanlBO3geWCXVYwD7S7X4m/J95xS0N/4YZ
h2Zhn21WejPF9hUta1F1DPPMTI61BfQ8n+3LIzKPcaZvx3orEjoysN5j7X4i
B1Xa6EOcZ/2BxzBoshv5euof2YJ6PK3g2oD6FT4+SO4TH2zicDN/0kTTCqLt
sNfb/IW8P2y55KAMPBv924oQn/15KeS+3uvKFQWn9/N0r2dHJurLs5PxPuJf
k1Mxj/kt8ZCrJubDM/miWzA/i+/QO/v2bTslkGCVjfi/XFT5HP5ZOvJfA8/T
Rc7PoG++Bq/Jee+7FSYy11ZWU9Imv/2Ap6GmtRz2lpWPTWCfnyTLh3ngQH/Y
RqJXmzfUa238QAVd8tpO+uNwEQ/OxwxuCKwE/hzOFcyIP2s7fybsfzIqqGVu
76DL+qyPg29bf+TJgG/ikRJT4H/Ax7JBzOefqw1Ivs5pvzV0FByi+/P72WC/
i98gFvtfwfM7Sf3eWC/giX60K8eAvJf7Zqgk6e/eSq0pyrsDff6W4Z6PfrHv
rSCZD7XZ8iWQr4t+IrrYf/0+zOC0M26enjGpNQN+Tcmr1eS97rmEz+T8398i
Eefnkpamd3E+s3rU0+KLaz91VdHfAfwPd+FPQP1uXabgB/4vPnajD/F36v6j
gfOW3SIWMWKi1VSzjE86+t3Wu/4rwJ+SIg8j9DvOvuYcxP+xrel+8H9mSCY9
Lribvlb96xzyazkhtRt6lVh9xwvrDZVlf4L4+5Tdq8B6q10PNoewZ9KL47js
yH589LAw8iVfcloE+M8uo1IRn03NLwjflByXy7Nc6qYX/0z9Bjx23/S/YR6b
76SyMZ/8qfLOwXpp6ZFhzNv27H3qXX/7qQCnuKfAo7G0cwh82xvBUI55g/Ue
w0/o5x+PF39g/9r8k+XSLX30y9025shX0jKmH9gPHj6ish7xMTp7QR18GHZp
2Y71tns/EB9NbqEaDfjJe0ufa3pswD/l0mBEzic3ONxFvvK2XXpJ3n+6bj51
jLWDVvmST/o797UuMn8KrzsYSfpdwkNynnyHvU8X/g2Xz71j0CyirSrO7cD8
0HGNqx77kdW8XlKo3+a4J0PkPe35HDfE53n/erFjjjH0IibnRsxLcsVbGGDP
8KzCH/GJU+WdxXoLnio/RX631hZ8bTjZRt8QFvBA/AfN/igCP++itnDEf3yA
5SDw8/8o2Yr7cY9wld0rJYpp6e9HyXvI++/UtoH/K3b6nCDzwHYFR+Dvu77s
Nrkv3pPmnSwzS2k5b7UD/s7FnHzI1zu5yfvA4/Bw9Av4Jvf1wF+c/5ToTWR1
NrTQyksj+8h9qN6X2+Dz1sq3vNBbLabcNvDBKVec7C9Mn3XtfPlmggobPDoO
e+NY9v3Q26ggz6fk/HPXR3ngOfBY0Ajx5JsRehP2ppdOib18CvZmGkvUYL/6
yLFp2ItLJVlhvelZXIehhxLXVfN2U0O0Okd1KjlfurqGnDfeaFAg5/+Nr+O5
8V73+wcRMfjf/1rz8qLrDDkhq666Ip5L6m1ZoSdRDOIvYP+A/dwp9Pf9cXea
yXtXxsV/jj4dp2VlQ4fJ/YUZPZaDfEk+PIr4iMy/eAO9Nd6zuQb2LyNMzIS1
O+h3JdtqUb9zBj0m0JOEknv1ON+7Uh05hvlH1fjaS9jPT+R1qgU+pc4nDU0C
v2LugBfRc7kIcv7J++StHOafq1r7/0M8PyYLcDS/7qZ1F6eJIL+ZQ8e3IL+9
W7bO4bxLuuGwNebVGwxrr0NPzsXW3Xt8f45eVxXkCf8/Ktsvg885jJ7jWG9O
yOI66P/ntzvigYf5aMTaBfGm0717WBEfDtGfmoj/83XCP9Hf491KTyM+WlPL
yTxWwx/jMcBQT1dJd3WR9xXaqx2A/967jkHYVyUKnIH+nGobUYK9uv655DdF
rVT5N3XSTwvDMsh7Bp+B2HOw12H2eAD9OT2tEAg8l8/WvM1oKaCSq8OsYJ/q
LkHObwd/+nuAD0dfzdDgzwelNDX4L6ztZWYw7aBTFaYOwP6yasMt+H/ndvIa
7JdIvcvFfoHK2smKeOa3GWwQkaimA/vn12G9Tl0MB+DfLzZGGvXeLKNcDP/1
zYuU4d+KvYop5W0zzf5FOJWcBz4aT0Z8aivXkvNkxjViHojnga8rhWF/J9T/
LU80Q05RISN5D5mQ05IBvX35YEsh9GpDqcha2Ds0thC9dbofxFuya466V/bv
EPRtYvzrfdwPSpmrdMC+gocvBPXoyugQgPNP318Gl+MudVIladf+Ac/oSteX
5H2smd0x0l/uiT4E3/L5fF6R8xmXbBuR94PUEH/uRfCn+IjuHPR2S6H/IOGP
alcd6st2JkcX/jcd+L6h//cgdcprpzD4n6S72RH9jisl3gf61vhJygr75UX5
ZeQ8hLqtdOy5RzAlZ+N8DP59XUangD8xdEQN/UW5zd8ZfD6zmkrFekPurlLl
D4ygHb40k/uanR4u7MCzu0QoAXjcmILIeyTB4tp92H9N3Jc15sqopSRSAl5g
vasWLRFG/V4QWC6N9TpG5PVhvTLPW7eS935Kvf2u31opkaoPmeCDcgUTea9+
9flvbuS38XgE2S8Unkyqw37c1+nY4S9+ZVS3nO5+xH/bbhlm1O9eyf0HMf88
4pn3Qf/qWTwihv6ufqkkus+ol6rSsSLfW1nW7lBH/CuKbbcAT0GO7jT03M6/
UQP9ReHcqfuv1i1S1OcQJu+fQy45nCLnJxaFdcDz7T2liP6VWLjoNuJz8dn2
PfJqs/Sza1etYf9Srfck+NbxL6qHnD8n7M2A3jJaHQ75Td5jjGe+5+2k3qTz
RpL73I6qbKzX1Dk4G/7rf353Qv2K3DAk+69Sp4PfVXq6aWv2YHJfeT/Q1Qb9
dD6tPBL9d9rvVyry++f2Y/J+4+Meg29uHbVUcvmTUMw/yv9VkPfDRpMDkeDD
FrsiScy3j4If+cKeJfsxv/vQBP1GSy8F+QoVST2O9b74uP836v3dnT5mxOdz
4WFW7Ef0pJI+MWp00jbXK26T7zV2sbMCv7gnvRF6eGNOQhz12L3PiY/cT53v
qyszbKL/qBwTw7xx1NU7DP1USlxjNfCob9tjifw+2XLGGOfzF67w6Dw40EGz
RGYVID6nvgqS91cqOtL50IfzpbVbgL+hY/VB8OdR2IvVvDub6P84WkaAZzp3
VTPw8K64Rt4flj5lOwL/QraSPOCPzceE7Dta3VSXz/109NNPv4VYcX6YuLmg
Bni0Req2on5vdXdq43yMRdgiemVVFH1HIDUA/r+ImrvB/+59FDmPGp1gJu+B
x7dclEN8ykqfbxBj7aQuvfaKAH7nTQ7G4JuETUQ54inr8+gh9NP/rSvZny5Z
oxYbJNpGKzpvGCff051z/oD1bjPI2A3/D3hcK4DnXvueCfDZ1C386uKFeWPD
+1hy/5IXyzNM9Nknxw7rTd74WBH8yZx6QSP+GxJ/N77mHaZSHpyUQr1Mltwz
Rf0+GR+WB3+GRXSroW/+1hLSiGcgu5h+nHQH9ZFv/jbyFTpnvh3x8S64N4jz
jRWzWzLRLzpt91eS+7UvNnE9rUV0jfWvK1gv34yfCZnHttUfxno7I534wYfl
zrudyfcyXz6eTpGdozoMncn7ihNt126jfj/6pjJCP8NZgkXJ/alXciX07Yvk
pNjLa010lFPpMvBZK736IN4j1U/H7EJ/f69e9Aj5DWnhIe+pfseecDV+M06n
PVCoeU7uU3jPAk+/VOcr4HFnj27DvPfm4BnyPl+sKWDxBfYeelGdiDvwzxUk
C6F+/S7mk/sgjfSZVsRnrbD/TeTL+PDyxCNH22j2E0zkPjF1t8ZmxP9Zb4Ag
7HU0dooDz/oPd9mx/2LIXP9GJ7CY5iiXppCv3MX9YfBvyMpiBzxKI0yRmE/c
CzTJfrzhb4FkUNnCfJ7WdR7+IyubyH2ckV+6Kuor3pJTCPxXpfXIPPApJTZu
77ZOSqM4Ygb5KtV7FYnztBVuVdGIT97lRdXAY7az/Af0+fSWBGsVa0bFURH+
RPBfKfDyQ+Q3pzy+A/mVuxgmhvOErWs9XeE/Y7TCvp+/ko6JryT3a+6XHTaA
n4fezdtDr0xEvjpCD8epPX9gHyWR1+NW2koff12iDr0a+/ZxHno1dOBoHfj2
xHlxBfRZwjQlFvPqULVM0D/ev1TEIFMY8Fu//JsHPG6FpirYHz0fX34T6x3K
/2kO/0kPM3qvNtVSWvxmguBzPOc28r1P2x//NPQjo5gJBfI+KtGTEfl1vTQ3
EhY9SXnFTKqjP07YdsxBD6Vmw64iPg2vgwaAJ4bttzDmebmfpU4att10JXPV
ANYbnCpuD/5ELHtxAPk9m77RAuv9fOYb6ddMRtlLfo9U09ZySunkfEn8ySTm
Pff7xaG47zZtP3IV+ZWP2BMDe26tmGcuhnP0P0OlLPJ+aYWKK86Xcv3zGWD/
WiZ5HfTE+cZmK9xv+kgNn5Z+0USr35Ei+iMdE0q+j9Ozkr+NenfXiFwE/x1D
vD/gf/ibblyObjdVxb5tOfjzbHzPTfCznCs/i8xX/gEX0N9Ltv4h34+ETdes
iqKmadscO0nEc3fmeAHy1RjDo4F6XP0sqQTx6dQ0jEd/9GacWL7myAhlqnRb
CvF8PDFNoR7N76qmY39txl0oi37kXHraG/7vMhdtWC8/Sg1yPj0N/o+srZIE
nl6z82eAx1r2kzvqvaCLyQj1m5zK8ibtSTdlaXHRm9wf7Ukl77WYnxXeAz/P
C2cdwPzMx53pDf6EmLSbx4dPUt2Dr4+DzxybfGpwf7csrbkQ+X0xHNUK/uzf
3XYRfDBaHijdcqaIVtp3pwLxbDd+6Y78PiznVkc9HvCYtYBe7bd+QvTTzkM3
e1ysjw4xrhQh3xO5quXhvPeGlJw9/Iu72JkiX98DBlnBH07rT5x75Dvov6Xy
8livmd/GLyRfTVrmyBfHo15V8GcPm3UH+Cy106l04m4rdXLiiwzy9dLiRSXi
k5p/Khzx4Qx/X4P7XL93QurAHyDn1d9bP0i1M54uxHqDI7v2g8+mR+U70b8O
prJKk/e0ATkMyNfGn1ZG2g87aCmJVSvJ96qx1+5Db40EpjyQ3x0cZwqRLxaH
CXJ/quNyTfRW6TDt4xiZS84P5zyioD+P3NK0UO9lTWNaWK+nMmc7/N8I3x5R
kdhEd379sQr+UyzKd4D/OgJe5H27jv1PbuCxU5MPgR62LmUz7LrVSTv9/E8N
/r8L3DFD/K+J7Sbvo4KW7/AF34r3dj5Hv8sSvvpuRKmF8oxe4gQ+jFgP15Lv
3d4OZoJvQu+2XkO9O4clWSCeRS8vc3EkTFBNp79kw/5y/MeDsL/qZZIL/rA6
h4iCP7Xx+kvQXyKHVOVO/eqluW5x2wH/rhsZQZiHZYWlubEfP7P93n/gwytR
s/fk+5eGRtfIhf3j0piXJL/1h0zI+1LH7svDyFfHPdNqzHsBnS+JXoVXaSnq
uBdR+S+jyXueVov6n4jnefX1txBP7UU/YxEfSs28F/vB0X/lJ05EMCmGj3lF
Av/XU4McmJc2+X7bjvwe8CnmQ/9aYaRxicwPZ82dlLZ/pusV5VmB35+/RAr1
y8p7Xwv4JdZZHkC/Pv6+icyfQ3EPk2YMoujJ01E9JF+3h67C/nqG3xz4YDrY
8B3x7xgWf4r551au2vur+6ppXQUBRuRLQlv/BPBrm/9XjXqxNVsuin5R9kv+
HPjzZN+P32MF4bTszmp3rHdNz8YB8L82d/g01mu4tKgC58l0Zyx5zxO3/CqX
x80qql/4dBH4fItPeynWy6trY4D6OlLxLAz1strUWoacPwzJ2gm6VNB345eR
8zElq+Kv4Jtjo7Eh9DPhjVI+8tUvNnsH/lPpRmsTywH636QLuT8V9f5XhfVy
MiVR2O94V390xrxkV/p3H/w782ocqE7qp6YmXsui3gsz7q7AfqpNzMAV/Siw
OTaXvK9b8V4F5xuzBWHPnz2bp7uyi3JxXvTULPwk9Or2xlfBwO977Gor4mnc
sUoTes5tFS97hesvJTI4K4D8Du1yWgV7bv8oZ/BT6dq5dux/a+MZyfeh2knP
4jO0Rqk/uUrCiE/ggbOp0Lds07ZM8OHEOv5L4HOmVC8zzt+iHhgxnFo2RGUM
HiDvXTm31x9CPw1v93Yg79925fxGvWfWBJLzN82OWKVNT6qoHSxiSuR+fFfV
beQ3IOUo+f0E0RSlFvSLMBsWsh//PuHgZOaaRf9d6+kDey/lp+7I75KU8W2o
3/B9ZuT9DNMvgWLg92cR1xkQq6Mcx1TI+di6kWUrUC/RD3sWwz4rRccNfKD6
bpL6DU3fd73bpoiujFYNRX7f8uWTeoy7LhWK/v7r955K8E2rXeUq7MX3W+xU
v8GQw9qnwY/+dVItZRjvD+e2CIdi3ljyNU8Q9gGt9pOw//WvYmbjxAyVIFbF
i/xWm7KUQR++3PxvJ+Lzk+4KRHxut49+J+8bP50o5TrSSXPdN1bAegVXzzID
f+FjdcLnkbX3yfuTux+3kO9Z3N+n04pSH6nh1OkPwN9Q3/wA80m2eJIG6lEk
kHEX+JwxNFlEvl8ze7LEWqKO7v300gD+98acJ/Pqon8Whagv4w2hF8DPpZrK
osjXmvclPn/juukAN9kRcl5nyNkL+xe2QRGIZy0v+0foT+AFm2LSvwyan9Yz
TlP3T/OXg58ny6qryH7nc7sD+MYW98Mceh7KGcsBPbzGlmpx52sVtSYytR71
K3+j2Qz5XXP81iTwpMrpuwPPubEfJJ53wxqdX+6opjenJSogv9fenalA/6pf
s2Ex4uOq2xUO+z8xCfHAk6cYGjzt3UqNeG4i3/sH7o3hhf/nAaJkP76uYYcB
8HPo15Lv5Y2azgnUcA7Rw9EmZD+YHmRTDX4qstzYRt7Dv0+mwZ9FYxpG5PuU
9+KbQhbm4VXO1uQ8c3JpYjj8/1uZ8hd4nlxwKkX9/mxId8N+LaXGm9cjuJaK
Xq5A5sPJW/8JoL93xb5mAR9k0xrI7yFEbxKqQ72XGQxt/nqjmq6/m1SM/FpF
lUhBf6IP+cyS98aKs5mIp6jueX3MJzw/X/O3HwynxS+N5ZP583lMPvxXTJ9L
RPxt9j8yQP/a4h58BfhXRgd3frrBpMi3nEcb9osqgwygDwFLrh0GHvNLXD/g
/9DGl3HQZzOu8NdKnwppj5QP5PtQem3qQ/Bh9uvn14iPTFtoLfSwtcQsnNzv
jMYxGyTl0+kHw8h98atkvYeIz/ZVLDOI//6C8o/gp+DQFx2yH7R6E+/0/iWt
bJfgAj15bvuKFfp8nflwBvC7VtZvBh7hf32rMQ/ITHG3hM5XUffW9jCSeaPH
biXezwTN8z0F/4f17OMwz+z5XkK+35F32jQ+wVhFFS33egA8HF9NLYFnf4MV
G/Y7kmm/IrH/Yu78sx72QZ+mFw2bjFEhz9KjEZ836znI9w7acX0HoLd8M0wT
0B9zR5fj5L7+z9IH9ZxFtMOeyoPwn3eC2Rz87GfMuQc+sx9WrUA/3d/Z8hv2
XWOftrH5dNM+z9c9Aj+Vf2SLIZ4rTVh5EM+A2pOhiE+hSyj5/YdP3hKdimId
9Mj9jLOIz5F8ShZ68rVwIhbxmdih6AV97kyUNcV8m572S7Lrajdtd2lTHPoR
u6Ptb/DH1iS1ndx/rfvSC71l1vUm5xuzt+WMXT0X+lFBihnwZ29YTOaN7we2
Xwd+lnsChchv5rDAV+BxCBX/74zhP+ps8F8yHw7e/xmN+HQrXLkPPA6X6Crw
+dU/y3HsB/1nnwzwFFfRgQq+XNBP17cJXTj/vDLnKYr+WORVKYr9oxK7shHq
ZWIgVuNvQjdVuGKNNfLr6Gj/HvYBSlOXMe8FxgQHQG9Hn/uS9y2S8VamE4tm
KFG3VzHA0yi52BD9VHxrTxTwVEenVII/ye4KxP8llu11Zk/qqGX35hoQf/G/
3Y2o93VpbwRRvymsovuAXyy2eAz8T//hkHH2Xh3NzxhA9oMsCkUq4FuI7H1y
H53Yuecu5p9A3RXke9iUrArD1txJarr54T7ov1zK2kHcFzgu607CPBmpk0/6
iy7P40ng//d+xM5Waoh+tvIcOT9/d9e9EPx5VbZ2H/D0XHtkC/4UCRqR89UG
17fXlYZe02tsKkXI729Y1h4i+/ezQyGor9ltVmS/afkp6AL0gYkvUXCTdze9
LeZ4GuJp3DGvi36XV9vCgHgmRnaYI/5LNsobQZ8fvNTddOZkC8Vklz4HPL+F
ec+jXhgSrdvBB/4OmvSX8LwB8t5MaXNI3Z0lFdT1dYmy8J8kLb4W+RL5/OM8
8ttz87wC9LnsbgA5/wkyONNYL1NJC6/N7wbffI8Hbof/jMfHtMH/X/WxJeBb
5OqVPYiPlu0eq5brI3Tp7CJy3mu4KNUJ9jXXz3Chfi+clFiN/ekGSnQt6Ue0
ommT2Ai1bk3QGOo3UfGdMfRto6+1EOq3amxYifz+kphTDanH06dCtvxXRRlE
7Sb8SUjX8IR+XipoCwF/tt38XEvuT/8UkO9VjwmvcGuw76XuSqqQ73HWXu0V
wPmzg0jAN/KecOwyA7mfPa6Rh3lJbvy/++7zvfR1eykX1COr/CfyfVzs7r/s
mB8qPaNtwU8tL+4PmN9+6q6b6b/AkLM/VagF8QyMPDKJeSNQLPAC7Ndc3zAM
/2yvM+yRX1/b41fcB1vpwxoy5H3RYscyS/Bnxz5RMi+lLA31Bx+E+g7vAv+D
49UFH+yZofc1K5L7MmUtga+Ip1zHti2IZ5noNRnoA29+ayz5fZKyzu0ROd30
L8d5VcTH66YVJ+Lz9j/ZLMSzUe95OfjzwaHHAPePfoyvQrSedNNKn57rAL+a
i2Ye5mG3rMtKmK/WbW9PRT+SM647Tu6/ihILx9t6adcztdXkPbyJxE7YN/Fw
ymK9jGyG5DxkT+Bxcv5wYeWfKl+hPjro6KgH7P8pqgURPXnepg/7+yb5StBD
pTijIcQnNN1qzfqZaeqd3ntx2IeULdlK3q/+MpdE/e77yWyA+orhUyT8+SFc
IP788ChlwmW+BPUltkh2DvVl1l6th/xSr3aOIl9Chg3MeF90sCMlTTfoMdXJ
ubYZ50tC8q6q0MOCp0Ns6KevTwY8w3plH8zYY72RE/2j2yt7ab/dnOcQ/2PW
DOR9CL+07yjyteyk5FHY65h5kfeuHafCVkrvaqSsdzSS7wHVD/LPYD63kdt6
g5y/adb1Q08OSQZqor64GPIOWcS1UAX+twRhX8XKJ4V+0dnyIAP20d/9G8CH
oqOPOLFfZvSrLR+4VUTX+vUcwnrPuX72AJ5H7/jJ72WFWK7VR/xv715H9u/C
sWcaVB6MUcmHrFaT+9b9WSfQL0qjOFthv5Ryr4D9rF6BD9nP7udp7lnYT7ma
Hp4g74H3PiS/Z+WdVEh+D2RNZF4Q+MO9Tt6Y7E+fcL0R9WXIOZ8m6E/us1rG
zBH/L50xkuCn63J2Rcxv32438wCPmmGb+Q/GGpp3Ir0O9XUz/wQ33kv4THYF
Qt+q04UCsN/purUuHXhiY3Pl8gor6NED+uT7+sT0LeT7aJcJ/UfAzxPLQr5n
2Rpr54fz/NZ7n5fN5FXR2U3RuvAfon+pB3z74DJzE/wJUG7jg/+TSYneyK/M
v3bjs0eqqIP7TVgQzxi2u78QT03PAvJ7UKK5zf04L5LW7yLfu9mKThy45DBA
a/pd2wr+2LorcIA/OkqSB7Ef1L0VlAo8OlsfXUF9HQ46flPALYdKEUh8ifz+
OnSGE/1ubIfXFeTXvMJxBnrFF1zjQM4zZbb9ddnRQX9nEdEm83/fnjbkq8FH
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
+qW+JQ==
               "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
         5, "ClassPriors" -> {0.6198581560283688, 0.38014184397163125`}, 
         "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UHA/UC0jI9MoGqFoGEAAaSoQ5Q==
          "], "DistributionSmoothing" -> 0.5, "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|
             "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
              "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "NearestNeighbors", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NeighborsNumber" -> <|"Value" -> 5, "Options" -> <||>|>, 
           "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
           "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NearestNeighbors", 
              "Options" -> <|
               "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                "NearestMethod" -> <|"Value" -> Automatic|>|>, "NaiveImputer" -> 
              Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
              Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
           TypeSystem`Assoc[
            
            TypeSystem`Struct[{
             "Value", "Options", "NaiveImputer", "EMIterations"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 
            TypeSystem`Assoc[
            TypeSystem`UnknownType, TypeSystem`UnknownType, 
             TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
         Dataset[<|
           "Configuration" -> {
             "NearestNeighbors", "NeighborsNumber" -> Automatic, 
              "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
            "ModelUtility" -> Missing[]|>, 
           TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
         "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
              7168142382301173801|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {50.}, "ID" -> 
              1978735388468315165|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
              9071588231046195481|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 0.084772, 
         "MaxTrainingMemory" -> 2562360, "DataMemory" -> 171120, 
         "FunctionMemory" -> 184112, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 8, 12, 23, 39, 36.33174`8.312861176936641}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
         "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.9325066133552113`*^9, 3.9325091763991203`*^9},
 CellLabel->"Out[49]=",
 CellID->334395390,ExpressionUUID->"01859023-9f96-4b61-9cbf-b3f235a224d3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Here are the training times of the classifiers in the obtained ensemble:\
\>", "Text",
 CellChangeTimes->{{3.7346907215746202`*^9, 3.7346907521968412`*^9}},
 CellID->122905794,ExpressionUUID->"e85e7d32-c93a-4256-932e-019efe59f778"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierInformation", "[", 
    RowBox[{"#", ",", "\"\<TrainingTime\>\""}], "]"}], "&"}], "/@", 
  "ensemble"}]], "Input",
 CellChangeTimes->{{3.733955358377993*^9, 3.733955377908691*^9}},
 CellLabel->"In[50]:=",
 CellID->1945894991,ExpressionUUID->"726fafc0-b6b3-4f32-89ea-0e26bd526107"],

Cell[BoxData[
 TemplateBox[{
  "ClassifierInformation", "mlobs", 
   "\"\\!\\(\\*RowBox[{\\\"ClassifierInformation\\\"}]\\) is obsolete. It has \
been superseeded by \\!\\(\\*RowBox[{\\\"Information\\\"}]\\) since version \
\\!\\(\\*RowBox[{\\\"12\\\"}]\\).\"", 2, 50, 1, 26684125255023155435, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.932509176444013*^9},
 CellLabel->"During evaluation of In[50]:=",
 CellID->218615531,ExpressionUUID->"8f9b5bbf-5cf4-49c6-b271-1d725ea65a27"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"LogisticRegression[1,0.9]\"\>", "\[Rule]", 
    TemplateBox[{"1.213305`", "\"s\"", "seconds", "\"Seconds\""},
     "Quantity"]}], ",", 
   RowBox[{"\<\"LogisticRegression[2,0.9]\"\>", "\[Rule]", 
    TemplateBox[{"1.425079`", "\"s\"", "seconds", "\"Seconds\""},
     "Quantity"]}], ",", 
   RowBox[{"\<\"LogisticRegression[3,0.9]\"\>", "\[Rule]", 
    TemplateBox[{"1.22511`", "\"s\"", "seconds", "\"Seconds\""},
     "Quantity"]}], ",", 
   RowBox[{"\<\"NearestNeighbors[1,0.9]\"\>", "\[Rule]", 
    TemplateBox[{"0.08632`", "\"s\"", "seconds", "\"Seconds\""},
     "Quantity"]}], ",", 
   RowBox[{"\<\"NearestNeighbors[2,0.9]\"\>", "\[Rule]", 
    TemplateBox[{"0.084772`", "\"s\"", "seconds", "\"Seconds\""},
     "Quantity"]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.9325066133795757`*^9, 3.932509176449175*^9},
 CellLabel->"Out[50]=",
 CellID->2074193147,ExpressionUUID->"4d07c983-0820-4413-989a-fe373b8cf5b6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
A more precise specification can be given using associations. The \
specification\
\>", "Text",
 CellChangeTimes->{{3.7346910792968397`*^9, 3.734691140396841*^9}, {
  3.734691520815839*^9, 3.734691533521224*^9}, {3.7353313953177347`*^9, 
  3.7353314140715313`*^9}},
 CellID->161074978,ExpressionUUID->"223c84a8-d43f-4cd3-b51c-37581a13f82f"],

Cell[BoxData[
 RowBox[{"<|", 
  RowBox[{
   RowBox[{"\"\<method\>\"", "\[Rule]", "\"\<LogisticRegression\>\""}], ",", 
   RowBox[{"\"\<sampleFraction\>\"", "\[Rule]", "0.9"}], ",", 
   RowBox[{"\"\<numberOfClassifiers\>\"", "\[Rule]", "3"}], ",", 
   RowBox[{"\"\<samplingFunction\>\"", "\[Rule]", "RandomChoice"}]}], 
  "|>"}]], "Input",
 Editable->False,
 Evaluatable->False,
 CellChangeTimes->{{3.734691333994342*^9, 3.7346913618220367`*^9}, {
   3.7346915431015043`*^9, 3.7346915798837757`*^9}, 3.734691695343993*^9},
 CellID->1357760026,ExpressionUUID->"73c442aa-1ca6-4192-ada0-1b0278a44e7f"]
}, Open  ]],

Cell[TextData[{
 "says \[OpenCurlyDoubleQuote]make three Logistic Regression classifiers, for \
each taking ",
 Cell[BoxData[
  FormBox["90", TraditionalForm]],ExpressionUUID->
  "90eb80ce-2d04-4819-92f8-0e5f08a89281"],
 "% of the training data using the function ",
 StyleBox["RandomChoice", "Program"],
 ".\[CloseCurlyDoubleQuote]"
}], "Text",
 CellChangeTimes->{{3.7346913369937363`*^9, 3.734691422517022*^9}, {
  3.735331404045601*^9, 3.735331428390924*^9}},
 CellID->711523960,ExpressionUUID->"7c5f3794-dfe8-4ea7-8114-cce0673f4bcd"],

Cell[CellGroupData[{

Cell["\<\
 Here is a pipeline specification equivalent to the pipeline specification \
above:\
\>", "Text",
 CellChangeTimes->{{3.7346910792968397`*^9, 3.734691140396841*^9}, {
  3.734691709038022*^9, 3.73469171478421*^9}},
 CellID->1394249224,ExpressionUUID->"f1403f78-f911-48ee-82f7-1188d10e8d8b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ensemble2", "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClConUnit", "[", "dsTitanic", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConSplitData", "[", "0.75", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConMakeClassifier", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<method\>\"", "\[Rule]", "\"\<LogisticRegression\>\""}], 
         ",", 
         RowBox[{"\"\<sampleFraction\>\"", "->", "0.9"}], ",", 
         RowBox[{"\"\<numberOfClassifiers\>\"", "->", "3"}], ",", 
         RowBox[{"\"\<samplingFunction\>\"", "\[Rule]", "RandomSample"}]}], 
        "|>"}], ",", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<method\>\"", "\[Rule]", "\"\<NearestNeighbors\>\""}], 
         ",", 
         RowBox[{"\"\<sampleFraction\>\"", "->", "0.9"}], ",", 
         RowBox[{"\"\<numberOfClassifiers\>\"", "\[Rule]", "2"}], ",", 
         RowBox[{"\"\<samplingFunction\>\"", "\[Rule]", "RandomSample"}]}], 
        "|>"}]}], "}"}], "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", "ClConTakeClassifier"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.73395456414038*^9, 3.7339545745637197`*^9}, {
  3.733955225906279*^9, 3.733955269655431*^9}, {3.733955331129032*^9, 
  3.733955342534296*^9}, {3.733955384374886*^9, 3.733955403060371*^9}, {
  3.7346911481951113`*^9, 3.734691256115036*^9}},
 CellLabel->"In[51]:=",
 CellID->1952635351,ExpressionUUID->"64102b9a-d8c2-4307-b66d-345980e0b008"],

Cell[CellGroupData[{

Cell[BoxData["ensemble2"], "Input",
 CellLabel->"In[52]:=",
 CellID->97250803,ExpressionUUID->"3183483c-98f9-476e-b3f7-7fc7aebc1f56"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"LogisticRegression[1,0.9]\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["705", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[<|
      "ExampleNumber" -> 705, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f2(f1f3))" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 705, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.86241134751773}, 
                    "StandardDeviation" -> {14.449321155433712`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.9917491300172717, 
                    0.04274000254902794, -0.12085923751246319`}, {
                    0.12756894033720256`, 
                    0.42201505919311777`, -0.8975686354120627}, \
{-0.012642332507418181`, 0.9055807981601303, 0.42398536464415054`}}, 
                    "Precisions" -> {0.9841403043990838, 12.208875532718553`, 
                    16.09932734176383}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002512538962633693, 0.0625395058433545, 
                    0.05879959573386135}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3631133675148427688|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00025125389626334815`, 0.06253950584335452, 
                    0.05879959573386129}, 
                    "StandardDeviation" -> {1.000236825134149, 
                    0.28489429235181324`, 0.28017643786029933`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00025125389626334815`, 0.06253950584335452, 
                    0.05879959573386129}, 
                    "StandardDeviation" -> {1.000236825134149, 
                    0.28489429235181324`, 0.28017643786029933`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {19.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.046676, "MaxTrainingMemory" -> 311496,
                     "DataMemory" -> 78752, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 12, 23, 39, 36.512476`8.315016263856627}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.3884575522359337`, \
-2.3884575522359337`, -2.323163038631989, -2.1616521515759617`, \
-2.1224132740279686`, -2.07886049595568, -2.003457959742526, \
-1.746388653902611, -1.744229859625972, -1.6834041821202206`, \
-1.5675232073631615`}, "LeftBoundary" -> -2.323163038631989, "LeftScale" -> 
                    0.032647256801972446`, "LeftTailNorm" -> 0.2|>], 
                   "Entropy" -> Around[5.945865112554609, 0.2676622766542457],
                    "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 616651398117295976|>], 
              MachineLearning`MLProcessor[
              "Threads", <|
               "Input" -> <|
                 "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {29.86241134751773}, 
                "StandardDeviation" -> {14.449321155433712`}, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                  "female" -> 1, "male" -> 2|>}, 
                "Output" -> <|
                 "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>,
                 "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.7273886203765869, -1.041688323020935, \
-0.3814893066883087}, {0.39698874950408936`, 
                   1.2774958610534668`, -0.9317017197608948}, {
                   0.5576431155204773, -0.062414247542619705`, \
-0.7499105334281921}}], 
                  RawArray["Real32",{{0., 0.}, {0.23993441462516785`, 
                   1.1908897161483765`}, {-0.02056935243308544, \
-0.07570835202932358}}]}, "Version" -> {14.1, 0}, "ID" -> 
                5988483279055413579|>], 
              MachineLearning`MLProcessor[
              "MergeVectors", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|
                   "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                  Span[1, 1], 
                  Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                7619735631186802745|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "died" -> 0.594059405940594, "survived" -> 0.40594059405940597`|>|>,
        "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "LogProbabilitiesFunction" -> 
         LinearLayer[<|
           "Type" -> "Linear", 
            "Arrays" -> <|
             "Weights" -> 
              RawArray["Real32",{{0.506814181804657, 
                2.0310680866241455`, -0.5446005463600159, \
-0.6433754563331604, -0.41905710101127625`, -2.0232014656066895`}}], "Biases" -> 
              RawArray["Real32",{0.5816495418548584}]|>, 
            "Parameters" -> <|
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 6,
               "$InputDimensions" -> {6}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "14.1.1", "Unstable" -> False|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|
             "Weight" -> {0.3333333333333333, 0.9444444444444444, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`}, "Type" -> "NumericalVector"|>, "Key" -> 
            "(f2(f1f3))", "Invertibility" -> "Perfect", "StructurePreserving" -> 
            False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "LogisticRegression", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> 0.1, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
           MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.106697`5.479697202032323, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.48869276433863984`, 0.04278143521218334], "Accuracy" -> 
            Around[0.793481565307721, 0.02404195822971739], "EvaluationTime" -> 
            2.7396550812928966`*^-6, "TestSize" -> 555, "ModelMemory" -> 8968,
             "ModelUtility" -> 0.005513985227482476, "Round" -> 3, 
            "Iteration" -> 35, 
            "Time" -> {
             0.856074`6.384056300699535, 0.888545`6.400224420861599}, 
            "TrainingSize" -> 150, "TrainingTime" -> 0.015848931924611134`, 
            "TrainingMemory" -> 98664, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.48869276433863984`, 0.03025104294742778]}, 
            "AccuracyHistory" -> {
              Around[0.793481565307721, 0.017000231697236887`]}, 
            "IterationHistory" -> {35}, 
            "TimeHistory" -> {{
              0.856074`6.384056300699535, 0.888545`6.400224420861599}}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 0.1, "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 705|>, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
         "Configurations" -> 
         Dataset[<|<|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.7550560565987143`, 0.19168665052514355`], 
                 "Accuracy" -> 
                 Around[0.6173776781587373, 0.02586114611885243], 
                 "EvaluationTime" -> 2.6160109396306825`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.2772598555835408`, "Round" -> 1, 
                 "Iteration" -> 1, 
                 "Time" -> {
                  0.122548`5.53985122139699, 0.141548`5.602448730884128}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.7550560565987143`, 0.13554293044926488`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6173776781587373, 0.018286591789896715`]}, 
                 "IterationHistory" -> {1}, 
                 "TimeHistory" -> {{
                   0.122548`5.53985122139699, 
                    0.141548`5.602448730884128}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6567447312089942, 0.05016612473101842], "Accuracy" -> 
                 Around[0.6670735920157136, 0.023797351908561984`], 
                 "EvaluationTime" -> 1.9636166553450957`*^-6, "TestSize" -> 
                 675., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.28785209516938226`, "Round" -> 2, 
                 "Iteration" -> 26, 
                 "Time" -> {
                  0.551561`6.1931385438141575, 0.571113`6.2082670394320765}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80197.33333333333,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6091239088746221, 0.019578272793888], 
                   Around[0.7043655535433665, 0.026641976207192365`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6871587082633591, 0.01780024088778892], 
                   Around[0.6469884757680682, 0.018310670372152487`]}, 
                 "IterationHistory" -> {21, 26}, 
                 "TimeHistory" -> {{
                   0.466686`6.120569766281828, 0.48439`6.136740162257558}, {
                   0.551561`6.1931385438141575, 
                    0.571113`6.2082670394320765}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4889398116454925, 0.043480525188549037`], 
                 "Accuracy" -> 
                 Around[0.7961457645021173, 0.02390989000838322], 
                 "EvaluationTime" -> 2.7396550812928966`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, "ModelUtility" -> 
                 0.0047362765796626904`, "Round" -> 3, "Iteration" -> 25, 
                 "Time" -> {
                  0.530476`6.176210733659166, 0.55047`6.192278648884618}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98704, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4889398116454925, 0.030745374210375508`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7961457645021173, 0.016906845362352253`]}, 
                 "IterationHistory" -> {25}, 
                 "TimeHistory" -> {{
                   0.530476`6.176210733659166, 
                    0.55047`6.192278648884618}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4917239662034064, 0.07767348940476822], "Accuracy" -> 
                 Around[0.807376175185428, 0.04668495209309713], 
                 "EvaluationTime" -> 3.5629594773185525`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.014416064655427108`, "Round" -> 4, 
                 "Iteration" -> 29, 
                 "Time" -> {
                  0.609459`6.236489488236795, 0.633579`6.253345767608875}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.4917239662034064, 0.054923451076533056`]}, 
                 "AccuracyHistory" -> {
                   Around[0.807376175185428, 0.03301124620439808]}, 
                 "IterationHistory" -> {29}, 
                 "TimeHistory" -> {{
                   0.609459`6.236489488236795, 
                    0.633579`6.253345767608875}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.5629594773185525`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.4917239662034064, 0.07767348940476822], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196464, 
                "TrainingTime" -> 0.04078971086172212|>, "Index" -> 1|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.01|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.967026917398915, 0.06953956832466258], "Accuracy" -> 
                 Around[0.6216406322938823, 0.02580453275044357], 
                 "EvaluationTime" -> 2.522697994342476*^-6, "TestSize" -> 697,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.6739010307848041, "Round" -> 1, 
                 "Iteration" -> 3, 
                 "Time" -> {
                  0.153049`5.636375489821349, 0.171737`5.686408865620889}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77272, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.967026917398915, 0.049171900323154154`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6216406322938823, 0.018246560093189]}, 
                 "IterationHistory" -> {3}, 
                 "TimeHistory" -> {{
                   0.153049`5.636375489821349, 
                    0.171737`5.686408865620889}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6001009911981328, 0.02659944574554146], "Accuracy" -> 
                 Around[0.686921353909661, 0.02504488392799194], 
                 "EvaluationTime" -> 2.7976277745014302`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.1913188909886685, "Round" -> 2, 
                 "Iteration" -> 14, 
                 "Time" -> {
                  0.327205`5.966364924973918, 0.347965`5.993080556203183}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80176, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6001009911981328, 0.018808648462476027`]}, 
                 "AccuracyHistory" -> {
                   Around[0.686921353909661, 0.017709407259513078`]}, 
                 "IterationHistory" -> {14}, 
                 "TimeHistory" -> {{
                   0.327205`5.966364924973918, 
                    0.347965`5.993080556203183}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4889093266033696, 0.043407571945063346`], 
                 "Accuracy" -> Around[0.793481565307721, 0.02404195822971739],
                  "EvaluationTime" -> 2.7396550812928966`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, "ModelUtility" -> 
                 0.004826860339601224, "Round" -> 3, "Iteration" -> 32, 
                 "Time" -> {
                  0.794341`6.351551972782389, 0.81683`6.36367667335249}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 98664, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.4889093266033696, 0.030693788477197222`]}, 
                 "AccuracyHistory" -> {
                   Around[0.793481565307721, 0.017000231697236887`]}, 
                 "IterationHistory" -> {32}, 
                 "TimeHistory" -> {{
                   0.794341`6.351551972782389, 0.81683`6.36367667335249}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.49170230503543644`, 0.07764789686009232], 
                 "Accuracy" -> Around[0.807376175185428, 0.04668495209309713],
                  "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.014363270415345464`, "Round" -> 4, 
                 "Iteration" -> 47, 
                 "Time" -> {
                  1.109629`6.496722791935568, 1.140402`6.508602963785623}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.03162277660168379,
                  "TrainingMemory" -> 196400, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.49170230503543644`, 0.05490535441464491]}, 
                 "AccuracyHistory" -> {
                   Around[0.807376175185428, 0.03301124620439808]}, 
                 "IterationHistory" -> {47}, 
                 "TimeHistory" -> {{
                   1.109629`6.496722791935568, 
                    1.140402`6.508602963785623}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.49170230503543644`, 0.07764789686009232], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196400, 
                "TrainingTime" -> 0.05537740267671587|>, "Index" -> 2|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6929458160601573, 0.0018573633148083642`], 
                 "Accuracy" -> 
                 Around[0.6136541720391422, 0.025733390009899437`], 
                 "EvaluationTime" -> 2.3744557801270668`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3268827469001788, "Round" -> 1, 
                 "Iteration" -> 2, 
                 "Time" -> {
                  0.14254`5.605481747956908, 0.15203`5.633474288999206}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 69344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6929458160601573, 0.0013133541950281185`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6136541720391422, 0.018196254578918047`]}, 
                 "IterationHistory" -> {2}, 
                 "TimeHistory" -> {{
                   0.14254`5.605481747956908, 0.15203`5.633474288999206}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6930653282380185, 0.002825516848348856], "Accuracy" -> 
                 Around[0.5133425143842235, 0.04067439362395651], 
                 "EvaluationTime" -> 2.728683507729179*^-6, "TestSize" -> 300,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32733430413041553`, "Round" -> 2, 
                 "Iteration" -> 7, 
                 "Time" -> {
                  0.223099`5.80004261713949, 0.231233`5.815594807220204}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.005011872336272719,
                  "TrainingMemory" -> 72800, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6930653282380185, 0.001997942123824318]}, 
                 "AccuracyHistory" -> {
                   Around[0.5133425143842235, 0.028761139552150514`]}, 
                 "IterationHistory" -> {7}, 
                 "TimeHistory" -> {{
                   0.223099`5.80004261713949, 
                    0.231233`5.815594807220204}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6922275538003232, 0.002459038156815578], "Accuracy" -> 
                 Around[0.58133627006543, 0.03460918600382872], 
                 "EvaluationTime" -> 2.5118864315095797`*^-6, "TestSize" -> 
                 400, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32601995985451837`, "Round" -> 3, 
                 "Iteration" -> 16, 
                 "Time" -> {
                  0.3693`6.018924301146952, 0.378414`6.029512188906153}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 91896, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6922275538003232, 0.001738802555880764]}, 
                 "AccuracyHistory" -> {
                   Around[0.58133627006543, 0.02447239011465384]}, 
                 "IterationHistory" -> {16}, 
                 "TimeHistory" -> {{
                   0.3693`6.018924301146952, 0.378414`6.029512188906153}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6895770726507003, 0.0046774486950245334`], 
                 "Accuracy" -> 
                 Around[0.6507085944120111, 0.05655876598300293], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3228291710898059, "Round" -> 4, 
                 "Iteration" -> 40, 
                 "Time" -> {
                  0.985612`6.4452509759604535, 0.995367`6.44952823171684}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.007943282347242814, "TrainingMemory" -> 196400, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6895770726507003, 0.003307455690904015]}, 
                 "AccuracyHistory" -> {
                   Around[0.6507085944120111, 0.0399930869621244]}, 
                 "IterationHistory" -> {40}, 
                 "TimeHistory" -> {{
                   0.985612`6.4452509759604535, 
                    0.995367`6.44952823171684}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6895770726507003, 0.0046774486950245334`], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196400, 
                "TrainingTime" -> 0.014940975270326236`|>, "Index" -> 3|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7163095074788981, 0.02789315514872403], "Accuracy" -> 
                 Around[0.6333736553945404, 0.025640957326984938`], 
                 "EvaluationTime" -> 2.4485768872347715`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.36726519855552553`, "Round" -> 1, 
                 "Iteration" -> 6, 
                 "Time" -> {
                  0.206138`5.765703051597839, 0.222051`5.7979977268422065}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.012589254117941668`,
                  "TrainingMemory" -> 77344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7163095074788981, 0.01972343915435122]}, 
                 "AccuracyHistory" -> {
                   Around[0.6333736553945404, 0.01813089480202594]}, 
                 "IterationHistory" -> {6}, 
                 "TimeHistory" -> {{
                   0.206138`5.765703051597839, 
                    0.222051`5.7979977268422065}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6646717389474954, 0.038044190037736604`], 
                 "Accuracy" -> 
                 Around[0.6589105227177007, 0.01570201247542562], 
                 "EvaluationTime" -> 2.553894658203445*^-6, "TestSize" -> 
                 675., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.29607078319932234`, "Round" -> 2, 
                 "Iteration" -> 24, 
                 "Time" -> {
                  0.509797`6.158942268946054, 0.529006`6.1750055913385555}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.011949643974870378`, "TrainingMemory" -> 80240., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6287457896133134, 0.014639592288932439`], 
                   Around[0.7005976882816776, 0.024138839751005874`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6679700859380574, 0.017996975027650214`], 
                   Around[0.649850959497344, 0.018280585041000073`]}, 
                 "IterationHistory" -> {9, 24}, 
                 "TimeHistory" -> {{
                   0.247519`5.845153535264326, 0.262948`5.871414865385257}, {
                   0.509797`6.158942268946054, 
                    0.529006`6.1750055913385555}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.49462238633946287`, 0.016328748496858288`], 
                 "Accuracy" -> 
                 Around[0.7706507522045722, 0.02055167170557104], 
                 "EvaluationTime" -> 2.555114590179217*^-6, "TestSize" -> 
                 555., "ModelMemory" -> 8968., "ModelUtility" -> 
                 0.00422957004960578, "Round" -> 3, "Iteration" -> 37, 
                 "Time" -> {
                  0.907716`6.409494984169391, 0.939983`6.424664992762739}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98658.66666666666,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.48975553802867305`, 0.02712313510893206], 
                   Around[0.49948923465025274`, 0.019045385285046044`]}, 
                 "AccuracyHistory" -> {
                   Around[0.786975594335647, 0.017186805402842936`], 
                   Around[0.7543259100734974, 0.018166286707180658`]}, 
                 "IterationHistory" -> {17, 37}, 
                 "TimeHistory" -> {{
                   0.379491`6.030746474131464, 0.399577`6.053145475400868}, {
                   0.907716`6.409494984169391, 
                    0.939983`6.424664992762739}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4904388572672068, 0.07498605511445271], "Accuracy" -> 
                 Around[0.807376175185428, 0.04668495209309713], 
                 "EvaluationTime" -> 3.5629594773185525`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.010816563830837178`, "Round" -> 4, 
                 "Iteration" -> 28, 
                 "Time" -> {
                  0.587354`6.220444924228139, 0.608408`6.235739909483464}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196400, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.4904388572672068, 0.0530231480658577]}, 
                 "AccuracyHistory" -> {
                   Around[0.807376175185428, 0.03301124620439808]}, 
                 "IterationHistory" -> {28}, 
                 "TimeHistory" -> {{
                   0.587354`6.220444924228139, 
                    0.608408`6.235739909483464}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.5629594773185525`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.4904388572672068, 0.07498605511445271], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196400, 
                "TrainingTime" -> 0.03753003305505265|>, "Index" -> 4|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.00001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5505507979266941`, 0.15931634893477836`], 
                 "Accuracy" -> 
                 Around[0.6173776781587373, 0.02586114611885243], 
                 "EvaluationTime" -> 2.6160109396306825`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.1521018555881724`, "Round" -> 1, 
                 "Iteration" -> 10, 
                 "Time" -> {
                  0.264042`5.873218007174346, 0.28287`5.903131883952877}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77112, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.5505507979266941`, 0.11265367068566397`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6173776781587373, 0.018286591789896715`]}, 
                 "IterationHistory" -> {10}, 
                 "TimeHistory" -> {{
                   0.264042`5.873218007174346, 
                    0.28287`5.903131883952877}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6000098094849238, 0.026770778903308236`], 
                 "Accuracy" -> 
                 Around[0.6899879641286555, 0.02497430534791855], 
                 "EvaluationTime" -> 2.6247366122496522`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.19122487728083137`, "Round" -> 2, 
                 "Iteration" -> 20, 
                 "Time" -> {
                  0.441471`6.096447173768268, 0.465694`6.119645636016037}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.01995262314968879, 
                 "TrainingMemory" -> 80344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6000098094849238, 0.018929799300175017`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6899879641286555, 0.017659500666936664`]}, 
                 "IterationHistory" -> {20}, 
                 "TimeHistory" -> {{
                   0.441471`6.096447173768268, 
                    0.465694`6.119645636016037}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5011322236078439, 0.044878522337676786`], 
                 "Accuracy" -> 
                 Around[0.7950043145590889, 0.02402674529786222], 
                 "EvaluationTime" -> 1.951658390417156*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.020017330989076987`, "Round" -> 3, 
                 "Iteration" -> 33, 
                 "Time" -> {
                  0.817904`6.364247325630689, 0.83692`6.374228939877472}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5011322236078439, 0.0317339074746032]}, 
                 "AccuracyHistory" -> {
                   Around[0.7950043145590889, 0.016989474529960368`]}, 
                 "IterationHistory" -> {33}, 
                 "TimeHistory" -> {{
                   0.817904`6.364247325630689, 
                    0.83692`6.374228939877472}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.49172269503694366`, 0.0776743638982856], "Accuracy" -> 
                 Around[0.807376175185428, 0.04668495209309713], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.014413903125460203`, "Round" -> 4, 
                 "Iteration" -> 44, 
                 "Time" -> {
                  1.05316`6.474039349333373, 1.073499`6.48234663770868}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.49172269503694366`, 0.054924069436829294`]}, 
                 "AccuracyHistory" -> {
                   Around[0.807376175185428, 0.03301124620439808]}, 
                 "IterationHistory" -> {44}, 
                 "TimeHistory" -> {{
                   1.05316`6.474039349333373, 1.073499`6.48234663770868}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.49172269503694366`, 0.0776743638982856], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196464, 
                "TrainingTime" -> 0.04078971086172212|>, "Index" -> 5|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.0001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.34558567141756, 0.12711759722919064`], "Accuracy" -> 
                 Around[0.6173776781587373, 0.02586114611885243], 
                 "EvaluationTime" -> 2.522697994342476*^-6, "TestSize" -> 697,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.0086973878596615`, "Round" -> 1, 
                 "Iteration" -> 5, 
                 "Time" -> {
                  0.186755`5.722817231524723, 0.205085`5.763478890551532}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.012589254117941668`,
                  "TrainingMemory" -> 77168, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.34558567141756, 0.08988571500890097]}, 
                 "AccuracyHistory" -> {
                   Around[0.6173776781587373, 0.018286591789896715`]}, 
                 "IterationHistory" -> {5}, 
                 "TimeHistory" -> {{
                   0.186755`5.722817231524723, 
                    0.205085`5.763478890551532}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6000030549569916, 0.026768561836857097`], 
                 "Accuracy" -> 
                 Around[0.6899879641286555, 0.02497430534791855], 
                 "EvaluationTime" -> 2.4518454499978747`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.19121298676687504`, "Round" -> 2, 
                 "Iteration" -> 19, 
                 "Time" -> {
                  0.421317`6.076153976613421, 0.440456`6.095447523924788}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80280, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6000030549569916, 0.018928231597453077`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6899879641286555, 0.017659500666936664`]}, 
                 "IterationHistory" -> {19}, 
                 "TimeHistory" -> {{
                   0.421317`6.076153976613421, 
                    0.440456`6.095447523924788}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4889396202677075, 0.043479770166975844`], 
                 "Accuracy" -> 
                 Around[0.7961457645021173, 0.02390989000838322], 
                 "EvaluationTime" -> 2.8568426900602477`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, "ModelUtility" -> 
                 0.004736964479971184, "Round" -> 3, "Iteration" -> 31, 
                 "Time" -> {
                  0.771791`6.339044703371247, 0.793128`6.350888275653089}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98880, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4889396202677075, 0.03074484032950116]}, 
                 "AccuracyHistory" -> {
                   Around[0.7961457645021173, 0.016906845362352253`]}, 
                 "IterationHistory" -> {31}, 
                 "TimeHistory" -> {{
                   0.771791`6.339044703371247, 
                    0.793128`6.350888275653089}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5054774882449785, 0.039961043843076846`], 
                 "Accuracy" -> 
                 Around[0.798889999388338, 0.025207251712762804`], 
                 "EvaluationTime" -> 3.5945829080793324`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.02658602062109172, "Round" -> 4, 
                 "Iteration" -> 50, 
                 "Time" -> {
                  1.177958`6.52267479948745, 1.199366`6.530496726657329}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 
                 196586.66666666666`, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.4917191594908359, 0.054925633733817515`], 
                   Around[0.5192358169991211, 0.0513693869924045]}, 
                 "AccuracyHistory" -> {
                   Around[0.807376175185428, 0.03301124620439808], 
                   Around[0.7904038235912481, 0.03415297022800575]}, 
                 "IterationHistory" -> {42, 50}, 
                 "TimeHistory" -> {{
                   1.008087`6.4550430077378955, 
                    1.029231`6.4640578519963725}, {
                   1.177958`6.52267479948745, 1.199366`6.530496726657329}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.5945829080793324`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5054774882449785, 0.039961043843076846`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196586.66666666666`, "TrainingTime" -> 0.03753003305505265|>, 
              "Index" -> 6|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6928115824412269, 0.0018615723961102053`], 
                 "Accuracy" -> 
                 Around[0.6136541720391422, 0.025733390009899437`], 
                 "EvaluationTime" -> 2.522697994342476*^-6, "TestSize" -> 697,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32669033206246545`, "Round" -> 1, 
                 "Iteration" -> 11, 
                 "Time" -> {
                  0.283906`5.90471956439223, 0.293435`5.91905690736693}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 69792, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6928115824412269, 0.0013163304649592158`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6136541720391422, 0.018196254578918047`]}, 
                 "IterationHistory" -> {11}, 
                 "TimeHistory" -> {{
                   0.283906`5.90471956439223, 0.293435`5.91905690736693}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6928021931527838, 0.0019618953479207104`], 
                 "Accuracy" -> 
                 Around[0.5987805460145739, 0.02629911493961881], 
                 "EvaluationTime" -> 2.5283823561520527`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32670573233893707`, "Round" -> 2, 
                 "Iteration" -> 12, 
                 "Time" -> {
                  0.294484`5.920606697031733, 0.306588`5.938100145854602}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.007943282347242814,
                  "TrainingMemory" -> 73832, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6928021931527838, 0.0013872695044930751`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5987805460145739, 0.018596282513008898`]}, 
                 "IterationHistory" -> {12}, 
                 "TimeHistory" -> {{
                   0.294484`5.920606697031733, 
                    0.306588`5.938100145854602}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6842230439719773, 0.002879776104182264], "Accuracy" -> 
                 Around[0.6144192676966583, 0.02894603501647961], 
                 "EvaluationTime" -> 2.4362966197180857`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.31452036783463344`, "Round" -> 3, 
                 "Iteration" -> 22, 
                 "Time" -> {
                  0.485455`6.1376939720088854, 0.496413`6.147388139719799}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.007943282347242814, "TrainingMemory" -> 93312, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6842230439719773, 0.0020363092115662563`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6144192676966583, 0.02046793764861599]}, 
                 "IterationHistory" -> {22}, 
                 "TimeHistory" -> {{
                   0.485455`6.1376939720088854, 
                    0.496413`6.147388139719799}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6638650012936202, 0.00942163409577506], "Accuracy" -> 
                 Around[0.6578958267991256, 0.05626584630102326], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.28630822116381416`, "Round" -> 4, 
                 "Iteration" -> 48, 
                 "Time" -> {
                  1.141661`6.509082158977159, 1.153297`6.5134861558222115}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6638650012936202, 0.00666210135898093]}, 
                 "AccuracyHistory" -> {
                   Around[0.6578958267991256, 0.03978596146865357]}, 
                 "IterationHistory" -> {48}, 
                 "TimeHistory" -> {{
                   1.141661`6.509082158977159, 
                    1.153297`6.5134861558222115}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.6638650012936202, 0.00942163409577506], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196464, 
                "TrainingTime" -> 0.01751187233627272|>, "Index" -> 7|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1486043963468444`, 0.09664712936883925], "Accuracy" -> 
                 Around[0.6187312769978045, 0.025847220963951204`], 
                 "EvaluationTime" -> 2.3744557801270668`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.8483865071307127, "Round" -> 1, 
                 "Iteration" -> 13, 
                 "Time" -> {
                  0.307621`5.9395609731065555, 0.326136`5.964943733848743}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77448, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.1486043963468444`, 0.06833984055891976]}, 
                 "AccuracyHistory" -> {
                   Around[0.6187312769978045, 0.018276745218436988`]}, 
                 "IterationHistory" -> {13}, 
                 "TimeHistory" -> {{
                   0.307621`5.9395609731065555, 
                    0.326136`5.964943733848743}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6000110008969528, 0.026752895456630853`], 
                 "Accuracy" -> 
                 Around[0.6899879641286555, 0.02497430534791855], 
                 "EvaluationTime" -> 2.644553962193075*^-6, "TestSize" -> 675,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.19122093705619647`, "Round" -> 2, 
                 "Iteration" -> 15, 
                 "Time" -> {
                  0.34903`5.9944077507546085, 0.36822`6.0176523671635485}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80352, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6000110008969528, 0.018917153793758454`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6899879641286555, 0.017659500666936664`]}, 
                 "IterationHistory" -> {15}, 
                 "TimeHistory" -> {{
                   0.34903`5.9944077507546085, 
                    0.36822`6.0176523671635485}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.48893692104432046`, 0.04347314777581324], 
                 "Accuracy" -> 
                 Around[0.7961457645021173, 0.02390989000838322], 
                 "EvaluationTime" -> 2.553484228485437*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, "ModelUtility" -> 
                 0.004745050455043143, "Round" -> 3, "Iteration" -> 18, 
                 "Time" -> {
                  0.400664`6.0543253159543315, 0.420286`6.075089917110707}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.48893692104432046`, 0.030740157591802413`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7961457645021173, 0.016906845362352253`]}, 
                 "IterationHistory" -> {18}, 
                 "TimeHistory" -> {{
                   0.400664`6.0543253159543315, 
                    0.420286`6.075089917110707}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4917170847057004, 0.07767431892765012], "Accuracy" -> 
                 Around[0.807376175185428, 0.04668495209309713], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.014402825671185893`, "Round" -> 4, 
                 "Iteration" -> 39, 
                 "Time" -> {
                  0.955987`6.431996980053818, 0.984312`6.444677773229353}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.025118864315095794`, "TrainingMemory" -> 196400, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4917170847057004, 0.054924037637788]}, 
                 "AccuracyHistory" -> {
                   Around[0.807376175185428, 0.03301124620439808]}, 
                 "IterationHistory" -> {39}, 
                 "TimeHistory" -> {{
                   0.955987`6.431996980053818, 
                    0.984312`6.444677773229353}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.4917170847057004, 0.07767431892765012], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196400, 
                "TrainingTime" -> 0.04724751231848088|>, "Index" -> 8|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6919867243179186, 0.00410543006332918], "Accuracy" -> 
                 Around[0.6019209788499362, 0.02625265083603481], 
                 "EvaluationTime" -> 2.5283823561520527`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32614763531588586`, "Round" -> 2, 
                 "Iteration" -> 23, 
                 "Time" -> {
                  0.497469`6.148311016168852, 0.508801`6.158092949701688}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.007943282347242814,
                  "TrainingMemory" -> 75344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6919867243179186, 0.00290297743746718]}, 
                 "AccuracyHistory" -> {
                   Around[0.6019209788499362, 0.0185634274302829]}, 
                 "IterationHistory" -> {23}, 
                 "TimeHistory" -> {{
                   0.497469`6.148311016168852, 
                    0.508801`6.158092949701688}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6343319188517111, 0.010432486767898496`], 
                 "Accuracy" -> 
                 Around[0.6634972463839007, 0.02820243306150853], 
                 "EvaluationTime" -> 2.7155528989292755`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.24125123888901623`, "Round" -> 3, 
                 "Iteration" -> 27, 
                 "Time" -> {
                  0.572511`6.20932882895053, 0.586322`6.219681183603244}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 96360, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6343319188517111, 0.007376882138219953]}, 
                 "AccuracyHistory" -> {
                   Around[0.6634972463839007, 0.019942131663752364`]}, 
                 "IterationHistory" -> {27}, 
                 "TimeHistory" -> {{
                   0.572511`6.20932882895053, 
                    0.586322`6.219681183603244}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5571467247680677, 0.031222290456953163`], 
                 "Accuracy" -> 
                 Around[0.7769563357891143, 0.049374401261209004`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.1193692106706199, "Round" -> 4, 
                 "Iteration" -> 45, 
                 "Time" -> {
                  1.074747`6.482851235016802, 1.088691`6.488449626201722}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 196640, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5571467247680677, 0.02207749330628761]}, 
                 "AccuracyHistory" -> {
                   Around[0.7769563357891143, 0.03491297394882651]}, 
                 "IterationHistory" -> {45}, 
                 "TimeHistory" -> {{
                   1.074747`6.482851235016802, 
                    1.088691`6.488449626201722}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6915649927281314, 0.0022124873729015048`], 
                 "Accuracy" -> 
                 Around[0.6134993453960412, 0.02578345678699621], 
                 "EvaluationTime" -> 2.6160109396306825`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.324991784198424, "Round" -> 1, 
                 "Iteration" -> 51, 
                 "Time" -> {
                  1.201036`6.531101018689909, 1.212356`6.535175159640947}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 71216, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6915649927281314, 0.0015644648246682636`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6134993453960412, 0.018231657136515332`]}, 
                 "IterationHistory" -> {51}, 
                 "TimeHistory" -> {{
                   1.201036`6.531101018689909, 
                    1.212356`6.535175159640947}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 2.6160109396306825`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6915649927281314, 0.0022124873729015048`], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 71216, 
                "TrainingTime" -> 0.052425775133096424`|>, "Index" -> 9|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6865212162993981, 0.00872309837385228], "Accuracy" -> 
                 Around[0.6205126989337332, 0.025713484591604448`], 
                 "EvaluationTime" -> 2.5418898325229778`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3195701573743377, "Round" -> 1, 
                 "Iteration" -> 4, 
                 "Time" -> {
                  0.172729`5.688910252213679, 0.18574`5.720450434707986}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.007943282347242814, 
                 "TrainingMemory" -> 74752, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6865212162993981, 0.006168162013108292]}, 
                 "AccuracyHistory" -> {
                   Around[0.6205126989337332, 0.018182179322659305`]}, 
                 "IterationHistory" -> {4}, 
                 "TimeHistory" -> {{
                   0.172729`5.688910252213679, 
                    0.18574`5.720450434707986}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6887125567954333, 0.014325145999874977`], 
                 "Accuracy" -> 
                 Around[0.6028508601560911, 0.02789758446305629], 
                 "EvaluationTime" -> 2.5341809501959297`*^-6, "TestSize" -> 
                 600, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32437034893557903`, "Round" -> 2, 
                 "Iteration" -> 8, 
                 "Time" -> {
                  0.232228`5.817459575446229, 0.246548`5.843446477375959}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 79312, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6887125567954333, 0.010129407877998941`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6028508601560911, 0.01972657115255157]}, 
                 "IterationHistory" -> {8}, 
                 "TimeHistory" -> {{
                   0.232228`5.817459575446229, 
                    0.246548`5.843446477375959}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5257961414562302, 0.02525404448079516], "Accuracy" -> 
                 Around[0.7505802121668432, 0.02581747641315037], 
                 "EvaluationTime" -> 2.8327405076966267`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.059868755468110324`, "Round" -> 3, 
                 "Iteration" -> 30, 
                 "Time" -> {
                  0.749825`6.32650490968426, 0.770586`6.338366107986114}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98728, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5257961414562302, 0.01785730610475696]}, 
                 "AccuracyHistory" -> {
                   Around[0.7505802121668432, 0.01825571264486237]}, 
                 "IterationHistory" -> {30}, 
                 "TimeHistory" -> {{
                   0.749825`6.32650490968426, 
                    0.770586`6.338366107986114}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5068633357586115, 0.03376575612397584], "Accuracy" -> 
                 Around[0.7895197414447204, 0.02487098820640769], 
                 "EvaluationTime" -> 3.472449547195006*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.02687185818833504, "Round" -> 4, 
                 "Iteration" -> 49, 
                 "Time" -> {
                  1.154665`6.514000995252689, 1.176328`6.522073428100445}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01721682899963702,
                  "TrainingMemory" -> 196682.66666666666`, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.4920650136820549, 0.04328869351347915], 
                   Around[0.5216616578351682, 0.04256387510357197]}, 
                 "AccuracyHistory" -> {
                   Around[0.795561266240212, 0.033696035940236575`], 
                   Around[0.7834782166492287, 0.034559091169474365`]}, 
                 "IterationHistory" -> {46, 49}, 
                 "TimeHistory" -> {{
                   1.089913`6.488936826181656, 1.108398`6.496240726963304}, {
                   1.154665`6.514000995252689, 
                    1.176328`6.522073428100445}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.472449547195006*^-6, "MeanCrossEntropy" -> 
                Around[0.5068633357586115, 0.03376575612397584], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196682.66666666666`, "TrainingTime" -> 
                0.029464318596789087`|>, "Index" -> 10|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6930266227963251, 0.0016099688201666512`], 
                 "Accuracy" -> 
                 Around[0.606007429455483, 0.029060363922102535`], 
                 "EvaluationTime" -> 1.8103685992861834`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3269279307415428, "Round" -> 3, 
                 "Iteration" -> 34, 
                 "Time" -> {
                  0.837983`6.374780201766963, 0.854968`6.383494853623565}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 90408, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6930266227963251, 0.0011384198702387442`]}, 
                 "AccuracyHistory" -> {
                   Around[0.606007429455483, 0.020548780393067595`]}, 
                 "IterationHistory" -> {34}, 
                 "TimeHistory" -> {{
                   0.837983`6.374780201766963, 
                    0.854968`6.383494853623565}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6928894778176604, 0.004534122496935937], "Accuracy" -> 
                 Around[0.6507085944120111, 0.05655876598300293], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3275734101396419, "Round" -> 4, 
                 "Iteration" -> 38, 
                 "Time" -> {
                  0.941642`6.425430814573328, 0.954778`6.431447396930103}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 196640, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6928894778176604, 0.0032061087643138818`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6507085944120111, 0.0399930869621244]}, 
                 "IterationHistory" -> {38}, 
                 "TimeHistory" -> {{
                   0.941642`6.425430814573328, 
                    0.954778`6.431447396930103}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6929608011417522, 0.0018573244237130686`], 
                 "Accuracy" -> 
                 Around[0.6136541720391422, 0.025733390009899437`], 
                 "EvaluationTime" -> 2.4677687254152734`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32690434913993915`, "Round" -> 1, 
                 "Iteration" -> 52, 
                 "Time" -> {
                  1.213679`6.535648831007199, 1.222471`6.538783558887244}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 68176, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6929608011417522, 0.0013133266948709072`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6136541720391422, 0.018196254578918047`]}, 
                 "IterationHistory" -> {52}, 
                 "TimeHistory" -> {{
                   1.213679`6.535648831007199, 
                    1.222471`6.538783558887244}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6930426244431558, 0.0014146158736273492`], 
                 "Accuracy" -> 
                 Around[0.5989367597559183, 0.026336633517292936`], 
                 "EvaluationTime" -> 1.7775880610392173`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3268946583754697, "Round" -> 2, 
                 "Iteration" -> 55, 
                 "Time" -> {
                  1.390596`6.594745969314714, 1.400745`6.597904074411565}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 71928, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6930426244431558, 0.0010002844770160308`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5989367597559183, 0.018622812153702747`]}, 
                 "IterationHistory" -> {55}, 
                 "TimeHistory" -> {{
                   1.390596`6.594745969314714, 
                    1.400745`6.597904074411565}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1.7775880610392173`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6930426244431558, 0.0014146158736273492`], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 71928, 
                "TrainingTime" -> 0.04949436512212633|>, "Index" -> 11|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.1|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.48869276433863984`, 0.04278143521218334], 
                 "Accuracy" -> Around[0.793481565307721, 0.02404195822971739],
                  "EvaluationTime" -> 2.7396550812928966`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, "ModelUtility" -> 
                 0.005513985227482476, "Round" -> 3, "Iteration" -> 35, 
                 "Time" -> {
                  0.856074`6.384056300699535, 0.888545`6.400224420861599}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.48869276433863984`, 0.03025104294742778]}, 
                 "AccuracyHistory" -> {
                   Around[0.793481565307721, 0.017000231697236887`]}, 
                 "IterationHistory" -> {35}, 
                 "TimeHistory" -> {{
                   0.856074`6.384056300699535, 
                    0.888545`6.400224420861599}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.49155820967720637`, 0.0773861189088381], "Accuracy" -> 
                 Around[0.807376175185428, 0.04668495209309713], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.01397589531713006, "Round" -> 4, 
                 "Iteration" -> 43, 
                 "Time" -> {
                  1.030526`6.46460394692715, 1.05189`6.473515319919404}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.49155820967720637`, 0.05472024945014793]}, 
                 "AccuracyHistory" -> {
                   Around[0.807376175185428, 0.03301124620439808]}, 
                 "IterationHistory" -> {43}, 
                 "TimeHistory" -> {{
                   1.030526`6.46460394692715, 1.05189`6.473515319919404}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8160890201431119, 0.04790965174062652], "Accuracy" -> 
                 Around[0.6374698219171948, 0.025576156982640534`], 
                 "EvaluationTime" -> 2.6352027778111844`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.5015913337960055, "Round" -> 1, 
                 "Iteration" -> 53, 
                 "Time" -> {
                  1.223762`6.539241956945148, 1.247748`6.54767187590938}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.01995262314968879, 
                 "TrainingMemory" -> 77344, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8160890201431119, 0.03387723963008289]}, 
                 "AccuracyHistory" -> {
                   Around[0.6374698219171948, 0.01808507403911679]}, 
                 "IterationHistory" -> {53}, 
                 "TimeHistory" -> {{
                   1.223762`6.539241956945148, 
                    1.247748`6.54767187590938}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6095159022287115, 0.026107675574674263`], 
                 "Accuracy" -> 
                 Around[0.6904112700701165, 0.025090430191698456`], 
                 "EvaluationTime" -> 1.6812338049416172`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.20659024920912372`, "Round" -> 2, 
                 "Iteration" -> 56, 
                 "Time" -> {
                  1.402004`6.5982942461961205, 1.419768`6.603762376927269}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80416, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6095159022287115, 0.018460914439870565`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6904112700701165, 0.017741613331437665`]}, 
                 "IterationHistory" -> {56}, 
                 "TimeHistory" -> {{
                   1.402004`6.5982942461961205, 
                    1.419768`6.603762376927269}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1.6812338049416172`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6095159022287115, 0.026107675574674263`], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 80416, 
                "TrainingTime" -> 0.12758390199311964`|>, "Index" -> 12|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6929422225477869, 0.0016101098819412216`], 
                 "Accuracy" -> 
                 Around[0.606007429455483, 0.029060363922102535`], 
                 "EvaluationTime" -> 2.044743816820886*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3268062358169369, "Round" -> 3, 
                 "Iteration" -> 36, 
                 "Time" -> {
                  0.889789`6.400832025983712, 0.906488`6.4089070528174314}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 90672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6929422225477869, 0.0011385196159761093`]}, 
                 "AccuracyHistory" -> {
                   Around[0.606007429455483, 0.020548780393067595`]}, 
                 "IterationHistory" -> {36}, 
                 "TimeHistory" -> {{
                   0.889789`6.400832025983712, 
                    0.906488`6.4089070528174314}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6925835224715066, 0.004535489251898828], "Accuracy" -> 
                 Around[0.6507085944120111, 0.05655876598300293], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32713272022155393`, "Round" -> 4, 
                 "Iteration" -> 41, 
                 "Time" -> {
                  0.996601`6.450066312106913, 1.006805`6.454490357173069}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.007943282347242814, "TrainingMemory" -> 196464, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6925835224715066, 0.0032070752060163626`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6507085944120111, 0.0399930869621244]}, 
                 "IterationHistory" -> {41}, 
                 "TimeHistory" -> {{
                   0.996601`6.450066312106913, 
                    1.006805`6.454490357173069}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6929547631901004, 0.0019098702901289458`], 
                 "Accuracy" -> 
                 Around[0.5987805460145739, 0.02629911493961881], 
                 "EvaluationTime" -> 2.6049192623062304`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3269107981435758, "Round" -> 2, 
                 "Iteration" -> 54, 
                 "Time" -> {
                  1.249081`6.548135595771156, 1.258282`6.551322977466163}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.005011872336272719,
                  "TrainingMemory" -> 71912, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6929547631901004, 0.0013504822333368963`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5987805460145739, 0.018596282513008898`]}, 
                 "IterationHistory" -> {54}, 
                 "TimeHistory" -> {{
                   1.249081`6.548135595771156, 
                    1.258282`6.551322977466163}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 2.6049192623062304`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6929547631901004, 0.0019098702901289458`], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 71912, 
                "TrainingTime" -> 0.04034557230699539|>, "Index" -> 13|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["LogisticRegression"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "Round", "Iteration", "Time", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ExperimentCount", "MeanCrossEntropyHistory", 
                 "AccuracyHistory", "IterationHistory", "TimeHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Real], 2], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                  TypeSystem`Vector[
                   TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 13], <||>], 
         "TrainingSizes" -> {8, 30, 150, 564}, "MaxTrainingSize" -> 705, 
         "PreprocessorEvaluationTime" -> 2.17578125*^-6, "PreprocessorMemory" -> 
         97488, "InputDimension" -> 6, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6753469676511341, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.13719999999999996`, 
             "ElapsedTimes" -> 0.18798499999999999`, "ExperimentCounts" -> 
             12|>, <|"TrainingSizes" -> 30, "TimeBudgets" -> 
             0.19599999999999998`, "ElapsedTimes" -> 0.37313, 
             "ExperimentCounts" -> 15|>, <|
            "TrainingSizes" -> 150, "TimeBudgets" -> 0.27999999999999997`, 
             "ElapsedTimes" -> 0.279215, "ExperimentCounts" -> 14|>, <|
            "TrainingSizes" -> 564, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.406582, "ExperimentCounts" -> 15|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, "ID" -> 
              7168142382301173801|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {19.}, "ID" -> 
              1978735388468315165|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
              9071588231046195481|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 1.461422, 
         "MaxTrainingMemory" -> 1455264, "DataMemory" -> 171736, 
         "FunctionMemory" -> 401936, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 8, 12, 23, 39, 37.923889`8.331487845831097}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
         "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"LogisticRegression[2,0.9]\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["705", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[<|
      "ExampleNumber" -> 705, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f2(f1f3))" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 705, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.982269503546107`}, 
                    "StandardDeviation" -> {14.608959952221397`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.9913124013932499, 
                    0.058942139237494945`, -0.1175820865015418}, {
                    0.12915447298587346`, 
                    0.6053014453872158, -0.7854484593656602}, \
{-0.024876594455221213`, 0.7938110508390869, 0.6076554703234842}}, 
                    "Precisions" -> {0.9838617902602289, 11.638187240211565`, 
                    15.62764254306718}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00025125389626296944`, 0.05781137345564762, 
                    0.05667193615939328}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3631133675148427688|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00025125389626292705`, 0.05781137345564762, 
                    0.05667193615939322}, 
                    "StandardDeviation" -> {1.000001317637019, 
                    0.2965012375590195, 0.2800009227081647}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00025125389626292705`, 0.05781137345564762, 
                    0.05667193615939322}, 
                    "StandardDeviation" -> {1.000001317637019, 
                    0.2965012375590195, 0.2800009227081647}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {17.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.055849, "MaxTrainingMemory" -> 311704,
                     "DataMemory" -> 78752, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 12, 23, 39, 37.984182`8.332177757255772}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.3842777740062755`, \
-2.3842777740062755`, -2.3129008018157506`, -2.14750360514438, \
-2.1036786673035306`, -2.0943106405149607`, -2.0092282434373296`, \
-1.7552009764029668`, -1.7473201271888181`, -1.7050215906270634`, \
-1.583996820596318}, "LeftBoundary" -> -2.3129008018157506`, "LeftScale" -> 
                    0.03568848609526243, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[5.953031774111219, 0.2585451637062942], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 616651398117295976|>], 
              MachineLearning`MLProcessor[
              "Threads", <|
               "Input" -> <|
                 "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {29.982269503546107`}, 
                "StandardDeviation" -> {14.608959952221397`}, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                  "female" -> 1, "male" -> 2|>}, 
                "Output" -> <|
                 "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>,
                 "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.7273886203765869, -1.041688323020935, \
-0.3814893066883087}, {0.39698874950408936`, 
                   1.2774958610534668`, -0.9317017197608948}, {
                   0.5576431155204773, -0.062414247542619705`, \
-0.7499105334281921}}], 
                  RawArray["Real32",{{0., 0.}, {0.23993441462516785`, 
                   1.1908897161483765`}, {-0.02056935243308544, \
-0.07570835202932358}}]}, "Version" -> {14.1, 0}, "ID" -> 
                5988483279055413579|>], 
              MachineLearning`MLProcessor[
              "MergeVectors", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|
                   "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                  Span[1, 1], 
                  Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                7619735631186802745|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "died" -> 0.5912305516265912, "survived" -> 0.4087694483734088|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "LogProbabilitiesFunction" -> 
         LinearLayer[<|
           "Type" -> "Linear", 
            "Arrays" -> <|
             "Weights" -> 
              RawArray["Real32",{{0.37995219230651855`, 
                1.3573005199432373`, -0.2674004137516022, \
-0.5519019961357117, -0.3443009853363037, -1.6606861352920532`}}], "Biases" -> 
              RawArray["Real32",{0.548958420753479}]|>, 
            "Parameters" -> <|
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 6,
               "$InputDimensions" -> {6}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "14.1.1", "Unstable" -> False|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|
             "Weight" -> {0.3333333333333333, 0.9444444444444444, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`}, "Type" -> "NumericalVector"|>, "Key" -> 
            "(f2(f1f3))", "Invertibility" -> "Perfect", "StructurePreserving" -> 
            False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "LogisticRegression", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> 10., "Options" -> <||>|>, 
           "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
           MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.115844`5.515418538446555, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.47184103280619627`, 0.05990579511024267], "Accuracy" -> 
            Around[0.7914060864886514, 0.04911443188975295], "EvaluationTime" -> 
            0.00001794862903777858, "TestSize" -> 141., "ModelMemory" -> 
            8968., "ModelUtility" -> 0.03288751309624849, "Round" -> 4, 
            "Iteration" -> 45, 
            "Time" -> {1.123918`6.502279620167983, 1.15184`6.512937149715939},
             "TrainingSize" -> 564, "TrainingTime" -> 0.019952623149688785`, 
            "TrainingMemory" -> 196629.3333333333, "ExperimentCount" -> 2, 
            "MeanCrossEntropyHistory" -> {
              Around[0.5266841558785397, 0.04162425486976185], 
              Around[0.41699790973385287`, 0.029563226867687992`]}, 
            "AccuracyHistory" -> {
              Around[0.7483697769658154, 0.036415071645812695`], 
              Around[0.8344423960114875, 0.0311396675859688]}, 
            "IterationHistory" -> {43, 45}, 
            "TimeHistory" -> {{
              1.08561`6.487218828631086, 1.105661`6.49516698448177}, {
              1.123918`6.502279620167983, 1.15184`6.512937149715939}}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 10., "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 705|>, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
         "Configurations" -> 
         Dataset[<|<|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.429457582856448, 0.2959149025769237], "Accuracy" -> 
                 Around[0.6142570014035479, 0.025866507909090355`], 
                 "EvaluationTime" -> 2.6160109396306825`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -2.1947001696497965`, "Round" -> 1, 
                 "Iteration" -> 1, 
                 "Time" -> {
                  0.131775`5.571378018382966, 0.150866`5.63013636928127}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77408, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[4.429457582856448, 0.2092434342662993]}, 
                 "AccuracyHistory" -> {
                   Around[0.6142570014035479, 0.018290383148133253`]}, 
                 "IterationHistory" -> {1}, 
                 "TimeHistory" -> {{
                   0.131775`5.571378018382966, 
                    0.150866`5.63013636928127}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6135954252329494, 0.03491831439433193], "Accuracy" -> 
                 Around[0.7122423948992709, 0.024536735334836836`], 
                 "EvaluationTime" -> 1.584879548844017*^-6, "TestSize" -> 675,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.21604805878068745`, "Round" -> 2, 
                 "Iteration" -> 23, 
                 "Time" -> {
                  0.511507`6.160396574927477, 0.532671`6.178004046798901}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.01995262314968879, 
                 "TrainingMemory" -> 80464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6135954252329494, 0.024690976895835937`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7122423948992709, 0.017350091943442697`]}, 
                 "IterationHistory" -> {23}, 
                 "TimeHistory" -> {{
                   0.511507`6.160396574927477, 
                    0.532671`6.178004046798901}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5052316377648349, 0.031123474620867436`], 
                 "Accuracy" -> 
                 Around[0.7883369610901267, 0.02433821577697367], 
                 "EvaluationTime" -> 2.1619314255882372`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.022657214814213344`, "Round" -> 3, 
                 "Iteration" -> 32, 
                 "Time" -> {
                  0.860975`6.386535534589953, 0.884583`6.398283582297207}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 135496, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5052316377648349, 0.022007619958502773`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7883369610901267, 0.017209717417879498`]}, 
                 "IterationHistory" -> {32}, 
                 "TimeHistory" -> {{
                   0.860975`6.386535534589953, 
                    0.884583`6.398283582297207}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5197591588699415, 0.06958018500089992], "Accuracy" -> 
                 Around[0.7554033463485942, 0.051010559210218576`], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.06518241211818232, "Round" -> 4, 
                 "Iteration" -> 42, 
                 "Time" -> {
                  1.063808`6.478408245454203, 1.08436`6.486718482393653}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196528, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5197591588699415, 0.04920062065035083]}, 
                 "AccuracyHistory" -> {
                   Around[0.7554033463485942, 0.03606991232966345]}, 
                 "IterationHistory" -> {42}, 
                 "TimeHistory" -> {{
                   1.063808`6.478408245454203, 1.08436`6.486718482393653}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.5197591588699415, 0.06958018500089992], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196528, 
                "TrainingTime" -> 0.04078971086172212|>, "Index" -> 1|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.01|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.25707512014413, 0.08659305875504804], "Accuracy" -> 
                 Around[0.6142570014035479, 0.025866507909090355`], 
                 "EvaluationTime" -> 2.522697994342476*^-6, "TestSize" -> 697,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.9356208446230916, "Round" -> 1, 
                 "Iteration" -> 3, 
                 "Time" -> {
                  0.162649`5.662796390988931, 0.181664`5.710813866041289}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77272, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.25707512014413, 0.0612305390493796]}, 
                 "AccuracyHistory" -> {
                   Around[0.6142570014035479, 0.018290383148133253`]}, 
                 "IterationHistory" -> {3}, 
                 "TimeHistory" -> {{
                   0.162649`5.662796390988931, 
                    0.181664`5.710813866041289}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6096819556170758, 0.03407910496419522], "Accuracy" -> 
                 Around[0.7133883897461605, 0.024422685028166354`], 
                 "EvaluationTime" -> 2.7012735184038303`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.20944972081891378`, "Round" -> 2, 
                 "Iteration" -> 14, 
                 "Time" -> {
                  0.347308`5.9922597805955045, 0.367421`6.016708968338604}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80360, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6096819556170758, 0.024097566216950576`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7133883897461605, 0.017269446198199596`]}, 
                 "IterationHistory" -> {14}, 
                 "TimeHistory" -> {{
                   0.347308`5.9922597805955045, 
                    0.367421`6.016708968338604}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5044300018888067, 0.030921730589044835`], 
                 "Accuracy" -> 
                 Around[0.7920713826813374, 0.024046370164431414`], 
                 "EvaluationTime" -> 2.7396550812928966`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.02100960943127883, "Round" -> 3, 
                 "Iteration" -> 25, 
                 "Time" -> {
                  0.550964`6.1926682164636935, 0.570736`6.207980260662505}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98768, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5044300018888067, 0.0218649653855371]}, 
                 "AccuracyHistory" -> {
                   Around[0.7920713826813374, 0.017003351406191327`]}, 
                 "IterationHistory" -> {25}, 
                 "TimeHistory" -> {{
                   0.550964`6.1926682164636935, 
                    0.570736`6.207980260662505}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5197639269483461, 0.06956198904286401], "Accuracy" -> 
                 Around[0.7554033463485942, 0.051010559210218576`], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.06518452742279479, "Round" -> 4, 
                 "Iteration" -> 38, 
                 "Time" -> {
                  0.998363`6.450833470888821, 1.019082`6.459754124229309}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5197639269483461, 0.04918775416503345]}, 
                 "AccuracyHistory" -> {
                   Around[0.7554033463485942, 0.03606991232966345]}, 
                 "IterationHistory" -> {38}, 
                 "TimeHistory" -> {{
                   0.998363`6.450833470888821, 
                    1.019082`6.459754124229309}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.5197639269483461, 0.06956198904286401], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196464, 
                "TrainingTime" -> 0.04078971086172212|>, "Index" -> 2|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6929373951701749, 0.0018570388785523917`], 
                 "Accuracy" -> 
                 Around[0.6163090971151293, 0.025699064742761242`], 
                 "EvaluationTime" -> 2.522697994342476*^-6, "TestSize" -> 697,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3268705075494427, "Round" -> 1, 
                 "Iteration" -> 2, 
                 "Time" -> {
                  0.151942`5.633222832184268, 0.161622`5.660045470159132}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 69512, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6929373951701749, 0.0013131247839514575`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6163090971151293, 0.01817198294975859]}, 
                 "IterationHistory" -> {2}, 
                 "TimeHistory" -> {{
                   0.151942`5.633222832184268, 
                    0.161622`5.660045470159132}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6929531907042528, 0.0028250448036702073`], 
                 "Accuracy" -> 
                 Around[0.5000835670088364, 0.040722672725394496`], 
                 "EvaluationTime" -> 2.728683507729179*^-6, "TestSize" -> 300,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32717248733946935`, "Round" -> 2, 
                 "Iteration" -> 7, 
                 "Time" -> {
                  0.233826`5.82043779385783, 0.242073`5.83549134590787}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.005011872336272719,
                  "TrainingMemory" -> 72976, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6929531907042528, 0.0019976083378310224`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5000835670088364, 0.02879527803216691]}, 
                 "IterationHistory" -> {7}, 
                 "TimeHistory" -> {{
                   0.233826`5.82043779385783, 0.242073`5.83549134590787}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6923039609121299, 0.002458135217372857], "Accuracy" -> 
                 Around[0.5692912811694956, 0.03470918007222746], 
                 "EvaluationTime" -> 2.5118864315095797`*^-6, "TestSize" -> 
                 400, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3261299933073769, "Round" -> 3, 
                 "Iteration" -> 16, 
                 "Time" -> {
                  0.388636`6.041088021044337, 0.398089`6.051525170815556}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 91784, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6923039609121299, 0.001738164081277815]}, 
                 "AccuracyHistory" -> {
                   Around[0.5692912811694956, 0.024543096598497016`]}, 
                 "IterationHistory" -> {16}, 
                 "TimeHistory" -> {{
                   0.388636`6.041088021044337, 
                    0.398089`6.051525170815556}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6888852722308376, 0.002615024348795156], "Accuracy" -> 
                 Around[0.7112764192770448, 0.07692606341062813], 
                 "EvaluationTime" -> 3.6262063388401123`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.3212286658669723, "Round" -> 4, 
                 "Iteration" -> 46, 
                 "Time" -> {
                  1.153552`6.513582169989879, 1.177451`6.522487836369175}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01194639594805814,
                  "TrainingMemory" -> 281946.6666666666, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6900896122212907, 0.0033193035626980887`], 
                   Around[0.6876809322403844, 0.0032471974555115485`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6389435807872468, 0.04013845080070105], 
                   Around[0.7836092577668428, 0.034545996886186196`]}, 
                 "IterationHistory" -> {35, 46}, 
                 "TimeHistory" -> {{
                   0.934831`6.422278099126422, 0.945062`6.427005294465153}, {
                   1.153552`6.513582169989879, 
                    1.177451`6.522487836369175}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.6262063388401123`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6888852722308376, 0.002615024348795156], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 281946.6666666666,
                 "TrainingTime" -> 0.019944867271345392`|>, "Index" -> 3|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6122692218331277, 0.018518892397100657`], 
                 "Accuracy" -> 
                 Around[0.6942321987293265, 0.024429863649056437`], 
                 "EvaluationTime" -> 2.709323884918889*^-6, "TestSize" -> 697,
                  "ModelMemory" -> 8968, "ModelUtility" -> -0.208598136612706,
                  "Round" -> 1, "Iteration" -> 6, 
                 "Time" -> {
                  0.216629`5.78726158843036, 0.232759`5.818451476166619}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.012589254117941668`,
                  "TrainingMemory" -> 77384, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6122692218331277, 0.013094834394053873`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6942321987293265, 0.01727452224971054]}, 
                 "IterationHistory" -> {6}, 
                 "TimeHistory" -> {{
                   0.216629`5.78726158843036, 
                    0.232759`5.818451476166619}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5574134699498953, 0.02032819372958706], "Accuracy" -> 
                 Around[0.7538059982208993, 0.01159056086102542], 
                 "EvaluationTime" -> 2.329142195217226*^-6, "TestSize" -> 
                 675., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.1159695715666117, "Round" -> 2, 
                 "Iteration" -> 24, 
                 "Time" -> {
                  0.533844`6.1789593594437, 0.54953`6.191536399953053}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 80282.66666666666,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5743475333272323, 0.01583407014432156], 
                   Around[0.5404794065725582, 0.01597541900025325]}, 
                 "AccuracyHistory" -> {
                   Around[0.7541112817687737, 0.016421758998482014`], 
                   Around[0.753500714673025, 0.016350158916792076`]}, 
                 "IterationHistory" -> {9, 24}, 
                 "TimeHistory" -> {{
                   0.262892`5.871322363897814, 0.281476`5.900986364221834}, {
                   0.533844`6.1789593594437, 0.54953`6.191536399953053}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5091907874950339, 0.02935494443844747], "Accuracy" -> 
                 Around[0.789235832578646, 0.024146394686336555`], 
                 "EvaluationTime" -> 2.7396550812928966`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.029681852342580917`, "Round" -> 3, 
                 "Iteration" -> 17, 
                 "Time" -> {
                  0.399211`6.052747492978749, 0.419589`6.074369087645897}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98944, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5091907874950339, 0.020757080273780534`]}, 
                 "AccuracyHistory" -> {
                   Around[0.789235832578646, 0.017074079423915395`]}, 
                 "IterationHistory" -> {17}, 
                 "TimeHistory" -> {{
                   0.399211`6.052747492978749, 
                    0.419589`6.074369087645897}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5201881289314623, 0.06799896046739272], "Accuracy" -> 
                 Around[0.7625009156768854, 0.050494085086191694`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.06539361362436957, "Round" -> 4, 
                 "Iteration" -> 27, 
                 "Time" -> {
                  0.59248`6.22421868820134, 0.612691`6.238786494394198}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196400, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5201881289314623, 0.04808252606012936]}, 
                 "AccuracyHistory" -> {
                   Around[0.7625009156768854, 0.03570470997425666]}, 
                 "IterationHistory" -> {27}, 
                 "TimeHistory" -> {{
                   0.59248`6.22421868820134, 0.612691`6.238786494394198}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5201881289314623, 0.06799896046739272], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196400, 
                "TrainingTime" -> 0.03753003305505265|>, "Index" -> 4|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.00001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.5873478128067275`, 0.2403661537836448], "Accuracy" -> 
                 Around[0.6142570014035479, 0.025866507909090355`], 
                 "EvaluationTime" -> 2.522697994342476*^-6, "TestSize" -> 697,
                  "ModelMemory" -> 8968, "ModelUtility" -> -1.983875218190752,
                  "Round" -> 1, "Iteration" -> 10, 
                 "Time" -> {
                  0.2825`5.902563445651428, 0.301722`5.931151971321814}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77512, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.5873478128067275`, 0.16996453730814373`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6142570014035479, 0.018290383148133253`]}, 
                 "IterationHistory" -> {10}, 
                 "TimeHistory" -> {{
                   0.2825`5.902563445651428, 0.301722`5.931151971321814}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6115397862677873, 0.0344118115979747], "Accuracy" -> 
                 Around[0.7133883897461605, 0.024422685028166354`], 
                 "EvaluationTime" -> 2.6247366122496527`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.21256631720478492`, "Round" -> 2, 
                 "Iteration" -> 20, 
                 "Time" -> {
                  0.453043`6.107684417973381, 0.472432`6.1258843002036265}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80368, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6115397862677873, 0.024332825333841793`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7133883897461605, 0.017269446198199596`]}, 
                 "IterationHistory" -> {20}, 
                 "TimeHistory" -> {{
                   0.453043`6.107684417973381, 
                    0.472432`6.1258843002036265}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5043778627929628, 0.030939429293975345`], 
                 "Accuracy" -> 
                 Around[0.7920713826813374, 0.024046370164431414`], 
                 "EvaluationTime" -> 2.622467472525545*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.020914426583731438`, "Round" -> 3, 
                 "Iteration" -> 21, 
                 "Time" -> {
                  0.473519`6.126882403296946, 0.493584`6.144906066676073}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98840, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5043778627929628, 0.02187748025981168]}, 
                 "AccuracyHistory" -> {
                   Around[0.7920713826813374, 0.017003351406191327`]}, 
                 "IterationHistory" -> {21}, 
                 "TimeHistory" -> {{
                   0.473519`6.126882403296946, 
                    0.493584`6.144906066676073}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.519760426924149, 0.06957905694166017], "Accuracy" -> 
                 Around[0.7554033463485942, 0.051010559210218576`], 
                 "EvaluationTime" -> 3.5629594773185525`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.06518436534876082, "Round" -> 4, 
                 "Iteration" -> 28, 
                 "Time" -> {
                  0.613725`6.239518808063771, 0.637971`6.2563459311102}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 226408, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.519760426924149, 0.04919982299201282]}, 
                 "AccuracyHistory" -> {
                   Around[0.7554033463485942, 0.03606991232966345]}, 
                 "IterationHistory" -> {28}, 
                 "TimeHistory" -> {{
                   0.613725`6.239518808063771, 0.637971`6.2563459311102}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.5629594773185525`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.519760426924149, 0.06957905694166017], "ModelMemory" -> 
                8968, "TrainingMemory" -> 226408, "TrainingTime" -> 
                0.04078971086172212|>, "Index" -> 5|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.0001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[2.764959825850129, 0.1863126236326964], "Accuracy" -> 
                 Around[0.6142570014035479, 0.025866507909090355`], 
                 "EvaluationTime" -> 2.4485768872347715`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.72356308242769, "Round" -> 1, 
                 "Iteration" -> 5, 
                 "Time" -> {
                  0.196682`5.74530960934629, 0.215568`5.785129285934273}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77272, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.764959825850129, 0.13174291959133663`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6142570014035479, 0.018290383148133253`]}, 
                 "IterationHistory" -> {5}, 
                 "TimeHistory" -> {{
                   0.196682`5.74530960934629, 
                    0.215568`5.785129285934273}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6115163279452914, 0.03440839655233716], "Accuracy" -> 
                 Around[0.7133883897461605, 0.024422685028166354`], 
                 "EvaluationTime" -> 2.7012735184038303`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.21252727954165962`, "Round" -> 2, 
                 "Iteration" -> 19, 
                 "Time" -> {
                  0.432754`6.087786084300824, 0.451976`6.106660367811127}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80176, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6115163279452914, 0.024330410531913427`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7133883897461605, 0.017269446198199596`]}, 
                 "IterationHistory" -> {19}, 
                 "TimeHistory" -> {{
                   0.432754`6.087786084300824, 
                    0.451976`6.106660367811127}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5043786111480391, 0.03093927319416939], "Accuracy" -> 
                 Around[0.7920713826813374, 0.024046370164431414`], 
                 "EvaluationTime" -> 2.7396550812928966`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.020915831289090803`, "Round" -> 3, 
                 "Iteration" -> 29, 
                 "Time" -> {
                  0.758098`6.33127034438946, 0.778982`6.343072416006801}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98712, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5043786111480391, 0.02187736988058035]}, 
                 "AccuracyHistory" -> {
                   Around[0.7920713826813374, 0.017003351406191327`]}, 
                 "IterationHistory" -> {29}, 
                 "TimeHistory" -> {{
                   0.758098`6.33127034438946, 
                    0.778982`6.343072416006801}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5197605331830917, 0.0695787164354941], "Accuracy" -> 
                 Around[0.7554033463485942, 0.051010559210218576`], 
                 "EvaluationTime" -> 4.024229852253871*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.0651844373097632, "Round" -> 4, 
                 "Iteration" -> 37, 
                 "Time" -> {
                  0.976071`6.441026403157246, 0.997089`6.450278918591775}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196400, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5197605331830917, 0.04919958221779376]}, 
                 "AccuracyHistory" -> {
                   Around[0.7554033463485942, 0.03606991232966345]}, 
                 "IterationHistory" -> {37}, 
                 "TimeHistory" -> {{
                   0.976071`6.441026403157246, 
                    0.997089`6.450278918591775}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 4.024229852253871*^-6, "MeanCrossEntropy" -> 
                Around[0.5197605331830917, 0.0695787164354941], "ModelMemory" -> 
                8968, "TrainingMemory" -> 196400, "TrainingTime" -> 
                0.04078971086172212|>, "Index" -> 6|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6926279059889496, 0.0018599370692700453`], 
                 "Accuracy" -> 
                 Around[0.6163090971151293, 0.025699064742761242`], 
                 "EvaluationTime" -> 2.4485768872347715`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32642484981046227`, "Round" -> 1, 
                 "Iteration" -> 11, 
                 "Time" -> {
                  0.30282`5.9327295486133025, 0.312682`5.94664787465679}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 70504, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6926279059889496, 0.0013151741142610823`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6163090971151293, 0.01817198294975859]}, 
                 "IterationHistory" -> {11}, 
                 "TimeHistory" -> {{
                   0.30282`5.9327295486133025, 
                    0.312682`5.94664787465679}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6913260257676233, 0.0019628932679394313`], 
                 "Accuracy" -> 
                 Around[0.5914559105066794, 0.02634943856398257], 
                 "EvaluationTime" -> 2.6049192623062304`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32457423650380457`, "Round" -> 2, 
                 "Iteration" -> 13, 
                 "Time" -> {
                  0.336023`5.977913998359689, 0.346262`5.99094982666877}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 73464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6913260257676233, 0.0013879751405053945`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5914559105066794, 0.018631866689050397`]}, 
                 "IterationHistory" -> {13}, 
                 "TimeHistory" -> {{
                   0.336023`5.977913998359689, 
                    0.346262`5.99094982666877}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6841972510633018, 0.002822602690124429], "Accuracy" -> 
                 Around[0.6156763064523627, 0.028768157200369262`], 
                 "EvaluationTime" -> 2.7396550812928966`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.31446600382055623`, "Round" -> 3, 
                 "Iteration" -> 18, 
                 "Time" -> {
                  0.420674`6.075490664520655, 0.43164`6.086666677362107}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 92824, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6841972510633018, 0.001995881502782375]}, 
                 "AccuracyHistory" -> {
                   Around[0.6156763064523627, 0.02034215903862171]}, 
                 "IterationHistory" -> {18}, 
                 "TimeHistory" -> {{
                   0.420674`6.075490664520655, 
                    0.43164`6.086666677362107}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6674794793230585, 0.009831875754612904], "Accuracy" -> 
                 Around[0.6671191731418108, 0.055712263951961806`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.29184529247706714`, "Round" -> 4, 
                 "Iteration" -> 40, 
                 "Time" -> {
                  1.04203`6.469425215959385, 1.053664`6.474247135482622}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6674794793230585, 0.006952186017870387]}, 
                 "AccuracyHistory" -> {
                   Around[0.6671191731418108, 0.039394519635687034`]}, 
                 "IterationHistory" -> {40}, 
                 "TimeHistory" -> {{
                   1.04203`6.469425215959385, 1.053664`6.474247135482622}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6674794793230585, 0.009831875754612904], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196464, 
                "TrainingTime" -> 0.01880957344480193|>, "Index" -> 7|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.974923546995432, 0.1345445722923348], "Accuracy" -> 
                 Around[0.6142570014035479, 0.025866507909090355`], 
                 "EvaluationTime" -> 2.6160109396306825`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.3872132753937816`, "Round" -> 1, 
                 "Iteration" -> 12, 
                 "Time" -> {
                  0.313746`5.948123191127693, 0.33492`5.976486076032226}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.015848931924611134`,
                  "TrainingMemory" -> 77336, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.974923546995432, 0.0951373794397536]}, 
                 "AccuracyHistory" -> {
                   Around[0.6142570014035479, 0.018290383148133253`]}, 
                 "IterationHistory" -> {12}, 
                 "TimeHistory" -> {{
                   0.313746`5.948123191127693, 
                    0.33492`5.976486076032226}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6113451560140937, 0.034377884449696625`], 
                 "Accuracy" -> 
                 Around[0.7133883897461605, 0.024422685028166354`], 
                 "EvaluationTime" -> 2.7012735184038303`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.2122405713636527, "Round" -> 2, 
                 "Iteration" -> 15, 
                 "Time" -> {
                  0.368569`6.018063797805209, 0.387595`6.039923159484565}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80176, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6113451560140937, 0.024308835217228045`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7133883897461605, 0.017269446198199596`]}, 
                 "IterationHistory" -> {15}, 
                 "TimeHistory" -> {{
                   0.368569`6.018063797805209, 
                    0.387595`6.039923159484565}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5043832918521401, 0.030937674749737867`], 
                 "Accuracy" -> 
                 Around[0.7920713826813374, 0.024046370164431414`], 
                 "EvaluationTime" -> 2.529382046121816*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.020924372565347515`, "Round" -> 3, 
                 "Iteration" -> 26, 
                 "Time" -> {
                  0.57177`6.208766358270558, 0.591403`6.2234285167299355}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98712, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5043832918521401, 0.02187623960968347]}, 
                 "AccuracyHistory" -> {
                   Around[0.7920713826813374, 0.017003351406191327`]}, 
                 "IterationHistory" -> {26}, 
                 "TimeHistory" -> {{
                   0.57177`6.208766358270558, 
                    0.591403`6.2234285167299355}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5197608410577507, 0.06957719655058472], "Accuracy" -> 
                 Around[0.7554033463485942, 0.051010559210218576`], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.06518444424681158, "Round" -> 4, 
                 "Iteration" -> 36, 
                 "Time" -> {
                  0.946292`6.4275701620553, 0.974877`6.44049481781911}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.025118864315095794`, "TrainingMemory" -> 196528, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5197608410577507, 0.049198507496867716`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7554033463485942, 0.03606991232966345]}, 
                 "IterationHistory" -> {36}, 
                 "TimeHistory" -> {{
                   0.946292`6.4275701620553, 0.974877`6.44049481781911}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.5197608410577507, 0.06957719655058472], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196528, 
                "TrainingTime" -> 0.04724751231848088|>, "Index" -> 8|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6793517722280962, 0.004054570520629746], "Accuracy" -> 
                 Around[0.589776021556515, 0.026377851619283608`], 
                 "EvaluationTime" -> 2.6247366122496522`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.307727018778573, "Round" -> 2, 
                 "Iteration" -> 22, 
                 "Time" -> {
                  0.494652`6.145844762872621, 0.510462`6.159508411212602}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 75392, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6793517722280962, 0.0028670143099363637`]}, 
                 "AccuracyHistory" -> {
                   Around[0.589776021556515, 0.01865195775312799]}, 
                 "IterationHistory" -> {22}, 
                 "TimeHistory" -> {{
                   0.494652`6.145844762872621, 
                    0.510462`6.159508411212602}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6352668026780433, 0.009661718778836922], "Accuracy" -> 
                 Around[0.6664017735259222, 0.027836125393843256`], 
                 "EvaluationTime" -> 2.0688459991845076`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.2424772425380083, "Round" -> 3, 
                 "Iteration" -> 31, 
                 "Time" -> {
                  0.811457`6.3608105045251255, 0.858981`6.385528551173065}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.03981071705534971,
                  "TrainingMemory" -> 703200, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6352668026780433, 0.0068318668664329955`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6664017735259222, 0.01968311302794562]}, 
                 "IterationHistory" -> {31}, 
                 "TimeHistory" -> {{
                   0.811457`6.3608105045251255, 
                    0.858981`6.385528551173065}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5798625464052527, 0.032720541067972383`], 
                 "Accuracy" -> Around[0.7416324997813132, 0.0519359801781034],
                  "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.1594085039551194, "Round" -> 4, 
                 "Iteration" -> 44, 
                 "Time" -> {
                  1.106905`6.495655342697901, 1.12264`6.5017855056979865}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 196464, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5798625464052527, 0.023136916473256188`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7416324997813132, 0.03672428377150703]}, 
                 "IterationHistory" -> {44}, 
                 "TimeHistory" -> {{
                   1.106905`6.495655342697901, 
                    1.12264`6.5017855056979865}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5798625464052527, 0.032720541067972383`], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196464, 
                "TrainingTime" -> 0.028325821765368752`|>, "Index" -> 9|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6707979184398225, 0.0069504501821885546`], 
                 "Accuracy" -> 
                 Around[0.636817660196477, 0.025435639335820832`], 
                 "EvaluationTime" -> 2.4485768872347715`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.2959330803522805, "Round" -> 1, 
                 "Iteration" -> 4, 
                 "Time" -> {
                  0.182709`5.713304934138427, 0.195663`5.743053701550225}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.007943282347242814, 
                 "TrainingMemory" -> 74128, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6707979184398225, 0.004914710456124801]}, 
                 "AccuracyHistory" -> {
                   Around[0.636817660196477, 0.017985713058174202`]}, 
                 "IterationHistory" -> {4}, 
                 "TimeHistory" -> {{
                   0.182709`5.713304934138427, 
                    0.195663`5.743053701550225}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6310598352920112, 0.012534175236634287`], 
                 "Accuracy" -> 
                 Around[0.648480467912138, 0.025667013387344843`], 
                 "EvaluationTime" -> 2.375308543843697*^-6, "TestSize" -> 675,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.23676023985271188`, "Round" -> 2, 
                 "Iteration" -> 8, 
                 "Time" -> {
                  0.243129`5.837381757311823, 0.26186`5.86961415703763}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 77696, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6310598352920112, 0.008863000306404602]}, 
                 "AccuracyHistory" -> {
                   Around[0.648480467912138, 0.018149319218997435`]}, 
                 "IterationHistory" -> {8}, 
                 "TimeHistory" -> {{
                   0.243129`5.837381757311823, 0.26186`5.86961415703763}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6157053752788264, 0.041209937344000046`], 
                 "Accuracy" -> 
                 Around[0.6942688893586135, 0.045890115732643046`], 
                 "EvaluationTime" -> 0.00006452740941979253, "TestSize" -> 
                 200, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.2214610767595807, "Round" -> 3, 
                 "Iteration" -> 30, 
                 "Time" -> {
                  0.780124`6.343708632385973, 0.810324`6.360203695433086}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98768, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6157053752788264, 0.02913982614821517]}, 
                 "AccuracyHistory" -> {
                   Around[0.6942688893586135, 0.032449212023987366`]}, 
                 "IterationHistory" -> {30}, 
                 "TimeHistory" -> {{
                   0.780124`6.343708632385973, 
                    0.810324`6.360203695433086}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.47184103280619627`, 0.05990579511024267], 
                 "Accuracy" -> 
                 Around[0.7914060864886514, 0.04911443188975295], 
                 "EvaluationTime" -> 0.00001794862903777858, "TestSize" -> 
                 141., "ModelMemory" -> 8968., "ModelUtility" -> 
                 0.03288751309624849, "Round" -> 4, "Iteration" -> 45, 
                 "Time" -> {
                  1.123918`6.502279620167983, 1.15184`6.512937149715939}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 196629.3333333333,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5266841558785397, 0.04162425486976185], 
                   Around[0.41699790973385287`, 0.029563226867687992`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7483697769658154, 0.036415071645812695`], 
                   Around[0.8344423960114875, 0.0311396675859688]}, 
                 "IterationHistory" -> {43, 45}, 
                 "TimeHistory" -> {{
                   1.08561`6.487218828631086, 1.105661`6.49516698448177}, {
                   1.123918`6.502279620167983, 1.15184`6.512937149715939}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00001794862903777858, "MeanCrossEntropy" -> 
                Around[0.47184103280619627`, 0.05990579511024267], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196629.3333333333,
                 "TrainingTime" -> 0.0328840612843538|>, "Index" -> 10|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6930328538292384, 0.0016097020746961282`], 
                 "Accuracy" -> 
                 Around[0.6104220352560271, 0.02886139707286238], 
                 "EvaluationTime" -> 2.044743816820886*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3269368408216531, "Round" -> 3, 
                 "Iteration" -> 33, 
                 "Time" -> {
                  0.885682`6.3988228119570945, 0.905702`6.408530320262698}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.007943282347242814, "TrainingMemory" -> 90336, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6930328538292384, 0.0011382312527076866`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6104220352560271, 0.02040808958473856]}, 
                 "IterationHistory" -> {33}, 
                 "TimeHistory" -> {{
                   0.885682`6.3988228119570945, 
                    0.905702`6.408530320262698}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.692907864851309, 0.004533383140454346], "Accuracy" -> 
                 Around[0.632405334642945, 0.056930621321630404`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32759969868492544`, "Round" -> 4, 
                 "Iteration" -> 41, 
                 "Time" -> {
                  1.054898`6.474755462438959, 1.062613`6.47792011825784}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 196640, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.692907864851309, 0.0032055859603320348`]}, 
                 "AccuracyHistory" -> {
                   Around[0.632405334642945, 0.0402560283936883]}, 
                 "IterationHistory" -> {41}, 
                 "TimeHistory" -> {{
                   1.054898`6.474755462438959, 1.062613`6.47792011825784}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.692907864851309, 0.004533383140454346], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196640, 
                "TrainingTime" -> 0.015830249153245227`|>, "Index" -> 11|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.1|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5057333230725888, 0.030946967326697508`], 
                 "Accuracy" -> Around[0.7845228804248852, 0.0245004033330575],
                  "EvaluationTime" -> 2.0688459991845076`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.023568673445165556`, "Round" -> 3, 
                 "Iteration" -> 34, 
                 "Time" -> {
                  0.906821`6.409066562381549, 0.933554`6.42168443760618}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98944, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5057333230725888, 0.02188281045386633]}, 
                 "AccuracyHistory" -> {
                   Around[0.7845228804248852, 0.01732440133861045]}, 
                 "IterationHistory" -> {34}, 
                 "TimeHistory" -> {{
                   0.906821`6.409066562381549, 
                    0.933554`6.42168443760618}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5197956754320945, 0.06941100128433285], "Accuracy" -> 
                 Around[0.7554033463485942, 0.051010559210218576`], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.06518743354719392, "Round" -> 4, 
                 "Iteration" -> 39, 
                 "Time" -> {
                  1.02033`6.460285649571974, 1.040797`6.468911025238083}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196400, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5197956754320945, 0.04908098969709991]}, 
                 "AccuracyHistory" -> {
                   Around[0.7554033463485942, 0.03606991232966345]}, 
                 "IterationHistory" -> {39}, 
                 "TimeHistory" -> {{
                   1.02033`6.460285649571974, 1.040797`6.468911025238083}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.5197956754320945, 0.06941100128433285], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196400, 
                "TrainingTime" -> 0.04078971086172212|>, "Index" -> 12|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["LogisticRegression"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "Round", "Iteration", "Time", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ExperimentCount", "MeanCrossEntropyHistory", 
                 "AccuracyHistory", "IterationHistory", "TimeHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Real], 2], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                  TypeSystem`Vector[
                   TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 12], <||>], 
         "TrainingSizes" -> {8, 30, 150, 564}, "MaxTrainingSize" -> 705, 
         "PreprocessorEvaluationTime" -> 2.13671875*^-6, "PreprocessorMemory" -> 
         97488, "InputDimension" -> 6, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6764075376648315, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.1372, "ElapsedTimes" -> 
             0.14799600000000002`, "ExperimentCounts" -> 9|>, <|
            "TrainingSizes" -> 30, "TimeBudgets" -> 0.19599999999999998`, 
             "ElapsedTimes" -> 0.18901099999999998`, "ExperimentCounts" -> 
             11|>, <|"TrainingSizes" -> 150, "TimeBudgets" -> 0.28, 
             "ElapsedTimes" -> 0.27215800000000007`, "ExperimentCounts" -> 
             12|>, <|"TrainingSizes" -> 564, "TimeBudgets" -> 0.4, 
             "ElapsedTimes" -> 0.3959569999999999, "ExperimentCounts" -> 
             14|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
              7168142382301173801|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {17.}, "ID" -> 
              1978735388468315165|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
              9071588231046195481|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 1.235283, 
         "MaxTrainingMemory" -> 1773272, "DataMemory" -> 171752, 
         "FunctionMemory" -> 368400, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 8, 12, 23, 39, 39.160277`8.345420733644138}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
         "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"LogisticRegression[3,0.9]\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["705", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[<|
      "ExampleNumber" -> 705, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f2(f1f3))" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 705, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {30.10567375886525}, 
                    "StandardDeviation" -> {14.516615821483507`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.9912106112395939, 
                    0.058244766391953466`, -0.11878161201961097`}, {
                    0.1301348100157298, 
                    0.5908109257225238, -0.796245804553509}, \
{-0.02380032327932794, 0.8047049131419799, 0.5931977304212801}}, 
                    "Precisions" -> {0.9829580712216761, 12.358744413180277`, 
                    15.395765492368051`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00025125389626327004`, 0.06348513232089592, 
                    0.056671936159393206`}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3631133675148427688|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002512538962632696, 0.06348513232089589, 
                    0.05667193615939322}, 
                    "StandardDeviation" -> {1.0003616146456644`, 
                    0.2943689585492759, 0.27536928113857906`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002512538962632696, 0.06348513232089589, 
                    0.05667193615939322}, 
                    "StandardDeviation" -> {1.0003616146456644`, 
                    0.2943689585492759, 0.27536928113857906`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.071785, "MaxTrainingMemory" -> 311496,
                     "DataMemory" -> 78752, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 12, 23, 39, 39.236636`8.346266744068823}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.381971719549538, -2.381971719549538, \
-2.3061339669788268`, -2.147208491364169, -2.1248883931822933`, \
-2.097555925219649, -1.9904826146441066`, -1.7487504329143218`, \
-1.7445263288268167`, -1.6994955211131928`, -1.5743586517679136`}, 
                    "LeftBoundary" -> -2.3061339669788268`, "LeftScale" -> 
                    0.03791887628535551, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[5.944611613668249, 0.2613337870899857], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 616651398117295976|>], 
              MachineLearning`MLProcessor[
              "Threads", <|
               "Input" -> <|
                 "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {30.10567375886525}, 
                "StandardDeviation" -> {14.516615821483507`}, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                  "female" -> 1, "male" -> 2|>}, 
                "Output" -> <|
                 "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>,
                 "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.7273886203765869, -1.041688323020935, \
-0.3814893066883087}, {0.39698874950408936`, 
                   1.2774958610534668`, -0.9317017197608948}, {
                   0.5576431155204773, -0.062414247542619705`, \
-0.7499105334281921}}], 
                  RawArray["Real32",{{0., 0.}, {0.23993441462516785`, 
                   1.1908897161483765`}, {-0.02056935243308544, \
-0.07570835202932358}}]}, "Version" -> {14.1, 0}, "ID" -> 
                5988483279055413579|>], 
              MachineLearning`MLProcessor[
              "MergeVectors", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|
                   "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                  Span[1, 1], 
                  Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                7619735631186802745|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "died" -> 0.5997171145685998, "survived" -> 0.4002828854314003|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "LogProbabilitiesFunction" -> 
         LinearLayer[<|
           "Type" -> "Linear", 
            "Arrays" -> <|
             "Weights" -> 
              RawArray["Real32",{{0.5421245098114014, 
                1.9938242435455322`, -0.5114880204200745, \
-0.6387369632720947, -0.39257749915122986`, -1.8946795463562012`}}], "Biases" -> 
              RawArray["Real32",{0.5759369730949402}]|>, 
            "Parameters" -> <|
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 6,
               "$InputDimensions" -> {6}|>, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{6}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "14.1.1", "Unstable" -> False|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|
             "Weight" -> {0.3333333333333333, 0.9444444444444444, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`, 0.34444444444444444`, 
               0.34444444444444444`}, "Type" -> "NumericalVector"|>, "Key" -> 
            "(f2(f1f3))", "Invertibility" -> "Perfect", "StructurePreserving" -> 
            False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "LogisticRegression", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "L1Regularization" -> <|"Value" -> 0, "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> 1., "Options" -> <||>|>, 
           "OptimizationMethod" -> <|"Value" -> "LBFGS", "Options" -> <||>|>, 
           MaxIterations -> <|"Value" -> 30, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.143504`5.608409000166796, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.5025050068496775, 0.03919763475797385], "Accuracy" -> 
            Around[0.7728837776593642, 0.02510199400230839], "EvaluationTime" -> 
            3.440826116434226*^-6, "TestSize" -> 141., "ModelMemory" -> 8968.,
             "ModelUtility" -> -0.020481059577688088`, "Round" -> 4, 
            "Iteration" -> 51, 
            "Time" -> {
             1.197355`6.529767925592825, 1.21794`6.5371708874490295}, 
            "TrainingSize" -> 564, "TrainingTime" -> 0.019952623149688785`, 
            "TrainingMemory" -> 196704., "ExperimentCount" -> 2, 
            "MeanCrossEntropyHistory" -> {
              Around[0.5249956219289342, 0.05463142290927838], 
              Around[0.4800143917704207, 0.03967662984101729]}, 
            "AccuracyHistory" -> {
              Around[0.7693906527747715, 0.03534631593642153], 
              Around[0.776376902543957, 0.034965143385103]}, 
            "IterationHistory" -> {28, 51}, 
            "TimeHistory" -> {{
              0.645609`6.261514569458892, 0.666023`6.275034220565087}, {
              1.197355`6.529767925592825, 1.21794`6.5371708874490295}}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 1., "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 705|>, 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], TypeSystem`AnyType, 19], <||>], 
         "Configurations" -> 
         Dataset[<|<|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^-6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[6.082902256075588, 0.48156172802562613`], "Accuracy" -> 
                 Around[0.660523177613424, 0.025290990389256078`], 
                 "EvaluationTime" -> 1.2677821738660456`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -2.514341458567552, "Round" -> 1, 
                 "Iteration" -> 1, 
                 "Time" -> {
                  0.165666`5.670778379842215, 0.214083`5.782127175506333}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.05011872336272722, 
                 "TrainingMemory" -> 77232, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[6.082902256075588, 0.3405155634468321]}, 
                 "AccuracyHistory" -> {
                   Around[0.660523177613424, 0.017883430807166773`]}, 
                 "IterationHistory" -> {1}, 
                 "TimeHistory" -> {{
                   0.165666`5.670778379842215, 
                    0.214083`5.782127175506333}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5082460324987653, 0.034890439242854066`], 
                 "Accuracy" -> 
                 Around[0.779247195904304, 0.022363838033201574`], 
                 "EvaluationTime" -> 2.5283823561520527`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.029996995697952, "Round" -> 2, 
                 "Iteration" -> 19, 
                 "Time" -> {
                  0.495396`6.146497489114905, 0.513662`6.162222431907214}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80304, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5082460324987653, 0.024671266187199337`]}, 
                 "AccuracyHistory" -> {
                   Around[0.779247195904304, 0.015813621526634455`]}, 
                 "IterationHistory" -> {19}, 
                 "TimeHistory" -> {{
                   0.495396`6.146497489114905, 
                    0.513662`6.162222431907214}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.551385690574682, 0.05079120392680622], "Accuracy" -> 
                 Around[0.7767186377463486, 0.0247792827016666], 
                 "EvaluationTime" -> 2.529382046121816*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.11608501496601042`, "Round" -> 3, 
                 "Iteration" -> 32, 
                 "Time" -> {
                  0.851835`6.381900473791802, 0.87079`6.391458426531824}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98648, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.551385690574682, 0.03591480472127348]}, 
                 "AccuracyHistory" -> {
                   Around[0.7767186377463486, 0.017521598831286966`]}, 
                 "IterationHistory" -> {32}, 
                 "TimeHistory" -> {{
                   0.851835`6.381900473791802, 
                    0.87079`6.391458426531824}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5252488242852971, 0.07954896622233398], "Accuracy" -> 
                 Around[0.7769729040084946, 0.04937307749993175], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.07910743431710376, "Round" -> 4, 
                 "Iteration" -> 47, 
                 "Time" -> {
                  1.137647`6.507552519408919, 1.157562`6.515089254988791}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196528, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5252488242852971, 0.056249613452191975`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7769729040084946, 0.03491203790825069]}, 
                 "IterationHistory" -> {47}, 
                 "TimeHistory" -> {{
                   1.137647`6.507552519408919, 
                    1.157562`6.515089254988791}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5252488242852971, 0.07954896622233398], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196528, 
                "TrainingTime" -> 0.07505950229983821|>, "Index" -> 1|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.01|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[2.2464885148687728`, 0.18254622240601234`], 
                 "Accuracy" -> Around[0.6651854883355407, 0.0250408353009811],
                  "EvaluationTime" -> 1.5348546563410497`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -1.5186396686452757`, "Round" -> 1, 
                 "Iteration" -> 3, 
                 "Time" -> {
                  0.224864`5.803464925353098, 0.247963`5.845931875553492}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.01995262314968879, 
                 "TrainingMemory" -> 77168, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.2464885148687728`, 0.129079671743279]}, 
                 "AccuracyHistory" -> {
                   Around[0.6651854883355407, 0.017706544447899215`]}, 
                 "IterationHistory" -> {3}, 
                 "TimeHistory" -> {{
                   0.224864`5.803464925353098, 
                    0.247963`5.845931875553492}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5078328793423802, 0.034567574483329054`], 
                 "Accuracy" -> 
                 Around[0.781084037073182, 0.022289664239095574`], 
                 "EvaluationTime" -> 2.6049192623062304`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.02906934564124164, "Round" -> 2, 
                 "Iteration" -> 10, 
                 "Time" -> {
                  0.34335`5.987282045226197, 0.362219`6.010516220751582}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80352, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5078328793423802, 0.02444296632633304]}, 
                 "AccuracyHistory" -> {
                   Around[0.781084037073182, 0.015761172733835767`]}, 
                 "IterationHistory" -> {10}, 
                 "TimeHistory" -> {{
                   0.34335`5.987282045226197, 
                    0.362219`6.010516220751582}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5511321553795565, 0.05068914726901739], "Accuracy" -> 
                 Around[0.7767186377463486, 0.0247792827016666], 
                 "EvaluationTime" -> 2.646569654889167*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.11559705082096705`, "Round" -> 3, 
                 "Iteration" -> 25, 
                 "Time" -> {
                  0.593208`6.224751992784933, 0.61245`6.238615632474652}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98728, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5511321553795565, 0.03584263976648576]}, 
                 "AccuracyHistory" -> {
                   Around[0.7767186377463486, 0.017521598831286966`]}, 
                 "IterationHistory" -> {25}, 
                 "TimeHistory" -> {{
                   0.593208`6.224751992784933, 
                    0.61245`6.238615632474652}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.525247976016745, 0.07953592616386498], "Accuracy" -> 
                 Around[0.7769729040084946, 0.04937307749993175], 
                 "EvaluationTime" -> 3.657829769600892*^-6, "TestSize" -> 141,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.07910104794247919, "Round" -> 4, 
                 "Iteration" -> 45, 
                 "Time" -> {
                  1.095143`6.491015825052079, 1.115098`6.4988580303769705}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.525247976016745, 0.05624039273842147]}, 
                 "AccuracyHistory" -> {
                   Around[0.7769729040084946, 0.03491203790825069]}, 
                 "IterationHistory" -> {45}, 
                 "TimeHistory" -> {{
                   1.095143`6.491015825052079, 
                    1.115098`6.4988580303769705}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.657829769600892*^-6, "MeanCrossEntropy" -> 
                Around[0.525247976016745, 0.07953592616386498], "ModelMemory" -> 
                8968, "TrainingMemory" -> 196464, "TrainingTime" -> 
                0.044893402086799775`|>, "Index" -> 2|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6929303011759275, 0.0013697056944264553`], 
                 "Accuracy" -> Around[0.6503041984550371, 0.0253562617838057],
                  "EvaluationTime" -> 1.6281676016292564`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3267196813820481, "Round" -> 1, 
                 "Iteration" -> 2, 
                 "Time" -> {
                  0.215153`5.784292399570428, 0.223793`5.801391491644885}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.005011872336272719, 
                 "TrainingMemory" -> 69232, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6929303011759275, 0.0009685281847587756]}, 
                 "AccuracyHistory" -> {
                   Around[0.6503041984550371, 0.017929584652870312`]}, 
                 "IterationHistory" -> {2}, 
                 "TimeHistory" -> {{
                   0.215153`5.784292399570428, 
                    0.223793`5.801391491644885}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.692834834059992, 0.0011214406775416257`], 
                 "Accuracy" -> 
                 Around[0.5748091566890375, 0.02932008263259631], 
                 "EvaluationTime" -> 2.5750154604743296`*^-6, "TestSize" -> 
                 425., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.32651031357032134`, "Round" -> 2, 
                 "Iteration" -> 21, 
                 "Time" -> {
                  0.528858`6.1748840717788775, 0.539359`6.183422923468767}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.0054444393724491225`, "TrainingMemory" -> 
                 72842.66666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6929023167003475, 0.001998797364833184], 
                   Around[0.6927673514196365, 0.0013511839235544494`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5499869545770445, 0.028605166689202603`], 
                   Around[0.5996313588010306, 0.018620218946211655`]}, 
                 "IterationHistory" -> {7, 21}, 
                 "TimeHistory" -> {{
                   0.301561`5.93092016829323, 0.309571`5.942305263562796}, {
                   0.528858`6.1748840717788775, 
                    0.539359`6.183422923468767}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6919205905287893, 0.0011463933185558736`], 
                 "Accuracy" -> 
                 Around[0.6827849529504109, 0.047464018706110514`], 
                 "EvaluationTime" -> 2.5797752539828112`*^-6, "TestSize" -> 
                 451.66666666666663`, "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.3251975107572529, "Round" -> 3, 
                 "Iteration" -> 36, 
                 "Time" -> {
                  0.930589`6.420302908158368, 0.952512`6.430415449235708}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 91778.66666666666, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6920449487777784, 0.001745762549195429], 
                   Around[0.6917962322798001, 0.0015043942407406917`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6376720306727177, 0.023905350110829362`], 
                   Around[0.727897875228104, 0.018749843322724554`]}, 
                 "IterationHistory" -> {13, 36}, 
                 "TimeHistory" -> {{
                   0.393854`6.046880254039168, 0.402918`6.056761663033909}, {
                   0.930589`6.420302908158368, 
                    0.952512`6.430415449235708}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6893638405345859, 0.0025084752312705136`], 
                 "Accuracy" -> 
                 Around[0.6657640141590863, 0.04038332720120487], 
                 "EvaluationTime" -> 3.0025314407611923`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.3218917076642148, "Round" -> 4, 
                 "Iteration" -> 50, 
                 "Time" -> {
                  1.185874`6.525583540861743, 1.195759`6.5291886518132385}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.007943282347242814, "TrainingMemory" -> 
                 196586.66666666666`, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6902538892867087, 0.00333401344119369], 
                   Around[0.6884737917824632, 0.003299660494580546]}, 
                 "AccuracyHistory" -> {
                   Around[0.636529398043905, 0.04036234449268242], 
                   Around[0.6949986302742676, 0.03850195739549131]}, 
                 "IterationHistory" -> {26, 50}, 
                 "TimeHistory" -> {{
                   0.613504`6.23936239213563, 0.623114`6.246112502501407}, {
                   1.185874`6.525583540861743, 
                    1.195759`6.5291886518132385}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.0025314407611923`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6893638405345859, 0.0025084752312705136`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 
                196586.66666666666`, "TrainingTime" -> 
                0.014940975270326236`|>, "Index" -> 3|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9019028721959469, 0.060844855329499875`], 
                 "Accuracy" -> 
                 Around[0.6631616092318766, 0.025095438986610107`], 
                 "EvaluationTime" -> 1.721480546917463*^-6, "TestSize" -> 697,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.6033041752486544, "Round" -> 1, 
                 "Iteration" -> 6, 
                 "Time" -> {
                  0.286305`5.908373926056338, 0.300478`5.929357673400898}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 77280, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.9019028721959469, 0.043023809803803804`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6631616092318766, 0.017745155084285265`]}, 
                 "IterationHistory" -> {6}, 
                 "TimeHistory" -> {{
                   0.286305`5.908373926056338, 
                    0.300478`5.929357673400898}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5530715928332691, 0.02422763144668696], "Accuracy" -> 
                 Around[0.7540915601073143, 0.02861338676580453], 
                 "EvaluationTime" -> 2.658565102780442*^-6, "TestSize" -> 
                 675., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.10960542400052553`, "Round" -> 2, 
                 "Iteration" -> 22, 
                 "Time" -> {
                  0.540817`6.184595328223476, 0.558567`6.198620267608451}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 80392., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.532378199709635, 0.017612641408121625`], 
                   Around[0.5737649859569033, 0.018033161506189024`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7802631324630771, 0.015797259760202506`], 
                   Around[0.7279199877515514, 0.01698065339046561]}, 
                 "IterationHistory" -> {9, 22}, 
                 "TimeHistory" -> {{
                   0.32524`5.96374894588845, 0.342311`5.985965848703213}, {
                   0.540817`6.184595328223476, 
                    0.558567`6.198620267608451}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.507423863815996, 0.034240656811329255`], "Accuracy" -> 
                 Around[0.7825176660615384, 0.012347284922002615`], 
                 "EvaluationTime" -> 2.390830384368208*^-6, "TestSize" -> 
                 555., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.02814730341260241, "Round" -> 3, 
                 "Iteration" -> 37, 
                 "Time" -> {
                  0.95411`6.431143441196974, 0.984171`6.44461555727722}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98658.66666666666,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5373845271806411, 0.031081157639550896`], 
                   Around[0.477463200451351, 0.019596156772224066`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7815756537936324, 0.017394329587055786`], 
                   Around[0.7834596783294444, 0.017427326448124808`]}, 
                 "IterationHistory" -> {14, 37}, 
                 "TimeHistory" -> {{
                   0.403933`6.057854328548754, 0.423255`6.0781470907189625}, {
                   0.95411`6.431143441196974, 0.984171`6.44461555727722}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5025050068496775, 0.03919763475797385], "Accuracy" -> 
                 Around[0.7728837776593642, 0.02510199400230839], 
                 "EvaluationTime" -> 3.440826116434226*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.020481059577688088`, "Round" -> 4, 
                 "Iteration" -> 51, 
                 "Time" -> {
                  1.197355`6.529767925592825, 1.21794`6.5371708874490295}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.019952623149688785`, "TrainingMemory" -> 196704., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.5249956219289342, 0.05463142290927838], 
                   Around[0.4800143917704207, 0.03967662984101729]}, 
                 "AccuracyHistory" -> {
                   Around[0.7693906527747715, 0.03534631593642153], 
                   Around[0.776376902543957, 0.034965143385103]}, 
                 "IterationHistory" -> {28, 51}, 
                 "TimeHistory" -> {{
                   0.645609`6.261514569458892, 0.666023`6.275034220565087}, {
                   1.197355`6.529767925592825, 
                    1.21794`6.5371708874490295}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.440826116434226*^-6, "MeanCrossEntropy" -> 
                Around[0.5025050068496775, 0.03919763475797385], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196704., 
                "TrainingTime" -> 0.03494077893711098|>, "Index" -> 4|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.00001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5082484360816647, 0.03489046843181006], "Accuracy" -> 
                 Around[0.779247195904304, 0.022363838033201574`], 
                 "EvaluationTime" -> 2.5283823561520527`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.030001672138673108`, "Round" -> 2, 
                 "Iteration" -> 11, 
                 "Time" -> {
                  0.363254`6.011755398760219, 0.381644`6.033203432524937}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80304, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5082484360816647, 0.024671286826908057`]}, 
                 "AccuracyHistory" -> {
                   Around[0.779247195904304, 0.015813621526634455`]}, 
                 "IterationHistory" -> {11}, 
                 "TimeHistory" -> {{
                   0.363254`6.011755398760219, 
                    0.381644`6.033203432524937}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5513874980936134, 0.05079121391911692], "Accuracy" -> 
                 Around[0.7767186377463486, 0.0247792827016666], 
                 "EvaluationTime" -> 2.622467472525545*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.11608823745075048`, "Round" -> 3, 
                 "Iteration" -> 15, 
                 "Time" -> {
                  0.424327`6.079245660374402, 0.443475`6.098414135886778}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98840, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5513874980936134, 0.03591481178690414]}, 
                 "AccuracyHistory" -> {
                   Around[0.7767186377463486, 0.017521598831286966`]}, 
                 "IterationHistory" -> {15}, 
                 "TimeHistory" -> {{
                   0.424327`6.079245660374402, 
                    0.443475`6.098414135886778}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5252520526358997, 0.0795596846949805], "Accuracy" -> 
                 Around[0.7769729040084946, 0.04937307749993175], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.07911736120044999, "Round" -> 4, 
                 "Iteration" -> 41, 
                 "Time" -> {
                  1.026311`6.462823977193352, 1.046385`6.471236498879913}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196400, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5252520526358997, 0.056257192556884286`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7769729040084946, 0.03491203790825069]}, 
                 "IterationHistory" -> {41}, 
                 "TimeHistory" -> {{
                   1.026311`6.462823977193352, 
                    1.046385`6.471236498879913}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5252520526358997, 0.0795596846949805], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196400, 
                "TrainingTime" -> 0.04078971086172212|>, "Index" -> 5|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.0001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.9774340485081074`, 0.3211726395129651], "Accuracy" -> 
                 Around[0.6651854883355407, 0.0250408353009811], 
                 "EvaluationTime" -> 1.8147934922056698`*^-6, "TestSize" -> 
                 697, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -2.0898079034972086`, "Round" -> 1, 
                 "Iteration" -> 5, 
                 "Time" -> {
                  0.261995`5.869837996674003, 0.285224`5.906731059658385}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.01995262314968879, 
                 "TrainingMemory" -> 77208, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[3.9774340485081074`, 0.2271033513312001]}, 
                 "AccuracyHistory" -> {
                   Around[0.6651854883355407, 0.017706544447899215`]}, 
                 "IterationHistory" -> {5}, 
                 "TimeHistory" -> {{
                   0.261995`5.869837996674003, 
                    0.285224`5.906731059658385}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5082448408890604, 0.03488752848414005], "Accuracy" -> 
                 Around[0.779247195904304, 0.022363838033201574`], 
                 "EvaluationTime" -> 2.471662799941297*^-6, "TestSize" -> 675,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.029993552936531942`, "Round" -> 2, 
                 "Iteration" -> 18, 
                 "Time" -> {
                  0.476094`6.129237701785626, 0.494363`6.145590952548531}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80240, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5082448408890604, 0.02466920796997426]}, 
                 "AccuracyHistory" -> {
                   Around[0.779247195904304, 0.015813621526634455`]}, 
                 "IterationHistory" -> {18}, 
                 "TimeHistory" -> {{
                   0.476094`6.129237701785626, 
                    0.494363`6.145590952548531}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5513889523542819, 0.05079047822950699], "Accuracy" -> 
                 Around[0.7767186377463486, 0.0247792827016666], 
                 "EvaluationTime" -> 2.8327405076966267`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.11609056538097584`, "Round" -> 3, 
                 "Iteration" -> 29, 
                 "Time" -> {
                  0.800428`6.354867265904925, 0.820315`6.365525646480162}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5513889523542819, 0.0359142915757921]}, 
                 "AccuracyHistory" -> {
                   Around[0.7767186377463486, 0.017521598831286966`]}, 
                 "IterationHistory" -> {29}, 
                 "TimeHistory" -> {{
                   0.800428`6.354867265904925, 
                    0.820315`6.365525646480162}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5252525700978573, 0.07956061179511327], "Accuracy" -> 
                 Around[0.7769729040084946, 0.04937307749993175], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.07911866003322765, "Round" -> 4, 
                 "Iteration" -> 46, 
                 "Time" -> {
                  1.116359`6.499348871473145, 1.136369`6.507064371210925}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5252525700978573, 0.056257848115675003`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7769729040084946, 0.03491203790825069]}, 
                 "IterationHistory" -> {46}, 
                 "TimeHistory" -> {{
                   1.116359`6.499348871473145, 
                    1.136369`6.507064371210925}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5252525700978573, 0.07956061179511327], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196464, 
                "TrainingTime" -> 0.044893402086799775`|>, "Index" -> 6|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6912465479034382, 0.0019752576374386897`], 
                 "Accuracy" -> 
                 Around[0.6096022399482043, 0.026297358997316795`], 
                 "EvaluationTime" -> 2.6049192623062304`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32446290618921025`, "Round" -> 2, 
                 "Iteration" -> 12, 
                 "Time" -> {
                  0.382705`6.034409129768617, 0.392839`6.045759590340043}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.00630957344480193, 
                 "TrainingMemory" -> 73912, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6912465479034382, 0.0013967180700234165`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6096022399482043, 0.01859504087429977]}, 
                 "IterationHistory" -> {12}, 
                 "TimeHistory" -> {{
                   0.382705`6.034409129768617, 
                    0.392839`6.045759590340043}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6828660769709591, 0.00327550774967406], "Accuracy" -> 
                 Around[0.654020020969463, 0.028277279630836608`], 
                 "EvaluationTime" -> 2.622467472525545*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.31265264573739004`, "Round" -> 3, 
                 "Iteration" -> 30, 
                 "Time" -> {
                  0.821399`6.3660991632885695, 0.832231`6.371788882408069}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.007943282347242814, "TrainingMemory" -> 93376, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6828660769709591, 0.002316133741623616]}, 
                 "AccuracyHistory" -> {
                   Around[0.654020020969463, 0.019995056180472797`]}, 
                 "IterationHistory" -> {30}, 
                 "TimeHistory" -> {{
                   0.821399`6.3660991632885695, 
                    0.832231`6.371788882408069}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6697886969234041, 0.01046205287540426], "Accuracy" -> 
                 Around[0.6507242087596941, 0.05655821919880577], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.29547640673253894`, "Round" -> 4, 
                 "Iteration" -> 43, 
                 "Time" -> {
                  1.062033`6.477683005058036, 1.072771`6.482052018303903}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6697886969234041, 0.0073977885333305704`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6507242087596941, 0.03999270032731074]}, 
                 "IterationHistory" -> {43}, 
                 "TimeHistory" -> {{
                   1.062033`6.477683005058036, 
                    1.072771`6.482052018303903}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6697886969234041, 0.01046205287540426], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196464, 
                "TrainingTime" -> 0.01880957344480193|>, "Index" -> 7|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.001|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5082039859674359, 0.034857626445628634`], 
                 "Accuracy" -> 
                 Around[0.779247195904304, 0.022363838033201574`], 
                 "EvaluationTime" -> 2.7012735184038303`*^-6, "TestSize" -> 
                 675, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.0299026458937669, "Round" -> 2, 
                 "Iteration" -> 16, 
                 "Time" -> {
                  0.444527`6.099443138093307, 0.463088`6.1172085207621505}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 80240, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5082039859674359, 0.024648064035771536`]}, 
                 "AccuracyHistory" -> {
                   Around[0.779247195904304, 0.015813621526634455`]}, 
                 "IterationHistory" -> {16}, 
                 "TimeHistory" -> {{
                   0.444527`6.099443138093307, 
                    0.463088`6.1172085207621505}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5513655695923618, 0.05078122432014363], "Accuracy" -> 
                 Around[0.7767186377463486, 0.0247792827016666], 
                 "EvaluationTime" -> 2.529382046121816*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.11604562830723675`, "Round" -> 3, 
                 "Iteration" -> 24, 
                 "Time" -> {
                  0.574284`6.210671710162814, 0.592148`6.223975260269928}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 98664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5513655695923618, 0.03590774807372878]}, 
                 "AccuracyHistory" -> {
                   Around[0.7767186377463486, 0.017521598831286966`]}, 
                 "IterationHistory" -> {24}, 
                 "TimeHistory" -> {{
                   0.574284`6.210671710162814, 
                    0.592148`6.223975260269928}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5252521594198044, 0.07955837069685417], "Accuracy" -> 
                 Around[0.7769729040084946, 0.04937307749993175], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.07911707290384129, "Round" -> 4, 
                 "Iteration" -> 27, 
                 "Time" -> {
                  0.624155`6.246837447418081, 0.644587`6.26082653593013}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5252521594198044, 0.0562562634198987]}, 
                 "AccuracyHistory" -> {
                   Around[0.7769729040084946, 0.03491203790825069]}, 
                 "IterationHistory" -> {27}, 
                 "TimeHistory" -> {{
                   0.624155`6.246837447418081, 0.644587`6.26082653593013}}|>},
               "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5252521594198044, 0.07955837069685417], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196464, 
                "TrainingTime" -> 0.04078971086172212|>, "Index" -> 8|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6789621071918689, 0.0019358286578926652`], 
                 "Accuracy" -> 
                 Around[0.6100608600985642, 0.01675879308802813], 
                 "EvaluationTime" -> 2.553894658203445*^-6, "TestSize" -> 
                 675., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.3065303930013584, "Round" -> 2, 
                 "Iteration" -> 23, 
                 "Time" -> {
                  0.560424`6.200061719046863, 0.572862`6.209595008383641}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.006854143078948891,
                  "TrainingMemory" -> 75413.33333333333, "ExperimentCount" -> 
                 2, "MeanCrossEntropyHistory" -> {
                   Around[0.6787004165986424, 0.003114172451255856], 
                   Around[0.6792237977850953, 0.002434659087825462]}, 
                 "AccuracyHistory" -> {
                   Around[0.6204903613960977, 0.01848391722606172], 
                   Around[0.5996313588010306, 0.018620218946211655`]}, 
                 "IterationHistory" -> {17, 23}, 
                 "TimeHistory" -> {{
                   0.464106`6.1181621765455745, 0.47503`6.1282660313798685}, {
                   0.560424`6.200061719046863, 
                    0.572862`6.209595008383641}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6306763940765535, 0.012907798644136286`], 
                 "Accuracy" -> 
                 Around[0.6562467418913314, 0.02827569193904476], 
                 "EvaluationTime" -> 2.6224674725255454`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.2362728537490818, "Round" -> 3, 
                 "Iteration" -> 20, 
                 "Time" -> {
                  0.514697`6.163096630393429, 0.527813`6.174025076156692}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 96120, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6306763940765535, 0.009127191951459291]}, 
                 "AccuracyHistory" -> {
                   Around[0.6562467418913314, 0.01999393351284035]}, 
                 "IterationHistory" -> {20}, 
                 "TimeHistory" -> {{
                   0.514697`6.163096630393429, 
                    0.527813`6.174025076156692}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.574807190114077, 0.0185735745419661], "Accuracy" -> 
                 Around[0.7659017019636498, 0.02720295041412121], 
                 "EvaluationTime" -> 3.0025314407611923`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.14587141615774002`, "Round" -> 4, 
                 "Iteration" -> 48, 
                 "Time" -> {
                  1.158833`6.515565847575023, 1.174452`6.521380265302561}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 
                 0.010863084705980556`, "TrainingMemory" -> 
                 196586.66666666666`, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5844433286571006, 0.024731856149879307`], 
                   Around[0.5651710515710534, 0.020710356797400617`]}, 
                 "AccuracyHistory" -> {
                   Around[0.776376902543957, 0.034965143385103], 
                   Around[0.7554265013833427, 0.036068780489856116`]}, 
                 "IterationHistory" -> {42, 48}, 
                 "TimeHistory" -> {{
                   1.047686`6.471776134062913, 1.060772`6.477167041127202}, {
                   1.158833`6.515565847575023, 
                    1.174452`6.521380265302561}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.0025314407611923`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.574807190114077, 0.0185735745419661], "ModelMemory" -> 
                8968., "TrainingMemory" -> 196586.66666666666`, 
                "TrainingTime" -> 0.020432998961424587`|>, "Index" -> 9|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 10.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6680383525078585, 0.017626787167889343`], 
                 "Accuracy" -> 
                 Around[0.6624909374723957, 0.025128258782657016`], 
                 "EvaluationTime" -> 1.721480546917463*^-6, "TestSize" -> 697,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.29500389226871093`, "Round" -> 1, 
                 "Iteration" -> 4, 
                 "Time" -> {
                  0.249027`5.84779143021144, 0.26094`5.868085651544955}, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.007943282347242814, 
                 "TrainingMemory" -> 74128, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6680383525078585, 0.012464020736946572`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6624909374723957, 0.017768362184627195`]}, 
                 "IterationHistory" -> {4}, 
                 "TimeHistory" -> {{
                   0.249027`5.84779143021144, 0.26094`5.868085651544955}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6314582915001143, 0.015239228075820108`], 
                 "Accuracy" -> 
                 Around[0.6716233635425609, 0.026856879917716656`], 
                 "EvaluationTime" -> 2.42578241208613*^-6, "TestSize" -> 600, 
                 "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.23824196392891728`, "Round" -> 2, 
                 "Iteration" -> 8, 
                 "Time" -> {
                  0.310613`5.943764621675752, 0.32421`5.962371399683488}, 
                 "TrainingSize" -> 30, "TrainingTime" -> 0.01, 
                 "TrainingMemory" -> 78872, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6314582915001143, 0.01077576151246082]}, 
                 "AccuracyHistory" -> {
                   Around[0.6716233635425609, 0.018990681911330253`]}, 
                 "IterationHistory" -> {8}, 
                 "TimeHistory" -> {{
                   0.310613`5.943764621675752, 
                    0.32421`5.962371399683488}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5429251947628199, 0.02901202997634894], "Accuracy" -> 
                 Around[0.6946472919136554, 0.027371983261329957`], 
                 "EvaluationTime" -> 2.622467472525545*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.09299714954563532, "Round" -> 3, 
                 "Iteration" -> 31, 
                 "Time" -> {
                  0.833333`6.372363573730521, 0.850754`6.381348993196048}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 98728, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5429251947628199, 0.020514603132263727`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6946472919136554, 0.019354914978611082`]}, 
                 "IterationHistory" -> {31}, 
                 "TimeHistory" -> {{
                   0.833333`6.372363573730521, 
                    0.850754`6.381348993196048}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5295791298725859, 0.06492895543972407], "Accuracy" -> 
                 Around[0.7794055412901397, 0.049075692668999575`], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.0817027534555872, "Round" -> 4, 
                 "Iteration" -> 40, 
                 "Time" -> {
                  1.004694`6.4535788021706795, 1.025037`6.462284535576345}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196528, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5295791298725859, 0.04591170468678806]}, 
                 "AccuracyHistory" -> {
                   Around[0.7794055412901397, 0.03470175507767653]}, 
                 "IterationHistory" -> {40}, 
                 "TimeHistory" -> {{
                   1.004694`6.4535788021706795, 
                    1.025037`6.462284535576345}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5295791298725859, 0.06492895543972407], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196528, 
                "TrainingTime" -> 0.0328840612843538|>, "Index" -> 10|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 1.*^6|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6929180492790877, 0.0021251005349865715`], 
                 "Accuracy" -> 
                 Around[0.6556586920361049, 0.028252002594796554`], 
                 "EvaluationTime" -> 2.7396550812928966`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.3269199310830567, "Round" -> 3, 
                 "Iteration" -> 33, 
                 "Time" -> {
                  0.87184`6.391981784056008, 0.886064`6.399010085409}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 90168, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6929180492790877, 0.0015026729989921646`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6556586920361049, 0.019977182616880577`]}, 
                 "IterationHistory" -> {33}, 
                 "TimeHistory" -> {{
                   0.87184`6.391981784056008, 0.886064`6.399010085409}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6928592765546824, 0.0022679341029143377`], 
                 "Accuracy" -> 
                 Around[0.6687275519758779, 0.04253993459611984], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141., "ModelMemory" -> 8968., 
                 "ModelUtility" -> -0.32687636484095384`, "Round" -> 4, 
                 "Iteration" -> 49, 
                 "Time" -> {
                  1.17605`6.52197077974501, 1.184299`6.5250063560658}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 196720., "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6928686999914914, 0.0032073228919816473`], 
                   Around[0.6928498531178734, 0.0032073080679928846`]}, 
                 "AccuracyHistory" -> {
                   Around[0.636529398043905, 0.04036234449268242], 
                   Around[0.7009257059078507, 0.03834943465253994]}, 
                 "IterationHistory" -> {38, 49}, 
                 "TimeHistory" -> {{
                   0.9858`6.445333807314681, 0.993596`6.44875482795748}, {
                   1.17605`6.52197077974501, 1.184299`6.5250063560658}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6928592765546824, 0.0022679341029143377`], 
                "ModelMemory" -> 8968., "TrainingMemory" -> 196720., 
                "TrainingTime" -> 0.012898839142275131`|>, "Index" -> 11|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 0.1|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5489743595062623, 0.04981654461659195], "Accuracy" -> 
                 Around[0.7767186377463486, 0.0247792827016666], 
                 "EvaluationTime" -> 2.622467472525545*^-6, "TestSize" -> 555,
                  "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.11143296609863151`, "Round" -> 3, 
                 "Iteration" -> 34, 
                 "Time" -> {
                  0.887172`6.399552820102603, 0.91319`6.4121061405447906}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.015848931924611134`, "TrainingMemory" -> 98600, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5489743595062623, 0.03522561651367436]}, 
                 "AccuracyHistory" -> {
                   Around[0.7767186377463486, 0.017521598831286966`]}, 
                 "IterationHistory" -> {34}, 
                 "TimeHistory" -> {{
                   0.887172`6.399552820102603, 
                    0.91319`6.4121061405447906}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5252082539557258, 0.07931340875818493], "Accuracy" -> 
                 Around[0.7769729040084946, 0.04937307749993175], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.07894539508553644, "Round" -> 4, 
                 "Iteration" -> 44, 
                 "Time" -> {
                  1.074018`6.482556553476985, 1.093888`6.490517851625022}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.01995262314968879,
                  "TrainingMemory" -> 196576, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.5252082539557258, 0.05608304917193307]}, 
                 "AccuracyHistory" -> {
                   Around[0.7769729040084946, 0.03491203790825069]}, 
                 "IterationHistory" -> {44}, 
                 "TimeHistory" -> {{
                   1.074018`6.482556553476985, 
                    1.093888`6.490517851625022}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.5252082539557258, 0.07931340875818493], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196576, 
                "TrainingTime" -> 0.04078971086172212|>, "Index" -> 12|>, <|
             "Value" -> "LogisticRegression", 
              "Options" -> <|
               "L1Regularization" -> <|"Value" -> 0|>, 
                "L2Regularization" -> <|"Value" -> 100000.|>, 
                "OptimizationMethod" -> <|"Value" -> Automatic|>, 
                MaxIterations -> <|"Value" -> 30|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.6928202469456173, 0.0021252501065764807`], 
                 "Accuracy" -> 
                 Around[0.6556586920361049, 0.028252002594796554`], 
                 "EvaluationTime" -> 2.7155528989292755`*^-6, "TestSize" -> 
                 555, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32677890518323394`, "Round" -> 3, 
                 "Iteration" -> 35, 
                 "Time" -> {
                  0.914384`6.412673611613182, 0.929355`6.419726633314283}, 
                 "TrainingSize" -> 150, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 90904, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6928202469456173, 0.0015027787620776622`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6556586920361049, 0.019977182616880577`]}, 
                 "IterationHistory" -> {35}, 
                 "TimeHistory" -> {{
                   0.914384`6.412673611613182, 
                    0.929355`6.419726633314283}}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6926268407434627, 0.004537619604045374], "Accuracy" -> 
                 Around[0.636529398043905, 0.05708097499072648], 
                 "EvaluationTime" -> 3.1965593946655734`*^-6, "TestSize" -> 
                 141, "ModelMemory" -> 8968, 
                 "ModelUtility" -> -0.32719579626268747`, "Round" -> 4, 
                 "Iteration" -> 39, 
                 "Time" -> {
                  0.994854`6.449304343943424, 1.003461`6.453045491581132}, 
                 "TrainingSize" -> 564, "TrainingTime" -> 0.00630957344480193,
                  "TrainingMemory" -> 196464, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6926268407434627, 0.0032085815924655006`]}, 
                 "AccuracyHistory" -> {
                   Around[0.636529398043905, 0.04036234449268242]}, 
                 "IterationHistory" -> {39}, 
                 "TimeHistory" -> {{
                   0.994854`6.449304343943424, 
                    1.003461`6.453045491581132}}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 3.1965593946655734`*^-6, 
                "MeanCrossEntropy" -> 
                Around[0.6926268407434627, 0.004537619604045374], 
                "ModelMemory" -> 8968, "TrainingMemory" -> 196464, 
                "TrainingTime" -> 0.012898839142275131`|>, "Index" -> 13|>|>, 
           
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["LogisticRegression"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 4]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "Round", "Iteration", "Time", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ExperimentCount", "MeanCrossEntropyHistory", 
                 "AccuracyHistory", "IterationHistory", "TimeHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Real], 2], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                  TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                  TypeSystem`Vector[
                   TypeSystem`Atom[Real], 2], TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 13], <||>], 
         "TrainingSizes" -> {8, 30, 150, 564}, "MaxTrainingSize" -> 705, 
         "PreprocessorEvaluationTime" -> 2.17578125*^-6, "PreprocessorMemory" -> 
         97488, "InputDimension" -> 6, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.6731262004773557, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.1372, "ElapsedTimes" -> 
             0.13079100000000002`, "ExperimentCounts" -> 6|>, <|
            "TrainingSizes" -> 30, "TimeBudgets" -> 0.19600000000000006`, 
             "ElapsedTimes" -> 0.19672500000000004`, "ExperimentCounts" -> 
             13|>, <|"TrainingSizes" -> 150, "TimeBudgets" -> 0.28, 
             "ElapsedTimes" -> 0.275963, "ExperimentCounts" -> 15|>, <|
            "TrainingSizes" -> 564, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
             0.40344599999999997`, "ExperimentCounts" -> 17|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
              7168142382301173801|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.}, "ID" -> 
              1978735388468315165|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
              9071588231046195481|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 1.257047, 
         "MaxTrainingMemory" -> 1122968, "DataMemory" -> 171704, 
         "FunctionMemory" -> 372496, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 8, 12, 23, 39, 40.418376`8.359153837938578}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
         "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"NearestNeighbors[1,0.9]\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["705", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[<|
      "ExampleNumber" -> 705, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f2(f1f3))" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 705, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {29.74208042553192}, 
                    "StandardDeviation" -> {14.528988696816175`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{0.9913202335140465, 
                    0.030678367603696313`, -0.12783987009860776`}, \
{-0.12935527312421902`, 0.40128623779224604`, -0.9067726113384238}, {
                    0.023482077008115894`, 0.9154387981289178, 
                    0.40177157557456367`}}, 
                    "Precisions" -> {0.9834136708493431, 11.668018964085109`, 
                    15.389918820672182`}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002512538962630631, 0.06348513232089592, 
                    0.05879959573386129}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3631133675148427688|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002512538962630706, 0.06348513232089587, 
                    0.05879959573386127}, 
                    "StandardDeviation" -> {1.000216455076317, 
                    0.29024642902357983`, 0.2878751138713975}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002512538962630706, 0.06348513232089587, 
                    0.05879959573386127}, 
                    "StandardDeviation" -> {1.000216455076317, 
                    0.29024642902357983`, 0.2878751138713975}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {29.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"female"}, "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.049306, "MaxTrainingMemory" -> 311608,
                     "DataMemory" -> 78752, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 12, 23, 39, 40.471911`8.359728689613496}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.406678668709616, -2.406678668709616, \
-2.1327781154516625`, -2.0571382171049533`, -1.9686279676855107`, \
-1.934675097533246, -1.8969482657094994`, -1.886265391955341, \
-1.7266493352795484`, -1.6845427677954201`, -1.5800001678237574`}, 
                    "LeftBoundary" -> -2.1327781154516625`, "LeftScale" -> 
                    0.13695027662897674`, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[5.782291198514567, 0.2265081351304085], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 616651398117295976|>], 
              MachineLearning`MLProcessor[
              "Threads", <|
               "Input" -> <|
                 "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {29.74208042553192}, 
                "StandardDeviation" -> {14.528988696816175`}, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                  "female" -> 1, "male" -> 2|>}, 
                "Output" -> <|
                 "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>,
                 "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.7273886203765869, -1.041688323020935, \
-0.3814893066883087}, {0.39698874950408936`, 
                   1.2774958610534668`, -0.9317017197608948}, {
                   0.5576431155204773, -0.062414247542619705`, \
-0.7499105334281921}}], 
                  RawArray["Real32",{{0., 0.}, {0.23993441462516785`, 
                   1.1908897161483765`}, {-0.02056935243308544, \
-0.07570835202932358}}]}, "Version" -> {14.1, 0}, "ID" -> 
                5988483279055413579|>], 
              MachineLearning`MLProcessor[
              "MergeVectors", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|
                   "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                  Span[1, 1], 
                  Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                7619735631186802745|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "died" -> 0.5912305516265912, "survived" -> 0.4087694483734088|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "NeighborsFunction" -> 
         MachineLearning`PackageScope`NeighborsFunction["Nearest", 
           NearestFunction[
            Hold[
             Nearest[CompressedData["
1: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
               "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
         50, "ClassPriors" -> {0.5912305516265912, 0.4087694483734088}, 
         "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UPAgUC0TI+MoGmg0CsmHAKZfEP4=
          "], "DistributionSmoothing" -> 0.5, "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|
             "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
              "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "NearestNeighbors", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NeighborsNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
           "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
           "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NearestNeighbors", 
              "Options" -> <|
               "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                "NearestMethod" -> <|"Value" -> Automatic|>|>, "NaiveImputer" -> 
              Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
              Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
           TypeSystem`Assoc[
            
            TypeSystem`Struct[{
             "Value", "Options", "NaiveImputer", "EMIterations"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 
            TypeSystem`Assoc[
            TypeSystem`UnknownType, TypeSystem`UnknownType, 
             TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
         Dataset[<|
           "Configuration" -> {
             "NearestNeighbors", "NeighborsNumber" -> Automatic, 
              "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
            "ModelUtility" -> Missing[]|>, 
           TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
         "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"1st"}, "ID" -> 
              7168142382301173801|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {29.}, "ID" -> 
              1978735388468315165|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"female"}, "ID" -> 
              9071588231046195481|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 0.089933, 
         "MaxTrainingMemory" -> 2574648, "DataMemory" -> 171752, 
         "FunctionMemory" -> 184112, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 8, 12, 23, 39, 40.509143`8.360128033719082}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
         "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"NearestNeighbors[2,0.9]\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["ClassifierFunction",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{{
                  PointSize[0.13], 
                  GrayLevel[0.45], 
                  
                  PointBox[{{0.9821769431797024, -0.440194219686987}, {
                   1.1339776261519132`, 0.8056918676854272}, {
                   0.5279892326667741, 0.6574306661126254}, {
                   0.022147046479890797`, 1.4937877187998898`}}], 
                  GrayLevel[0.7], 
                  
                  PointBox[{{-0.9815166384819979, 
                   0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                  GrayLevel[0.55], 
                  AbsoluteThickness[1.5], 
                  LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                Axes -> {False, False}, AxesLabel -> {None, None}, 
                 AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                   AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                 Frame -> {{True, True}, {True, True}}, 
                 FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                 Directive[
                   Thickness[Tiny], 
                   GrayLevel[0.7]], 
                 FrameTicks -> {{None, None}, {None, None}}, 
                 GridLines -> {None, None}, 
                 LabelStyle -> {FontFamily -> "Arial"}, 
                 Method -> {"ScalingFunctions" -> None}, 
                 PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                 True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                 Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                GrayLevel[0.94]], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["705", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     ClassifierFunction[<|
      "ExampleNumber" -> 705, "ClassNumber" -> 2, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 3|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f2(f1f3))" -> <|
               "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 705, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 
                    2|>|>, "Version" -> {14.1, 0}, "ID" -> 
                    5012684870820858898|>]}, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> True, "Missing" -> "Allowed"|>], 
                    
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {30.269030780141847`}, 
                    "StandardDeviation" -> {14.367992330097241`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.9903457211653298, 
                    0.053068692157346026`, -0.1280588399222474}, {
                    0.13640541318862787`, 
                    0.5375378348617034, -0.8321337869267367}, \
{-0.024676219774564717`, 0.8415680542920464, 0.5395871516008666}}, 
                    "Precisions" -> {0.9828953515755177, 12.2259662466952, 
                    15.6191990017968}, "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00025125389626323887`, 0.06348513232089585, 
                    0.05809037587570535}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 3631133675148427688|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002512538962633074, 0.06348513232089584, 
                    0.0580903758757053}, 
                    "StandardDeviation" -> {0.9995663297795419, 
                    0.2947832221998383, 0.27782946024746297`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002512538962633074, 0.06348513232089584, 
                    0.0580903758757053}, 
                    "StandardDeviation" -> {0.9995663297795419, 
                    0.2947832221998383, 0.27782946024746297`}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 3, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {21.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.044111, "MaxTrainingMemory" -> 311496,
                     "DataMemory" -> 78752, "FunctionMemory" -> 63480, 
                    "LanguageVersion" -> {14.1, 0}, "Date" -> 
                    DateObject[{
                    2024, 8, 12, 23, 39, 40.557138`8.360642278750117}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                    "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX",
                     "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-2.3831634428238244`, \
-2.3831634428238244`, -2.3249162802469523`, -2.1516400924097665`, \
-2.117709213005233, -2.08839795940814, -1.9813892294660287`, \
-1.7455471933031506`, -1.737488647113205, -1.693572034048292, \
-1.5702137214465801`}, "LeftBoundary" -> -2.3249162802469523`, "LeftScale" -> 
                    0.029123581288436062`, "LeftTailNorm" -> 0.2|>], 
                   "Entropy" -> Around[5.938211343981353, 0.2655986242603905],
                    "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0},
                 "ID" -> 616651398117295976|>], 
              MachineLearning`MLProcessor[
              "Threads", <|
               "Input" -> <|
                 "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Processors" -> {
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
                  MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
                "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
                "Missing" -> "Allowed"|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Mean" -> {30.269030780141847`}, 
                "StandardDeviation" -> {14.367992330097241`}, 
                "Output" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                  "female" -> 1, "male" -> 2|>}, 
                "Output" -> <|
                 "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>,
                 "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.7273886203765869, -1.041688323020935, \
-0.3814893066883087}, {0.39698874950408936`, 
                   1.2774958610534668`, -0.9317017197608948}, {
                   0.5576431155204773, -0.062414247542619705`, \
-0.7499105334281921}}], 
                  RawArray["Real32",{{0., 0.}, {0.23993441462516785`, 
                   1.1908897161483765`}, {-0.02056935243308544, \
-0.07570835202932358}}]}, "Version" -> {14.1, 0}, "ID" -> 
                5988483279055413579|>], 
              MachineLearning`MLProcessor[
              "MergeVectors", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                  "(f1f3)" -> <|
                   "Weight" -> 2, "Type" -> "NumericalVector"|>|>, "Spans" -> {
                  Span[1, 1], 
                  Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
                "Output" -> <|
                 "(f2(f1f3))" -> <|
                   "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                    "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
                7619735631186802745|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
                0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {2}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "died" -> 0.5997171145685998, "survived" -> 0.4002828854314003|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "NeighborsFunction" -> 
         MachineLearning`PackageScope`NeighborsFunction["Nearest", 
           NearestFunction[
            Hold[
             Nearest[CompressedData["
1:eJwkXHc8l98XR5SkzEQikqgoSTYPLZpGKDOpZGWkQglJvi0iWVEkWSEjFNVj
JhVJhEhmdvbI/D3v5/cP/5zXeb3vue/zPueee5+PqJWT/lkmBgaGIurPUur/
24I4hjE3krih0r9L06aRcI7eUPDEeZxQNDtzxKt6kPyherqYhTOUPLtitiLs
VDbZ/EjisfimPuJ+1iqbkv3dZGtLq2VhyjDp1HC329CugfzVlCmwhbK/dmVJ
RCRl/549i7X8OEPhRHJq/q6GNuJw1Y303+MvyVgbqV37FrvJyAVDt1GOUPKT
0dqrqZQ9b4XKj/ycZOKIsCe/AmUv8kxm7BNlL3StxG4/ZX+szS5OlPLPlCO0
Ip2yl22zv58j0Uy6bQ35Bv//HRxKgH0Lb8jHPZQ9f+urlJ25VcSuZjPP9pVj
hH9dukbzzGdS85Vaqxxln+LmMPuKso8KCA0Dno5UzYFllP/dTdreQZR/Hu/J
rnizKJKX9+gG+L+ZuYG7nbLXyHDngf2a0qc9Oyj/x6P8n8G/7qtKwTSPZGLV
pQdCe6l4Nn68/ymGimevh98GbyqeqQfYJVZS/gWM9vREUf7F123c/jGgk5w0
JbLkKf/xj7hSPlD+dVd9WoT/d4M6AgRl/8drfHsyZa/vn6JVwtBIDKbr3N1P
+V9bZfEA/j9KX7yA/TKwyj99gLLnWtbpEUHZD/DuuXL68heyqr+MRZHyz/R6
y5ZUyv8+46+Ouyn/D/sfxGzAeluDNUIp+xH9/1otTjeRpusOVCI+2nYOjcWU
fc5pXVU6/k9Hm2So9VqdlB5ro9a7kdfw7pr9raRVo44z/H91+/4qn7If+zL+
DviVDpaZbKTsmWaTcmCv3CX5RjKnk8xdya22j8KvkCDtA/zXVjNyIz5/8nn+
06fwnFhhkppA4RGIG+pSeNdElpDDbnsoe++/iTqxlL3wC4sBrFfu6Oeb4pT/
VhbWQcRf8rPFLdmWX8TeIsZc4Pc8ktQBPHqD25+BD7fnL4hsp+ynV2z+BTxG
Zh+u3zxVRX68etEO+DPXnTqWTdnvYKp/Cft/Js18iM8NdZ1FxJPcFrCaKbST
XF7/wR580BoVyC6i7K0SlHcjPi/1k8Q1KXsDx+w1cZR9r4pOGnPcIEm08m0D
n88O+v4Gf+yZY6X2UvYHHFUJQ8reaEVnzzPKXtg+QKbtUCupq3vkEfjQyDcw
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
9z6O1P8sL23gkP7HT7mUyDn4G/8HYaxRyA==
               "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
         50, "ClassPriors" -> {0.5997171145685998, 0.4002828854314003}, 
         "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UPAgUC0jI9MoGgJoFOKAAJ2wEPg=
          "], "DistributionSmoothing" -> 0.5, "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|
             "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
              "NumericalVector"|>, "Key" -> "(f2(f1f3))", "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "NearestNeighbors", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NeighborsNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
           "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
           "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NearestNeighbors", 
              "Options" -> <|
               "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                "NearestMethod" -> <|"Value" -> Automatic|>|>, "NaiveImputer" -> 
              Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
              Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
           TypeSystem`Assoc[
            
            TypeSystem`Struct[{
             "Value", "Options", "NaiveImputer", "EMIterations"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3], 
              TypeSystem`UnknownType, TypeSystem`UnknownType}], 
            TypeSystem`Assoc[
            TypeSystem`UnknownType, TypeSystem`UnknownType, 
             TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
         Dataset[<|
           "Configuration" -> {
             "NearestNeighbors", "NeighborsNumber" -> Automatic, 
              "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
            "ModelUtility" -> Missing[]|>, 
           TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`UnknownType}], <||>], "InputDimension" -> 6, 
         "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"3rd"}, "ID" -> 
              7168142382301173801|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {21.}, "ID" -> 
              1978735388468315165|>, 
            "f3" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
              9071588231046195481|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 0.084384, 
         "MaxTrainingMemory" -> 2568960, "DataMemory" -> 171704, 
         "FunctionMemory" -> 184112, "LanguageVersion" -> {14.1, 0}, "Date" -> 
         DateObject[{2024, 8, 12, 23, 39, 40.59427`8.361039714216117}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
         "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932506617271287*^9, 3.932509180660118*^9},
 CellLabel->"Out[52]=",
 CellID->1087194606,ExpressionUUID->"8bbf5c18-9a5b-4fe9-992a-dfb1d5672aba"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classifier testing", "Subsection",
 CellChangeTimes->{{3.733922100732458*^9, 3.733922105423979*^9}},
 CellID->1120485662,ExpressionUUID->"64301a50-4cfe-4606-ba65-2a5b231af549"],

Cell["\<\
Classifier testing is done with the testing data in the context.\
\>", "Text",
 CellChangeTimes->{{3.7347324619678583`*^9, 3.734732480350336*^9}, 
   3.735331482751487*^9},
 CellID->718420691,ExpressionUUID->"991a8bc6-4e8d-4191-ae01-586bb17409c3"],

Cell[CellGroupData[{

Cell["\<\
Here is a pipeline that takes the Titanic data, splits it, and trains a \
classifier:\
\>", "Text",
 CellChangeTimes->{{3.7348744141736813`*^9, 3.734874450544182*^9}},
 CellID->1343490203,ExpressionUUID->"f8e0e716-5e13-4c66-b7ee-233d33c8d86d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClConUnit", "[", "dsTitanic", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConSplitData", "[", "0.75", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConMakeClassifier", "[", "\"\<DecisionTree\>\"", "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7339554385219107`*^9, 3.733955541617352*^9}, {
   3.73395602651399*^9, 3.733956035409061*^9}, {3.733956070433701*^9, 
   3.7339560980614357`*^9}, 3.7347324890485764`*^9, {3.7348788590820847`*^9, 
   3.7348788654520493`*^9}, {3.7348790783702927`*^9, 3.7348790802122707`*^9}},
 
 CellLabel->"In[53]:=",
 CellID->1396777263,ExpressionUUID->"ce04c1d6-59d4-4f83-bc79-281fd88358b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Here is how we compute selected classifier measures:", "Text",
 CellChangeTimes->{{3.734874455830717*^9, 3.734874474700673*^9}, {
  3.734874551862418*^9, 3.7348745646426563`*^9}},
 CellID->1491713884,ExpressionUUID->"4ced0cd9-f4df-4523-9faf-80393a658c94"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  RowBox[{"ClConClassifierMeasurements", "[", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<Precision\>\"", ",", "\"\<Recall\>\"", ",", 
     "\"\<FalsePositiveRate\>\""}], "}"}], "]"}], "\[DoubleLongRightArrow]", 
  "\[IndentingNewLine]", "ClConTakeValue"}]], "Input",
 CellChangeTimes->{{3.7339554385219107`*^9, 3.733955539798665*^9}, {
   3.733955614443616*^9, 3.733955635567677*^9}, 3.734732497385923*^9, {
   3.734874478760599*^9, 3.734874495365323*^9}},
 CellLabel->"In[54]:=",
 CellID->1511153310,ExpressionUUID->"2f710a71-3eee-462b-a331-aec99b74640f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7392996108949417`"}], ",", 
   RowBox[{"\<\"FalsePositiveRate\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"died\"\>", "\[Rule]", "0.35`"}], ",", 
      RowBox[{"\<\"survived\"\>", "\[Rule]", "0.20382165605095542`"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"Precision\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"died\"\>", "\[Rule]", "0.78125`"}], ",", 
      RowBox[{"\<\"survived\"\>", "\[Rule]", "0.6701030927835051`"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"Recall\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"died\"\>", "\[Rule]", "0.7961783439490446`"}], ",", 
      RowBox[{"\<\"survived\"\>", "\[Rule]", "0.65`"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.9325066174234133`*^9, 3.9325066569771347`*^9, 
  3.93250918081078*^9},
 CellLabel->"Out[54]=",
 CellID->1688874366,ExpressionUUID->"f48407fe-77fa-4e37-b8aa-970757afa78b"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "(The measures are listed in the function page of ",
 ButtonBox["ClassifierMeasurements",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/ref/ClassifierMeasurements.\
html"], None},
  ButtonNote->
   "http://reference.wolfram.com/language/ref/ClassifierMeasurements.html"],
 ".)"
}], "Text",
 CellChangeTimes->{{3.735331524702828*^9, 3.735331539215993*^9}, {
  3.735331641827242*^9, 3.735331641830825*^9}},
 CellID->2024270529,ExpressionUUID->"0b4fbb57-f5eb-4d44-9421-2eed7c940988"],

Cell[CellGroupData[{

Cell["Here we show the confusion matrix plot:", "Text",
 CellChangeTimes->{{3.734874629961102*^9, 3.734874646803335*^9}},
 CellID->1478845129,ExpressionUUID->"100ddd8b-2852-44e8-966a-37b6b7c5458f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "\[DoubleLongRightArrow]", 
   RowBox[{
   "ClConClassifierMeasurements", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}], 
   "\[DoubleLongRightArrow]", "ClConEchoValue"}], ";"}]], "Input",
 CellChangeTimes->{{3.73473253157524*^9, 3.73473257367258*^9}, {
  3.735331652305729*^9, 3.735331671659731*^9}},
 CellLabel->"In[55]:=",
 CellID->2121836372,ExpressionUUID->"96e4340d-27b5-4c1f-8d25-5d3b0ac79d53"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{"\<\"ConfusionMatrixPlot\"\>", "\[Rule]", 
    GraphicsBox[
     RasterBox[{{{0.9042405399721598, 0.7512377559970239, 
      0.3853381904625417}, {0.8652787691250765, 0.5808530494581978, 
      0.050265866023244066`}}, {{1., 0.42, 0.}, {0.9238797487069947, 
      0.8308055289081155, 0.5672953966975867}}}, {{0, 0}, {2, 2}}, {0, 1}],
     Epilog->{{
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["125", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "125", "\" examples of \"", "\"died\"", 
                "\" correctly classified\""}, "RowDefault"]}, {
              TemplateBox[{"\"Precision = \"", "0.78125`"}, "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.7961783439490446`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"FScore = \"", "0.7886435331230284`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{125, " examples of ", "died", " correctly classified"}], 
            Row[{"Precision = ", 0.78125}], 
            Row[{"Recall = ", 0.7961783439490446}], 
            Row[{"FScore = ", 0.7886435331230284}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["35", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "35", "\" examples of \"", "\"survived\"", 
                "\" misclassified as \"", "\"died\""}, "RowDefault"]}, {
              
              TemplateBox[{"\"Column fraction = \"", "0.21875`"}, 
               "RowDefault"]}, {
              TemplateBox[{"\"Row fraction = \"", "0.35`"}, "RowDefault"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{35, " examples of ", "survived", " misclassified as ", 
              "died"}], 
            Row[{"Column fraction = ", 0.21875}], 
            Row[{"Row fraction = ", 0.35}]}], "Tooltip"]& ]}, {
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["32", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "32", "\" examples of \"", "\"died\"", 
                "\" misclassified as \"", "\"survived\""}, "RowDefault"]}, {
              
              TemplateBox[{"\"Column fraction = \"", "0.32989690721649484`"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Row fraction = \"", "0.20382165605095542`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            
            Row[{32, " examples of ", "died", " misclassified as ", 
              "survived"}], 
            Row[{"Column fraction = ", 0.32989690721649484`}], 
            Row[{"Row fraction = ", 0.20382165605095542`}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[1.], 
             InsetBox[
              FormBox["65", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "65", "\" examples of \"", "\"survived\"", 
                "\" correctly classified\""}, "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.6701030927835051`"}, 
               "RowDefault"]}, {
              TemplateBox[{"\"Recall = \"", "0.65`"}, "RowDefault"]}, {
              
              TemplateBox[{"\"FScore = \"", "0.6598984771573604`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{65, " examples of ", "survived", " correctly classified"}], 
            Row[{"Precision = ", 0.6701030927835051}], 
            Row[{"Recall = ", 0.65}], 
            Row[{"FScore = ", 0.6598984771573604}]}], "Tooltip"]& ]}, 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "157", "\" example\"", "\"s\"", "\" of class \"", "\"died\""}, 
              "RowDefault"]}, {
             
             TemplateBox[{"\"Recall = \"", "0.7961783439490446`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{157, " example", "s", " of class ", "died"}], 
           Row[{"Recall = ", 0.7961783439490446}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "100", "\" example\"", "\"s\"", "\" of class \"", 
               "\"survived\""}, "RowDefault"]}, {
             TemplateBox[{"\"Recall = \"", "0.65`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{100, " example", "s", " of class ", "survived"}], 
           Row[{"Recall = ", 0.65}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 
          10.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "160", "\" example\"", "\"s\"", "\" classified as \"", 
               "\"died\""}, "RowDefault"]}, {
             TemplateBox[{"\"Precision = \"", "0.78125`"}, "RowDefault"]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{160, " example", "s", " classified as ", "died"}], 
           Row[{"Precision = ", 0.78125}]}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[
         InsetBox[
          GraphicsBox[{
            Opacity[0.], 
            RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 
          10.}], 
         TagBox[
          GridBox[{{
             
             TemplateBox[{
              "97", "\" example\"", "\"s\"", "\" classified as \"", 
               "\"survived\""}, "RowDefault"]}, {
             
             TemplateBox[{"\"Precision = \"", "0.6701030927835051`"}, 
              "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           DefaultBaseStyle -> "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
         Column[{
           Row[{97, " example", "s", " classified as ", "survived"}], 
           Row[{"Precision = ", 0.6701030927835051}]}], "Tooltip"]& ]},
     Frame->True,
     FrameLabel->{
       FormBox["\"predicted class\"", TraditionalForm], 
       FormBox["\"actual class\"", TraditionalForm]},
     FrameTicks->{{{{1.5, 
          FormBox[
           RotationBox["\"died\"", BoxRotation -> 0.], TraditionalForm]}, {
         0.5, 
          FormBox[
           RotationBox["\"survived\"", BoxRotation -> 0.], 
           TraditionalForm]}}, {{1.5, 
          FormBox["157", TraditionalForm]}, {0.5, 
          FormBox["100", TraditionalForm]}}}, {{{0.5, 
          FormBox[
           RotationBox["160", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {1.5, 
          FormBox[
           RotationBox["97", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}}, {{0.5, 
          FormBox[
           RotationBox["\"died\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}, {1.5, 
          FormBox[
           RotationBox["\"survived\"", BoxRotation -> 1.5707963267948966`], 
           TraditionalForm]}}}},
     FrameTicksStyle->13,
     GridLinesStyle->Directive[
       GrayLevel[0.5, 0.4]],
     ImageSize->181.2,
     Method->{
      "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
       "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05]},
     PlotRangePadding->None]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.932509180876582*^9},
 CellID->1620106963,ExpressionUUID->"d112bdf5-5345-4433-bff9-5e6e60517818"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Here is how we plot ROC curves by specifying the ROC parameter range and the \
image size:\
\>", "Text",
 CellChangeTimes->{{3.73487457117892*^9, 3.734874622783533*^9}, {
  3.7348751091614*^9, 3.734875146412747*^9}, {3.735331683940371*^9, 
  3.735331687921341*^9}},
 CellID->374951667,ExpressionUUID->"4adfb95b-3690-49b0-830f-d7653d4fb4e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   RowBox[{"ClConROCPlot", "[", 
    RowBox[{"\"\<FPR\>\"", ",", "\"\<TPR\>\"", ",", 
     RowBox[{"\"\<ROCRange\>\"", "\[Rule]", 
      RowBox[{"Range", "[", 
       RowBox[{"0", ",", "1", ",", "0.1"}], "]"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7339554385219107`*^9, 3.733955606081182*^9}, {
  3.733955695251227*^9, 3.733955704925995*^9}, {3.7339561157853003`*^9, 
  3.733956129696623*^9}, {3.7339561624946547`*^9, 3.7339561724474983`*^9}, {
  3.734732500793468*^9, 3.734732511806188*^9}, {3.734875128979184*^9, 
  3.734875130978368*^9}, {3.734875961145784*^9, 3.7348759820901546`*^9}},
 CellLabel->"In[56]:=",
 CellID->1095646971,ExpressionUUID->"f8c95842-8103-4285-8314-700f530794cd"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"ROC plot(s):\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"died\"\>", "\[Rule]", 
     GraphicsBox[{
       {RGBColor[
         NCache[
          Rational[5, 9], 0.5555555555555556], 
         NCache[
          Rational[5, 9], 0.5555555555555556], 1], 
        LineBox[NCache[{{1, 1}, {1, 1}, {
           Rational[51, 100], Rational[154, 157]}, {
           Rational[19, 50], Rational[132, 157]}, {
           Rational[9, 25], Rational[128, 157]}, {
           Rational[7, 20], Rational[126, 157]}, {
           Rational[7, 20], Rational[125, 157]}, {
           Rational[33, 100], Rational[123, 157]}, {0, Rational[15, 157]}, {0,
            0}, {0, 0}}, {{1, 1}, {1, 1}, {0.51, 0.9808917197452229}, {0.38, 
           0.8407643312101911}, {0.36, 0.8152866242038217}, {0.35, 
           0.802547770700637}, {0.35, 0.7961783439490446}, {0.33, 
           0.7834394904458599}, {0, 0.09554140127388536}, {0, 0}, {0, 
           0}}]]}, 
       {RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 
         NCache[
          Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
        LineBox[NCache[{{1, 1}, {1, 1}, {
           Rational[51, 100], Rational[154, 157]}, {
           Rational[19, 50], Rational[132, 157]}, {
           Rational[9, 25], Rational[128, 157]}, {
           Rational[7, 20], Rational[126, 157]}, {
           Rational[7, 20], Rational[125, 157]}, {
           Rational[33, 100], Rational[123, 157]}, {0, Rational[15, 157]}, {0,
            0}, {0, 0}}, {{1, 1}, {1, 1}, {0.51, 0.9808917197452229}, {0.38, 
           0.8407643312101911}, {0.36, 0.8152866242038217}, {0.35, 
           0.802547770700637}, {0.35, 0.7961783439490446}, {0.33, 
           0.7834394904458599}, {0, 0.09554140127388536}, {0, 0}, {0, 0}}]], {
         
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.`"],
          Annotation[#, 0., "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.1`"],
          Annotation[#, 0.1, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[51, 100], Rational[154, 157]}, {0.51, 
             0.9808917197452229}]],
           "0.2`"],
          Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[19, 50], Rational[132, 157]}, {0.38, 
             0.8407643312101911}]],
           "0.30000000000000004`"],
          Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[9, 25], Rational[128, 157]}, {0.36, 
             0.8152866242038217}]],
           "0.4`"],
          Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[7, 20], Rational[126, 157]}, {0.35, 
             0.802547770700637}]],
           "0.5`"],
          Annotation[#, 0.5, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[7, 20], Rational[125, 157]}, {0.35, 
             0.7961783439490446}]],
           "0.6000000000000001`"],
          Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[33, 100], Rational[123, 157]}, {0.33, 
             0.7834394904458599}]],
           "0.7000000000000001`"],
          Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{0, Rational[15, 157]}, {0, 0.09554140127388536}]],
           
           "0.8`"],
          Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9`"],
          Annotation[#, 0.9, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "1.`"],
          Annotation[#, 1., "Tooltip"]& ]}, 
        {GrayLevel[0], 
         InsetBox["0.`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.1`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.2`", 
          NCache[{Rational[51, 100], Rational[154, 157]}, {0.51, 
           0.9808917197452229}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.30000000000000004`", 
          NCache[{Rational[19, 50], Rational[132, 157]}, {0.38, 
           0.8407643312101911}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.4`", 
          NCache[{Rational[9, 25], Rational[128, 157]}, {0.36, 
           0.8152866242038217}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.5`", 
          NCache[{Rational[7, 20], Rational[126, 157]}, {0.35, 
           0.802547770700637}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.6000000000000001`", 
          NCache[{Rational[7, 20], Rational[125, 157]}, {0.35, 
           0.7961783439490446}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.7000000000000001`", 
          NCache[{Rational[33, 100], Rational[123, 157]}, {0.33, 
           0.7834394904458599}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.8`", 
          NCache[{0, Rational[15, 157]}, {0, 0.09554140127388536}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.9`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["1.`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]]}}},
      AspectRatio->1,
      Frame->True,
      FrameLabel->{
        FormBox[
         StyleBox[
         "\"FPR, false positive rate\"", Larger, Bold, StripOnInput -> False],
          TraditionalForm], 
        FormBox[
         StyleBox[
         "\"TPR, true positive rate\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm]},
      GridLines->Automatic,
      ImageSize->200]}], ",", 
    RowBox[{"\<\"survived\"\>", "\[Rule]", 
     GraphicsBox[{
       {RGBColor[
         NCache[
          Rational[5, 9], 0.5555555555555556], 
         NCache[
          Rational[5, 9], 0.5555555555555556], 1], 
        LineBox[NCache[{{1, 1}, {1, 1}, {Rational[142, 157], 1}, {
           Rational[34, 157], Rational[67, 100]}, {
           Rational[32, 157], Rational[13, 20]}, {
           Rational[32, 157], Rational[13, 20]}, {
           Rational[29, 157], Rational[16, 25]}, {
           Rational[25, 157], Rational[31, 50]}, {
           Rational[3, 157], Rational[49, 100]}, {0, 0}, {0, 0}}, {{1, 1}, {1,
            1}, {0.9044585987261147, 1}, {0.21656050955414013`, 0.67}, {
           0.20382165605095542`, 0.65}, {0.20382165605095542`, 0.65}, {
           0.18471337579617833`, 0.64}, {0.1592356687898089, 0.62}, {
           0.01910828025477707, 0.49}, {0, 0}, {0, 0}}]]}, 
       {RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 
         NCache[
          Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
        LineBox[NCache[{{1, 1}, {1, 1}, {Rational[142, 157], 1}, {
           Rational[34, 157], Rational[67, 100]}, {
           Rational[32, 157], Rational[13, 20]}, {
           Rational[32, 157], Rational[13, 20]}, {
           Rational[29, 157], Rational[16, 25]}, {
           Rational[25, 157], Rational[31, 50]}, {
           Rational[3, 157], Rational[49, 100]}, {0, 0}, {0, 0}}, {{1, 1}, {1,
            1}, {0.9044585987261147, 1}, {0.21656050955414013`, 0.67}, {
           0.20382165605095542`, 0.65}, {0.20382165605095542`, 0.65}, {
           0.18471337579617833`, 0.64}, {0.1592356687898089, 0.62}, {
           0.01910828025477707, 0.49}, {0, 0}, {0, 0}}]], {
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.`"],
          Annotation[#, 0., "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.1`"],
          Annotation[#, 0.1, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[142, 157], 1}, {0.9044585987261147, 1}]],
           
           "0.2`"],
          Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[34, 157], Rational[67, 100]}, {
             0.21656050955414013`, 0.67}]],
           "0.30000000000000004`"],
          Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[32, 157], Rational[13, 20]}, {
             0.20382165605095542`, 0.65}]],
           "0.4`"],
          Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[32, 157], Rational[13, 20]}, {
             0.20382165605095542`, 0.65}]],
           "0.5`"],
          Annotation[#, 0.5, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[29, 157], Rational[16, 25]}, {
             0.18471337579617833`, 0.64}]],
           "0.6000000000000001`"],
          Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[25, 157], Rational[31, 50]}, {0.1592356687898089,
              0.62}]],
           "0.7000000000000001`"],
          Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[3, 157], Rational[49, 100]}, {
             0.01910828025477707, 0.49}]],
           "0.8`"],
          Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9`"],
          Annotation[#, 0.9, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "1.`"],
          Annotation[#, 1., "Tooltip"]& ]}, 
        {GrayLevel[0], 
         InsetBox["0.`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.1`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.2`", 
          NCache[{Rational[142, 157], 1}, {0.9044585987261147, 1}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.30000000000000004`", 
          NCache[{Rational[34, 157], Rational[67, 100]}, {
           0.21656050955414013`, 0.67}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.4`", 
          NCache[{Rational[32, 157], Rational[13, 20]}, {0.20382165605095542`,
            0.65}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.5`", 
          NCache[{Rational[32, 157], Rational[13, 20]}, {0.20382165605095542`,
            0.65}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.6000000000000001`", 
          NCache[{Rational[29, 157], Rational[16, 25]}, {0.18471337579617833`,
            0.64}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.7000000000000001`", 
          NCache[{Rational[25, 157], Rational[31, 50]}, {0.1592356687898089, 
           0.62}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.8`", 
          NCache[{Rational[3, 157], Rational[49, 100]}, {0.01910828025477707, 
           0.49}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.9`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["1.`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]]}}},
      AspectRatio->1,
      Frame->True,
      FrameLabel->{
        FormBox[
         StyleBox[
         "\"FPR, false positive rate\"", Larger, Bold, StripOnInput -> False],
          TraditionalForm], 
        FormBox[
         StyleBox[
         "\"TPR, true positive rate\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm]},
      GridLines->Automatic,
      ImageSize->200]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.932509180921574*^9},
 CellID->1192566828,ExpressionUUID->"2c139ed6-c01f-40e5-b130-9b91a1f06056"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " ClCon uses the package ",
 ButtonBox["ROCFunctions.m",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ROCFunctions.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ROCFunctions.m"],
 ", [",
 ButtonBox["AAp5",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ROCFunctions.m"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
ROCFunctions.m"],
 "], which implements all functions defined in [",
 ButtonBox["Wk2",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Receiver_operating_characteristic"], 
    None},
  ButtonNote->
   "https://en.wikipedia.org/wiki/Receiver_operating_characteristic"],
 "]. "
}], "Text",
 CellChangeTimes->{{3.735169286183898*^9, 3.735169290399434*^9}},
 CellID->324484366,ExpressionUUID->"60008e0b-5f4f-4709-8146-1f2867fbe0f4"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here we plot ROC functions values (",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "7e5fb8b9-b806-4dcd-8cd2-80974ccf6f09"],
 "-axis) over the ROC parameter (",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "8b403ae1-6f3f-4221-9d99-33713e00df46"],
 "-axis):"
}], "Text",
 CellChangeTimes->{{3.734874651505027*^9, 3.7348747369730797`*^9}},
 CellID->1147759629,ExpressionUUID->"cceae96c-da92-4d18-80a0-a39b208f79d4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "\[DoubleLongRightArrow]", 
   RowBox[{"ClConROCListLinePlot", "[", 
    RowBox[{"{", 
     RowBox[{
     "\"\<ACC\>\"", ",", "\"\<TPR\>\"", ",", "\"\<FPR\>\"", ",", 
      "\"\<SPC\>\""}], "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.734874740008109*^9, 3.734874806071457*^9}, {
  3.734875855651429*^9, 3.734875863390059*^9}, {3.734875986178069*^9, 
  3.734875986364861*^9}},
 CellLabel->"In[57]:=",
 CellID->1697967249,ExpressionUUID->"bf6bc578-a366-4b2a-b7f7-ee3b00e2c9e4"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"ROC line plot(s):\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"died\"\>", "\[Rule]", 
     TemplateBox[{
       GraphicsBox[{{}, 
         InterpretationBox[{
           TagBox[{{}, {}, 
             TagBox[{
               RGBColor[0.368417, 0.506779, 0.709798], 
               PointSize[
                NCache[
                 Rational[1, 72], 0.013888888888888888`]], 
               AbsoluteThickness[2], 
               LineBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQDQMlPcVA+Nh+1kwwsF+1fcP7b90w/kr71RlKkVVA
vokxCGy2v6Jx4sTfLpj8TvvuxoV2jUA+xLQD9i5/1u5i6YKpP2z/vbflfKLq
c/v0NBA4Zi93OzTqnMpzqP6T9jptqdobHV/anz0DBvZljpw+AkA+xLwL9gFq
60ryHV5C1V+0Pzc7eOk5+5dQ8y/b9yyXSVik8AKq/4r9AVPjgxxAPsS+a/bH
Tr/VzJd/ATXvhv32696zrsq9gJp3035Jmor+1HvPoebdtu9b+tT5793nUPPu
2K+22tI8eS/M/ffsZ/zhKvqz5znUvAf2BzWfpKfugal/YM/mI/ji32yY/x7a
X/Xx2p4xG6b/kf2aPz97L82C2ffYXvasfI7NLJh5T+wv6e8OXDYTZt4T+5pp
p+0EZsLMe2p/syjAuGoGzLxn9nvNPPWfTIeZ99yeKWSrkd90mHkv7EtmWvl0
/3wKNe+FvZvj2y+BvXeg5r2015jyrH5Ozx2oea/s762UXbvp0g2oea/tdcNu
fBIB8iHmvbHPtkt3KL94A2reG/uEsyen3rxwA2reW/tnuf8/WQP5EPPe2T/t
Yo+Ydx5m3nv7wP6HRxjOw8z7YG/yrMcy+dwNewDEszxv
                "]]}, Annotation[#, "Charting`Private`Tag#1"]& ], 
             TagBox[{
               RGBColor[0.880722, 0.611041, 0.142051], 
               PointSize[
                NCache[
                 Rational[1, 72], 0.013888888888888888`]], 
               AbsoluteThickness[2], 
               LineBox[CompressedData["
1:eJxd0D1IQlEYxvGjk1MQhIPgkA3RXHNvk4tNjm0l2SRFEImjNDkLYlsUgSBR
tCQtQRQECYViRZGfdb2aXVc3uz7HJ7wvXA4/7jn/A2d2Yzu86VZKLfx99jo5
fTnMjkYmnaOXFu25dPwv0FhvHPtvpez1nZ9kLNmK2nNP4/yDLAfmPfsRS4qP
o6HReaKx/5lGvyRr/mA2ZXT0+TKN+yo0eq80em/iDiUGJW9H995p9D6ksp7O
xc9M3fuk0avR2F+TldiRK5Qwdb9O43yDxn1NGr0WjV5LZg6uL6zpce+LRu+b
Rs+QSHVuN7lj6F5bXvJTx6t3Td1rS/i0UYjuXemeSaM3fiel0OvSmB8avX+j
16PR+3X0LEevTw8BqR76iQ==
                "]]}, Annotation[#, "Charting`Private`Tag#2"]& ], 
             TagBox[{
               RGBColor[0.560181, 0.691569, 0.194885], 
               PointSize[
                NCache[
                 Rational[1, 72], 0.013888888888888888`]], 
               AbsoluteThickness[2], 
               LineBox[CompressedData["
1:eJxdkbsOAUEUhjdKtXpFqaaVU6p5BAlKar2HoFVpNBo6iUQiISHuIeJ+v+wj
sP7xi/Mnk5Nv9pxvJrOBRCae9FiWFXwvt/7HkWLhE/nnMjkcclNV3+tk1Ibq
b4qvEl3nfAdJp9y0yJhvS7xm56+xlXQ7n5Dh6ZHR3yfDPzA8NfNDMs4bk+Gb
kuGbiXdSyka8E+Obk+FbSMp44FuS4VuR0f9j+NdqfkPGeVvl2ynfTvzv29bs
kfHtyfAdyPAd+W6oJ74zfCf5/nHsn8nwXcjwXcnIjQzfTfnuyvdQvqfyOeQX
HpXvSQ==
                "]]}, Annotation[#, "Charting`Private`Tag#3"]& ], 
             TagBox[{
               RGBColor[0.922526, 0.385626, 0.209179], 
               PointSize[
                NCache[
                 Rational[1, 72], 0.013888888888888888`]], 
               AbsoluteThickness[2], 
               LineBox[CompressedData["
1:eJxdzjsPwWAUxvHGaPYFbMys8o52s0mCUa18CDOryWIx2YREIiEhFZcQ19b9
ttip5/WIc5Lm5N/2/bX+RCaW9BiGEXxf7pZTKn5G/XeFHQ65UxPP6+pfaYj3
W2pcNiPesaXSKXfabJzvqHih+QzEl6rX/QwbSp+N9wds+Jb2tvr8kI3vjdjw
Jmx4U5X3VaPrnK29GRveXG9bews2vBUb+9fw1+L8ho3vbYVnC89W2ffflk1H
ew4b3o4Nb6+dAzfOHbX3vf/g/W/DO7HhndnYFza8i/CuwrsJ7y68334BEQ4L
zA==
                "]]}, Annotation[#, "Charting`Private`Tag#4"]& ]}, {
            "WolframDynamicHighlight", <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
           StyleBox[
            DynamicBox[
             (Charting`HighlightActionBox["DynamicHighlight", {}, 
              Slot["HighlightElements"], 
              Slot["LayoutOptions"], 
              Slot["Meta"], 
              Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
                 Annotation[{
                   Hue[0.67, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQDQMlPcVA+Nh+1kwwsF+1fcP7b90w/kr71RlKkVVA
vokxCGy2v6Jx4sTfLpj8TvvuxoV2jUA+xLQD9i5/1u5i6YKpP2z/vbflfKLq
c/v0NBA4Zi93OzTqnMpzqP6T9jptqdobHV/anz0DBvZljpw+AkA+xLwL9gFq
60ryHV5C1V+0Pzc7eOk5+5dQ8y/b9yyXSVik8AKq/4r9AVPjgxxAPsS+a/bH
Tr/VzJd/ATXvhv32696zrsq9gJp3035Jmor+1HvPoebdtu9b+tT5793nUPPu
2K+22tI8eS/M/ffsZ/zhKvqz5znUvAf2BzWfpKfugal/YM/mI/ji32yY/x7a
X/Xx2p4xG6b/kf2aPz97L82C2ffYXvasfI7NLJh5T+wv6e8OXDYTZt4T+5pp
p+0EZsLMe2p/syjAuGoGzLxn9nvNPPWfTIeZ99yeKWSrkd90mHkv7EtmWvl0
/3wKNe+FvZvj2y+BvXeg5r2015jyrH5Ozx2oea/s762UXbvp0g2oea/tdcNu
fBIB8iHmvbHPtkt3KL94A2reG/uEsyen3rxwA2reW/tnuf8/WQP5EPPe2T/t
Yo+Ydx5m3nv7wP6HRxjOw8z7YG/yrMcy+dwNewDEszxv
                    "]]}, "Charting`Private`Tag#1"], 
                 Annotation[{
                   Hue[0.9060679774997897, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxd0D1IQlEYxvGjk1MQhIPgkA3RXHNvk4tNjm0l2SRFEImjNDkLYlsUgSBR
tCQtQRQECYViRZGfdb2aXVc3uz7HJ7wvXA4/7jn/A2d2Yzu86VZKLfx99jo5
fTnMjkYmnaOXFu25dPwv0FhvHPtvpez1nZ9kLNmK2nNP4/yDLAfmPfsRS4qP
o6HReaKx/5lGvyRr/mA2ZXT0+TKN+yo0eq80em/iDiUGJW9H995p9D6ksp7O
xc9M3fuk0avR2F+TldiRK5Qwdb9O43yDxn1NGr0WjV5LZg6uL6zpce+LRu+b
Rs+QSHVuN7lj6F5bXvJTx6t3Td1rS/i0UYjuXemeSaM3fiel0OvSmB8avX+j
16PR+3X0LEevTw8BqR76iQ==
                    "]]}, "Charting`Private`Tag#2"], 
                 Annotation[{
                   Hue[0.1421359549995791, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxdkbsOAUEUhjdKtXpFqaaVU6p5BAlKar2HoFVpNBo6iUQiISHuIeJ+v+wj
sP7xi/Mnk5Nv9pxvJrOBRCae9FiWFXwvt/7HkWLhE/nnMjkcclNV3+tk1Ibq
b4qvEl3nfAdJp9y0yJhvS7xm56+xlXQ7n5Dh6ZHR3yfDPzA8NfNDMs4bk+Gb
kuGbiXdSyka8E+Obk+FbSMp44FuS4VuR0f9j+NdqfkPGeVvl2ynfTvzv29bs
kfHtyfAdyPAd+W6oJ74zfCf5/nHsn8nwXcjwXcnIjQzfTfnuyvdQvqfyOeQX
HpXvSQ==
                    "]]}, "Charting`Private`Tag#3"], 
                 Annotation[{
                   Hue[0.37820393249936934`, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxdzjsPwWAUxvHGaPYFbMys8o52s0mCUa18CDOryWIx2YREIiEhFZcQ19b9
ttip5/WIc5Lm5N/2/bX+RCaW9BiGEXxf7pZTKn5G/XeFHQ65UxPP6+pfaYj3
W2pcNiPesaXSKXfabJzvqHih+QzEl6rX/QwbSp+N9wds+Jb2tvr8kI3vjdjw
Jmx4U5X3VaPrnK29GRveXG9bews2vBUb+9fw1+L8ho3vbYVnC89W2ffflk1H
ew4b3o4Nb6+dAzfOHbX3vf/g/W/DO7HhndnYFza8i/CuwrsJ7y68334BEQ4L
zA==
                    "]]}, "Charting`Private`Tag#4"]}}, <|
               "HighlightElements" -> <|
                 "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
                "LayoutOptions" -> <|
                 "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 1.}, {0, 1.}},
                   "Frame" -> {{True, True}, {True, True}}, 
                  "AxesOrigin" -> {0, 0}, 
                  "ImageSize" -> {180, 180/GoldenRatio}, 
                  "Axes" -> {False, False}, "LabelStyle" -> {}, "AspectRatio" -> 
                  GoldenRatio^(-1), "DefaultStyle" -> {
                    Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                  "HighlightLabelingFunctions" -> <|
                   "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                    "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                  False|>, 
                "Meta" -> <|
                 "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                  "Function" -> ListLinePlot, "GroupHighlight" -> 
                  False|>|>]]& )[<|
              "HighlightElements" -> <|
                "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
               "LayoutOptions" -> <|
                "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 1.}, {0, 1.}}, 
                 "Frame" -> {{True, True}, {True, True}}, 
                 "AxesOrigin" -> {0, 0}, 
                 "ImageSize" -> {180, 180/GoldenRatio}, 
                 "Axes" -> {False, False}, "LabelStyle" -> {}, "AspectRatio" -> 
                 GoldenRatio^(-1), "DefaultStyle" -> {
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                 "HighlightLabelingFunctions" -> <|
                  "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                   "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                 False|>, 
               "Meta" -> <|
                "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                 "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>], 
             ImageSizeCache -> {{
              4.503599627370496*^15, -4.503599627370496*^15}, {
              4.503599627370496*^15, -4.503599627370496*^15}}], Selectable -> 
            False]}, 
          Annotation[{{{}, {}, 
             Annotation[{
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQDQMlPcVA+Nh+1kwwsF+1fcP7b90w/kr71RlKkVVA
vokxCGy2v6Jx4sTfLpj8TvvuxoV2jUA+xLQD9i5/1u5i6YKpP2z/vbflfKLq
c/v0NBA4Zi93OzTqnMpzqP6T9jptqdobHV/anz0DBvZljpw+AkA+xLwL9gFq
60ryHV5C1V+0Pzc7eOk5+5dQ8y/b9yyXSVik8AKq/4r9AVPjgxxAPsS+a/bH
Tr/VzJd/ATXvhv32696zrsq9gJp3035Jmor+1HvPoebdtu9b+tT5793nUPPu
2K+22tI8eS/M/ffsZ/zhKvqz5znUvAf2BzWfpKfugal/YM/mI/ji32yY/x7a
X/Xx2p4xG6b/kf2aPz97L82C2ffYXvasfI7NLJh5T+wv6e8OXDYTZt4T+5pp
p+0EZsLMe2p/syjAuGoGzLxn9nvNPPWfTIeZ99yeKWSrkd90mHkv7EtmWvl0
/3wKNe+FvZvj2y+BvXeg5r2015jyrH5Ozx2oea/s762UXbvp0g2oea/tdcNu
fBIB8iHmvbHPtkt3KL94A2reG/uEsyen3rxwA2reW/tnuf8/WQP5EPPe2T/t
Yo+Ydx5m3nv7wP6HRxjOw8z7YG/yrMcy+dwNewDEszxv
                "]]}, "Charting`Private`Tag#1"], 
             Annotation[{
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxd0D1IQlEYxvGjk1MQhIPgkA3RXHNvk4tNjm0l2SRFEImjNDkLYlsUgSBR
tCQtQRQECYViRZGfdb2aXVc3uz7HJ7wvXA4/7jn/A2d2Yzu86VZKLfx99jo5
fTnMjkYmnaOXFu25dPwv0FhvHPtvpez1nZ9kLNmK2nNP4/yDLAfmPfsRS4qP
o6HReaKx/5lGvyRr/mA2ZXT0+TKN+yo0eq80em/iDiUGJW9H995p9D6ksp7O
xc9M3fuk0avR2F+TldiRK5Qwdb9O43yDxn1NGr0WjV5LZg6uL6zpce+LRu+b
Rs+QSHVuN7lj6F5bXvJTx6t3Td1rS/i0UYjuXemeSaM3fiel0OvSmB8avX+j
16PR+3X0LEevTw8BqR76iQ==
                "]]}, "Charting`Private`Tag#2"], 
             Annotation[{
               Hue[0.1421359549995791, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.560181, 0.691569, 0.194885], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxdkbsOAUEUhjdKtXpFqaaVU6p5BAlKar2HoFVpNBo6iUQiISHuIeJ+v+wj
sP7xi/Mnk5Nv9pxvJrOBRCae9FiWFXwvt/7HkWLhE/nnMjkcclNV3+tk1Ibq
b4qvEl3nfAdJp9y0yJhvS7xm56+xlXQ7n5Dh6ZHR3yfDPzA8NfNDMs4bk+Gb
kuGbiXdSyka8E+Obk+FbSMp44FuS4VuR0f9j+NdqfkPGeVvl2ynfTvzv29bs
kfHtyfAdyPAd+W6oJ74zfCf5/nHsn8nwXcjwXcnIjQzfTfnuyvdQvqfyOeQX
HpXvSQ==
                "]]}, "Charting`Private`Tag#3"], 
             Annotation[{
               Hue[0.37820393249936934`, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.922526, 0.385626, 0.209179], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxdzjsPwWAUxvHGaPYFbMys8o52s0mCUa18CDOryWIx2YREIiEhFZcQ19b9
ttip5/WIc5Lm5N/2/bX+RCaW9BiGEXxf7pZTKn5G/XeFHQ65UxPP6+pfaYj3
W2pcNiPesaXSKXfabJzvqHih+QzEl6rX/QwbSp+N9wds+Jb2tvr8kI3vjdjw
Jmx4U5X3VaPrnK29GRveXG9bews2vBUb+9fw1+L8ho3vbYVnC89W2ffflk1H
ew4b3o4Nb6+dAzfOHbX3vf/g/W/DO7HhndnYFza8i/CuwrsJ7y68334BEQ4L
zA==
                "]]}, "Charting`Private`Tag#4"]}}, <|
           "HighlightElements" -> <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
            "LayoutOptions" -> <|
             "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 1.}, {0, 1.}}, 
              "Frame" -> {{True, True}, {True, True}}, "AxesOrigin" -> {0, 0},
               "ImageSize" -> {180, 180/GoldenRatio}, 
              "Axes" -> {False, False}, "LabelStyle" -> {}, "AspectRatio" -> 
              GoldenRatio^(-1), "DefaultStyle" -> {
                Directive[
                 PointSize[
                  Rational[1, 72]], 
                 RGBColor[0.922526, 0.385626, 0.209179], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[1, 72]], 
                 RGBColor[0.560181, 0.691569, 0.194885], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[1, 72]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[1, 72]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2]]}, 
              "HighlightLabelingFunctions" -> <|
               "CoordinatesToolOptions" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), 
                "ScalingFunctions" -> {{Identity, Identity}, {
                  Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
              False|>, 
            "Meta" -> <|
             "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
              "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>, 
           "DynamicHighlight"]], {{}, {{}, {}}}}, AspectRatio -> 
        NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
        AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction -> 
        Identity, Frame -> {{True, True}, {True, True}}, 
        FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
        FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
        GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
          GrayLevel[0.4, 0.5], 
          AbsoluteThickness[1], 
          AbsoluteDashing[{1, 2}]], ImageSize -> Small, 
        Method -> {
         "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
          "DefaultGraphicsInteraction" -> {
           "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
            "Effects" -> {
             "Highlight" -> {"ratio" -> 2}, 
              "HighlightPoint" -> {"ratio" -> 2}, 
              "Droplines" -> {
               "freeformCursorMode" -> True, 
                "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
          "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
            Directive[
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.560181, 0.691569, 0.194885], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.922526, 0.385626, 0.209179], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.528488, 0.470624, 0.701351], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.772079, 0.431554, 0.102387], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.363898, 0.618501, 0.782349], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[1, 0.75, 0], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.647624, 0.37816, 0.614037], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.571589, 0.586483, 0.], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.915, 0.3325, 0.2125], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[
             0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
             AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
          "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
          "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> 
          Automatic, "OptimizePlotMarkers" -> True, 
          "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), "CopiedValueFunction" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& )}}, PlotRange -> {{0, 1.}, {0, 1.}}, 
        PlotRangeClipping -> True, PlotRangePadding -> {{
           Scaled[0.02], 
           Scaled[0.02]}, {
           Scaled[0.02], 
           Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}], 
       FormBox[
        FormBox[
         TemplateBox[{"\"ACC\"", "\"TPR\"", "\"FPR\"", "\"SPC\""}, 
          "LineLegend", DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #, 
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2, 
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #3, 
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #4}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], 
                    "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxDividers -> {
                  "Columns" -> {{None}}, "Rows" -> {{None}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0}}, "Rows" -> {{1}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.922526, 0.385626, 0.209179]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   TagBox[#, HoldForm], ",", 
                   TagBox[#2, HoldForm], ",", 
                   TagBox[#3, HoldForm], ",", 
                   TagBox[#4, HoldForm]}], "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
               ",", 
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True", ",", "True", ",", "True"}], 
                   "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Row\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}, {
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]}], ",", 
    RowBox[{"\<\"survived\"\>", "\[Rule]", 
     TemplateBox[{
       GraphicsBox[{{}, 
         InterpretationBox[{
           TagBox[{{}, {}, 
             TagBox[{
               RGBColor[0.368417, 0.506779, 0.709798], 
               PointSize[
                NCache[
                 Rational[1, 72], 0.013888888888888888`]], 
               AbsoluteThickness[2], 
               LineBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQDQOSzyWA8Ib9rJlgYL8oSV+z6hmMv9J+ZZlu8e2n
N+xNjEFgs71Aj9BRm6cw+Z32B7jvyc17csMeYtoB+61x/Q3/H8PUH7b/81b1
VQKQn54GAsfsVyktjD70CKb/pH3Wis8mK+fesT97BgzsX6YyfPg05w7UvAv2
7x3+p1WxPIOqv2hvlnEx697C51DzL9v/fevx3h3Ih+i/Yv9tq031xgXPofZd
s1cxXMMnDeRDzLthv/DCtJUt859DzbtpP5n1j/e7eTDzbttrOt7+Gj4PZt4d
+1VfjJcfnAsz75598kTWBO25MPMe2G/u8FeYOgem/oH9ZSP71HO7YeY/tG/r
kM4y3w3T/8h+ntX3uLxbMPse2796073i2k2YeU/sd6bNXHhd4gXUvCf2bl+v
p9oB+RDzntrLqW82XCr+AmreM3vxbC1WHiAfYt5ze9X769JaTV5CzXthv/P+
W72nxi+h5r2wv9ul+N8FyIeY99L+sYfn9SVGL6HmvbKXTNaovScKc99re781
sWe9RWHue2NvO1u4rqL6MdS8N/Yr63J2/ql6DDXvrf2BUy9/NQD5EPPe2Vdy
dTuxAvkQ897bXz7hP6Gz8jHUvA/29yaYP+EF8gHoszwI
                "]]}, Annotation[#, "Charting`Private`Tag#1"]& ], 
             TagBox[{
               RGBColor[0.880722, 0.611041, 0.142051], 
               PointSize[
                NCache[
                 Rational[1, 72], 0.013888888888888888`]], 
               AbsoluteThickness[2], 
               LineBox[CompressedData["
1:eJxdkj2PQUEUhidbqv0B3appZUr91ioJSrT8CDWtSqNR6YREIrHJCsFmBdf3
16LRu9d75pU7J7k5eeae95nJ3BtKZr9SH0qpsPt43V93XSm/Svu5Ro5GvGpY
75tk9JY13yFn0l51rXyP/N1/leX7kbmj9IGsH8Q/1PlYYFLNbSU/ImO/MRm5
qcxtxPdLhu+PjD4jwzcnw7e05peW37HyK10M1uNOwey3JsO30e5h3ROvmTMM
35YM344M314nSu3HZ2LBezIM35vNvRqG7yS+ofjOZPgu2vwx8L0Zvn8yfFcy
fDey/zsr9QS8wwvM
                "]]}, Annotation[#, "Charting`Private`Tag#2"]& ], 
             TagBox[{
               RGBColor[0.560181, 0.691569, 0.194885], 
               PointSize[
                NCache[
                 Rational[1, 72], 0.013888888888888888`]], 
               AbsoluteThickness[2], 
               LineBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQo+2M+aCQb2qPyVcL6JMQhsRpPfCedD6ANo6g/D
+elpIHAMTf9Je7PVhzWCP76xP3sGDOB8iLoL9kHLHu1MK70BVX/R3tJxh/Rv
uYtQ8y/bb3ovCBQ6DdV/Bc6H2HcNzoeYd8Oeybvq52WxU1DzbsL5EPNuw/kQ
8+7A+RDz7sH5EPMeoKl/YL+qYl2krNtJqPkP4XyI/kf2QMVSG5Ych9r3GM6H
mPfEfmbX81lXE49AzUPwIeY9hfMh5j2D8yHmPbcHB8/EyVDzXsD5EPMQfIh5
L+F8iHmvoP7pgpr3Gs6HmAeLFwYGiHkIPsS8t3A+xLx3cD7EvPdwPmq6YWAA
ALc1Abk=
                "]]}, Annotation[#, "Charting`Private`Tag#3"]& ], 
             TagBox[{
               RGBColor[0.922526, 0.385626, 0.209179], 
               PointSize[
                NCache[
                 Rational[1, 72], 0.013888888888888888`]], 
               AbsoluteThickness[2], 
               LineBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQ5mzQQDe1T+SjjfxBgENqPJ77RHNeUAmvrDcH56
GggcQ9N/0j5o2aOdaaU77M+eAQM4H6Lqgv31NXyLfY4+toeov2iffF+5qKng
uT3E/Mv2Ii27N74XfAnVfwXOh9h3Dc6HmHfD3iF3IaN31UuoeTfhfIh5t+F8
iHl34HyIeffgfIh5D9DUP7C/ljhlZcU6mPkP4XyI/kf2TN5VPy+LvYLa9xjO
h5j3xD5K1m1m1/NXUPMQfIh5T+F8iHnP4HyIec/t7ZTUOcqT30PNewHnQ8xD
8CHmvYTzIea9sr8iJrVhyfT3UPNew/kQ895A6Q9Q8xB8iHlv4XyIee/gfIh5
7+F8dBoAW5/5Aw==
                "]]}, Annotation[#, "Charting`Private`Tag#4"]& ]}, {
            "WolframDynamicHighlight", <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
           StyleBox[
            DynamicBox[
             (Charting`HighlightActionBox["DynamicHighlight", {}, 
              Slot["HighlightElements"], 
              Slot["LayoutOptions"], 
              Slot["Meta"], 
              Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
                 Annotation[{
                   Hue[0.67, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQDQOSzyWA8Ib9rJlgYL8oSV+z6hmMv9J+ZZlu8e2n
N+xNjEFgs71Aj9BRm6cw+Z32B7jvyc17csMeYtoB+61x/Q3/H8PUH7b/81b1
VQKQn54GAsfsVyktjD70CKb/pH3Wis8mK+fesT97BgzsX6YyfPg05w7UvAv2
7x3+p1WxPIOqv2hvlnEx697C51DzL9v/fevx3h3Ih+i/Yv9tq031xgXPofZd
s1cxXMMnDeRDzLthv/DCtJUt859DzbtpP5n1j/e7eTDzbttrOt7+Gj4PZt4d
+1VfjJcfnAsz75598kTWBO25MPMe2G/u8FeYOgem/oH9ZSP71HO7YeY/tG/r
kM4y3w3T/8h+ntX3uLxbMPse2796073i2k2YeU/sd6bNXHhd4gXUvCf2bl+v
p9oB+RDzntrLqW82XCr+AmreM3vxbC1WHiAfYt5ze9X769JaTV5CzXthv/P+
W72nxi+h5r2wv9ul+N8FyIeY99L+sYfn9SVGL6HmvbKXTNaovScKc99re781
sWe9RWHue2NvO1u4rqL6MdS8N/Yr63J2/ql6DDXvrf2BUy9/NQD5EPPe2Vdy
dTuxAvkQ897bXz7hP6Gz8jHUvA/29yaYP+EF8gHoszwI
                    "]]}, "Charting`Private`Tag#1"], 
                 Annotation[{
                   Hue[0.9060679774997897, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxdkj2PQUEUhidbqv0B3appZUr91ioJSrT8CDWtSqNR6YREIrHJCsFmBdf3
16LRu9d75pU7J7k5eeae95nJ3BtKZr9SH0qpsPt43V93XSm/Svu5Ro5GvGpY
75tk9JY13yFn0l51rXyP/N1/leX7kbmj9IGsH8Q/1PlYYFLNbSU/ImO/MRm5
qcxtxPdLhu+PjD4jwzcnw7e05peW37HyK10M1uNOwey3JsO30e5h3ROvmTMM
35YM344M314nSu3HZ2LBezIM35vNvRqG7yS+ofjOZPgu2vwx8L0Zvn8yfFcy
fDey/zsr9QS8wwvM
                    "]]}, "Charting`Private`Tag#2"], 
                 Annotation[{
                   Hue[0.1421359549995791, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQo+2M+aCQb2qPyVcL6JMQhsRpPfCedD6ANo6g/D
+elpIHAMTf9Je7PVhzWCP76xP3sGDOB8iLoL9kHLHu1MK70BVX/R3tJxh/Rv
uYtQ8y/bb3ovCBQ6DdV/Bc6H2HcNzoeYd8Oeybvq52WxU1DzbsL5EPNuw/kQ
8+7A+RDz7sH5EPMeoKl/YL+qYl2krNtJqPkP4XyI/kf2QMVSG5Ych9r3GM6H
mPfEfmbX81lXE49AzUPwIeY9hfMh5j2D8yHmPbcHB8/EyVDzXsD5EPMQfIh5
L+F8iHmvoP7pgpr3Gs6HmAeLFwYGiHkIPsS8t3A+xLx3cD7EvPdwPmq6YWAA
ALc1Abk=
                    "]]}, "Charting`Private`Tag#3"], 
                 Annotation[{
                   Hue[0.37820393249936934`, 0.6, 0.6], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], 
                   Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQ5mzQQDe1T+SjjfxBgENqPJ77RHNeUAmvrDcH56
GggcQ9N/0j5o2aOdaaU77M+eAQM4H6Lqgv31NXyLfY4+toeov2iffF+5qKng
uT3E/Mv2Ii27N74XfAnVfwXOh9h3Dc6HmHfD3iF3IaN31UuoeTfhfIh5t+F8
iHl34HyIeffgfIh5D9DUP7C/ljhlZcU6mPkP4XyI/kf2TN5VPy+LvYLa9xjO
h5j3xD5K1m1m1/NXUPMQfIh5T+F8iHnP4HyIec/t7ZTUOcqT30PNewHnQ8xD
8CHmvYTzIea9sr8iJrVhyfT3UPNew/kQ895A6Q9Q8xB8iHlv4XyIee/gfIh5
7+F8dBoAW5/5Aw==
                    "]]}, "Charting`Private`Tag#4"]}}, <|
               "HighlightElements" -> <|
                 "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
                "LayoutOptions" -> <|
                 "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 1.}, {0, 1.}},
                   "Frame" -> {{True, True}, {True, True}}, 
                  "AxesOrigin" -> {0, 0}, 
                  "ImageSize" -> {180, 180/GoldenRatio}, 
                  "Axes" -> {False, False}, "LabelStyle" -> {}, "AspectRatio" -> 
                  GoldenRatio^(-1), "DefaultStyle" -> {
                    Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                    Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                  "HighlightLabelingFunctions" -> <|
                   "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                    "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                  False|>, 
                "Meta" -> <|
                 "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                  "Function" -> ListLinePlot, "GroupHighlight" -> 
                  False|>|>]]& )[<|
              "HighlightElements" -> <|
                "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
               "LayoutOptions" -> <|
                "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 1.}, {0, 1.}}, 
                 "Frame" -> {{True, True}, {True, True}}, 
                 "AxesOrigin" -> {0, 0}, 
                 "ImageSize" -> {180, 180/GoldenRatio}, 
                 "Axes" -> {False, False}, "LabelStyle" -> {}, "AspectRatio" -> 
                 GoldenRatio^(-1), "DefaultStyle" -> {
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                 "HighlightLabelingFunctions" -> <|
                  "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                   "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                 False|>, 
               "Meta" -> <|
                "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                 "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>], 
             ImageSizeCache -> {{
              4.503599627370496*^15, -4.503599627370496*^15}, {
              4.503599627370496*^15, -4.503599627370496*^15}}], Selectable -> 
            False]}, 
          Annotation[{{{}, {}, 
             Annotation[{
               Hue[0.67, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQDQOSzyWA8Ib9rJlgYL8oSV+z6hmMv9J+ZZlu8e2n
N+xNjEFgs71Aj9BRm6cw+Z32B7jvyc17csMeYtoB+61x/Q3/H8PUH7b/81b1
VQKQn54GAsfsVyktjD70CKb/pH3Wis8mK+fesT97BgzsX6YyfPg05w7UvAv2
7x3+p1WxPIOqv2hvlnEx697C51DzL9v/fevx3h3Ih+i/Yv9tq031xgXPofZd
s1cxXMMnDeRDzLthv/DCtJUt859DzbtpP5n1j/e7eTDzbttrOt7+Gj4PZt4d
+1VfjJcfnAsz75598kTWBO25MPMe2G/u8FeYOgem/oH9ZSP71HO7YeY/tG/r
kM4y3w3T/8h+ntX3uLxbMPse2796073i2k2YeU/sd6bNXHhd4gXUvCf2bl+v
p9oB+RDzntrLqW82XCr+AmreM3vxbC1WHiAfYt5ze9X769JaTV5CzXthv/P+
W72nxi+h5r2wv9ul+N8FyIeY99L+sYfn9SVGL6HmvbKXTNaovScKc99re781
sWe9RWHue2NvO1u4rqL6MdS8N/Yr63J2/ql6DDXvrf2BUy9/NQD5EPPe2Vdy
dTuxAvkQ897bXz7hP6Gz8jHUvA/29yaYP+EF8gHoszwI
                "]]}, "Charting`Private`Tag#1"], 
             Annotation[{
               Hue[0.9060679774997897, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxdkj2PQUEUhidbqv0B3appZUr91ioJSrT8CDWtSqNR6YREIrHJCsFmBdf3
16LRu9d75pU7J7k5eeae95nJ3BtKZr9SH0qpsPt43V93XSm/Svu5Ro5GvGpY
75tk9JY13yFn0l51rXyP/N1/leX7kbmj9IGsH8Q/1PlYYFLNbSU/ImO/MRm5
qcxtxPdLhu+PjD4jwzcnw7e05peW37HyK10M1uNOwey3JsO30e5h3ROvmTMM
35YM344M314nSu3HZ2LBezIM35vNvRqG7yS+ofjOZPgu2vwx8L0Zvn8yfFcy
fDey/zsr9QS8wwvM
                "]]}, "Charting`Private`Tag#2"], 
             Annotation[{
               Hue[0.1421359549995791, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.560181, 0.691569, 0.194885], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQo+2M+aCQb2qPyVcL6JMQhsRpPfCedD6ANo6g/D
+elpIHAMTf9Je7PVhzWCP76xP3sGDOB8iLoL9kHLHu1MK70BVX/R3tJxh/Rv
uYtQ8y/bb3ovCBQ6DdV/Bc6H2HcNzoeYd8Oeybvq52WxU1DzbsL5EPNuw/kQ
8+7A+RDz7sH5EPMeoKl/YL+qYl2krNtJqPkP4XyI/kf2QMVSG5Ych9r3GM6H
mPfEfmbX81lXE49AzUPwIeY9hfMh5j2D8yHmPbcHB8/EyVDzXsD5EPMQfIh5
L+F8iHmvoP7pgpr3Gs6HmAeLFwYGiHkIPsS8t3A+xLx3cD7EvPdwPmq6YWAA
ALc1Abk=
                "]]}, "Charting`Private`Tag#3"], 
             Annotation[{
               Hue[0.37820393249936934`, 0.6, 0.6], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.922526, 0.385626, 0.209179], 
                AbsoluteThickness[2]], 
               Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQ5mzQQDe1T+SjjfxBgENqPJ77RHNeUAmvrDcH56
GggcQ9N/0j5o2aOdaaU77M+eAQM4H6Lqgv31NXyLfY4+toeov2iffF+5qKng
uT3E/Mv2Ii27N74XfAnVfwXOh9h3Dc6HmHfD3iF3IaN31UuoeTfhfIh5t+F8
iHl34HyIeffgfIh5D9DUP7C/ljhlZcU6mPkP4XyI/kf2TN5VPy+LvYLa9xjO
h5j3xD5K1m1m1/NXUPMQfIh5T+F8iHnP4HyIec/t7ZTUOcqT30PNewHnQ8xD
8CHmvYTzIea9sr8iJrVhyfT3UPNew/kQ895A6Q9Q8xB8iHlv4XyIee/gfIh5
7+F8dBoAW5/5Aw==
                "]]}, "Charting`Private`Tag#4"]}}, <|
           "HighlightElements" -> <|
             "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
            "LayoutOptions" -> <|
             "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 1.}, {0, 1.}}, 
              "Frame" -> {{True, True}, {True, True}}, "AxesOrigin" -> {0, 0},
               "ImageSize" -> {180, 180/GoldenRatio}, 
              "Axes" -> {False, False}, "LabelStyle" -> {}, "AspectRatio" -> 
              GoldenRatio^(-1), "DefaultStyle" -> {
                Directive[
                 PointSize[
                  Rational[1, 72]], 
                 RGBColor[0.922526, 0.385626, 0.209179], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[1, 72]], 
                 RGBColor[0.560181, 0.691569, 0.194885], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[1, 72]], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[2]], 
                Directive[
                 PointSize[
                  Rational[1, 72]], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[2]]}, 
              "HighlightLabelingFunctions" -> <|
               "CoordinatesToolOptions" -> ({
                  Identity[
                   Part[#, 1]], 
                  Identity[
                   Part[#, 2]]}& ), 
                "ScalingFunctions" -> {{Identity, Identity}, {
                  Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
              False|>, 
            "Meta" -> <|
             "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
              "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>, 
           "DynamicHighlight"]], {{}, {{}, {}}}}, AspectRatio -> 
        NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
        AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction -> 
        Identity, Frame -> {{True, True}, {True, True}}, 
        FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
        FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
        GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
          GrayLevel[0.4, 0.5], 
          AbsoluteThickness[1], 
          AbsoluteDashing[{1, 2}]], ImageSize -> Small, 
        Method -> {
         "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
          "DefaultGraphicsInteraction" -> {
           "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
            "Effects" -> {
             "Highlight" -> {"ratio" -> 2}, 
              "HighlightPoint" -> {"ratio" -> 2}, 
              "Droplines" -> {
               "freeformCursorMode" -> True, 
                "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
          "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
            Directive[
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.560181, 0.691569, 0.194885], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.922526, 0.385626, 0.209179], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.528488, 0.470624, 0.701351], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.772079, 0.431554, 0.102387], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.363898, 0.618501, 0.782349], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[1, 0.75, 0], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.647624, 0.37816, 0.614037], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.571589, 0.586483, 0.], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.915, 0.3325, 0.2125], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[
             0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
             AbsoluteThickness[2]], 
            Directive[
             RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
             AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
          "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
          "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> 
          Automatic, "OptimizePlotMarkers" -> True, 
          "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), "CopiedValueFunction" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& )}}, PlotRange -> {{0, 1.}, {0, 1.}}, 
        PlotRangeClipping -> True, PlotRangePadding -> {{
           Scaled[0.02], 
           Scaled[0.02]}, {
           Scaled[0.02], 
           Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}], 
       FormBox[
        FormBox[
         TemplateBox[{"\"ACC\"", "\"TPR\"", "\"FPR\"", "\"SPC\""}, 
          "LineLegend", DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #, 
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2, 
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #3, 
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #4}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}], 
                    "Grid"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                 False, GridBoxDividers -> {
                  "Columns" -> {{None}}, "Rows" -> {{None}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0}}, "Rows" -> {{1}}}], 
                "Grid"], Alignment -> Left, AppearanceElements -> None, 
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
             FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
             False], TraditionalForm]& ), 
          InterpretationFunction :> (RowBox[{"LineLegend", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                   ",", 
                   RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.922526, 0.385626, 0.209179]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
                 "}"}], ",", 
               RowBox[{"{", 
                 RowBox[{
                   TagBox[#, HoldForm], ",", 
                   TagBox[#2, HoldForm], ",", 
                   TagBox[#3, HoldForm], ",", 
                   TagBox[#4, HoldForm]}], "}"}], ",", 
               RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
               ",", 
               RowBox[{"Joined", "\[Rule]", 
                 RowBox[{"{", 
                   RowBox[{"True", ",", "True", ",", "True", ",", "True"}], 
                   "}"}]}], ",", 
               RowBox[{"LabelStyle", "\[Rule]", 
                 RowBox[{"{", "}"}]}], ",", 
               RowBox[{"LegendLayout", "\[Rule]", "\"Row\""}]}], "]"}]& ), 
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(GridBox[{{
          TagBox[
           ItemBox[
            PaneBox[
             TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline},
              BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
           "SkipImageSizeLevel"]}, {
          ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
        AutoDelete -> False, GridBoxItemSize -> Automatic, 
        BaselinePosition -> {1, 1}]& ),
      Editable->True,
      InterpretationFunction->(RowBox[{"Legended", "[", 
         RowBox[{#, ",", 
           RowBox[{"Placed", "[", 
             RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]}]}], 
   "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.9325091810503817`*^9},
 CellID->1005800745,ExpressionUUID->"2bd86878-f766-4324-a31f-b285bbcd2671"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Note of the \[OpenCurlyDoubleQuote]ClConROC*Plot\[CloseCurlyDoubleQuote] \
functions automatically echo the plots. The plots are also made to be the \
pipeline value. Using the option specification ",
 StyleBox["\[OpenCurlyDoubleQuote]Echo\[CloseCurlyDoubleQuote]\[Rule]False", 
  "Program"],
 " the automatic echoing of plots can be suppressed. With the option \
\[OpenCurlyDoubleQuote]ClassLabels\[CloseCurlyDoubleQuote] we can focus on \
specific class labels."
}], "Text",
 CellChangeTimes->{{3.734874825444764*^9, 3.734874990666691*^9}, {
  3.7348768808334827`*^9, 3.734876900243511*^9}, {3.734876933351007*^9, 
  3.734876956694057*^9}, {3.735331751192759*^9, 3.735331752542343*^9}, {
  3.735332091783298*^9, 3.735332130031022*^9}},
 CellID->586256169,ExpressionUUID->"250b4170-0774-4e1f-bc43-6f64451b96f8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   RowBox[{"ClConROCListLinePlot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<ACC\>\"", ",", "\"\<TPR\>\"", ",", "\"\<FPR\>\"", ",", 
       "\"\<SPC\>\""}], "}"}], ",", 
     RowBox[{"\"\<Echo\>\"", "\[Rule]", "False"}], ",", 
     RowBox[{"\"\<ClassLabels\>\"", "\[Rule]", "\"\<survived\>\""}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}], 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "ClConEchoValue"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.734874740008109*^9, 3.734874806071457*^9}, {
   3.734874994864894*^9, 3.734875033358848*^9}, {3.734875077824664*^9, 
   3.73487508335749*^9}, {3.7348759930965137`*^9, 3.734875993284112*^9}, {
   3.7348760959106627`*^9, 3.734876125382792*^9}, {3.734876532127262*^9, 
   3.734876539548098*^9}, {3.73487663971375*^9, 3.734876648472212*^9}, {
   3.7348771120978413`*^9, 3.734877135336182*^9}, 3.73533208914301*^9},
 CellLabel->"In[58]:=",
 CellID->552459947,ExpressionUUID->"c6fa68fd-3b6c-4ca5-bfb5-8344a5cf34e0"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{"\<\"survived\"\>", "\[Rule]", 
    TemplateBox[{
      GraphicsBox[{{}, 
        InterpretationBox[{
          TagBox[{{}, {}, 
            TagBox[{
              RGBColor[0.368417, 0.506779, 0.709798], 
              PointSize[
               NCache[
                Rational[1, 72], 0.013888888888888888`]], 
              AbsoluteThickness[2], 
              LineBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQDQOSzyWA8Ib9rJlgYL8oSV+z6hmMv9J+ZZlu8e2n
N+xNjEFgs71Aj9BRm6cw+Z32B7jvyc17csMeYtoB+61x/Q3/H8PUH7b/81b1
VQKQn54GAsfsVyktjD70CKb/pH3Wis8mK+fesT97BgzsX6YyfPg05w7UvAv2
7x3+p1WxPIOqv2hvlnEx697C51DzL9v/fevx3h3Ih+i/Yv9tq031xgXPofZd
s1cxXMMnDeRDzLthv/DCtJUt859DzbtpP5n1j/e7eTDzbttrOt7+Gj4PZt4d
+1VfjJcfnAsz75598kTWBO25MPMe2G/u8FeYOgem/oH9ZSP71HO7YeY/tG/r
kM4y3w3T/8h+ntX3uLxbMPse2796073i2k2YeU/sd6bNXHhd4gXUvCf2bl+v
p9oB+RDzntrLqW82XCr+AmreM3vxbC1WHiAfYt5ze9X769JaTV5CzXthv/P+
W72nxi+h5r2wv9ul+N8FyIeY99L+sYfn9SVGL6HmvbKXTNaovScKc99re781
sWe9RWHue2NvO1u4rqL6MdS8N/Yr63J2/ql6DDXvrf2BUy9/NQD5EPPe2Vdy
dTuxAvkQ897bXz7hP6Gz8jHUvA/29yaYP+EF8gHoszwI
               "]]}, Annotation[#, "Charting`Private`Tag#1"]& ], 
            TagBox[{
              RGBColor[0.880722, 0.611041, 0.142051], 
              PointSize[
               NCache[
                Rational[1, 72], 0.013888888888888888`]], 
              AbsoluteThickness[2], 
              LineBox[CompressedData["
1:eJxdkj2PQUEUhidbqv0B3appZUr91ioJSrT8CDWtSqNR6YREIrHJCsFmBdf3
16LRu9d75pU7J7k5eeae95nJ3BtKZr9SH0qpsPt43V93XSm/Svu5Ro5GvGpY
75tk9JY13yFn0l51rXyP/N1/leX7kbmj9IGsH8Q/1PlYYFLNbSU/ImO/MRm5
qcxtxPdLhu+PjD4jwzcnw7e05peW37HyK10M1uNOwey3JsO30e5h3ROvmTMM
35YM344M314nSu3HZ2LBezIM35vNvRqG7yS+ofjOZPgu2vwx8L0Zvn8yfFcy
fDey/zsr9QS8wwvM
               "]]}, Annotation[#, "Charting`Private`Tag#2"]& ], 
            TagBox[{
              RGBColor[0.560181, 0.691569, 0.194885], 
              PointSize[
               NCache[
                Rational[1, 72], 0.013888888888888888`]], 
              AbsoluteThickness[2], 
              LineBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQo+2M+aCQb2qPyVcL6JMQhsRpPfCedD6ANo6g/D
+elpIHAMTf9Je7PVhzWCP76xP3sGDOB8iLoL9kHLHu1MK70BVX/R3tJxh/Rv
uYtQ8y/bb3ovCBQ6DdV/Bc6H2HcNzoeYd8Oeybvq52WxU1DzbsL5EPNuw/kQ
8+7A+RDz7sH5EPMeoKl/YL+qYl2krNtJqPkP4XyI/kf2QMVSG5Ych9r3GM6H
mPfEfmbX81lXE49AzUPwIeY9hfMh5j2D8yHmPbcHB8/EyVDzXsD5EPMQfIh5
L+F8iHmvoP7pgpr3Gs6HmAeLFwYGiHkIPsS8t3A+xLx3cD7EvPdwPmq6YWAA
ALc1Abk=
               "]]}, Annotation[#, "Charting`Private`Tag#3"]& ], 
            TagBox[{
              RGBColor[0.922526, 0.385626, 0.209179], 
              PointSize[
               NCache[
                Rational[1, 72], 0.013888888888888888`]], 
              AbsoluteThickness[2], 
              LineBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQ5mzQQDe1T+SjjfxBgENqPJ77RHNeUAmvrDcH56
GggcQ9N/0j5o2aOdaaU77M+eAQM4H6Lqgv31NXyLfY4+toeov2iffF+5qKng
uT3E/Mv2Ii27N74XfAnVfwXOh9h3Dc6HmHfD3iF3IaN31UuoeTfhfIh5t+F8
iHl34HyIeffgfIh5D9DUP7C/ljhlZcU6mPkP4XyI/kf2TN5VPy+LvYLa9xjO
h5j3xD5K1m1m1/NXUPMQfIh5T+F8iHnP4HyIec/t7ZTUOcqT30PNewHnQ8xD
8CHmvYTzIea9sr8iJrVhyfT3UPNew/kQ895A6Q9Q8xB8iHlv4XyIee/gfIh5
7+F8dBoAW5/5Aw==
               "]]}, Annotation[#, "Charting`Private`Tag#4"]& ]}, {
           "WolframDynamicHighlight", <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
          StyleBox[
           DynamicBox[
            (Charting`HighlightActionBox["DynamicHighlight", {}, 
             Slot["HighlightElements"], 
             Slot["LayoutOptions"], 
             Slot["Meta"], 
             Charting`HighlightActionFunction["DynamicHighlight", {{{}, {}, 
                Annotation[{
                  Hue[0.67, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    Rational[1, 72]], 
                   RGBColor[0.368417, 0.506779, 0.709798], 
                   AbsoluteThickness[2]], 
                  Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQDQOSzyWA8Ib9rJlgYL8oSV+z6hmMv9J+ZZlu8e2n
N+xNjEFgs71Aj9BRm6cw+Z32B7jvyc17csMeYtoB+61x/Q3/H8PUH7b/81b1
VQKQn54GAsfsVyktjD70CKb/pH3Wis8mK+fesT97BgzsX6YyfPg05w7UvAv2
7x3+p1WxPIOqv2hvlnEx697C51DzL9v/fevx3h3Ih+i/Yv9tq031xgXPofZd
s1cxXMMnDeRDzLthv/DCtJUt859DzbtpP5n1j/e7eTDzbttrOt7+Gj4PZt4d
+1VfjJcfnAsz75598kTWBO25MPMe2G/u8FeYOgem/oH9ZSP71HO7YeY/tG/r
kM4y3w3T/8h+ntX3uLxbMPse2796073i2k2YeU/sd6bNXHhd4gXUvCf2bl+v
p9oB+RDzntrLqW82XCr+AmreM3vxbC1WHiAfYt5ze9X769JaTV5CzXthv/P+
W72nxi+h5r2wv9ul+N8FyIeY99L+sYfn9SVGL6HmvbKXTNaovScKc99re781
sWe9RWHue2NvO1u4rqL6MdS8N/Yr63J2/ql6DDXvrf2BUy9/NQD5EPPe2Vdy
dTuxAvkQ897bXz7hP6Gz8jHUvA/29yaYP+EF8gHoszwI
                   "]]}, "Charting`Private`Tag#1"], 
                Annotation[{
                  Hue[0.9060679774997897, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    Rational[1, 72]], 
                   RGBColor[0.880722, 0.611041, 0.142051], 
                   AbsoluteThickness[2]], 
                  Line[CompressedData["
1:eJxdkj2PQUEUhidbqv0B3appZUr91ioJSrT8CDWtSqNR6YREIrHJCsFmBdf3
16LRu9d75pU7J7k5eeae95nJ3BtKZr9SH0qpsPt43V93XSm/Svu5Ro5GvGpY
75tk9JY13yFn0l51rXyP/N1/leX7kbmj9IGsH8Q/1PlYYFLNbSU/ImO/MRm5
qcxtxPdLhu+PjD4jwzcnw7e05peW37HyK10M1uNOwey3JsO30e5h3ROvmTMM
35YM344M314nSu3HZ2LBezIM35vNvRqG7yS+ofjOZPgu2vwx8L0Zvn8yfFcy
fDey/zsr9QS8wwvM
                   "]]}, "Charting`Private`Tag#2"], 
                Annotation[{
                  Hue[0.1421359549995791, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    Rational[1, 72]], 
                   RGBColor[0.560181, 0.691569, 0.194885], 
                   AbsoluteThickness[2]], 
                  Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQo+2M+aCQb2qPyVcL6JMQhsRpPfCedD6ANo6g/D
+elpIHAMTf9Je7PVhzWCP76xP3sGDOB8iLoL9kHLHu1MK70BVX/R3tJxh/Rv
uYtQ8y/bb3ovCBQ6DdV/Bc6H2HcNzoeYd8Oeybvq52WxU1DzbsL5EPNuw/kQ
8+7A+RDz7sH5EPMeoKl/YL+qYl2krNtJqPkP4XyI/kf2QMVSG5Ych9r3GM6H
mPfEfmbX81lXE49AzUPwIeY9hfMh5j2D8yHmPbcHB8/EyVDzXsD5EPMQfIh5
L+F8iHmvoP7pgpr3Gs6HmAeLFwYGiHkIPsS8t3A+xLx3cD7EvPdwPmq6YWAA
ALc1Abk=
                   "]]}, "Charting`Private`Tag#3"], 
                Annotation[{
                  Hue[0.37820393249936934`, 0.6, 0.6], 
                  Directive[
                   PointSize[
                    Rational[1, 72]], 
                   RGBColor[0.922526, 0.385626, 0.209179], 
                   AbsoluteThickness[2]], 
                  Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQ5mzQQDe1T+SjjfxBgENqPJ77RHNeUAmvrDcH56
GggcQ9N/0j5o2aOdaaU77M+eAQM4H6Lqgv31NXyLfY4+toeov2iffF+5qKng
uT3E/Mv2Ii27N74XfAnVfwXOh9h3Dc6HmHfD3iF3IaN31UuoeTfhfIh5t+F8
iHl34HyIeffgfIh5D9DUP7C/ljhlZcU6mPkP4XyI/kf2TN5VPy+LvYLa9xjO
h5j3xD5K1m1m1/NXUPMQfIh5T+F8iHnP4HyIec/t7ZTUOcqT30PNewHnQ8xD
8CHmvYTzIea9sr8iJrVhyfT3UPNew/kQ895A6Q9Q8xB8iHlv4XyIee/gfIh5
7+F8dBoAW5/5Aw==
                   "]]}, "Charting`Private`Tag#4"]}}, <|
              "HighlightElements" -> <|
                "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
               "LayoutOptions" -> <|
                "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 1.}, {0, 1.}}, 
                 "Frame" -> {{True, True}, {True, True}}, 
                 "AxesOrigin" -> {0, 0}, 
                 "ImageSize" -> {360, 360/GoldenRatio}, 
                 "Axes" -> {False, False}, "LabelStyle" -> {}, "AspectRatio" -> 
                 GoldenRatio^(-1), "DefaultStyle" -> {
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], 
                   Directive[
                    PointSize[
                    Rational[1, 72]], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]]}, 
                 "HighlightLabelingFunctions" -> <|
                  "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                   "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                 False|>, 
               "Meta" -> <|
                "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                 "Function" -> ListLinePlot, "GroupHighlight" -> 
                 False|>|>]]& )[<|
             "HighlightElements" -> <|
               "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
              "LayoutOptions" -> <|
               "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 1.}, {0, 1.}}, 
                "Frame" -> {{True, True}, {True, True}}, 
                "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio},
                 "Axes" -> {False, False}, "LabelStyle" -> {}, "AspectRatio" -> 
                GoldenRatio^(-1), "DefaultStyle" -> {
                  Directive[
                   PointSize[
                    Rational[1, 72]], 
                   RGBColor[0.922526, 0.385626, 0.209179], 
                   AbsoluteThickness[2]], 
                  Directive[
                   PointSize[
                    Rational[1, 72]], 
                   RGBColor[0.560181, 0.691569, 0.194885], 
                   AbsoluteThickness[2]], 
                  Directive[
                   PointSize[
                    Rational[1, 72]], 
                   RGBColor[0.880722, 0.611041, 0.142051], 
                   AbsoluteThickness[2]], 
                  Directive[
                   PointSize[
                    Rational[1, 72]], 
                   RGBColor[0.368417, 0.506779, 0.709798], 
                   AbsoluteThickness[2]]}, 
                "HighlightLabelingFunctions" -> <|
                 "CoordinatesToolOptions" -> ({
                    Identity[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), 
                  "ScalingFunctions" -> {{Identity, Identity}, {
                    Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
                False|>, 
              "Meta" -> <|
               "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
                "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>], 
            ImageSizeCache -> {{
             4.503599627370496*^15, -4.503599627370496*^15}, {
             4.503599627370496*^15, -4.503599627370496*^15}}], Selectable -> 
           False]}, 
         Annotation[{{{}, {}, 
            Annotation[{
              Hue[0.67, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[1, 72]], 
               RGBColor[0.368417, 0.506779, 0.709798], 
               AbsoluteThickness[2]], 
              Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQDQOSzyWA8Ib9rJlgYL8oSV+z6hmMv9J+ZZlu8e2n
N+xNjEFgs71Aj9BRm6cw+Z32B7jvyc17csMeYtoB+61x/Q3/H8PUH7b/81b1
VQKQn54GAsfsVyktjD70CKb/pH3Wis8mK+fesT97BgzsX6YyfPg05w7UvAv2
7x3+p1WxPIOqv2hvlnEx697C51DzL9v/fevx3h3Ih+i/Yv9tq031xgXPofZd
s1cxXMMnDeRDzLthv/DCtJUt859DzbtpP5n1j/e7eTDzbttrOt7+Gj4PZt4d
+1VfjJcfnAsz75598kTWBO25MPMe2G/u8FeYOgem/oH9ZSP71HO7YeY/tG/r
kM4y3w3T/8h+ntX3uLxbMPse2796073i2k2YeU/sd6bNXHhd4gXUvCf2bl+v
p9oB+RDzntrLqW82XCr+AmreM3vxbC1WHiAfYt5ze9X769JaTV5CzXthv/P+
W72nxi+h5r2wv9ul+N8FyIeY99L+sYfn9SVGL6HmvbKXTNaovScKc99re781
sWe9RWHue2NvO1u4rqL6MdS8N/Yr63J2/ql6DDXvrf2BUy9/NQD5EPPe2Vdy
dTuxAvkQ897bXz7hP6Gz8jHUvA/29yaYP+EF8gHoszwI
               "]]}, "Charting`Private`Tag#1"], 
            Annotation[{
              Hue[0.9060679774997897, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[1, 72]], 
               RGBColor[0.880722, 0.611041, 0.142051], 
               AbsoluteThickness[2]], 
              Line[CompressedData["
1:eJxdkj2PQUEUhidbqv0B3appZUr91ioJSrT8CDWtSqNR6YREIrHJCsFmBdf3
16LRu9d75pU7J7k5eeae95nJ3BtKZr9SH0qpsPt43V93XSm/Svu5Ro5GvGpY
75tk9JY13yFn0l51rXyP/N1/leX7kbmj9IGsH8Q/1PlYYFLNbSU/ImO/MRm5
qcxtxPdLhu+PjD4jwzcnw7e05peW37HyK10M1uNOwey3JsO30e5h3ROvmTMM
35YM344M314nSu3HZ2LBezIM35vNvRqG7yS+ofjOZPgu2vwx8L0Zvn8yfFcy
fDey/zsr9QS8wwvM
               "]]}, "Charting`Private`Tag#2"], 
            Annotation[{
              Hue[0.1421359549995791, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[1, 72]], 
               RGBColor[0.560181, 0.691569, 0.194885], 
               AbsoluteThickness[2]], 
              Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQo+2M+aCQb2qPyVcL6JMQhsRpPfCedD6ANo6g/D
+elpIHAMTf9Je7PVhzWCP76xP3sGDOB8iLoL9kHLHu1MK70BVX/R3tJxh/Rv
uYtQ8y/bb3ovCBQ6DdV/Bc6H2HcNzoeYd8Oeybvq52WxU1DzbsL5EPNuw/kQ
8+7A+RDz7sH5EPMeoKl/YL+qYl2krNtJqPkP4XyI/kf2QMVSG5Ych9r3GM6H
mPfEfmbX81lXE49AzUPwIeY9hfMh5j2D8yHmPbcHB8/EyVDzXsD5EPMQfIh5
L+F8iHmvoP7pgpr3Gs6HmAeLFwYGiHkIPsS8t3A+xLx3cD7EvPdwPmq6YWAA
ALc1Abk=
               "]]}, "Charting`Private`Tag#3"], 
            Annotation[{
              Hue[0.37820393249936934`, 0.6, 0.6], 
              Directive[
               PointSize[
                Rational[1, 72]], 
               RGBColor[0.922526, 0.385626, 0.209179], 
               AbsoluteThickness[2]], 
              Line[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjQ5mzQQDe1T+SjjfxBgENqPJ77RHNeUAmvrDcH56
GggcQ9N/0j5o2aOdaaU77M+eAQM4H6Lqgv31NXyLfY4+toeov2iffF+5qKng
uT3E/Mv2Ii27N74XfAnVfwXOh9h3Dc6HmHfD3iF3IaN31UuoeTfhfIh5t+F8
iHl34HyIeffgfIh5D9DUP7C/ljhlZcU6mPkP4XyI/kf2TN5VPy+LvYLa9xjO
h5j3xD5K1m1m1/NXUPMQfIh5T+F8iHnP4HyIec/t7ZTUOcqT30PNewHnQ8xD
8CHmvYTzIea9sr8iJrVhyfT3UPNew/kQ895A6Q9Q8xB8iHlv4XyIee/gfIh5
7+F8dBoAW5/5Aw==
               "]]}, "Charting`Private`Tag#4"]}}, <|
          "HighlightElements" -> <|
            "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
           "LayoutOptions" -> <|
            "PanelPlotLayout" -> <||>, "PlotRange" -> {{0, 1.}, {0, 1.}}, 
             "Frame" -> {{True, True}, {True, True}}, "AxesOrigin" -> {0, 0}, 
             "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {False, False}, 
             "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
             "DefaultStyle" -> {
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.922526, 0.385626, 0.209179], 
                AbsoluteThickness[2]], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.560181, 0.691569, 0.194885], 
                AbsoluteThickness[2]], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.880722, 0.611041, 0.142051], 
                AbsoluteThickness[2]], 
               Directive[
                PointSize[
                 Rational[1, 72]], 
                RGBColor[0.368417, 0.506779, 0.709798], 
                AbsoluteThickness[2]]}, 
             "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
                 Identity[
                  Part[#, 1]], 
                 Identity[
                  Part[#, 2]]}& ), 
               "ScalingFunctions" -> {{Identity, Identity}, {
                 Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
             False|>, 
           "Meta" -> <|
            "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, 
             "Function" -> ListLinePlot, "GroupHighlight" -> False|>|>, 
          "DynamicHighlight"]], {{}, {{}, {}}}}, AspectRatio -> 
       NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
       AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction -> 
       Identity, Frame -> {{True, True}, {True, True}}, 
       FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
       FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
       GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
         GrayLevel[0.4, 0.5], 
         AbsoluteThickness[1], 
         AbsoluteDashing[{1, 2}]], ImageSize -> Medium, 
       Method -> {
        "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
         "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
         "DefaultMeshStyle" -> AbsolutePointSize[6], "DefaultPlotStyle" -> {
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.560181, 0.691569, 0.194885], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.922526, 0.385626, 0.209179], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.528488, 0.470624, 0.701351], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.772079, 0.431554, 0.102387], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.363898, 0.618501, 0.782349], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[1, 0.75, 0], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.647624, 0.37816, 0.614037], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.571589, 0.586483, 0.], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.915, 0.3325, 0.2125], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[
            0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
            AbsoluteThickness[2]], 
           Directive[
            RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
            AbsoluteThickness[2]]}, "DomainPadding" -> Scaled[0.02], 
         "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
         "IncludeHighlighting" -> "CurrentSet", "HighlightStyle" -> Automatic,
          "OptimizePlotMarkers" -> True, 
         "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& ), "CopiedValueFunction" -> ({
             Identity[
              Part[#, 1]], 
             Identity[
              Part[#, 2]]}& )}}, PlotRange -> {{0, 1.}, {0, 1.}}, 
       PlotRangeClipping -> True, PlotRangePadding -> {{
          Scaled[0.02], 
          Scaled[0.02]}, {
          Scaled[0.02], 
          Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}], 
      FormBox[
       FormBox[
        TemplateBox[{"\"ACC\"", "\"TPR\"", "\"FPR\"", "\"SPC\""}, 
         "LineLegend", DisplayFunction -> (FormBox[
           StyleBox[
            StyleBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  TagBox[
                   GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #2}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #3}, {
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], {
                    LineBox[{{0, 12.5}, {20, 12.5}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[2]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 12.5}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.18000000000000002`] -> 
                    Baseline)], #4}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
               "Grid"], Alignment -> Left, AppearanceElements -> None, 
              ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
              "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
            FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
            False], TraditionalForm]& ), 
         InterpretationFunction :> (RowBox[{"LineLegend", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}], 
                  ",", 
                  RowBox[{"Directive", "[", 
                    RowBox[{
                    RowBox[{"PointSize", "[", 
                    FractionBox["1", "72"], "]"}], ",", 
                    
                    TemplateBox[<|
                    "color" -> RGBColor[0.922526, 0.385626, 0.209179]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                    RowBox[{"AbsoluteThickness", "[", "2", "]"}]}], "]"}]}], 
                "}"}], ",", 
              RowBox[{"{", 
                RowBox[{
                  TagBox[#, HoldForm], ",", 
                  TagBox[#2, HoldForm], ",", 
                  TagBox[#3, HoldForm], ",", 
                  TagBox[#4, HoldForm]}], "}"}], ",", 
              RowBox[{"LegendMarkers", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], 
              ",", 
              RowBox[{"Joined", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"True", ",", "True", ",", "True", ",", "True"}], 
                  "}"}]}], ",", 
              RowBox[{"LabelStyle", "\[Rule]", 
                RowBox[{"{", "}"}]}], ",", 
              RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
         Editable -> True], TraditionalForm], TraditionalForm]},
     "Legended",
     DisplayFunction->(GridBox[{{
         TagBox[
          ItemBox[
           PaneBox[
            TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
            BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
          "SkipImageSizeLevel"], 
         ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
       GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
       AutoDelete -> False, GridBoxItemSize -> Automatic, 
       BaselinePosition -> {1, 1}]& ),
     Editable->True,
     InterpretationFunction->(RowBox[{"Legended", "[", 
        RowBox[{#, ",", 
          RowBox[{"Placed", "[", 
            RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]}], 
   "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.932509181139522*^9},
 CellID->1649335678,ExpressionUUID->"a1150daa-8041-428f-9e6e-f84cf8b5a793"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Variable importance finding", "Subsection",
 CellChangeTimes->{{3.7339221081351852`*^9, 3.733922134764246*^9}},
 CellID->1000879530,ExpressionUUID->"b3dfda03-d114-4cae-b432-8168c2259b9f"],

Cell[CellGroupData[{

Cell[TextData[{
 "Using the pipeline constructed above let us find the most decisive \
variables using systematic random shuffling (as explained in [",
 ButtonBox["AA3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Importance-of-variables-investigation-guide.md"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Importance-of-variables-investigation-guide.md"],
 "]):"
}], "Text",
 CellChangeTimes->{{3.734877171831059*^9, 3.734877280306267*^9}, {
  3.734877562687627*^9, 3.73487756980834*^9}},
 CellID->542853759,ExpressionUUID->"a7c2ab41-d532-48fa-8e18-11cab24a753a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  "ClConAccuracyByVariableShuffling", "\[DoubleLongRightArrow]", 
  "\[IndentingNewLine]", "ClConTakeValue"}]], "Input",
 CellChangeTimes->{{3.7339562499781322`*^9, 3.733956284578817*^9}, 
   3.7348771655906057`*^9},
 CellLabel->"In[59]:=",
 CellID->1232595057,ExpressionUUID->"d0627d9f-bc95-433f-8d6b-73f644182531"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"None", "\[Rule]", "0.7392996108949417`"}], ",", 
   RowBox[{"\<\"passenger class\"\>", "\[Rule]", "0.6926070038910506`"}], ",", 
   RowBox[{"\<\"passenger age\"\>", "\[Rule]", "0.7509727626459144`"}], ",", 
   RowBox[{"\<\"passenger sex\"\>", "\[Rule]", "0.5797665369649806`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932506617825481*^9, 3.932506664664432*^9, 
  3.932509181214727*^9},
 CellLabel->"Out[59]=",
 CellID->665824670,ExpressionUUID->"0a8b9c95-820c-45f3-96fa-a55333d8f0af"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "We deduce that \[OpenCurlyDoubleQuote]passengerSex\[CloseCurlyDoubleQuote] \
is the most decisive variable because its corresponding classification \
success rate is the smallest. (See [",
 ButtonBox["AA3",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Importance-of-variables-investigation-guide.md"], None},
  ButtonNote->
   "https://github.com/antononcube/MathematicaForPrediction/blob/master/\
MarkdownDocuments/Importance-of-variables-investigation-guide.md"],
 "] for more details.)"
}], "Text",
 CellChangeTimes->{{3.7348775789420023`*^9, 3.734877584522024*^9}, {
  3.734877616000845*^9, 3.734877713278158*^9}},
 CellID->1017864124,ExpressionUUID->"7ad68b9a-517e-48c9-a78d-a8418bc7e414"],

Cell[CellGroupData[{

Cell["\<\
Using the option \[OpenCurlyDoubleQuote]ClassLabels\[CloseCurlyDoubleQuote] \
we can focus on specific class labels:\
\>", "Text",
 CellChangeTimes->{{3.735331834174726*^9, 3.7353318523765497`*^9}, {
  3.7353321760575933`*^9, 3.7353321887228327`*^9}},
 CellID->387600066,ExpressionUUID->"50c8e640-2cfc-4bfb-9d6f-611fb04f7735"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  RowBox[{"ClConAccuracyByVariableShuffling", "[", 
   RowBox[{"\"\<ClassLabels\>\"", "\[Rule]", "\"\<survived\>\""}], "]"}], 
  "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  "ClConTakeValue"}]], "Input",
 CellChangeTimes->{{3.7339562499781322`*^9, 3.733956284578817*^9}, 
   3.7348771655906057`*^9, {3.735331797758767*^9, 3.735331828438197*^9}},
 CellLabel->"In[60]:=",
 CellID->1076407911,ExpressionUUID->"ba3bb1d7-18c5-414b-b455-18087d43a779"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"None", "\[Rule]", 
    RowBox[{"{", "0.6701030927835051`", "}"}]}], ",", 
   RowBox[{"\<\"passenger class\"\>", "\[Rule]", 
    RowBox[{"{", "0.5757575757575758`", "}"}]}], ",", 
   RowBox[{"\<\"passenger age\"\>", "\[Rule]", 
    RowBox[{"{", "0.6732673267326733`", "}"}]}], ",", 
   RowBox[{"\<\"passenger sex\"\>", "\[Rule]", 
    RowBox[{"{", "0.4945054945054945`", "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.932506617883588*^9, 3.932506666450326*^9, 
  3.932509181274291*^9},
 CellLabel->"Out[60]=",
 CellID->2125427820,ExpressionUUID->"d4de8227-a7c9-4903-8f96-e6f30c653f78"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Setters and takers", "Subsection",
 CellChangeTimes->{{3.733871602049561*^9, 3.733871607492929*^9}, {
  3.7348777602503347`*^9, 3.734877762532715*^9}},
 CellID->1616510034,ExpressionUUID->"1a29cd40-f531-4628-8277-f920244be179"],

Cell["\<\
The values from the monad context can be set or obtained with the \
corresponding \[OpenCurlyDoubleQuote]setter\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]taker\[CloseCurlyDoubleQuote] functions as summarized \
in a previous section.\
\>", "Text",
 CellChangeTimes->{{3.733871616742147*^9, 3.733871644090509*^9}, {
  3.734877955072385*^9, 3.73487799897992*^9}, {3.7348780372196503`*^9, 
  3.7348781233725653`*^9}, {3.7420080611187687`*^9, 3.742008079713192*^9}},
 CellID->868523241,ExpressionUUID->"8d018d49-6bef-4c3a-867b-4ecac182a64d"],

Cell[CellGroupData[{

Cell["For example:", "Text",
 CellChangeTimes->{{3.7352054089779797`*^9, 3.735205414748146*^9}},
 CellID->823762828,ExpressionUUID->"fc0c30e7-4129-4ab9-8d3e-ecfb23ce62f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "\[DoubleLongRightArrow]", "ClConTakeClassifier"}]], "Input",
 CellChangeTimes->{{3.73520541683209*^9, 3.735205421428141*^9}},
 CellLabel->"In[61]:=",
 CellID->154777987,ExpressionUUID->"b8e02314-3bb9-4a46-89c1-8e6de51474e8"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Numerical\"", ",", "\"Nominal\""}],
                     "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{",", "\",\"", "\"died\"", "\"survived\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["789", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 789, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal"|>, "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 3|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal", "Numerical", "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
           "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 789, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "Threads", <|
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 9153322266525338993|>], 
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 5012684870820858898|>]}, 
                    "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>, 
                    "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
                    "female" -> 1, "male" -> 2|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {14.1, 0}, "ID" -> 
                    8164567873087376931, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "Standardize", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Mean" -> {30.092733460076047`}, 
                    "StandardDeviation" -> {14.328910373374821`}, 
                    "Output" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 6281077921715581987|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 2, 
                    "SetSize" -> {3, 2}|>|>, 
                    "Boundaries" -> {{-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, 0., 0.5}}, 
                    "Version" -> {14.1, 0}, "ID" -> 4040756577587028706, 
                    "Output" -> <|
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>|>], 
                    MachineLearning`MLProcessor[
                    "MergeVectors", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
                    "(f1f3)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Spans" -> {
                    Span[1, 1], 
                    Span[2, 3]}, "Wrappers" -> {Identity, Identity}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Weight" -> {1., 1., 1.}, "Type" -> "NumericalVector"|>|>,
                     "Version" -> {14.1, 0}, "ID" -> 4097015177937765665|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.9910612586785843, 
                   0.06598299810671092, -0.11594751186321406`}, {
                   0.13187334052932742`, 
                   0.6159703331215373, -0.7766530568869077}, \
{-0.02017433032485729, 0.7850011418303748, 0.6191657320305699}}, 
                  "Precisions" -> {0.9841220897715588, 10.949501861534154`, 
                   16.09738740347505}, "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.0002629696964159788, 0.05941721180671521, 
                    0.0671929346298139}, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Version" -> {14.1, 0}, "ID" -> 8091215461067587407|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 3.|>,
                     "Key" -> "(f2(f1f3))", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 3, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                    "Mean" -> {0.00026296969641594373`, 0.05941721180671519, 
                    0.0671929346298139}, 
                    "StandardDeviation" -> {0.9996410023910036, 
                    0.29965681997560434`, 0.2837392816617341}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 3, 
                    "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                    8708448484904811398|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, 
                   "Mean" -> {0.00026296969641594373`, 0.05941721180671519, 
                    0.0671929346298139}, 
                   "StandardDeviation" -> {0.9996410023910036, 
                    0.29965681997560434`, 0.2837392816617341}, "Method" -> 
                   "NaiveSampler", "VectorLength" -> 3, 
                   "Output" -> <|
                    "(f2(f1f3))" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 3.|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {14.1, 0}, "ID" -> 
                   8708448484904811398|>], "InputDimension" -> 0, 
                "OutputDimension" -> 3, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, 
                    "ID" -> 1661388309095108015|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {32.}, 
                    "ID" -> 2537690409849976938|>, 
                    "f3" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, 
                    "ID" -> 2384008819527855069|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.04638, "MaxTrainingMemory" -> 333832, 
                  "DataMemory" -> 91040, "FunctionMemory" -> 63480, 
                  "LanguageVersion" -> {14.1, 0}, "Date" -> 
                  DateObject[{
                    2024, 8, 12, 23, 39, 40.734644`8.36253890340095}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, 
                  "ProcessorType" -> "ARM64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-2.334492107219147, -2.334492107219147, \
-2.1525606020344266`, -2.074142558292016, -2.022597877268466, \
-1.928105047115933, -1.9058709563797838`, -1.8392581763193936`, \
-1.8227454567988768`, -1.814404916607588, -1.68899561817378}, 
                   "LeftBoundary" -> -2.1525606020344266`, "LeftScale" -> 
                   0.09096575259236017, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[5.874951994862823, 0.18062352289316216`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {14.1, 0}, 
             "ID" -> 616651398117295976|>], 
           MachineLearning`MLProcessor[
           "Threads", <|
            "Input" -> <|
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Processors" -> {
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 5896072734193971629|>], 
               MachineLearning`MLProcessor[
               "ToVector", <|
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                 "StructurePreserving" -> True, 
                 "Input" -> <|
                  "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                   "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                 "Output" -> <|
                  "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
                 "Version" -> {14.1, 0}, "ID" -> 4638787354345331223|>]}, 
             "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
             "Missing" -> "Allowed"|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Mean" -> {30.092733460076047`}, 
             "StandardDeviation" -> {14.328910373374821`}, 
             "Output" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 7791071911106811572|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>, 
             "Index" -> {<|"1st" -> 1, "2nd" -> 2, "3rd" -> 3|>, <|
               "female" -> 1, "male" -> 2|>}, "MissingCode" -> 0, 
             "Version" -> {14.1, 0}, "ID" -> 3653976628138478392, 
             "Output" -> <|
              "(f1f3)" -> <|"Type" -> "NominalVector", "Weight" -> 2|>|>|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 1277826592583279905|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"died" -> 1, "survived" -> 2|>}, "MissingCode" -> 
             0, "Version" -> {14.1, 0}, "ID" -> 2833981340056725226, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {14.1, 0}, "ID" -> 6294800060345789738|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "died" -> 0.5853350189633376, "survived" -> 0.4146649810366625|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["ListSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "Tree" -> MachineLearning`DecisionTree[<|
        "FeatureIndices" -> 
         RawArray["Integer16",{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
           2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 
           4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 
           6, 6, 6, 6, 6, 6, 6, 6, 6, 6}], 
         "NumericalThresholds" -> CompressedData["
1:eJwVymlM0mEcwHHQ4WhOowSVUguZZZaaTm1Z+QfLcypJuuVyHhCVJ7rCZlnN
NI1wUYQ2u0zb3FpqW7UmznrwKvNa4loKpiJKXiVCqGsu+z0vvvu8+bIEYr6I
TCKRUqFqr+j9a5EkdbDZxP1UtoZau9nzA7FWlEwfMgiCLWjYTH37jbuChkaO
UHOeziHFkxoPO9EMynDo4nhG6ZA0o9iB5a9DxqSmXWSTFonS3vXqzf2IY2Ax
Bb/60JAsMlqhuY0CPXhh/PfnkHejdlwT0kmEUzZvPIrtJHKXJRSqUE8oD5Ra
l6QLBPNso8jQZSKKWSMyLzsr4ZuWXRuRvkqE3dv44bO4QdyZrvvObyNx1IW5
CzHGFyhk3MSOALW09NVwcFDLbccetY+6yAY/792cpoEv714ROOK/VsWoPVlC
cCRhf+WJJUSmbT27G1S0xdQn8EFX2wIZ6D5c/5H8QE+0B7UYsb26DyobUDDG
+0oBt5b6/C7Rq1Da4L4TWP4gNUIMTrr5ns4Hx6Rdokw3AzFlvKkUgjpGHD3/
8Dzh6lTNFIN9Qe6SAnBznDeJrWPJzNhsq8a/EBQxaYFYQWPoNG9GjzqUyZ1Y
vwr7qwkgTeyA4sGxlGgBVuqo5mBtHlcFYINyVHuwQrPOE1ufGyOPw8ob1M7l
E2j9TYJ+O1gmeza1DdRYqD00kClTvnIE81R5p362GYkcaShjDixSlxuwqbaq
0AVw1FLzEHtpOT4uyn0RBXYcdMNen1CMHgebE12Ur/8NoENb6NwWUHKf7o9d
bvY2NIA+AckTz8GVrGve2Mv6IvKOqlnkJDJdcAE5f5ZnncFyvyY69q/Q1cIA
Qyq+TJWfWSJSeqQG7Pn+mqpbYCVld1IlGJ0ll2HXdx5rxf4Hwu+Mqg==
          "], "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwViedTDgAAhx9FyiiSmVH2yEhEVlIhpLxxVl9yFz5x93Ln/D3ZFCGySWRl
j+y9V1ll5Ontw+957rlf4qr1gdVhwIbIEAJFmzKCwaLNBVGhyFm3sXhNcTA5
dW3rXxhaq8fxzn/24o2vHUM2BUxkv+Xet8557PG7SWRwygoP2o5kjnnUZSTy
0x9G05so+nPJiz60B7F054I13vKmI+jLb5u84yjOe84+3PCD753DbWfzzcdO
Z5tbvepQ9rnXCbTnmZnMZCEnPeEC9IXPHc5gfjmDWq/41hyWctowVpLGR5/6
xMX8tw2NjiSGJTzwj4vYYompbDeCgbzypYUcsN6vzuea07jrALrQiWFU2ZlI
ZrHbXQ7hnmWWmkJXurGcy87luB15ZD8S2OEKJtNsT45YaS5nDKfBz35yEF+s
9qx5TCWfsQS4bjptyeKQo+lAHPEcdgrj+eskdtoC1bPCmg==
          "], "LeafValues" -> 
         RawArray["UnsignedInteger8",{{2, 1}, {1, 3}, {2, 2}, {1, 10}, {1, 
           3}, {4, 1}, {1, 3}, {2, 1}, {1, 2}, {44, 1}, {1, 3}, {3, 1}, {4, 
           1}, {1, 3}, {1, 2}, {1, 5}, {3, 1}, {3, 1}, {14, 1}, {2, 2}, {4, 
           1}, {1, 3}, {2, 1}, {10, 1}, {3, 1}, {10, 1}, {2, 2}, {1, 6}, {2, 
           1}, {1, 3}, {2, 1}, {1, 77}, {1, 3}, {3, 1}, {2, 2}, {3, 1}, {1, 
           4}, {2, 1}, {3, 1}, {1, 2}, {2, 1}, {30, 1}, {2, 2}, {2, 1}, {7, 
           1}, {1, 2}, {21, 1}, {2, 1}, {1, 2}, {1, 4}, {2, 2}, {33, 1}, {1, 
           10}, {2, 2}, {8, 1}, {1, 3}, {2, 1}, {5, 1}, {1, 2}, {2, 2}, {3, 
           27}, {1, 3}, {1, 44}, {1, 5}, {18, 1}, {3, 1}, {1, 3}, {3, 1}, {3, 
           1}, {1, 2}, {1, 6}, {2, 1}, {88, 5}, {1, 2}, {2, 2}, {1, 7}, {1, 
           2}, {2, 2}, {10, 1}, {1, 3}, {2, 1}, {5, 1}, {2, 2}, {1, 2}, {1, 
           3}, {3, 2}, {15, 1}, {15, 1}, {7, 1}, {3, 1}, {1, 2}, {3, 1}, {1, 
           4}}], "RootIndex" -> 86, "NominalDimension" -> 0|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f3)" -> <|
            "Type" -> "NominalVector", "Weight" -> 2, "SetSize" -> {3, 2}|>, 
           "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f2(f1f3))" -> <|
            "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
             "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f3)" -> <|
                "Type" -> "NominalVector", "Weight" -> 2, 
                 "SetSize" -> {3, 2}|>|>, 
             "Index" -> {<|1 -> 1, 2 -> 2, 3 -> 3|>, <|1 -> 1, 2 -> 2|>}, 
             "Output" -> <|
              "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 0.}, {-0.03886548802256584, 
                0.5972152948379517, 0.7103163599967957}, {
                0.5491961240768433, -0.10109598934650421`, \
-0.47681111097335815`}, {0.006913789082318544, 
                0.7882610559463501, -0.5591192245483398}}], 
               RawArray["Real32",{{0., 
                
                0.}, {-0.22652149200439453`, -0.6733512878417969}, \
{-0.8473231196403503, 0.8861724138259888}}]}, "Version" -> {14.1, 0}, "ID" -> 
             2847367987390997122|>], 
           MachineLearning`MLProcessor[
           "MergeVectors", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f2" -> <|"Type" -> "NumericalVector", "Weight" -> 1|>, 
               "(f1f3)" -> <|"Weight" -> 2, "Type" -> "NumericalVector"|>|>, 
             "Spans" -> {
               Span[1, 1], 
               Span[2, 6]}, "Wrappers" -> {Identity, Identity}, 
             "Output" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Version" -> {14.1, 0}, "ID" -> 
             614793402165896505|>], 
           MachineLearning`MLProcessor[
           "Values", <|
            "Info" -> <|
              "(f2(f1f3))" -> <|
                "Weight" -> {1., 0.4, 0.4, 0.4, 0.4, 0.4}, "Type" -> 
                 "NumericalVector"|>|>, "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Impossible", "StructurePreserving" -> False, 
         "Missing" -> "Imputed"|>], "Calibrator" -> 
      MachineLearning`CalibratorFunction[
       "TemperatureScaling", <|"Theta" -> 0.40226939576953463`|>], "Method" -> 
      "DecisionTree", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "DistributionSmoothing" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "FeatureFraction" -> <|"Value" -> 1, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Configurations" -> 
      Dataset[<|<|
          "Value" -> "DecisionTree", 
           "Options" -> <|
            "DistributionSmoothing" -> <|"Value" -> 1|>, 
             "FeatureFraction" -> <|"Value" -> 1|>|>, "NaiveImputer" -> 
           Missing["KeyAbsent", "NaiveImputer"], "EMIterations" -> 
           Missing["KeyAbsent", "EMIterations"]|> -> <||>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{
          "Value", "Options", "NaiveImputer", "EMIterations"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {
              TypeSystem`Atom[Integer]}], 2], TypeSystem`UnknownType, 
           TypeSystem`UnknownType}], 
         TypeSystem`Assoc[
         TypeSystem`UnknownType, TypeSystem`UnknownType, 
          TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
      Dataset[<|"Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "ModelUtility" -> Missing[]|>, 
        TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}],
           TypeSystem`UnknownType}], <||>], "InputDimension" -> 3, 
      "OutputDimension" -> 1|>, "AnomalyDetector" -> None, 
    "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"2nd"}, "ID" -> 
           7168142382301173801|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {32.}, "ID" -> 
           1978735388468315165|>, 
         "f3" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"male"}, "ID" -> 
           9071588231046195481|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.103081, 
      "MaxTrainingMemory" -> 1828456, "DataMemory" -> 192064, 
      "FunctionMemory" -> 157064, "LanguageVersion" -> {14.1, 0}, "Date" -> 
      DateObject[{2024, 8, 12, 23, 39, 40.787945`8.363106803261891}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 10, "ProcessorType" -> 
      "ARM64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9325066179021683`*^9, 3.932506668183257*^9, 
  3.932509181294961*^9},
 CellLabel->"Out[61]=",
 CellID->822386542,ExpressionUUID->"940d9eaa-2f1c-4a0d-8cb8-259631e79bb2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{"Normal", "[", 
   RowBox[{"p", "\[DoubleLongRightArrow]", "ClConTakeTrainingData"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.73520541683209*^9, 3.735205421428141*^9}, {
  3.73520546233871*^9, 3.735205501352653*^9}},
 CellLabel->"In[62]:=",
 CellID->135789125,ExpressionUUID->"341eea37-4a6b-453b-866e-d58cbd95f4f5"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"passenger class\"\>", "\[Rule]", "\<\"1st\"\>"}], ",", 
      RowBox[{"\<\"passenger age\"\>", "\[Rule]", "21.`"}], ",", 
      RowBox[{"\<\"passenger sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
      RowBox[{"\<\"passenger survival\"\>", "\[Rule]", "\<\"survived\"\>"}]}],
      "\[RightAssociation]"}], ",", 
    RowBox[{"\[LeftSkeleton]", "979", "\[RightSkeleton]"}], ",", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
     "\[RightAssociation]"}]}], "}"}],
  Short]], "Output",
 CellChangeTimes->{3.932506617922134*^9, 3.9325066695351467`*^9, 
  3.932509181314658*^9},
 CellLabel->"Out[62]//Short=",
 CellID->645859302,ExpressionUUID->"b9660073-088b-4388-a962-b5798a253ada"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Short", "[", 
  RowBox[{"Normal", "[", 
   RowBox[{"p", "\[DoubleLongRightArrow]", "ClConTakeTestData"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.73520541683209*^9, 3.735205421428141*^9}, {
  3.73520546233871*^9, 3.735205535464284*^9}},
 CellLabel->"In[63]:=",
 CellID->335857678,ExpressionUUID->"5c326328-af86-4206-a0d8-042e3e87175e"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"passenger class\"\>", "\[Rule]", "\<\"1st\"\>"}], ",", 
      RowBox[{"\<\"passenger age\"\>", "\[Rule]", "49.`"}], ",", 
      RowBox[{"\<\"passenger sex\"\>", "\[Rule]", "\<\"female\"\>"}], ",", 
      RowBox[{"\<\"passenger survival\"\>", "\[Rule]", "\<\"survived\"\>"}]}],
      "\[RightAssociation]"}], ",", 
    RowBox[{"\[LeftSkeleton]", "326", "\[RightSkeleton]"}], ",", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
     "\[RightAssociation]"}]}], "}"}],
  Short]], "Output",
 CellChangeTimes->{3.932506617936852*^9, 3.932506670772971*^9, 
  3.93250918132141*^9},
 CellLabel->"Out[63]//Short=",
 CellID->1574936776,ExpressionUUID->"0aa64256-53ea-4766-8348-503373ba1a7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"p", "\[DoubleLongRightArrow]", "ClConTakeVariableNames"}]], "Input",\

 CellChangeTimes->{{3.73520541683209*^9, 3.735205421428141*^9}, {
  3.73520546233871*^9, 3.735205554645225*^9}},
 CellLabel->"In[64]:=",
 CellID->1323477786,ExpressionUUID->"96d73838-5728-4b69-a171-cbfe37b655d3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"passenger class\"\>", ",", "\<\"passenger age\"\>", 
   ",", "\<\"passenger sex\"\>", ",", "\<\"passenger survival\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9325066412046623`*^9, 3.932506671692418*^9, 
  3.932509181336802*^9},
 CellLabel->"Out[64]=",
 CellID->78961310,ExpressionUUID->"b40257a4-80ad-44e6-abd0-120458da60dc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "If other values are put in the context they can be obtained through the \
(generic) function ",
 StyleBox["ClConTakeContext", "Program"],
 ", [AAp1]",
 ":"
}], "Text",
 CellChangeTimes->{{3.734878135387372*^9, 3.734878145220619*^9}, {
  3.734878175507203*^9, 3.734878216795025*^9}, {3.735205681616521*^9, 
  3.7352056850348167`*^9}},
 CellID->691926428,ExpressionUUID->"68c412c6-cdd5-4cfc-b72d-97e26eeadacd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "=", 
   RowBox[{
    RowBox[{"ClConUnit", "[", 
     RowBox[{"RandomReal", "[", 
      RowBox[{"1", ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "]"}], "]"}], 
    "\[DoubleLongRightArrow]", 
    RowBox[{"ClConAddToContext", "[", "\"\<data\>\"", "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7348783562739*^9, 3.734878361303279*^9}},
 CellLabel->"In[65]:=",
 CellID->583526891,ExpressionUUID->"cab0c65d-d102-4c46-900c-827460b488a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"p", "\[DoubleLongRightArrow]", "ClConTakeContext"}], ")"}], "[", 
  "\"\<data\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.734878148021721*^9, 3.734878161376445*^9}, {
  3.734878238025732*^9, 3.734878273664194*^9}, {3.734878326566061*^9, 
  3.7348783643632793`*^9}},
 CellLabel->"In[66]:=",
 CellID->1926124835,ExpressionUUID->"8cd54c2a-1358-4d86-80a5-71f2b6e5f5e2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.24291065640465792`", ",", "0.9609492475753711`"}], "}"}], ",", 
   
   RowBox[{"{", 
    RowBox[{"0.8537999483014302`", ",", "0.011761206249102374`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.932506618007287*^9, 3.932509181363015*^9},
 CellLabel->"Out[66]=",
 CellID->2105326971,ExpressionUUID->"bf30c76f-0b4d-48c5-8ba8-7d343d408093"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Another generic function from [AAp1] is ",
 StyleBox["ClConTakeValue", "Program"],
 " (used many times above.)"
}], "Text",
 CellChangeTimes->{{3.735205601479488*^9, 3.7352056701276093`*^9}, 
   3.735275951693182*^9, {3.735332284043828*^9, 3.7353323021135473`*^9}, {
   3.735384000102174*^9, 3.735384000650539*^9}},
 CellID->1038353515,ExpressionUUID->"a16113d3-d005-4512-b758-15a7c3de0964"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example use cases", "Section",
 CellChangeTimes->{{3.729962707838698*^9, 3.7299627363244457`*^9}, {
   3.729962773753973*^9, 3.729962786162513*^9}, {3.7299638913555927`*^9, 
   3.729963895461739*^9}, {3.733922167876472*^9, 3.73392216923466*^9}, 
   3.73506057803983*^9},
 CellID->941339873,ExpressionUUID->"c82637d4-7b57-448d-9178-ccfa190bd052"],

Cell[CellGroupData[{

Cell["Classification with MNIST data", "Subsection",
 CellChangeTimes->{{3.735053024030457*^9, 3.7350530266485653`*^9}, {
  3.735282047088656*^9, 3.7352820514067802`*^9}},
 CellID->587218062,ExpressionUUID->"78d2673a-6a04-43f1-9df0-3c4e3285a909"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here we show an example of using ",
 StyleBox["ClCon", "Program"],
 " with the reasonably large dataset of images MNIST, [",
 ButtonBox["YL1",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://yann.lecun.com/exdb/mnist/"], None},
  ButtonNote->"http://yann.lecun.com/exdb/mnist/"],
 "]. "
}], "Text",
 CellChangeTimes->{{3.735053033749901*^9, 3.735053107068438*^9}, {
  3.735053530490345*^9, 3.735053531187901*^9}, {3.735332257414546*^9, 
  3.735332257417591*^9}},
 CellID->1686610069,ExpressionUUID->"34243a3b-2ceb-42d5-8476-bd083761909d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mnistData", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<MNIST\>\""}], "}"}], ",", 
     "\"\<Data\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.734880232027491*^9, 3.7348802607236958`*^9}, 
   3.734880311322822*^9},
 CellLabel->"In[89]:=",
 CellID->71289283,ExpressionUUID->"b09279f3-e28d-40bd-b8ff-8f77e53dfb6b"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SeedRandom", "[", "3423", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"p", "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClConUnit", "[", 
     RowBox[{"RandomSample", "[", 
      RowBox[{"mnistData", ",", "20000"}], "]"}], "]"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    RowBox[{"ClConSplitData", "[", "0.7", "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", "ClConSummarizeData", "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConMakeClassifier", "[", "\"\<NearestNeighbors\>\"", "]"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    RowBox[{"ClConClassifierMeasurements", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Accuracy\>\"", ",", "\"\<ConfusionMatrixPlot\>\""}], "}"}],
      "]"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    "ClConEchoValue"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.7348803263217793`*^9, 3.734880451846526*^9}, {
  3.734880490310611*^9, 3.734880519483213*^9}, {3.734880896512711*^9, 
  3.734880929471184*^9}, {3.734881298030808*^9, 3.734881350430126*^9}, {
  3.734886254089175*^9, 3.734886291089679*^9}},
 CellLabel->"In[90]:=",
 CellID->2010588002,ExpressionUUID->"d23bcff7-4a40-440b-acb0-9a31a7d0eafd"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["RandomGeneratorState",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"ExtendedCA\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"State hash: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"-", "4262791747389846809"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"ExtendedCA\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"State hash: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"-", "4262791747389846809"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  RandomGeneratorState[{
   "ExtendedCA", {80, 4, 0}}, {{
    RawArray["UnsignedInteger64",{233, 1, 7, 0, 6, 3, 2, 40, 8, 0, 0, 
      372908923008438, 16850370131279076895, 4002140052371344178, 
      4185484976035914338, 13770409378765210142, 9585113898598282959, 
      17747947405038836568, 16454350184340100720, 210356925233554989}], 0, 20,
      20}, {CompressedData["
1:eJxFlctuHkUQRi3EgiUQXoAHsFT36lqytMQCBfEAQThRNkayIyHentNzCV5Y
8/d0d1V936man//8+/3Hbx4eHt6+49/7D//88vr64d/ff+DHHy9vnz+9PP/1
9PLl+dPza8XH3/a+b/n36+e3L0/veCif9u5KjUydSbOnH/d6ufRMT0x1qa15
+onlx05tcWHbtJWmph/3mNiEqUyLVI5y5bEeye0zrqblRDLvc73SZVlGL/ea
kbWOdS/L9pWqJRFriH0GtiW9MjiSKqEumseBDF1DojoeVtJkfWXqurptfEfI
MP7OF2tKx2J0Mq0mwq8XPkVJ6iZBSr6WnyFYIz+K8HSerWtdIWQ1QYzIsxCK
eMeBRyMbGVIO7rf6P7RPqHhTWVGCr/umNJQvDeTCj6DUOW8i05UIOhW2rJfk
dYDkNDtWVzjCjvr1ooN0NFZ4C2IS49RpSrRMW7nbLDH4PMADa2l9VB1NRecL
jZEdFz3cI7a7x01ag+RhW+DUtdTvnDx8UkrBQxYwSZ0vkCCS6zlEAoSrS49C
H+0pNyMHnVVn2brRaCXkQmNX4DqLyAMLt0ZSLyS+zI6mZIBcYgohXjhxRbDE
ixrqQ8CN+XkT2xpN8AHAASjP4lAmJI/dtiAfos6M8BdiAjZBrz3vAIjZ7rvA
xf/t46k3JmceLoC+yb7uogzBNEVFdr25ETkP5BJsW+NcQqJkcXTi9LIRIVFO
JYBc9wQ/IQIZ1HkOobJjf1EX1yRkECDilghPFhotxbOFBR1P3/Nid/TsBbrc
gfjcPZKLZltCNuTqqH5dA7p7aJCRbBm47xSO9Avi6BulEVaEXAdkswpVSqcW
zxfahgYU1rVxBQm/uWPTiCOBN3Cs4OVxAA5IlWYIOmKh51fzGQjUBtxIYZCc
caN99FMTKhAVjM+bHjdoQQVQyZhrmD2kewT37W8D2dHCd08JyxggI8Y0C7n5
BYpmKu3pBqakq3HR5eYHt2Lluwf9CBBZQEpCiI/unLugw8nY07aEjADqqgyv
OFvcLczCYGrdjcOEMHgTTlC4z+UC+vIT43iFQTyc+CID+dMjBAmUZiZdJuzO
L+zZ1ODHtZ/xW7Dei6147bTd6QFxV+eeGAHgdJPf7VFZm0U8xle3yzOAjY3n
hsmjbN1Th+GAW9SHgNxJk14lG5Mm6SqgoTsnv2IBQRu9PfggDZBudxg629D9
cYndb3KptzmSDt1jB7Fp5muez+bRgonXxhdjd8Ih0iZhyB6oGS21OTr29yZ7
80rn1/78XU2CivRHJckzErCu4vqIRR+fCT5tXIMVcY9U3Xv59ll40j93DZvd
3WTU4hsZov8HNixooA==
     "], 4, 0}}, RawArray["UnsignedInteger64",{14183952326319704807, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9325068106392927`*^9, 3.932509200840654*^9, 
  3.9325093342009077`*^9},
 CellLabel->"Out[90]=",
 CellID->1680963192,ExpressionUUID->"db84c901-0ee1-4ad0-8253-9153a8df2edc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\<\"trainingData\"\>", "\[Rule]", 
     RowBox[{
      RowBox[{"{", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"1 column 1\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycIVjHJPMMl98qUORmnxgZm5m945KbikluDR+4lE9MUnHL49NFCDr9b
3CCsK6vOYspp/AQxVvAyc4dcQ5djOgCkT4gzA1lOP5HlPqkxM2UCaXtmkBxz
OorGuRyMTGv+H2RgYpKxZ2DSRLWxmIlZqd2CCaKvEc05ORBhEMG1HU3uYzFM
jmcthh8/TgfLeeZswBUKQxAAAEViq+8=
                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycM1jJW4JSrZ+KYiEuuiompBpdcEJP4dxxSL2WYJHBpwyf3gIPJA5fc
XSamGFxyb5SZtG/glmNpwqXRl5FxOYz95+5LFDk/JqYuKPOJD5PMImS5lUxM
llApfSYmJrFGJLn7Ekwmv8CsICYQ0PqJJKnLxNQAM91OlYlpL5LcRU4m0elA
+rMxE+emUCamXmQby5iYeMQztz5SZmIWYmISv4ss9y2EG2QRA9g6Jkc0P542
BgoygqXqnqIHwPt7PQWJRkzcBcf/oEsNWQAAmfql9g==
                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycMbjEdxC3HXDBo5I7ikfPCI+fJlA9hHJg4adIFFKkDvMwzwIz7QkzM
zOLJX5HktjEzQxjFzEA5ZqasLwi5FKjcVSVmpvrJjkzMOxByqkxMEP1MTAx3
/v+3Z9qOkFOD6gOarfjs/38xZH1IckD3vmLCKffKEEUOaE8+lM5bqM3E0IHk
h69ZzIHbXv3/38PMLMjBzNzxC9nz94WZmc285vAC/cbMWY0WaAeZQX4GY3Sp
IQ0AyD+jFw==
                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycCMBzDI1eERw6P6fjkevFYuJJhJR59uOVC8cjhM3MlXg9aQhmPijBc
bMkAZ2B4B+aYY8AI6MWwUPYRRA0w5tDkHskyhD6Cyln+x9DIYAm0SBYoh+nk
IpBpvUCnYPMqyDgQkMWUAgUqGGAPoWMrZXFJDVEAALBVycc=
                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycChFo+xikXzrQGl9QjK4bVuORWseDWt5KJoQSX3GNrJhZy9Fmx4Na3
iomRLHdC9D2yYiw5hk2fNZhkkQvvRZM7JsfIBNQRxsjEiGlzOFDHcRDJBDYB
BfSCdUBhGJpkCQsTHAJNwLARDrHYCIcYfj0WbgnVJ3scXQ4YG2tWA+ODqRSL
1FAFAP8Xnkk=
                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycGTGWIxSk3jQm3nBTTNJxyIkz3B4+c3AvcchLPyLTvyKVFHmAw5zWG
nBwvExTYv0GV02BCAtNR5aaBxEqWAIEnE5MLqtx1QaCcbHLyge/3DJhE0SxU
hZrnpcKEIbeQC2GfDLovrsowQ6WEz2P6cWaLPFAmsuUCzlAYcgAAdfGm2Q==

                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {"\<\"(Other)\"\>", "13990"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], "}"}], "\[Rule]", 
      RowBox[{"{", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"1 column 1\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"Min\"\>", "0"},
              {"\<\"1st Qu\"\>", "2"},
              {"\<\"Median\"\>", "4"},
              {"\<\"Mean\"\>", "4.429479851386111`"},
              {"\<\"3rd Qu\"\>", "7"},
              {"\<\"Max\"\>", "9"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], "}"}]}]}], ",", 
    RowBox[{"\<\"testData\"\>", "\[Rule]", 
     RowBox[{
      RowBox[{"{", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"1 column 1\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycIqrVf4pTzYgzHKSfL6EuWXCAeuWpG97+45Rjf4pLrZ2S8jkvuJiNj
Hy65r9qMOTgdY8FogFPOnVHrB5T5eclyVLnpjIyrIKwrHoxss/4hy21mhIVo
DSMQ3EKW+5fIKPgRxPiuz8ily6j4ClnyoxWj04s///+vZ2Q0fMPIeBnFxi1A
oxwn3geGUMgaRsYaFLm/R4WAsmxsjIzMzIyMm9H8cdSFjZGBEQzUX2P48niF
O0iGo/4JjmAYegAARpi1tg==
                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycMLrDl45TbwdiLU66FcTVOuUQ8+mgjl4VTLoXRDKfcLDxyiYymcPa7
9YuXIctNh+u7HMTByMiEHBI7YHK5QBlGHUa+a8hy7GeB1N9eRsaap0+/GzDu
RMh9lWcsA1LPGBm3/wHSpixHkQzdxChx9///E4yMr4CcqzLyyI75pMFo/Pz/
33TGoL//b0gyTkTxxQMZRo7kGTsZGLubuRhrP6B68ZMbGyMU1KBJAcHtPAu7
yMhILt9HGFJDFgAA8ua6tQ==
                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycGWDLhlrNi6cUpx8AUhlOOiSUcl9QxBqZjuOSO49EHtM/yMQ6pXiYW
a1xyYYy43RmOxz6EvmNFTIwl2PUdk2diYUINI6A+iP9WMTFa/+9lXI1N3yqw
e5mssdkH1Lf60aoiJlR9csdBDCsWJmsgZkHVhwxR3HIc5Do4LEX14DE5qB7r
sHCMWIbpXIMlZIYuAAAiK560
                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycGnGBUfoZD6rcvE1MnDrlbTExMGbjlBG5gl/qZy8TkjUPbYaCRy3HI
5TExGX/GLZeLQwokt50cuVxGxo245CqZmCx/wjhvnz37jST3DOiHw1D2eVkm
piYkydciTEzFCCkmpmlIGncwMYntB9IHa8FSTPlIck+lgJK2traMTEwYcv9P
SIHFYHIXUZxagSy39zeK3M8chFwTqhQw6k9X84LkJKuv/8EVDkMOAAAce54E

                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycGPNXlOIZLzpOJqQWXnD0TU9xfHHIX4piYKn/ikHwowMTkffgrdsmd
TEDgewqr3A9HkGQCdo1/9vICJafgsPO5DhOT6EUckjVAjXXYpd5qMDExT8Mq
tcIaqC0Em8znfBaglOhULFLvzEBeiMXikuVVIPer9f3GkLmhyw7S1Pfy//s1
QGCqDAQwOTkmMDCzsNBlggGYHAMTJoDJJTDDhVjExcVd5gMB3MIp3TAwHavP
hywAAKHpkAk=
                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {
               GraphicsBox[
                TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/ycKTA3BLVdahlsuB4+c5A6cUvUGuLX5tuCWY+zBKXUXj5yb8DsIY+fO
m2hSv6wiQNS3WklGJp55qHJbmRYByfvFTNwh0zWYVqHIGYDlQplML////yNM
5B2ynD7j3f//FzF6gjmLGFDcZSAMJPz5noA5hYxzUeTCgIS7O5j9WIPjFap9
IDndbxB2J4pbljCG3gfaY5K285IxY9hdFLk/S4X4nL0ZmZiYuJhKHqB5/n8v
LxMTSI6j/hu61P//NydIS8d37DqLKTOUAQB7V8SG
                  "], {{0, 28.}, {28., 0}}, {0, 255},
                  ColorFunction->GrayLevel],
                 BoxForm`ImageTag[
                 "Byte", ColorSpace -> Automatic, Interleaving -> None],
                 Selectable->False],
                DefaultBaseStyle->"ImageGraphics",
                ImageSizeRaw->{28., 28.},
                PlotRange->{{0, 28.}, {0, 28.}}], "1"},
              {"\<\"(Other)\"\>", "5998"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], "}"}], "\[Rule]", 
      RowBox[{"{", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"1 column 1\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"Min\"\>", "0"},
              {"\<\"1st Qu\"\>", "2"},
              {"\<\"Median\"\>", "4"},
              {"\<\"Mean\"\>", "4.4292138574283815`"},
              {"\<\"3rd Qu\"\>", "7"},
              {"\<\"Max\"\>", "9"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], "}"}]}]}]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.9325093343733883`*^9},
 CellID->1800991659,ExpressionUUID->"e9cec85b-7a72-4773-8591-9d160da90767"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.9483677548301133`"}], ",", 
    RowBox[{"\<\"ConfusionMatrixPlot\"\>", "\[Rule]", 
     GraphicsBox[RasterBox[CompressedData["
1:eJytVntIU1EYv2aZjzIsnUKiVpiPosS5yVD6NHMzGT5SK5qVM+cyUEdLxbdI
moIRhsmkEpElmHO6MkIU0QLL1x8lKj42dy1d8+5cLcjSyYrC/+IQF3bh8t17
+Pide7/fg3MkPfeCxJYgCMed+89z6EjjemIBDV7FYQN5FgS9Gtrct5sC3Drx
91r/p0aLJBrZdwRNWreMzkMmcLq+pAi0X4GIqbzhPh8aZNKjldGvTcD3rc/o
1hiAY+dd/KOOBsfByInIBBpmXIfJslk8fhJi334gR+AWse6w7L8KafumOU1O
JBZHWZyeyydoWIqPnvo2qwNxlf4+uygLeHXOmSoxDWwup6tdheBpnDtr8/Qq
NDY9tMxGI8i5xYk6WWKE4LR8n44GHXYOKd0dBuNVBAFm45bHjBEi2y3x01w9
Fj+WTH7iO4rgbZID301GwaSCPaG89hnC46vn7YQ0xHw91aK9gqCCgiCuyIjF
eR/ecnn5rAm6BvP3S/1I4GVX1kgmCyBOeu7eXDMCamTbr3R8FRQf79p4v1rC
zodpP44XpjrB1fAGO/LSYxr6W1/80j7TwkAGzAwPibH9QuW4S0UPgmln29Dz
XhT0cFINZO0niFKgMJYTDVVHPeWFEhMEvuktQwsrjP+LacXh762g28w2CG7E
yXUNWXq4mPz8g9JFbrV9cTo5c9CSIObSIFL517s4IEivuRkrr/6CxUkM7N8O
qUVAVG14aIpWoSS383CqHu+vsjvy8qBNCvTAJ5tlJLBy5zme7YXY+TPNGYGX
9vjYIgK14kAKOUTBmtnxpZS9zDh/mPK+KymgfDkFAVIPingsPQhNpceWtmSM
9c/UF0z9iOMX1x85NGafI6ChjXTf80iog9EQBVu4JsF+D9PcZupHHF84PeP0
aaNWswo0CGpy3p2ozl+EmDWJUZWZjd2XKY/WynPc+v/8TRa5qgXk3M47QTDF
Yap/XL+1cIIXNzabDDTwXFsrUp21sCAS/GyjRFbLQ6bVWucTXP9vKIS/bw==

       "], {{0, 0}, {10, 10}}, {0, 1}],
      Epilog->{{
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["589", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 9.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "589", "\" examples of \"", "0", "\" correctly classified\""},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.9671592775041051`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9865996649916248`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9767827529021559`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{589, " examples of ", 0, " correctly classified"}], 
             Row[{"Precision = ", 0.9671592775041051}], 
             Row[{"Recall = ", 0.9865996649916248}], 
             Row[{"FScore = ", 0.9767827529021559}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 8.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "1", "\" misclassified as \"", "0"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 1, " misclassified as ", 0}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 7.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "3", "\" examples of \"", "2", "\" misclassified as \"", "0"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0049261083743842365`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.004862236628849271`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{3, " examples of ", 2, " misclassified as ", 0}], 
             Row[{"Column fraction = ", 0.0049261083743842365`}], 
             Row[{"Row fraction = ", 0.004862236628849271}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 6.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "3", "\" misclassified as \"", "0"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0016420361247947454`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0016181229773462784`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 3, " misclassified as ", 0}], 
             Row[{"Column fraction = ", 0.0016420361247947454`}], 
             Row[{"Row fraction = ", 0.0016181229773462784`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 5.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "4", "\" misclassified as \"", "0"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 4, " misclassified as ", 0}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 4.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "3", "\" examples of \"", "5", "\" misclassified as \"", "0"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0049261083743842365`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0055147058823529415`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{3, " examples of ", 5, " misclassified as ", 0}], 
             Row[{"Column fraction = ", 0.0049261083743842365`}], 
             Row[{"Row fraction = ", 0.0055147058823529415`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "7", "\" examples of \"", "6", "\" misclassified as \"", "0"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.011494252873563218`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.012433392539964476`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{7, " examples of ", 6, " misclassified as ", 0}], 
             Row[{"Column fraction = ", 0.011494252873563218`}], 
             Row[{"Row fraction = ", 0.012433392539964476`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "7", "\" misclassified as \"", "0"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0016420361247947454`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0016339869281045752`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 7, " misclassified as ", 0}], 
             Row[{"Column fraction = ", 0.0016420361247947454`}], 
             Row[{"Row fraction = ", 0.0016339869281045752`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "3", "\" examples of \"", "8", "\" misclassified as \"", "0"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0049261083743842365`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.005208333333333333`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{3, " examples of ", 8, " misclassified as ", 0}], 
             Row[{"Column fraction = ", 0.0049261083743842365`}], 
             Row[{"Row fraction = ", 0.005208333333333333}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "2", "\" examples of \"", "9", "\" misclassified as \"", "0"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.003284072249589491`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.003278688524590164`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{2, " examples of ", 9, " misclassified as ", 0}], 
             Row[{"Column fraction = ", 0.003284072249589491}], 
             Row[{"Row fraction = ", 0.003278688524590164}]}], 
           "Tooltip"]& ]}, {
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 9.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "0", "\" misclassified as \"", "1"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 0, " misclassified as ", 1}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["673", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 8.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "673", "\" examples of \"", "1", "\" correctly classified\""},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.9119241192411924`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9882525697503671`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9485553206483439`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{673, " examples of ", 1, " correctly classified"}], 
             Row[{"Precision = ", 0.9119241192411924}], 
             Row[{"Recall = ", 0.9882525697503671}], 
             Row[{"FScore = ", 0.9485553206483439}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 7.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "13", "\" examples of \"", "2", "\" misclassified as \"", 
                 "1"}, "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.017615176151761516`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.02106969205834684`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{13, " examples of ", 2, " misclassified as ", 1}], 
             Row[{"Column fraction = ", 0.017615176151761516`}], 
             Row[{"Row fraction = ", 0.02106969205834684}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 6.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "5", "\" examples of \"", "3", "\" misclassified as \"", "1"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.006775067750677507`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.008090614886731391`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{5, " examples of ", 3, " misclassified as ", 1}], 
             Row[{"Column fraction = ", 0.006775067750677507}], 
             Row[{"Row fraction = ", 0.008090614886731391}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["8", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 5.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "8", "\" examples of \"", "4", "\" misclassified as \"", "1"},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Column fraction = \"", "0.01084010840108401`"},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.013651877133105802`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{8, " examples of ", 4, " misclassified as ", 1}], 
             Row[{"Column fraction = ", 0.01084010840108401}], 
             Row[{"Row fraction = ", 0.013651877133105802`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 4.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "5", "\" examples of \"", "5", "\" misclassified as \"", "1"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.006775067750677507`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.009191176470588236`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{5, " examples of ", 5, " misclassified as ", 1}], 
             Row[{"Column fraction = ", 0.006775067750677507}], 
             Row[{"Row fraction = ", 0.009191176470588236}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "6", "\" misclassified as \"", "1"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0013550135501355014`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0017761989342806395`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 6, " misclassified as ", 1}], 
             Row[{"Column fraction = ", 0.0013550135501355014`}], 
             Row[{"Row fraction = ", 0.0017761989342806395`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "12", "\" examples of \"", "7", "\" misclassified as \"", 
                 "1"}, "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.016260162601626018`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0196078431372549`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{12, " examples of ", 7, " misclassified as ", 1}], 
             Row[{"Column fraction = ", 0.016260162601626018`}], 
             Row[{"Row fraction = ", 0.0196078431372549}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["19", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "19", "\" examples of \"", "8", "\" misclassified as \"", 
                 "1"}, "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.025745257452574527`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.03298611111111111`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{19, " examples of ", 8, " misclassified as ", 1}], 
             Row[{"Column fraction = ", 0.025745257452574527`}], 
             Row[{"Row fraction = ", 0.03298611111111111}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "2", "\" examples of \"", "9", "\" misclassified as \"", "1"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0027100271002710027`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.003278688524590164`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{2, " examples of ", 9, " misclassified as ", 1}], 
             Row[{"Column fraction = ", 0.0027100271002710027`}], 
             Row[{"Row fraction = ", 0.003278688524590164}]}], 
           "Tooltip"]& ]}, {
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {2.5, 9.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "0", "\" misclassified as \"", "2"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 0, " misclassified as ", 2}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {2.5, 8.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "4", "\" examples of \"", "1", "\" misclassified as \"", "2"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.006896551724137931`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.005873715124816446`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{4, " examples of ", 1, " misclassified as ", 2}], 
             Row[{"Column fraction = ", 0.006896551724137931}], 
             Row[{"Row fraction = ", 0.005873715124816446}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["571", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {2.5, 7.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "571", "\" examples of \"", "2", "\" correctly classified\""},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.9844827586206897`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9254457050243112`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9540517961570594`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{571, " examples of ", 2, " correctly classified"}], 
             Row[{"Precision = ", 0.9844827586206897}], 
             Row[{"Recall = ", 0.9254457050243112}], 
             Row[{"FScore = ", 0.9540517961570594}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {2.5, 6.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               TemplateBox[{
                "1", "\" example of \"", "3", "\" misclassified as \"", "2"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0017241379310344827`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0016181229773462784`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 3, " misclassified as ", 2}], 
             Row[{"Column fraction = ", 0.0017241379310344827`}], 
             Row[{"Row fraction = ", 0.0016181229773462784`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {2.5, 5.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "4", "\" misclassified as \"", "2"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0017241379310344827`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0017064846416382253`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 4, " misclassified as ", 2}], 
             Row[{"Column fraction = ", 0.0017241379310344827`}], 
             Row[{"Row fraction = ", 0.0017064846416382253`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {2.5, 4.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "5", "\" misclassified as \"", "2"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 5, " misclassified as ", 2}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "6", "\" misclassified as \"", "2"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 6, " misclassified as ", 2}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "7", "\" misclassified as \"", "2"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0017241379310344827`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0016339869281045752`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 7, " misclassified as ", 2}], 
             Row[{"Column fraction = ", 0.0017241379310344827`}], 
             Row[{"Row fraction = ", 0.0016339869281045752`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "2", "\" examples of \"", "8", "\" misclassified as \"", "2"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0034482758620689655`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.003472222222222222`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{2, " examples of ", 8, " misclassified as ", 2}], 
             Row[{"Column fraction = ", 0.0034482758620689655`}], 
             Row[{"Row fraction = ", 0.003472222222222222}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "9", "\" misclassified as \"", "2"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 9, " misclassified as ", 2}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {3.5, 9.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "0", "\" misclassified as \"", "3"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 0, " misclassified as ", 3}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {3.5, 8.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "1", "\" misclassified as \"", "3"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 1, " misclassified as ", 3}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {3.5, 7.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "7", "\" examples of \"", "2", "\" misclassified as \"", "3"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.011272141706924315`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.011345218800648298`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{7, " examples of ", 2, " misclassified as ", 3}], 
             Row[{"Column fraction = ", 0.011272141706924315`}], 
             Row[{"Row fraction = ", 0.011345218800648298`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["578", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {3.5, 6.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "578", "\" examples of \"", "3", "\" correctly classified\""},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.9307568438003221`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9352750809061489`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9330104923325262`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{578, " examples of ", 3, " correctly classified"}], 
             Row[{"Precision = ", 0.9307568438003221}], 
             Row[{"Recall = ", 0.9352750809061489}], 
             Row[{"FScore = ", 0.9330104923325262}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {3.5, 5.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "4", "\" misclassified as \"", "3"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 4, " misclassified as ", 3}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {3.5, 4.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "13", "\" examples of \"", "5", "\" misclassified as \"", 
                 "3"}, "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.020933977455716585`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.02389705882352941`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{13, " examples of ", 5, " misclassified as ", 3}], 
             Row[{"Column fraction = ", 0.020933977455716585`}], 
             Row[{"Row fraction = ", 0.02389705882352941}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "6", "\" misclassified as \"", "3"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 6, " misclassified as ", 3}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "7", "\" misclassified as \"", "3"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 7, " misclassified as ", 3}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["15", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "15", "\" examples of \"", "8", "\" misclassified as \"", 
                 "3"}, "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.024154589371980676`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.026041666666666668`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{15, " examples of ", 8, " misclassified as ", 3}], 
             Row[{"Column fraction = ", 0.024154589371980676`}], 
             Row[{"Row fraction = ", 0.026041666666666668`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["8", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "8", "\" examples of \"", "9", "\" misclassified as \"", "3"},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Column fraction = \"", "0.01288244766505636`"},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.013114754098360656`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{8, " examples of ", 9, " misclassified as ", 3}], 
             Row[{"Column fraction = ", 0.01288244766505636}], 
             Row[{"Row fraction = ", 0.013114754098360656`}]}], 
           "Tooltip"]& ]}, {
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {4.5, 9.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "0", "\" misclassified as \"", "4"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 0, " misclassified as ", 4}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {4.5, 8.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "1", "\" misclassified as \"", "4"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0017421602787456446`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0014684287812041115`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 1, " misclassified as ", 4}], 
             Row[{"Column fraction = ", 0.0017421602787456446`}], 
             Row[{"Row fraction = ", 0.0014684287812041115`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {4.5, 7.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "2", "\" misclassified as \"", "4"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 2, " misclassified as ", 4}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {4.5, 6.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "3", "\" misclassified as \"", "4"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 3, " misclassified as ", 4}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["561", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {4.5, 5.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "561", "\" examples of \"", "4", "\" correctly classified\""},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.9773519163763066`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9573378839590444`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9672413793103449`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{561, " examples of ", 4, " correctly classified"}], 
             Row[{"Precision = ", 0.9773519163763066}], 
             Row[{"Recall = ", 0.9573378839590444}], 
             Row[{"FScore = ", 0.9672413793103449}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {4.5, 4.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "5", "\" misclassified as \"", "4"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0017421602787456446`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.001838235294117647`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 5, " misclassified as ", 4}], 
             Row[{"Column fraction = ", 0.0017421602787456446`}], 
             Row[{"Row fraction = ", 0.001838235294117647}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "6", "\" misclassified as \"", "4"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 6, " misclassified as ", 4}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "2", "\" examples of \"", "7", "\" misclassified as \"", "4"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.003484320557491289`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0032679738562091504`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{2, " examples of ", 7, " misclassified as ", 4}], 
             Row[{"Column fraction = ", 0.003484320557491289}], 
             Row[{"Row fraction = ", 0.0032679738562091504`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "3", "\" examples of \"", "8", "\" misclassified as \"", "4"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.005226480836236934`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.005208333333333333`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{3, " examples of ", 8, " misclassified as ", 4}], 
             Row[{"Column fraction = ", 0.005226480836236934}], 
             Row[{"Row fraction = ", 0.005208333333333333}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "6", "\" examples of \"", "9", "\" misclassified as \"", "4"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.010452961672473868`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.009836065573770493`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{6, " examples of ", 9, " misclassified as ", 4}], 
             Row[{"Column fraction = ", 0.010452961672473868`}], 
             Row[{"Row fraction = ", 0.009836065573770493}]}], 
           "Tooltip"]& ]}, {
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {5.5, 9.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "0", "\" misclassified as \"", "5"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 0, " misclassified as ", 5}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {5.5, 8.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "1", "\" misclassified as \"", "5"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 1, " misclassified as ", 5}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {5.5, 7.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "2", "\" examples of \"", "2", "\" misclassified as \"", "5"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0038314176245210726`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0032414910858995136`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{2, " examples of ", 2, " misclassified as ", 5}], 
             Row[{"Column fraction = ", 0.0038314176245210726`}], 
             Row[{"Row fraction = ", 0.0032414910858995136`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {5.5, 6.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "6", "\" examples of \"", "3", "\" misclassified as \"", "5"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.011494252873563218`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.009708737864077669`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{6, " examples of ", 3, " misclassified as ", 5}], 
             Row[{"Column fraction = ", 0.011494252873563218`}], 
             Row[{"Row fraction = ", 0.009708737864077669}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {5.5, 5.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "4", "\" misclassified as \"", "5"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 4, " misclassified as ", 5}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["502", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {5.5, 4.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "502", "\" examples of \"", "5", "\" correctly classified\""},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.9616858237547893`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9227941176470589`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9418386491557222`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{502, " examples of ", 5, " correctly classified"}], 
             Row[{"Precision = ", 0.9616858237547893}], 
             Row[{"Recall = ", 0.9227941176470589}], 
             Row[{"FScore = ", 0.9418386491557222}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {5.5, 3.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "6", "\" misclassified as \"", "5"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0019157088122605363`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0017761989342806395`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 6, " misclassified as ", 5}], 
             Row[{"Column fraction = ", 0.0019157088122605363`}], 
             Row[{"Row fraction = ", 0.0017761989342806395`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {5.5, 2.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "7", "\" misclassified as \"", "5"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 7, " misclassified as ", 5}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["10", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {5.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "10", "\" examples of \"", "8", "\" misclassified as \"", 
                 "5"}, "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.019157088122605363`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.017361111111111112`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{10, " examples of ", 8, " misclassified as ", 5}], 
             Row[{"Column fraction = ", 0.019157088122605363`}], 
             Row[{"Row fraction = ", 0.017361111111111112`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {5.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "9", "\" misclassified as \"", "5"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0019157088122605363`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.001639344262295082`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 9, " misclassified as ", 5}], 
             Row[{"Column fraction = ", 0.0019157088122605363`}], 
             Row[{"Row fraction = ", 0.001639344262295082}]}], 
           "Tooltip"]& ]}, {
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {6.5, 9.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "6", "\" examples of \"", "0", "\" misclassified as \"", "6"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.010380622837370242`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.010050251256281407`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{6, " examples of ", 0, " misclassified as ", 6}], 
             Row[{"Column fraction = ", 0.010380622837370242`}], 
             Row[{"Row fraction = ", 0.010050251256281407`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {6.5, 8.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "1", "\" misclassified as \"", "6"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0017301038062283738`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0014684287812041115`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 1, " misclassified as ", 6}], 
             Row[{"Column fraction = ", 0.0017301038062283738`}], 
             Row[{"Row fraction = ", 0.0014684287812041115`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {6.5, 7.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "3", "\" examples of \"", "2", "\" misclassified as \"", "6"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.005190311418685121`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.004862236628849271`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{3, " examples of ", 2, " misclassified as ", 6}], 
             Row[{"Column fraction = ", 0.005190311418685121}], 
             Row[{"Row fraction = ", 0.004862236628849271}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {6.5, 6.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "3", "\" misclassified as \"", "6"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0017301038062283738`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0016181229773462784`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 3, " misclassified as ", 6}], 
             Row[{"Column fraction = ", 0.0017301038062283738`}], 
             Row[{"Row fraction = ", 0.0016181229773462784`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {6.5, 5.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "2", "\" examples of \"", "4", "\" misclassified as \"", "6"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0034602076124567475`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0034129692832764505`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{2, " examples of ", 4, " misclassified as ", 6}], 
             Row[{"Column fraction = ", 0.0034602076124567475`}], 
             Row[{"Row fraction = ", 0.0034129692832764505`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {6.5, 4.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "7", "\" examples of \"", "5", "\" misclassified as \"", "6"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.012110726643598616`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.012867647058823529`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{7, " examples of ", 5, " misclassified as ", 6}], 
             Row[{"Column fraction = ", 0.012110726643598616`}], 
             Row[{"Row fraction = ", 0.012867647058823529`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["554", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {6.5, 3.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "554", "\" examples of \"", "6", "\" correctly classified\""},
                 "RowDefault"]}, {
               TemplateBox[{"\"Precision = \"", "0.9584775086505191`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9840142095914742`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9710780017528484`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{554, " examples of ", 6, " correctly classified"}], 
             Row[{"Precision = ", 0.9584775086505191}], 
             Row[{"Recall = ", 0.9840142095914742}], 
             Row[{"FScore = ", 0.9710780017528484}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {6.5, 2.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "7", "\" misclassified as \"", "6"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 7, " misclassified as ", 6}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {6.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "4", "\" examples of \"", "8", "\" misclassified as \"", "6"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.006920415224913495`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.006944444444444444`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{4, " examples of ", 8, " misclassified as ", 6}], 
             Row[{"Column fraction = ", 0.006920415224913495}], 
             Row[{"Row fraction = ", 0.006944444444444444}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {6.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "9", "\" misclassified as \"", "6"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 9, " misclassified as ", 6}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {7.5, 9.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "0", "\" misclassified as \"", "7"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.001589825119236884`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0016750418760469012`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 0, " misclassified as ", 7}], 
             Row[{"Column fraction = ", 0.001589825119236884}], 
             Row[{"Row fraction = ", 0.0016750418760469012`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {7.5, 8.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "1", "\" misclassified as \"", "7"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.001589825119236884`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0014684287812041115`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 1, " misclassified as ", 7}], 
             Row[{"Column fraction = ", 0.001589825119236884}], 
             Row[{"Row fraction = ", 0.0014684287812041115`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["10", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {7.5, 7.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "10", "\" examples of \"", "2", "\" misclassified as \"", 
                 "7"}, "RowDefault"]}, {
               
               TemplateBox[{"\"Column fraction = \"", "0.01589825119236884`"},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.01620745542949757`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{10, " examples of ", 2, " misclassified as ", 7}], 
             Row[{"Column fraction = ", 0.01589825119236884}], 
             Row[{"Row fraction = ", 0.01620745542949757}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {7.5, 6.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "11", "\" examples of \"", "3", "\" misclassified as \"", 
                 "7"}, "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.017488076311605722`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.01779935275080906`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{11, " examples of ", 3, " misclassified as ", 7}], 
             Row[{"Column fraction = ", 0.017488076311605722`}], 
             Row[{"Row fraction = ", 0.01779935275080906}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {7.5, 5.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "2", "\" examples of \"", "4", "\" misclassified as \"", "7"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.003179650238473768`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0034129692832764505`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{2, " examples of ", 4, " misclassified as ", 7}], 
             Row[{"Column fraction = ", 0.003179650238473768}], 
             Row[{"Row fraction = ", 0.0034129692832764505`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {7.5, 4.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "2", "\" examples of \"", "5", "\" misclassified as \"", "7"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.003179650238473768`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.003676470588235294`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{2, " examples of ", 5, " misclassified as ", 7}], 
             Row[{"Column fraction = ", 0.003179650238473768}], 
             Row[{"Row fraction = ", 0.003676470588235294}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {7.5, 3.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "6", "\" misclassified as \"", "7"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 6, " misclassified as ", 7}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["585", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {7.5, 2.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "585", "\" examples of \"", "7", "\" correctly classified\""},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.9300476947535771`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9558823529411765`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9427880741337631`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{585, " examples of ", 7, " correctly classified"}], 
             Row[{"Precision = ", 0.9300476947535771}], 
             Row[{"Recall = ", 0.9558823529411765}], 
             Row[{"FScore = ", 0.9427880741337631}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {7.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "3", "\" examples of \"", "8", "\" misclassified as \"", "7"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0047694753577106515`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.005208333333333333`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{3, " examples of ", 8, " misclassified as ", 7}], 
             Row[{"Column fraction = ", 0.0047694753577106515`}], 
             Row[{"Row fraction = ", 0.005208333333333333}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["14", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {7.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "14", "\" examples of \"", "9", "\" misclassified as \"", 
                 "7"}, "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.022257551669316374`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.022950819672131147`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{14, " examples of ", 9, " misclassified as ", 7}], 
             Row[{"Column fraction = ", 0.022257551669316374`}], 
             Row[{"Row fraction = ", 0.022950819672131147`}]}], 
           "Tooltip"]& ]}, {
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {8.5, 9.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "0", "\" misclassified as \"", "8"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 0, " misclassified as ", 8}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {8.5, 8.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "1", "\" misclassified as \"", "8"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 1, " misclassified as ", 8}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {8.5, 7.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "4", "\" examples of \"", "2", "\" misclassified as \"", "8"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.007707129094412331`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.006482982171799027`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{4, " examples of ", 2, " misclassified as ", 8}], 
             Row[{"Column fraction = ", 0.007707129094412331}], 
             Row[{"Row fraction = ", 0.006482982171799027}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {8.5, 6.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "7", "\" examples of \"", "3", "\" misclassified as \"", "8"},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Column fraction = \"", "0.01348747591522158`"},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.011326860841423949`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{7, " examples of ", 3, " misclassified as ", 8}], 
             Row[{"Column fraction = ", 0.01348747591522158}], 
             Row[{"Row fraction = ", 0.011326860841423949`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {8.5, 5.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "4", "\" misclassified as \"", "8"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 4, " misclassified as ", 8}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {8.5, 4.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "2", "\" examples of \"", "5", "\" misclassified as \"", "8"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0038535645472061657`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.003676470588235294`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{2, " examples of ", 5, " misclassified as ", 8}], 
             Row[{"Column fraction = ", 0.0038535645472061657`}], 
             Row[{"Row fraction = ", 0.003676470588235294}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {8.5, 3.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "6", "\" misclassified as \"", "8"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 6, " misclassified as ", 8}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {8.5, 2.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "7", "\" misclassified as \"", "8"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 7, " misclassified as ", 8}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["505", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {8.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "505", "\" examples of \"", "8", "\" correctly classified\""},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.9730250481695568`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.8767361111111112`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9223744292237442`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{505, " examples of ", 8, " correctly classified"}], 
             Row[{"Precision = ", 0.9730250481695568}], 
             Row[{"Recall = ", 0.8767361111111112}], 
             Row[{"FScore = ", 0.9223744292237442}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {8.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "9", "\" misclassified as \"", "8"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0019267822736030828`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.001639344262295082`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 9, " misclassified as ", 8}], 
             Row[{"Column fraction = ", 0.0019267822736030828`}], 
             Row[{"Row fraction = ", 0.001639344262295082}]}], 
           "Tooltip"]& ]}, {
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {9.5, 9.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "0", "\" misclassified as \"", "9"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0015772870662460567`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0016750418760469012`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 0, " misclassified as ", 9}], 
             Row[{"Column fraction = ", 0.0015772870662460567`}], 
             Row[{"Row fraction = ", 0.0016750418760469012`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {9.5, 8.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "1", "\" example of \"", "1", "\" misclassified as \"", "9"}, 
                "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.0015772870662460567`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.0014684287812041115`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{1, " example of ", 1, " misclassified as ", 9}], 
             Row[{"Column fraction = ", 0.0015772870662460567`}], 
             Row[{"Row fraction = ", 0.0014684287812041115`}]}], 
           "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {9.5, 7.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "4", "\" examples of \"", "2", "\" misclassified as \"", "9"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.006309148264984227`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.006482982171799027`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{4, " examples of ", 2, " misclassified as ", 9}], 
             Row[{"Column fraction = ", 0.006309148264984227}], 
             Row[{"Row fraction = ", 0.006482982171799027}]}], "Tooltip"]& ], 
         
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["8", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {9.5, 6.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "8", "\" examples of \"", "3", "\" misclassified as \"", "9"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.012618296529968454`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.012944983818770227`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{8, " examples of ", 3, " misclassified as ", 9}], 
             Row[{"Column fraction = ", 0.012618296529968454`}], 
             Row[{"Row fraction = ", 0.012944983818770227`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {9.5, 5.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "12", "\" examples of \"", "4", "\" misclassified as \"", 
                 "9"}, "RowDefault"]}, {
               
               TemplateBox[{"\"Column fraction = \"", "0.01892744479495268`"},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.020477815699658702`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{12, " examples of ", 4, " misclassified as ", 9}], 
             Row[{"Column fraction = ", 0.01892744479495268}], 
             Row[{"Row fraction = ", 0.020477815699658702`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["9", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {9.5, 4.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "9", "\" examples of \"", "5", "\" misclassified as \"", "9"},
                 "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.014195583596214511`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.016544117647058824`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{9, " examples of ", 5, " misclassified as ", 9}], 
             Row[{"Column fraction = ", 0.014195583596214511`}], 
             Row[{"Row fraction = ", 0.016544117647058824`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {9.5, 3.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "0", "\" example of \"", "6", "\" misclassified as \"", "9"}, 
                "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
               TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{0, " example of ", 6, " misclassified as ", 9}], 
             Row[{"Column fraction = ", 0.}], 
             Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {9.5, 2.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "11", "\" examples of \"", "7", "\" misclassified as \"", 
                 "9"}, "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.017350157728706624`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.017973856209150325`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{11, " examples of ", 7, " misclassified as ", 9}], 
             Row[{"Column fraction = ", 0.017350157728706624`}], 
             Row[{"Row fraction = ", 0.017973856209150325`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {9.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "12", "\" examples of \"", "8", "\" misclassified as \"", 
                 "9"}, "RowDefault"]}, {
               TemplateBox[{"\"Column fraction = \"", "0.01892744479495268`"},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.020833333333333332`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{12, " examples of ", 8, " misclassified as ", 9}], 
             Row[{"Column fraction = ", 0.01892744479495268}], 
             Row[{"Row fraction = ", 0.020833333333333332`}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["576", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
               9.894839181882503], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {9.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "576", "\" examples of \"", "9", "\" correctly classified\""},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.9085173501577287`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9442622950819672`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9260450160771704`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{576, " examples of ", 9, " correctly classified"}], 
             Row[{"Precision = ", 0.9085173501577287}], 
             Row[{"Recall = ", 0.9442622950819672}], 
             Row[{"FScore = ", 0.9260450160771704}]}], "Tooltip"]& ]}, 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {10.5, 9.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "597", "\" example\"", "\"s\"", "\" of class \"", "0"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9865996649916248`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{597, " example", "s", " of class ", 0}], 
            Row[{"Recall = ", 0.9865996649916248}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {10.5, 8.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "681", "\" example\"", "\"s\"", "\" of class \"", "1"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9882525697503671`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{681, " example", "s", " of class ", 1}], 
            Row[{"Recall = ", 0.9882525697503671}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {10.5, 7.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "617", "\" example\"", "\"s\"", "\" of class \"", "2"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9254457050243112`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{617, " example", "s", " of class ", 2}], 
            Row[{"Recall = ", 0.9254457050243112}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {10.5, 6.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "618", "\" example\"", "\"s\"", "\" of class \"", "3"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9352750809061489`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{618, " example", "s", " of class ", 3}], 
            Row[{"Recall = ", 0.9352750809061489}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {10.5, 5.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "586", "\" example\"", "\"s\"", "\" of class \"", "4"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9573378839590444`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{586, " example", "s", " of class ", 4}], 
            Row[{"Recall = ", 0.9573378839590444}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {10.5, 4.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "544", "\" example\"", "\"s\"", "\" of class \"", "5"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9227941176470589`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{544, " example", "s", " of class ", 5}], 
            Row[{"Recall = ", 0.9227941176470589}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {10.5, 3.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "563", "\" example\"", "\"s\"", "\" of class \"", "6"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9840142095914742`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{563, " example", "s", " of class ", 6}], 
            Row[{"Recall = ", 0.9840142095914742}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {10.5, 2.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "612", "\" example\"", "\"s\"", "\" of class \"", "7"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9558823529411765`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{612, " example", "s", " of class ", 7}], 
            Row[{"Recall = ", 0.9558823529411765}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {10.5, 1.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "576", "\" example\"", "\"s\"", "\" of class \"", "8"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.8767361111111112`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{576, " example", "s", " of class ", 8}], 
            Row[{"Recall = ", 0.8767361111111112}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {10.5, 0.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "610", "\" example\"", "\"s\"", "\" of class \"", "9"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9442622950819672`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{610, " example", "s", " of class ", 9}], 
            Row[{"Recall = ", 0.9442622950819672}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "609", "\" example\"", "\"s\"", "\" classified as \"", "0"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9671592775041051`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{609, " example", "s", " classified as ", 0}], 
            Row[{"Precision = ", 0.9671592775041051}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "738", "\" example\"", "\"s\"", "\" classified as \"", "1"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9119241192411924`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{738, " example", "s", " classified as ", 1}], 
            Row[{"Precision = ", 0.9119241192411924}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "580", "\" example\"", "\"s\"", "\" classified as \"", "2"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9844827586206897`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{580, " example", "s", " classified as ", 2}], 
            Row[{"Precision = ", 0.9844827586206897}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "621", "\" example\"", "\"s\"", "\" classified as \"", "3"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9307568438003221`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{621, " example", "s", " classified as ", 3}], 
            Row[{"Precision = ", 0.9307568438003221}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {4.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "574", "\" example\"", "\"s\"", "\" classified as \"", "4"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9773519163763066`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{574, " example", "s", " classified as ", 4}], 
            Row[{"Precision = ", 0.9773519163763066}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {5.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "522", "\" example\"", "\"s\"", "\" classified as \"", "5"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9616858237547893`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{522, " example", "s", " classified as ", 5}], 
            Row[{"Precision = ", 0.9616858237547893}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {6.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "578", "\" example\"", "\"s\"", "\" classified as \"", "6"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9584775086505191`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{578, " example", "s", " classified as ", 6}], 
            Row[{"Precision = ", 0.9584775086505191}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {7.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "629", "\" example\"", "\"s\"", "\" classified as \"", "7"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9300476947535771`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{629, " example", "s", " classified as ", 7}], 
            Row[{"Precision = ", 0.9300476947535771}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {8.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "519", "\" example\"", "\"s\"", "\" classified as \"", "8"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9730250481695568`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{519, " example", "s", " classified as ", 8}], 
            Row[{"Precision = ", 0.9730250481695568}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {9.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "634", "\" example\"", "\"s\"", "\" classified as \"", "9"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9085173501577287`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{634, " example", "s", " classified as ", 9}], 
            Row[{"Precision = ", 0.9085173501577287}]}], "Tooltip"]& ]},
      Frame->True,
      FrameLabel->{
        FormBox["\"predicted class\"", TraditionalForm], 
        FormBox["\"actual class\"", TraditionalForm]},
      FrameTicks->{{{{9.5, 
           FormBox[
            RotationBox["0", BoxRotation -> 0.], TraditionalForm]}, {8.5, 
           FormBox[
            RotationBox["1", BoxRotation -> 0.], TraditionalForm]}, {7.5, 
           FormBox[
            RotationBox["2", BoxRotation -> 0.], TraditionalForm]}, {6.5, 
           FormBox[
            RotationBox["3", BoxRotation -> 0.], TraditionalForm]}, {5.5, 
           FormBox[
            RotationBox["4", BoxRotation -> 0.], TraditionalForm]}, {4.5, 
           FormBox[
            RotationBox["5", BoxRotation -> 0.], TraditionalForm]}, {3.5, 
           FormBox[
            RotationBox["6", BoxRotation -> 0.], TraditionalForm]}, {2.5, 
           FormBox[
            RotationBox["7", BoxRotation -> 0.], TraditionalForm]}, {1.5, 
           FormBox[
            RotationBox["8", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
           FormBox[
            RotationBox["9", BoxRotation -> 0.], TraditionalForm]}}, {{9.5, 
           FormBox["597", TraditionalForm]}, {8.5, 
           FormBox["681", TraditionalForm]}, {7.5, 
           FormBox["617", TraditionalForm]}, {6.5, 
           FormBox["618", TraditionalForm]}, {5.5, 
           FormBox["586", TraditionalForm]}, {4.5, 
           FormBox["544", TraditionalForm]}, {3.5, 
           FormBox["563", TraditionalForm]}, {2.5, 
           FormBox["612", TraditionalForm]}, {1.5, 
           FormBox["576", TraditionalForm]}, {0.5, 
           FormBox["610", TraditionalForm]}}}, {{{0.5, 
           FormBox[
            RotationBox["609", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {1.5, 
           FormBox[
            RotationBox["738", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {2.5, 
           FormBox[
            RotationBox["580", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {3.5, 
           FormBox[
            RotationBox["621", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {4.5, 
           FormBox[
            RotationBox["574", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {5.5, 
           FormBox[
            RotationBox["522", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {6.5, 
           FormBox[
            RotationBox["578", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {7.5, 
           FormBox[
            RotationBox["629", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {8.5, 
           FormBox[
            RotationBox["519", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {9.5, 
           FormBox[
            RotationBox["634", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}}, {{0.5, 
           FormBox[
            RotationBox["0", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {1.5, 
           FormBox[
            RotationBox["1", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {2.5, 
           FormBox[
            RotationBox["2", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {3.5, 
           FormBox[
            RotationBox["3", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {4.5, 
           FormBox[
            RotationBox["4", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {5.5, 
           FormBox[
            RotationBox["5", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {6.5, 
           FormBox[
            RotationBox["6", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {7.5, 
           FormBox[
            RotationBox["7", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {8.5, 
           FormBox[
            RotationBox["8", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {9.5, 
           FormBox[
            RotationBox["9", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}}}},
      FrameTicksStyle->12.894839181882503`,
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->304.73807018259004`,
      Method->{
       "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
        "DefaultBoundaryStyle" -> Automatic, 
        "DefaultGraphicsInteraction" -> {
         "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
          "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
        "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
        "RangePadding" -> Scaled[0.05]},
      PlotRangePadding->None]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.932509335986266*^9},
 CellID->484808348,ExpressionUUID->"44a67442-b8c3-4009-bd1d-376541c91dd6"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Here we plot the ROC curve for a specified digit: ", "Text",
 CellChangeTimes->{{3.735054060342519*^9, 3.735054078701771*^9}},
 CellID->113125381,ExpressionUUID->"e339de92-f602-499c-8fb5-983219b943f2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"p", "\[DoubleLongRightArrow]", 
   RowBox[{"ClConROCPlot", "[", 
    RowBox[{"\"\<ClassLabels\>\"", "\[Rule]", "5"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.7348813670018*^9, 3.734881386996503*^9}, {
  3.735332155817951*^9, 3.7353321594503613`*^9}, {3.735332363790749*^9, 
  3.735332364027652*^9}},
 CellLabel->"In[92]:=",
 CellID->775250872,ExpressionUUID->"37be80f3-7f4a-4e3a-882e-be65c2367582"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"ROC plot(s):\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{"5", "\[Rule]", 
    GraphicsBox[{
      {RGBColor[
        NCache[
         Rational[5, 9], 0.5555555555555556], 
        NCache[
         Rational[5, 9], 0.5555555555555556], 1], 
       LineBox[NCache[{{1, 1}, {Rational[23, 455], Rational[543, 544]}, {
          Rational[23, 455], Rational[543, 544]}, {
          Rational[23, 455], Rational[543, 544]}, {
          Rational[29, 1365], Rational[533, 544]}, {
          Rational[29, 1365], Rational[533, 544]}, {
          Rational[29, 1365], Rational[533, 544]}, {
          Rational[29, 1365], Rational[533, 544]}, {
          Rational[1, 84], Rational[523, 544]}, {
          Rational[1, 84], Rational[523, 544]}, {
          Rational[1, 84], Rational[523, 544]}, {
          Rational[1, 84], Rational[523, 544]}, {
          Rational[2, 273], Rational[513, 544]}, {
          Rational[2, 273], Rational[513, 544]}, {
          Rational[2, 273], Rational[513, 544]}, {
          Rational[2, 273], Rational[513, 544]}, {
          Rational[1, 273], Rational[503, 544]}, {
          Rational[1, 273], Rational[503, 544]}, {
          Rational[1, 273], Rational[503, 544]}, {
          Rational[1, 273], Rational[503, 544]}, {
          Rational[1, 546], Rational[491, 544]}, {
          Rational[1, 546], Rational[491, 544]}, {
          Rational[1, 546], Rational[491, 544]}, {
          Rational[1, 546], Rational[491, 544]}, {
          Rational[1, 910], Rational[467, 544]}, {
          Rational[1, 910], Rational[467, 544]}, {
          Rational[1, 910], Rational[467, 544]}, {
          Rational[1, 1365], Rational[111, 136]}, {
          Rational[1, 1365], Rational[111, 136]}, {
          Rational[1, 1365], Rational[111, 136]}, {
          Rational[1, 1365], Rational[111, 136]}, {
          Rational[1, 2730], Rational[25, 34]}, {
          Rational[1, 2730], Rational[25, 34]}, {
          Rational[1, 2730], Rational[25, 34]}, {
          Rational[1, 2730], Rational[25, 34]}, {
          Rational[1, 5460], Rational[41, 68]}, {
          Rational[1, 5460], Rational[41, 68]}, {
          Rational[1, 5460], Rational[41, 68]}, {
          Rational[1, 5460], Rational[41, 68]}, {0, 0}, {0, 0}}, {{1, 1}, {
          0.05054945054945055, 0.9981617647058824}, {0.05054945054945055, 
          0.9981617647058824}, {0.05054945054945055, 0.9981617647058824}, {
          0.021245421245421246`, 0.9797794117647058}, {0.021245421245421246`, 
          0.9797794117647058}, {0.021245421245421246`, 0.9797794117647058}, {
          0.021245421245421246`, 0.9797794117647058}, {0.011904761904761904`, 
          0.9613970588235294}, {0.011904761904761904`, 0.9613970588235294}, {
          0.011904761904761904`, 0.9613970588235294}, {0.011904761904761904`, 
          0.9613970588235294}, {0.007326007326007326, 0.9430147058823529}, {
          0.007326007326007326, 0.9430147058823529}, {0.007326007326007326, 
          0.9430147058823529}, {0.007326007326007326, 0.9430147058823529}, {
          0.003663003663003663, 0.9246323529411765}, {0.003663003663003663, 
          0.9246323529411765}, {0.003663003663003663, 0.9246323529411765}, {
          0.003663003663003663, 0.9246323529411765}, {0.0018315018315018315`, 
          0.9025735294117647}, {0.0018315018315018315`, 0.9025735294117647}, {
          0.0018315018315018315`, 0.9025735294117647}, {
          0.0018315018315018315`, 0.9025735294117647}, {0.001098901098901099, 
          0.8584558823529411}, {0.001098901098901099, 0.8584558823529411}, {
          0.001098901098901099, 0.8584558823529411}, {0.0007326007326007326, 
          0.8161764705882353}, {0.0007326007326007326, 0.8161764705882353}, {
          0.0007326007326007326, 0.8161764705882353}, {0.0007326007326007326, 
          0.8161764705882353}, {0.0003663003663003663, 0.7352941176470589}, {
          0.0003663003663003663, 0.7352941176470589}, {0.0003663003663003663, 
          0.7352941176470589}, {0.0003663003663003663, 0.7352941176470589}, {
          0.00018315018315018315`, 0.6029411764705882}, {
          0.00018315018315018315`, 0.6029411764705882}, {
          0.00018315018315018315`, 0.6029411764705882}, {
          0.00018315018315018315`, 0.6029411764705882}, {0, 0}, {0, 0}}]]}, 
      {RGBColor[
        NCache[
         Rational[1, 3], 0.3333333333333333], 
        NCache[
         Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
       LineBox[NCache[{{1, 1}, {Rational[23, 455], Rational[543, 544]}, {
          Rational[23, 455], Rational[543, 544]}, {
          Rational[23, 455], Rational[543, 544]}, {
          Rational[29, 1365], Rational[533, 544]}, {
          Rational[29, 1365], Rational[533, 544]}, {
          Rational[29, 1365], Rational[533, 544]}, {
          Rational[29, 1365], Rational[533, 544]}, {
          Rational[1, 84], Rational[523, 544]}, {
          Rational[1, 84], Rational[523, 544]}, {
          Rational[1, 84], Rational[523, 544]}, {
          Rational[1, 84], Rational[523, 544]}, {
          Rational[2, 273], Rational[513, 544]}, {
          Rational[2, 273], Rational[513, 544]}, {
          Rational[2, 273], Rational[513, 544]}, {
          Rational[2, 273], Rational[513, 544]}, {
          Rational[1, 273], Rational[503, 544]}, {
          Rational[1, 273], Rational[503, 544]}, {
          Rational[1, 273], Rational[503, 544]}, {
          Rational[1, 273], Rational[503, 544]}, {
          Rational[1, 546], Rational[491, 544]}, {
          Rational[1, 546], Rational[491, 544]}, {
          Rational[1, 546], Rational[491, 544]}, {
          Rational[1, 546], Rational[491, 544]}, {
          Rational[1, 910], Rational[467, 544]}, {
          Rational[1, 910], Rational[467, 544]}, {
          Rational[1, 910], Rational[467, 544]}, {
          Rational[1, 1365], Rational[111, 136]}, {
          Rational[1, 1365], Rational[111, 136]}, {
          Rational[1, 1365], Rational[111, 136]}, {
          Rational[1, 1365], Rational[111, 136]}, {
          Rational[1, 2730], Rational[25, 34]}, {
          Rational[1, 2730], Rational[25, 34]}, {
          Rational[1, 2730], Rational[25, 34]}, {
          Rational[1, 2730], Rational[25, 34]}, {
          Rational[1, 5460], Rational[41, 68]}, {
          Rational[1, 5460], Rational[41, 68]}, {
          Rational[1, 5460], Rational[41, 68]}, {
          Rational[1, 5460], Rational[41, 68]}, {0, 0}, {0, 0}}, {{1, 1}, {
          0.05054945054945055, 0.9981617647058824}, {0.05054945054945055, 
          0.9981617647058824}, {0.05054945054945055, 0.9981617647058824}, {
          0.021245421245421246`, 0.9797794117647058}, {0.021245421245421246`, 
          0.9797794117647058}, {0.021245421245421246`, 0.9797794117647058}, {
          0.021245421245421246`, 0.9797794117647058}, {0.011904761904761904`, 
          0.9613970588235294}, {0.011904761904761904`, 0.9613970588235294}, {
          0.011904761904761904`, 0.9613970588235294}, {0.011904761904761904`, 
          0.9613970588235294}, {0.007326007326007326, 0.9430147058823529}, {
          0.007326007326007326, 0.9430147058823529}, {0.007326007326007326, 
          0.9430147058823529}, {0.007326007326007326, 0.9430147058823529}, {
          0.003663003663003663, 0.9246323529411765}, {0.003663003663003663, 
          0.9246323529411765}, {0.003663003663003663, 0.9246323529411765}, {
          0.003663003663003663, 0.9246323529411765}, {0.0018315018315018315`, 
          0.9025735294117647}, {0.0018315018315018315`, 0.9025735294117647}, {
          0.0018315018315018315`, 0.9025735294117647}, {
          0.0018315018315018315`, 0.9025735294117647}, {0.001098901098901099, 
          0.8584558823529411}, {0.001098901098901099, 0.8584558823529411}, {
          0.001098901098901099, 0.8584558823529411}, {0.0007326007326007326, 
          0.8161764705882353}, {0.0007326007326007326, 0.8161764705882353}, {
          0.0007326007326007326, 0.8161764705882353}, {0.0007326007326007326, 
          0.8161764705882353}, {0.0003663003663003663, 0.7352941176470589}, {
          0.0003663003663003663, 0.7352941176470589}, {0.0003663003663003663, 
          0.7352941176470589}, {0.0003663003663003663, 0.7352941176470589}, {
          0.00018315018315018315`, 0.6029411764705882}, {
          0.00018315018315018315`, 0.6029411764705882}, {
          0.00018315018315018315`, 0.6029411764705882}, {
          0.00018315018315018315`, 0.6029411764705882}, {0, 0}, {0, 0}}]], {
        TagBox[
         TooltipBox[PointBox[{1, 1}],
          "0.`"],
         Annotation[#, 0., "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[23, 455], Rational[543, 544]}, {
            0.05054945054945055, 0.9981617647058824}]],
          "0.025`"],
         Annotation[#, 0.025, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[23, 455], Rational[543, 544]}, {
            0.05054945054945055, 0.9981617647058824}]],
          "0.05`"],
         Annotation[#, 0.05, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[23, 455], Rational[543, 544]}, {
            0.05054945054945055, 0.9981617647058824}]],
          "0.07500000000000001`"],
         Annotation[#, 0.07500000000000001, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[29, 1365], Rational[533, 544]}, {
            0.021245421245421246`, 0.9797794117647058}]],
          "0.1`"],
         Annotation[#, 0.1, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[29, 1365], Rational[533, 544]}, {
            0.021245421245421246`, 0.9797794117647058}]],
          "0.125`"],
         Annotation[#, 0.125, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[29, 1365], Rational[533, 544]}, {
            0.021245421245421246`, 0.9797794117647058}]],
          "0.15000000000000002`"],
         Annotation[#, 0.15000000000000002`, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[29, 1365], Rational[533, 544]}, {
            0.021245421245421246`, 0.9797794117647058}]],
          "0.17500000000000002`"],
         Annotation[#, 0.17500000000000002`, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 84], Rational[523, 544]}, {
            0.011904761904761904`, 0.9613970588235294}]],
          "0.2`"],
         Annotation[#, 0.2, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 84], Rational[523, 544]}, {
            0.011904761904761904`, 0.9613970588235294}]],
          "0.225`"],
         Annotation[#, 0.225, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 84], Rational[523, 544]}, {
            0.011904761904761904`, 0.9613970588235294}]],
          "0.25`"],
         Annotation[#, 0.25, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 84], Rational[523, 544]}, {
            0.011904761904761904`, 0.9613970588235294}]],
          "0.275`"],
         Annotation[#, 0.275, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[2, 273], Rational[513, 544]}, {
            0.007326007326007326, 0.9430147058823529}]],
          "0.30000000000000004`"],
         Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[2, 273], Rational[513, 544]}, {
            0.007326007326007326, 0.9430147058823529}]],
          "0.325`"],
         Annotation[#, 0.325, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[2, 273], Rational[513, 544]}, {
            0.007326007326007326, 0.9430147058823529}]],
          "0.35000000000000003`"],
         Annotation[#, 0.35000000000000003`, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[2, 273], Rational[513, 544]}, {
            0.007326007326007326, 0.9430147058823529}]],
          "0.375`"],
         Annotation[#, 0.375, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 273], Rational[503, 544]}, {
            0.003663003663003663, 0.9246323529411765}]],
          "0.4`"],
         Annotation[#, 0.4, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 273], Rational[503, 544]}, {
            0.003663003663003663, 0.9246323529411765}]],
          "0.42500000000000004`"],
         Annotation[#, 0.42500000000000004`, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 273], Rational[503, 544]}, {
            0.003663003663003663, 0.9246323529411765}]],
          "0.45`"],
         Annotation[#, 0.45, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 273], Rational[503, 544]}, {
            0.003663003663003663, 0.9246323529411765}]],
          "0.47500000000000003`"],
         Annotation[#, 0.47500000000000003`, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 546], Rational[491, 544]}, {
            0.0018315018315018315`, 0.9025735294117647}]],
          "0.5`"],
         Annotation[#, 0.5, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 546], Rational[491, 544]}, {
            0.0018315018315018315`, 0.9025735294117647}]],
          "0.525`"],
         Annotation[#, 0.525, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 546], Rational[491, 544]}, {
            0.0018315018315018315`, 0.9025735294117647}]],
          "0.55`"],
         Annotation[#, 0.55, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 546], Rational[491, 544]}, {
            0.0018315018315018315`, 0.9025735294117647}]],
          "0.5750000000000001`"],
         Annotation[#, 0.5750000000000001, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 910], Rational[467, 544]}, {
            0.001098901098901099, 0.8584558823529411}]],
          "0.6000000000000001`"],
         Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 910], Rational[467, 544]}, {
            0.001098901098901099, 0.8584558823529411}]],
          "0.625`"],
         Annotation[#, 0.625, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 910], Rational[467, 544]}, {
            0.001098901098901099, 0.8584558823529411}]],
          "0.65`"],
         Annotation[#, 0.65, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 1365], Rational[111, 136]}, {
            0.0007326007326007326, 0.8161764705882353}]],
          "0.675`"],
         Annotation[#, 0.675, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 1365], Rational[111, 136]}, {
            0.0007326007326007326, 0.8161764705882353}]],
          "0.7000000000000001`"],
         Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 1365], Rational[111, 136]}, {
            0.0007326007326007326, 0.8161764705882353}]],
          "0.7250000000000001`"],
         Annotation[#, 0.7250000000000001, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 1365], Rational[111, 136]}, {
            0.0007326007326007326, 0.8161764705882353}]],
          "0.75`"],
         Annotation[#, 0.75, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 2730], Rational[25, 34]}, {
            0.0003663003663003663, 0.7352941176470589}]],
          "0.775`"],
         Annotation[#, 0.775, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 2730], Rational[25, 34]}, {
            0.0003663003663003663, 0.7352941176470589}]],
          "0.8`"],
         Annotation[#, 0.8, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 2730], Rational[25, 34]}, {
            0.0003663003663003663, 0.7352941176470589}]],
          "0.8250000000000001`"],
         Annotation[#, 0.8250000000000001, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 2730], Rational[25, 34]}, {
            0.0003663003663003663, 0.7352941176470589}]],
          "0.8500000000000001`"],
         Annotation[#, 0.8500000000000001, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 5460], Rational[41, 68]}, {
            0.00018315018315018315`, 0.6029411764705882}]],
          "0.875`"],
         Annotation[#, 0.875, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 5460], Rational[41, 68]}, {
            0.00018315018315018315`, 0.6029411764705882}]],
          "0.9`"],
         Annotation[#, 0.9, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 5460], Rational[41, 68]}, {
            0.00018315018315018315`, 0.6029411764705882}]],
          "0.925`"],
         Annotation[#, 0.925, "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          PointBox[
           NCache[{Rational[1, 5460], Rational[41, 68]}, {
            0.00018315018315018315`, 0.6029411764705882}]],
          "0.9500000000000001`"],
         Annotation[#, 0.9500000000000001, "Tooltip"]& ], 
        TagBox[
         TooltipBox[PointBox[{0, 0}],
          "0.9750000000000001`"],
         Annotation[#, 0.9750000000000001, "Tooltip"]& ], 
        TagBox[
         TooltipBox[PointBox[{0, 0}],
          "1.`"],
         Annotation[#, 1., "Tooltip"]& ]}, 
       {GrayLevel[0], 
        InsetBox["0.`", {1, 1}, NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.025`", 
         NCache[{Rational[23, 455], Rational[543, 544]}, {0.05054945054945055,
           0.9981617647058824}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.05`", 
         NCache[{Rational[23, 455], Rational[543, 544]}, {0.05054945054945055,
           0.9981617647058824}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.07500000000000001`", 
         NCache[{Rational[23, 455], Rational[543, 544]}, {0.05054945054945055,
           0.9981617647058824}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.1`", 
         NCache[{Rational[29, 1365], Rational[533, 544]}, {
          0.021245421245421246`, 0.9797794117647058}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.125`", 
         NCache[{Rational[29, 1365], Rational[533, 544]}, {
          0.021245421245421246`, 0.9797794117647058}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.15000000000000002`", 
         NCache[{Rational[29, 1365], Rational[533, 544]}, {
          0.021245421245421246`, 0.9797794117647058}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.17500000000000002`", 
         NCache[{Rational[29, 1365], Rational[533, 544]}, {
          0.021245421245421246`, 0.9797794117647058}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.2`", 
         NCache[{Rational[1, 84], Rational[523, 544]}, {0.011904761904761904`,
           0.9613970588235294}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.225`", 
         NCache[{Rational[1, 84], Rational[523, 544]}, {0.011904761904761904`,
           0.9613970588235294}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.25`", 
         NCache[{Rational[1, 84], Rational[523, 544]}, {0.011904761904761904`,
           0.9613970588235294}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.275`", 
         NCache[{Rational[1, 84], Rational[523, 544]}, {0.011904761904761904`,
           0.9613970588235294}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.30000000000000004`", 
         NCache[{Rational[2, 273], Rational[513, 544]}, {0.007326007326007326,
           0.9430147058823529}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.325`", 
         NCache[{Rational[2, 273], Rational[513, 544]}, {0.007326007326007326,
           0.9430147058823529}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.35000000000000003`", 
         NCache[{Rational[2, 273], Rational[513, 544]}, {0.007326007326007326,
           0.9430147058823529}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.375`", 
         NCache[{Rational[2, 273], Rational[513, 544]}, {0.007326007326007326,
           0.9430147058823529}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.4`", 
         NCache[{Rational[1, 273], Rational[503, 544]}, {0.003663003663003663,
           0.9246323529411765}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.42500000000000004`", 
         NCache[{Rational[1, 273], Rational[503, 544]}, {0.003663003663003663,
           0.9246323529411765}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.45`", 
         NCache[{Rational[1, 273], Rational[503, 544]}, {0.003663003663003663,
           0.9246323529411765}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.47500000000000003`", 
         NCache[{Rational[1, 273], Rational[503, 544]}, {0.003663003663003663,
           0.9246323529411765}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.5`", 
         NCache[{Rational[1, 546], Rational[491, 544]}, {
          0.0018315018315018315`, 0.9025735294117647}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.525`", 
         NCache[{Rational[1, 546], Rational[491, 544]}, {
          0.0018315018315018315`, 0.9025735294117647}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.55`", 
         NCache[{Rational[1, 546], Rational[491, 544]}, {
          0.0018315018315018315`, 0.9025735294117647}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.5750000000000001`", 
         NCache[{Rational[1, 546], Rational[491, 544]}, {
          0.0018315018315018315`, 0.9025735294117647}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.6000000000000001`", 
         NCache[{Rational[1, 910], Rational[467, 544]}, {0.001098901098901099,
           0.8584558823529411}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.625`", 
         NCache[{Rational[1, 910], Rational[467, 544]}, {0.001098901098901099,
           0.8584558823529411}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.65`", 
         NCache[{Rational[1, 910], Rational[467, 544]}, {0.001098901098901099,
           0.8584558823529411}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.675`", 
         NCache[{Rational[1, 1365], Rational[111, 136]}, {
          0.0007326007326007326, 0.8161764705882353}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.7000000000000001`", 
         NCache[{Rational[1, 1365], Rational[111, 136]}, {
          0.0007326007326007326, 0.8161764705882353}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.7250000000000001`", 
         NCache[{Rational[1, 1365], Rational[111, 136]}, {
          0.0007326007326007326, 0.8161764705882353}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.75`", 
         NCache[{Rational[1, 1365], Rational[111, 136]}, {
          0.0007326007326007326, 0.8161764705882353}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.775`", 
         NCache[{Rational[1, 2730], Rational[25, 34]}, {0.0003663003663003663,
           0.7352941176470589}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.8`", 
         NCache[{Rational[1, 2730], Rational[25, 34]}, {0.0003663003663003663,
           0.7352941176470589}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.8250000000000001`", 
         NCache[{Rational[1, 2730], Rational[25, 34]}, {0.0003663003663003663,
           0.7352941176470589}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.8500000000000001`", 
         NCache[{Rational[1, 2730], Rational[25, 34]}, {0.0003663003663003663,
           0.7352941176470589}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.875`", 
         NCache[{Rational[1, 5460], Rational[41, 68]}, {
          0.00018315018315018315`, 0.6029411764705882}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.9`", 
         NCache[{Rational[1, 5460], Rational[41, 68]}, {
          0.00018315018315018315`, 0.6029411764705882}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.925`", 
         NCache[{Rational[1, 5460], Rational[41, 68]}, {
          0.00018315018315018315`, 0.6029411764705882}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.9500000000000001`", 
         NCache[{Rational[1, 5460], Rational[41, 68]}, {
          0.00018315018315018315`, 0.6029411764705882}], NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["0.9750000000000001`", {0, 0}, NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
        InsetBox["1.`", {0, 0}, NCache[
         ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]]}}},
     AspectRatio->1,
     Frame->True,
     FrameLabel->{
       FormBox[
        StyleBox[
        "\"FPR, false positive rate\"", Larger, Bold, StripOnInput -> False], 
        TraditionalForm], 
       FormBox[
        StyleBox[
        "\"TPR, true positive rate\"", Larger, Bold, StripOnInput -> False], 
        TraditionalForm]},
     GridLines->Automatic,
     ImageSize->Small]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.932509336940709*^9},
 CellID->620948118,ExpressionUUID->"f2f64a80-69bd-4d89-a975-9af2c566099b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conditional continuation", "Subsection",
 CellChangeTimes->{{3.7350549570939007`*^9, 3.7350549657469187`*^9}},
 CellID->2059309880,ExpressionUUID->"ee821825-5b55-4010-8672-dc5629da8c31"],

Cell[TextData[{
 "In this sub-section we show how the computations in a ",
 StyleBox["ClCon", "Program"],
 " pipeline can be stopped or continued based on a certain condition."
}], "Text",
 CellChangeTimes->{{3.7350549686653976`*^9, 3.735054996502391*^9}, {
  3.735169430080411*^9, 3.7351694524011917`*^9}, {3.735276194056602*^9, 
  3.7352761972962427`*^9}},
 CellID->1974698108,ExpressionUUID->"830f38a8-35c2-4386-8885-74dcf193e756"],

Cell[CellGroupData[{

Cell["\<\
The pipeline below makes a simple classifier \
(\[OpenCurlyDoubleQuote]LogisticRegression\[CloseCurlyDoubleQuote]) for the \
WineQuality data, and if the recall for the important label (\
\[OpenCurlyDoubleQuote]high\[CloseCurlyDoubleQuote]) is not large enough \
makes a more complicated classifier (\[OpenCurlyDoubleQuote]RandomForest\
\[CloseCurlyDoubleQuote]). The pipeline marks intermediate steps by echoing \
outcomes and messages.  \
\>", "Text",
 CellChangeTimes->{{3.735276205147047*^9, 3.735276235433097*^9}, {
  3.735277198394423*^9, 3.735277242134403*^9}, {3.7352772795525618`*^9, 
  3.735277362174526*^9}, {3.7353324020708237`*^9, 3.7353324026439257`*^9}, {
  3.7353325388612633`*^9, 3.7353325746706543`*^9}, {3.735332610164319*^9, 
  3.735332626038928*^9}},
 CellID->1538820418,ExpressionUUID->"ae0c9890-af58-4ee5-8751-a04d7a701b71"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "267", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"res", "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClConUnit", "[", 
     RowBox[{"dsWineQuality", "[", 
      RowBox[{"All", ",", " ", 
       RowBox[{
        RowBox[{"Join", "[", 
         RowBox[{"#", ",", 
          RowBox[{"<|", 
           RowBox[{"\"\<wineQuality\>\"", "\[Rule]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"#wineQuality", "\[GreaterEqual]", "7"}], ",", 
              "\"\<high\>\"", ",", "\"\<low\>\""}], "]"}]}], "|>"}]}], "]"}], 
        "&"}]}], "]"}], "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", 
    RowBox[{"ClConSplitData", "[", 
     RowBox[{"0.75", ",", "0.2"}], "]"}], "\[DoubleLongRightArrow]", 
    "\[IndentingNewLine]", "ClConSummarizeData", 
    RowBox[{"(*", " ", 
     RowBox[{"summarize", " ", "the", " ", "data"}], " ", "*)"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    RowBox[{"ClConMakeClassifier", "[", 
     RowBox[{"Method", "\[Rule]", "\"\<LogisticRegression\>\""}], "]"}], 
    RowBox[{"(*", " ", 
     RowBox[{"training", " ", "a", " ", "simple", " ", "classifier"}], " ", 
     "*)"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    RowBox[{"ClConROCPlot", "[", 
     RowBox[{"\"\<FPR\>\"", ",", "\"\<TPR\>\"", ",", 
      RowBox[{"\"\<ROCPointCallouts\>\"", "\[Rule]", "False"}]}], "]"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    RowBox[{"ClConClassifierMeasurements", "[", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Accuracy\>\"", ",", "\"\<Precision\>\"", ",", "\"\<Recall\>\"", 
       ",", "\"\<FalsePositiveRate\>\""}], "}"}], "]"}], 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "ClConEchoValue", 
    "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
    RowBox[{"ClConIfElse", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"\"\<Recall\>\"", ",", "\"\<high\>\""}], "]"}], ">", 
        "0.70"}], "&"}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "criteria", " ", "based", " ", "on", " ", "the", " ", "recall", " ", 
        "for", " ", "\"\<high\>\""}], " ", "*)"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ClConEcho", "[", 
       RowBox[{
       "\"\<Good recall for \\\"high\\\"!\>\"", ",", "\"\<Success:\>\""}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"ClConUnit", "[", "##", "]"}], "\[DoubleLongRightArrow]", 
        "\[IndentingNewLine]", 
        RowBox[{"ClConEcho", "[", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{
           "\"\<Recall for \\\"high\\\" not good enough... making a large \
random forest.\>\"", ",", 
            RowBox[{"Darker", "[", "Red", "]"}]}], "]"}], ",", 
          "\"\<Info:\>\""}], "]"}], "\[DoubleLongRightArrow]", 
        "\[IndentingNewLine]", 
        RowBox[{"ClConMakeClassifier", "[", 
         RowBox[{"Method", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\"\<RandomForest\>\"", ",", 
            RowBox[{"\"\<TreeNumber\>\"", "\[Rule]", "400"}]}], "}"}]}], 
         "]"}], 
        RowBox[{"(*", " ", 
         RowBox[{
         "training", " ", "a", " ", "complicated", " ", "classifier"}], " ", 
         "*)"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
        RowBox[{"ClConROCPlot", "[", 
         RowBox[{"\"\<FPR\>\"", ",", "\"\<TPR\>\"", ",", 
          RowBox[{"\"\<ROCPointCallouts\>\"", "\[Rule]", "False"}]}], "]"}], 
        "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
        RowBox[{"ClConClassifierMeasurements", "[", 
         RowBox[{"{", 
          RowBox[{
          "\"\<Accuracy\>\"", ",", "\"\<Precision\>\"", ",", "\"\<Recall\>\"",
            ",", "\"\<FalsePositiveRate\>\""}], "}"}], "]"}], 
        "\[DoubleLongRightArrow]", "\[IndentingNewLine]", "ClConEchoValue"}], 
       "&"}]}], "]"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.735171035427615*^9, 3.7351710601092377`*^9}, {
   3.735174491475122*^9, 3.735174492550161*^9}, {3.73517456443296*^9, 
   3.735174566284292*^9}, {3.735174604718449*^9, 3.735174640975379*^9}, {
   3.735174750945739*^9, 3.735174769203466*^9}, {3.735174829744253*^9, 
   3.735174833037322*^9}, {3.735174863525487*^9, 3.735174872379558*^9}, {
   3.73517492191505*^9, 3.735174996402755*^9}, {3.735246145302359*^9, 
   3.735246158697172*^9}, {3.73524627572268*^9, 3.7352464435940647`*^9}, {
   3.735246474255609*^9, 3.7352465094632874`*^9}, {3.735246564617667*^9, 
   3.735246565054001*^9}, {3.735246718419096*^9, 3.7352467258494463`*^9}, {
   3.735246823108102*^9, 3.735246838615452*^9}, {3.735246896443431*^9, 
   3.735246905041937*^9}, {3.735246967790922*^9, 3.735246973231982*^9}, {
   3.735247044270235*^9, 3.735247050552993*^9}, {3.735247153001713*^9, 
   3.73524715996167*^9}, 3.7352472726024*^9, 3.735247501506321*^9, {
   3.735254219138479*^9, 3.735254232163619*^9}, {3.7352542741632032`*^9, 
   3.735254351224152*^9}, {3.735276029918695*^9, 3.735276050897812*^9}, {
   3.735276083799663*^9, 3.735276094166586*^9}, {3.735276132508252*^9, 
   3.73527615049496*^9}, {3.735277386762308*^9, 3.735277387221336*^9}, {
   3.735278311145199*^9, 3.73527832169466*^9}, {3.7352783581189537`*^9, 
   3.7352783977031116`*^9}, {3.735279602664134*^9, 3.735279616837442*^9}, {
   3.735332437985414*^9, 3.7353325156879997`*^9}, {3.735332590782696*^9, 
   3.7353326018922462`*^9}, 3.932506824311347*^9},
 CellLabel->"In[93]:=",
 CellID->809204505,ExpressionUUID->"3c573b1c-fed5-4adf-81c5-f51bf51c9283"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"summaries:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\<\"trainingData\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       TagBox[GridBox[{
          {
           StyleBox["\<\"1 RowID\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"1\"\>", "12"},
              {"\<\"10\"\>", "12"},
              {"\<\"100\"\>", "12"},
              {"\<\"1000\"\>", "12"},
              {"\<\"1001\"\>", "12"},
              {"\<\"1002\"\>", "12"},
              {"\<\"(Other)\"\>", "35174"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], ",", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"2 Variable\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"alcohol\"\>", "2938"},
              {"\<\"chlorides\"\>", "2938"},
              {"\<\"density\"\>", "2938"},
              {"\<\"fixed acidity\"\>", "2938"},
              {"\<\"free sulfur dioxide\"\>", "2938"},
              {"\<\"pH\"\>", "2938"},
              {"\<\"(Other)\"\>", "17618"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], ",", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"3 Value\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"low\"\>", "2302"},
              {"\<\"high\"\>", "636"},
              {"0.28`", "340"},
              {"0.3`", "314"},
              {"0.32`", "305"},
              {"0.26`", "284"},
              {"\<\"(Other)\"\>", "31065"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"]}], "}"}]}], ",", 
    RowBox[{"\<\"testData\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       TagBox[GridBox[{
          {
           StyleBox["\<\"1 RowID\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"1\"\>", "12"},
              {"\<\"10\"\>", "12"},
              {"\<\"100\"\>", "12"},
              {"\<\"1000\"\>", "12"},
              {"\<\"1001\"\>", "12"},
              {"\<\"1002\"\>", "12"},
              {"\<\"(Other)\"\>", "14621"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], ",", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"2 Variable\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"alcohol\"\>", "1225"},
              {"\<\"chlorides\"\>", "1225"},
              {"\<\"density\"\>", "1225"},
              {"\<\"fixed acidity\"\>", "1225"},
              {"\<\"free sulfur dioxide\"\>", "1225"},
              {"\<\"pH\"\>", "1225"},
              {"\<\"(Other)\"\>", "7343"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], ",", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"3 Value\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"low\"\>", "960"},
              {"\<\"high\"\>", "265"},
              {"0.3`", "140"},
              {"0.28`", "133"},
              {"0.27`", "117"},
              {"0.32`", "117"},
              {"\<\"(Other)\"\>", "12961"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"]}], "}"}]}], ",", 
    RowBox[{"\<\"validationData\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       TagBox[GridBox[{
          {
           StyleBox["\<\"1 RowID\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"1\"\>", "12"},
              {"\<\"10\"\>", "12"},
              {"\<\"100\"\>", "12"},
              {"\<\"101\"\>", "12"},
              {"\<\"102\"\>", "12"},
              {"\<\"103\"\>", "12"},
              {"\<\"(Other)\"\>", "8746"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], ",", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"2 Variable\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"alcohol\"\>", "735"},
              {"\<\"chlorides\"\>", "735"},
              {"\<\"density\"\>", "735"},
              {"\<\"fixed acidity\"\>", "735"},
              {"\<\"free sulfur dioxide\"\>", "735"},
              {"\<\"pH\"\>", "735"},
              {"\<\"(Other)\"\>", "4408"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"], ",", 
       TagBox[GridBox[{
          {
           StyleBox["\<\"3 Value\"\>",
            StripOnInput->False,
            LineColor->RGBColor[0, 0, 1],
            FrontFaceColor->RGBColor[0, 0, 1],
            BackFaceColor->RGBColor[0, 0, 1],
            GraphicsColor->RGBColor[0, 0, 1],
            FontFamily->"Times",
            FontColor->RGBColor[0, 0, 1]]},
          {
           TagBox[GridBox[{
              {"\<\"low\"\>", "576"},
              {"\<\"high\"\>", "159"},
              {"0.28`", "85"},
              {"0.3`", "82"},
              {"0.34`", "75"},
              {"0.32`", "71"},
              {"\<\"(Other)\"\>", "7770"}
             },
             AutoDelete->False,
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"]}], "}"}]}]}], "}"}]}]], "Echo",
 CellChangeTimes->{3.932509337077548*^9},
 CellID->1651978453,ExpressionUUID->"c0357a39-8f11-4b14-b8b1-cebc19d7b630"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"ROC plot(s):\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"high\"\>", "\[Rule]", 
     GraphicsBox[{
       {RGBColor[
         NCache[
          Rational[5, 9], 0.5555555555555556], 
         NCache[
          Rational[5, 9], 0.5555555555555556], 1], 
        LineBox[NCache[{{1, 1}, {Rational[73, 80], Rational[264, 265]}, {
           Rational[31, 40], Rational[257, 265]}, {
           Rational[631, 960], Rational[241, 265]}, {
           Rational[271, 480], Rational[224, 265]}, {
           Rational[467, 960], Rational[218, 265]}, {
           Rational[67, 160], Rational[207, 265]}, {
           Rational[359, 960], Rational[40, 53]}, {
           Rational[53, 160], Rational[192, 265]}, {
           Rational[55, 192], Rational[37, 53]}, {
           Rational[81, 320], Rational[176, 265]}, {
           Rational[107, 480], Rational[164, 265]}, {
           Rational[47, 240], Rational[156, 265]}, {
           Rational[79, 480], Rational[142, 265]}, {
           Rational[139, 960], Rational[27, 53]}, {
           Rational[39, 320], Rational[123, 265]}, {
           Rational[97, 960], Rational[109, 265]}, {
           Rational[79, 960], Rational[20, 53]}, {
           Rational[23, 320], Rational[92, 265]}, {
           Rational[31, 480], Rational[77, 265]}, {
           Rational[11, 192], Rational[64, 265]}, {
           Rational[41, 960], Rational[59, 265]}, {
           Rational[7, 192], Rational[52, 265]}, {
           Rational[29, 960], Rational[46, 265]}, {
           Rational[1, 48], Rational[41, 265]}, {
           Rational[17, 960], Rational[7, 53]}, {
           Rational[11, 960], Rational[29, 265]}, {
           Rational[1, 160], Rational[4, 53]}, {
           Rational[1, 480], Rational[16, 265]}, {
           Rational[1, 960], Rational[8, 265]}, {
           Rational[1, 960], Rational[4, 265]}, {0, Rational[1, 265]}, {
           0, Rational[1, 265]}, {0, Rational[1, 265]}, {
           0, Rational[1, 265]}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}}, {{1, 1}, {0.9125, 0.9962264150943396}, {0.775, 
           0.969811320754717}, {0.6572916666666667, 0.909433962264151}, {
           0.5645833333333333, 0.8452830188679246}, {0.4864583333333333, 
           0.8226415094339623}, {0.41875, 0.7811320754716982}, {
           0.37395833333333334`, 0.7547169811320755}, {0.33125, 
           0.7245283018867924}, {0.2864583333333333, 0.6981132075471698}, {
           0.253125, 0.6641509433962264}, {0.22291666666666668`, 
           0.6188679245283019}, {0.19583333333333333`, 0.5886792452830188}, {
           0.16458333333333333`, 0.5358490566037736}, {0.14479166666666668`, 
           0.5094339622641509}, {0.121875, 0.4641509433962264}, {
           0.10104166666666667`, 0.41132075471698115`}, {0.08229166666666667, 
           0.37735849056603776`}, {0.071875, 0.3471698113207547}, {
           0.06458333333333334, 0.29056603773584905`}, {0.057291666666666664`,
            0.24150943396226415`}, {0.042708333333333334`, 
           0.22264150943396227`}, {0.036458333333333336`, 
           0.19622641509433963`}, {0.030208333333333334`, 
           0.17358490566037735`}, {0.020833333333333332`, 
           0.15471698113207547`}, {0.017708333333333333`, 
           0.1320754716981132}, {0.011458333333333333`, 
           0.10943396226415095`}, {0.00625, 0.07547169811320754}, {
           0.0020833333333333333`, 0.06037735849056604}, {
           0.0010416666666666667`, 0.03018867924528302}, {
           0.0010416666666666667`, 0.01509433962264151}, {
           0, 0.0037735849056603774`}, {0, 0.0037735849056603774`}, {
           0, 0.0037735849056603774`}, {0, 0.0037735849056603774`}, {0, 0}, {
           0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}]]}, 
       {RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 
         NCache[
          Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
        LineBox[NCache[{{1, 1}, {Rational[73, 80], Rational[264, 265]}, {
           Rational[31, 40], Rational[257, 265]}, {
           Rational[631, 960], Rational[241, 265]}, {
           Rational[271, 480], Rational[224, 265]}, {
           Rational[467, 960], Rational[218, 265]}, {
           Rational[67, 160], Rational[207, 265]}, {
           Rational[359, 960], Rational[40, 53]}, {
           Rational[53, 160], Rational[192, 265]}, {
           Rational[55, 192], Rational[37, 53]}, {
           Rational[81, 320], Rational[176, 265]}, {
           Rational[107, 480], Rational[164, 265]}, {
           Rational[47, 240], Rational[156, 265]}, {
           Rational[79, 480], Rational[142, 265]}, {
           Rational[139, 960], Rational[27, 53]}, {
           Rational[39, 320], Rational[123, 265]}, {
           Rational[97, 960], Rational[109, 265]}, {
           Rational[79, 960], Rational[20, 53]}, {
           Rational[23, 320], Rational[92, 265]}, {
           Rational[31, 480], Rational[77, 265]}, {
           Rational[11, 192], Rational[64, 265]}, {
           Rational[41, 960], Rational[59, 265]}, {
           Rational[7, 192], Rational[52, 265]}, {
           Rational[29, 960], Rational[46, 265]}, {
           Rational[1, 48], Rational[41, 265]}, {
           Rational[17, 960], Rational[7, 53]}, {
           Rational[11, 960], Rational[29, 265]}, {
           Rational[1, 160], Rational[4, 53]}, {
           Rational[1, 480], Rational[16, 265]}, {
           Rational[1, 960], Rational[8, 265]}, {
           Rational[1, 960], Rational[4, 265]}, {0, Rational[1, 265]}, {
           0, Rational[1, 265]}, {0, Rational[1, 265]}, {
           0, Rational[1, 265]}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}}, {{1, 1}, {0.9125, 0.9962264150943396}, {0.775, 
           0.969811320754717}, {0.6572916666666667, 0.909433962264151}, {
           0.5645833333333333, 0.8452830188679246}, {0.4864583333333333, 
           0.8226415094339623}, {0.41875, 0.7811320754716982}, {
           0.37395833333333334`, 0.7547169811320755}, {0.33125, 
           0.7245283018867924}, {0.2864583333333333, 0.6981132075471698}, {
           0.253125, 0.6641509433962264}, {0.22291666666666668`, 
           0.6188679245283019}, {0.19583333333333333`, 0.5886792452830188}, {
           0.16458333333333333`, 0.5358490566037736}, {0.14479166666666668`, 
           0.5094339622641509}, {0.121875, 0.4641509433962264}, {
           0.10104166666666667`, 0.41132075471698115`}, {0.08229166666666667, 
           0.37735849056603776`}, {0.071875, 0.3471698113207547}, {
           0.06458333333333334, 0.29056603773584905`}, {0.057291666666666664`,
            0.24150943396226415`}, {0.042708333333333334`, 
           0.22264150943396227`}, {0.036458333333333336`, 
           0.19622641509433963`}, {0.030208333333333334`, 
           0.17358490566037735`}, {0.020833333333333332`, 
           0.15471698113207547`}, {0.017708333333333333`, 
           0.1320754716981132}, {0.011458333333333333`, 
           0.10943396226415095`}, {0.00625, 0.07547169811320754}, {
           0.0020833333333333333`, 0.06037735849056604}, {
           0.0010416666666666667`, 0.03018867924528302}, {
           0.0010416666666666667`, 0.01509433962264151}, {
           0, 0.0037735849056603774`}, {0, 0.0037735849056603774`}, {
           0, 0.0037735849056603774`}, {0, 0.0037735849056603774`}, {0, 0}, {
           0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}]], {
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.`"],
          Annotation[#, 0., "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[73, 80], Rational[264, 265]}, {0.9125, 
             0.9962264150943396}]],
           "0.025`"],
          Annotation[#, 0.025, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[31, 40], Rational[257, 265]}, {0.775, 
             0.969811320754717}]],
           "0.05`"],
          Annotation[#, 0.05, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[631, 960], Rational[241, 265]}, {
             0.6572916666666667, 0.909433962264151}]],
           "0.07500000000000001`"],
          Annotation[#, 0.07500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[271, 480], Rational[224, 265]}, {
             0.5645833333333333, 0.8452830188679246}]],
           "0.1`"],
          Annotation[#, 0.1, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[467, 960], Rational[218, 265]}, {
             0.4864583333333333, 0.8226415094339623}]],
           "0.125`"],
          Annotation[#, 0.125, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[67, 160], Rational[207, 265]}, {0.41875, 
             0.7811320754716982}]],
           "0.15000000000000002`"],
          Annotation[#, 0.15000000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[359, 960], Rational[40, 53]}, {
             0.37395833333333334`, 0.7547169811320755}]],
           "0.17500000000000002`"],
          Annotation[#, 0.17500000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[53, 160], Rational[192, 265]}, {0.33125, 
             0.7245283018867924}]],
           "0.2`"],
          Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[55, 192], Rational[37, 53]}, {0.2864583333333333,
              0.6981132075471698}]],
           "0.225`"],
          Annotation[#, 0.225, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[81, 320], Rational[176, 265]}, {0.253125, 
             0.6641509433962264}]],
           "0.25`"],
          Annotation[#, 0.25, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[107, 480], Rational[164, 265]}, {
             0.22291666666666668`, 0.6188679245283019}]],
           "0.275`"],
          Annotation[#, 0.275, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[47, 240], Rational[156, 265]}, {
             0.19583333333333333`, 0.5886792452830188}]],
           "0.30000000000000004`"],
          Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[79, 480], Rational[142, 265]}, {
             0.16458333333333333`, 0.5358490566037736}]],
           "0.325`"],
          Annotation[#, 0.325, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[139, 960], Rational[27, 53]}, {
             0.14479166666666668`, 0.5094339622641509}]],
           "0.35000000000000003`"],
          Annotation[#, 0.35000000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[39, 320], Rational[123, 265]}, {0.121875, 
             0.4641509433962264}]],
           "0.375`"],
          Annotation[#, 0.375, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[97, 960], Rational[109, 265]}, {
             0.10104166666666667`, 0.41132075471698115`}]],
           "0.4`"],
          Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[79, 960], Rational[20, 53]}, {
             0.08229166666666667, 0.37735849056603776`}]],
           "0.42500000000000004`"],
          Annotation[#, 0.42500000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[23, 320], Rational[92, 265]}, {0.071875, 
             0.3471698113207547}]],
           "0.45`"],
          Annotation[#, 0.45, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[31, 480], Rational[77, 265]}, {
             0.06458333333333334, 0.29056603773584905`}]],
           "0.47500000000000003`"],
          Annotation[#, 0.47500000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[11, 192], Rational[64, 265]}, {
             0.057291666666666664`, 0.24150943396226415`}]],
           "0.5`"],
          Annotation[#, 0.5, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[41, 960], Rational[59, 265]}, {
             0.042708333333333334`, 0.22264150943396227`}]],
           "0.525`"],
          Annotation[#, 0.525, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[7, 192], Rational[52, 265]}, {
             0.036458333333333336`, 0.19622641509433963`}]],
           "0.55`"],
          Annotation[#, 0.55, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[29, 960], Rational[46, 265]}, {
             0.030208333333333334`, 0.17358490566037735`}]],
           "0.5750000000000001`"],
          Annotation[#, 0.5750000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 48], Rational[41, 265]}, {
             0.020833333333333332`, 0.15471698113207547`}]],
           "0.6000000000000001`"],
          Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[17, 960], Rational[7, 53]}, {
             0.017708333333333333`, 0.1320754716981132}]],
           "0.625`"],
          Annotation[#, 0.625, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[11, 960], Rational[29, 265]}, {
             0.011458333333333333`, 0.10943396226415095`}]],
           "0.65`"],
          Annotation[#, 0.65, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 160], Rational[4, 53]}, {0.00625, 
             0.07547169811320754}]],
           "0.675`"],
          Annotation[#, 0.675, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 480], Rational[16, 265]}, {
             0.0020833333333333333`, 0.06037735849056604}]],
           "0.7000000000000001`"],
          Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 960], Rational[8, 265]}, {
             0.0010416666666666667`, 0.03018867924528302}]],
           "0.7250000000000001`"],
          Annotation[#, 0.7250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 960], Rational[4, 265]}, {
             0.0010416666666666667`, 0.01509433962264151}]],
           "0.75`"],
          Annotation[#, 0.75, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{0, Rational[1, 265]}, {0, 0.0037735849056603774`}]],
           "0.775`"],
          Annotation[#, 0.775, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{0, Rational[1, 265]}, {0, 0.0037735849056603774`}]],
           "0.8`"],
          Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{0, Rational[1, 265]}, {0, 0.0037735849056603774`}]],
           "0.8250000000000001`"],
          Annotation[#, 0.8250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{0, Rational[1, 265]}, {0, 0.0037735849056603774`}]],
           "0.8500000000000001`"],
          Annotation[#, 0.8500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.875`"],
          Annotation[#, 0.875, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9`"],
          Annotation[#, 0.9, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.925`"],
          Annotation[#, 0.925, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9500000000000001`"],
          Annotation[#, 0.9500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9750000000000001`"],
          Annotation[#, 0.9750000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "1.`"],
          Annotation[#, 1., "Tooltip"]& ]}, 
        {GrayLevel[0]}}},
      AspectRatio->1,
      Frame->True,
      FrameLabel->{
        FormBox[
         StyleBox[
         "\"FPR, false positive rate\"", Larger, Bold, StripOnInput -> False],
          TraditionalForm], 
        FormBox[
         StyleBox[
         "\"TPR, true positive rate\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm]},
      GridLines->Automatic,
      ImageSize->Small]}], ",", 
    RowBox[{"\<\"low\"\>", "\[Rule]", 
     GraphicsBox[{
       {RGBColor[
         NCache[
          Rational[5, 9], 0.5555555555555556], 
         NCache[
          Rational[5, 9], 0.5555555555555556], 1], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           Rational[264, 265], 1}, {Rational[264, 265], 1}, {
           Rational[264, 265], 1}, {Rational[264, 265], 1}, {
           Rational[261, 265], Rational[959, 960]}, {
           Rational[257, 265], Rational[959, 960]}, {
           Rational[249, 265], Rational[479, 480]}, {
           Rational[49, 53], Rational[159, 160]}, {
           Rational[236, 265], Rational[949, 960]}, {
           Rational[46, 53], Rational[943, 960]}, {
           Rational[224, 265], Rational[47, 48]}, {
           Rational[219, 265], Rational[931, 960]}, {
           Rational[213, 265], Rational[185, 192]}, {
           Rational[206, 265], Rational[919, 960]}, {
           Rational[201, 265], Rational[181, 192]}, {
           Rational[188, 265], Rational[449, 480]}, {
           Rational[173, 265], Rational[297, 320]}, {
           Rational[33, 53], Rational[881, 960]}, {
           Rational[156, 265], Rational[863, 960]}, {
           Rational[142, 265], Rational[281, 320]}, {
           Rational[26, 53], Rational[821, 960]}, {
           Rational[123, 265], Rational[401, 480]}, {
           Rational[109, 265], Rational[193, 240]}, {
           Rational[101, 265], Rational[373, 480]}, {
           Rational[89, 265], Rational[239, 320]}, {
           Rational[16, 53], Rational[137, 192]}, {
           Rational[73, 265], Rational[107, 160]}, {
           Rational[13, 53], Rational[601, 960]}, {
           Rational[58, 265], Rational[93, 160]}, {
           Rational[47, 265], Rational[493, 960]}, {
           Rational[41, 265], Rational[209, 480]}, {
           Rational[24, 265], Rational[329, 960]}, {
           Rational[8, 265], Rational[9, 40]}, {
           Rational[1, 265], Rational[7, 80]}, {0, 0}}, {{1, 1}, {1, 1}, {1, 
           1}, {1, 1}, {1, 1}, {1, 1}, {0.9962264150943396, 1}, {
           0.9962264150943396, 1}, {0.9962264150943396, 1}, {
           0.9962264150943396, 1}, {0.9849056603773585, 0.9989583333333333}, {
           0.969811320754717, 0.9989583333333333}, {0.939622641509434, 
           0.9979166666666667}, {0.9245283018867925, 0.99375}, {
           0.8905660377358491, 0.9885416666666667}, {0.8679245283018868, 
           0.9822916666666667}, {0.8452830188679246, 0.9791666666666666}, {
           0.8264150943396227, 0.9697916666666667}, {0.8037735849056604, 
           0.9635416666666666}, {0.7773584905660378, 0.9572916666666667}, {
           0.7584905660377359, 0.9427083333333334}, {0.7094339622641509, 
           0.9354166666666667}, {0.6528301886792452, 0.928125}, {
           0.6226415094339622, 0.9177083333333333}, {0.5886792452830188, 
           0.8989583333333333}, {0.5358490566037736, 0.878125}, {
           0.49056603773584906`, 0.8552083333333333}, {0.4641509433962264, 
           0.8354166666666667}, {0.41132075471698115`, 0.8041666666666667}, {
           0.38113207547169814`, 0.7770833333333333}, {0.33584905660377357`, 
           0.746875}, {0.3018867924528302, 0.7135416666666666}, {
           0.27547169811320754`, 0.66875}, {0.24528301886792453`, 
           0.6260416666666667}, {0.2188679245283019, 0.58125}, {
           0.17735849056603772`, 0.5135416666666667}, {0.15471698113207547`, 
           0.4354166666666667}, {0.09056603773584905, 0.34270833333333334`}, {
           0.03018867924528302, 0.225}, {0.0037735849056603774`, 0.0875}, {0, 
           0}}]]}, 
       {RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 
         NCache[
          Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           Rational[264, 265], 1}, {Rational[264, 265], 1}, {
           Rational[264, 265], 1}, {Rational[264, 265], 1}, {
           Rational[261, 265], Rational[959, 960]}, {
           Rational[257, 265], Rational[959, 960]}, {
           Rational[249, 265], Rational[479, 480]}, {
           Rational[49, 53], Rational[159, 160]}, {
           Rational[236, 265], Rational[949, 960]}, {
           Rational[46, 53], Rational[943, 960]}, {
           Rational[224, 265], Rational[47, 48]}, {
           Rational[219, 265], Rational[931, 960]}, {
           Rational[213, 265], Rational[185, 192]}, {
           Rational[206, 265], Rational[919, 960]}, {
           Rational[201, 265], Rational[181, 192]}, {
           Rational[188, 265], Rational[449, 480]}, {
           Rational[173, 265], Rational[297, 320]}, {
           Rational[33, 53], Rational[881, 960]}, {
           Rational[156, 265], Rational[863, 960]}, {
           Rational[142, 265], Rational[281, 320]}, {
           Rational[26, 53], Rational[821, 960]}, {
           Rational[123, 265], Rational[401, 480]}, {
           Rational[109, 265], Rational[193, 240]}, {
           Rational[101, 265], Rational[373, 480]}, {
           Rational[89, 265], Rational[239, 320]}, {
           Rational[16, 53], Rational[137, 192]}, {
           Rational[73, 265], Rational[107, 160]}, {
           Rational[13, 53], Rational[601, 960]}, {
           Rational[58, 265], Rational[93, 160]}, {
           Rational[47, 265], Rational[493, 960]}, {
           Rational[41, 265], Rational[209, 480]}, {
           Rational[24, 265], Rational[329, 960]}, {
           Rational[8, 265], Rational[9, 40]}, {
           Rational[1, 265], Rational[7, 80]}, {0, 0}}, {{1, 1}, {1, 1}, {1, 
           1}, {1, 1}, {1, 1}, {1, 1}, {0.9962264150943396, 1}, {
           0.9962264150943396, 1}, {0.9962264150943396, 1}, {
           0.9962264150943396, 1}, {0.9849056603773585, 0.9989583333333333}, {
           0.969811320754717, 0.9989583333333333}, {0.939622641509434, 
           0.9979166666666667}, {0.9245283018867925, 0.99375}, {
           0.8905660377358491, 0.9885416666666667}, {0.8679245283018868, 
           0.9822916666666667}, {0.8452830188679246, 0.9791666666666666}, {
           0.8264150943396227, 0.9697916666666667}, {0.8037735849056604, 
           0.9635416666666666}, {0.7773584905660378, 0.9572916666666667}, {
           0.7584905660377359, 0.9427083333333334}, {0.7094339622641509, 
           0.9354166666666667}, {0.6528301886792452, 0.928125}, {
           0.6226415094339622, 0.9177083333333333}, {0.5886792452830188, 
           0.8989583333333333}, {0.5358490566037736, 0.878125}, {
           0.49056603773584906`, 0.8552083333333333}, {0.4641509433962264, 
           0.8354166666666667}, {0.41132075471698115`, 0.8041666666666667}, {
           0.38113207547169814`, 0.7770833333333333}, {0.33584905660377357`, 
           0.746875}, {0.3018867924528302, 0.7135416666666666}, {
           0.27547169811320754`, 0.66875}, {0.24528301886792453`, 
           0.6260416666666667}, {0.2188679245283019, 0.58125}, {
           0.17735849056603772`, 0.5135416666666667}, {0.15471698113207547`, 
           0.4354166666666667}, {0.09056603773584905, 0.34270833333333334`}, {
           0.03018867924528302, 0.225}, {0.0037735849056603774`, 0.0875}, {0, 
           0}}]], {
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.`"],
          Annotation[#, 0., "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.025`"],
          Annotation[#, 0.025, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.05`"],
          Annotation[#, 0.05, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.07500000000000001`"],
          Annotation[#, 0.07500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.1`"],
          Annotation[#, 0.1, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.125`"],
          Annotation[#, 0.125, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[264, 265], 1}, {0.9962264150943396, 1}]],
           
           "0.15000000000000002`"],
          Annotation[#, 0.15000000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[264, 265], 1}, {0.9962264150943396, 1}]],
           
           "0.17500000000000002`"],
          Annotation[#, 0.17500000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[264, 265], 1}, {0.9962264150943396, 1}]],
           
           "0.2`"],
          Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[264, 265], 1}, {0.9962264150943396, 1}]],
           
           "0.225`"],
          Annotation[#, 0.225, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[261, 265], Rational[959, 960]}, {
             0.9849056603773585, 0.9989583333333333}]],
           "0.25`"],
          Annotation[#, 0.25, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[257, 265], Rational[959, 960]}, {
             0.969811320754717, 0.9989583333333333}]],
           "0.275`"],
          Annotation[#, 0.275, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[249, 265], Rational[479, 480]}, {
             0.939622641509434, 0.9979166666666667}]],
           "0.30000000000000004`"],
          Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[49, 53], Rational[159, 160]}, {
             0.9245283018867925, 0.99375}]],
           "0.325`"],
          Annotation[#, 0.325, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[236, 265], Rational[949, 960]}, {
             0.8905660377358491, 0.9885416666666667}]],
           "0.35000000000000003`"],
          Annotation[#, 0.35000000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[46, 53], Rational[943, 960]}, {
             0.8679245283018868, 0.9822916666666667}]],
           "0.375`"],
          Annotation[#, 0.375, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[224, 265], Rational[47, 48]}, {
             0.8452830188679246, 0.9791666666666666}]],
           "0.4`"],
          Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[219, 265], Rational[931, 960]}, {
             0.8264150943396227, 0.9697916666666667}]],
           "0.42500000000000004`"],
          Annotation[#, 0.42500000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[213, 265], Rational[185, 192]}, {
             0.8037735849056604, 0.9635416666666666}]],
           "0.45`"],
          Annotation[#, 0.45, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[206, 265], Rational[919, 960]}, {
             0.7773584905660378, 0.9572916666666667}]],
           "0.47500000000000003`"],
          Annotation[#, 0.47500000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[201, 265], Rational[181, 192]}, {
             0.7584905660377359, 0.9427083333333334}]],
           "0.5`"],
          Annotation[#, 0.5, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[188, 265], Rational[449, 480]}, {
             0.7094339622641509, 0.9354166666666667}]],
           "0.525`"],
          Annotation[#, 0.525, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[173, 265], Rational[297, 320]}, {
             0.6528301886792452, 0.928125}]],
           "0.55`"],
          Annotation[#, 0.55, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[33, 53], Rational[881, 960]}, {
             0.6226415094339622, 0.9177083333333333}]],
           "0.5750000000000001`"],
          Annotation[#, 0.5750000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[156, 265], Rational[863, 960]}, {
             0.5886792452830188, 0.8989583333333333}]],
           "0.6000000000000001`"],
          Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[142, 265], Rational[281, 320]}, {
             0.5358490566037736, 0.878125}]],
           "0.625`"],
          Annotation[#, 0.625, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[26, 53], Rational[821, 960]}, {
             0.49056603773584906`, 0.8552083333333333}]],
           "0.65`"],
          Annotation[#, 0.65, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[123, 265], Rational[401, 480]}, {
             0.4641509433962264, 0.8354166666666667}]],
           "0.675`"],
          Annotation[#, 0.675, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[109, 265], Rational[193, 240]}, {
             0.41132075471698115`, 0.8041666666666667}]],
           "0.7000000000000001`"],
          Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[101, 265], Rational[373, 480]}, {
             0.38113207547169814`, 0.7770833333333333}]],
           "0.7250000000000001`"],
          Annotation[#, 0.7250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[89, 265], Rational[239, 320]}, {
             0.33584905660377357`, 0.746875}]],
           "0.75`"],
          Annotation[#, 0.75, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[16, 53], Rational[137, 192]}, {
             0.3018867924528302, 0.7135416666666666}]],
           "0.775`"],
          Annotation[#, 0.775, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[73, 265], Rational[107, 160]}, {
             0.27547169811320754`, 0.66875}]],
           "0.8`"],
          Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[13, 53], Rational[601, 960]}, {
             0.24528301886792453`, 0.6260416666666667}]],
           "0.8250000000000001`"],
          Annotation[#, 0.8250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[58, 265], Rational[93, 160]}, {
             0.2188679245283019, 0.58125}]],
           "0.8500000000000001`"],
          Annotation[#, 0.8500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[47, 265], Rational[493, 960]}, {
             0.17735849056603772`, 0.5135416666666667}]],
           "0.875`"],
          Annotation[#, 0.875, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[41, 265], Rational[209, 480]}, {
             0.15471698113207547`, 0.4354166666666667}]],
           "0.9`"],
          Annotation[#, 0.9, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[24, 265], Rational[329, 960]}, {
             0.09056603773584905, 0.34270833333333334`}]],
           "0.925`"],
          Annotation[#, 0.925, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[8, 265], Rational[9, 40]}, {0.03018867924528302, 
             0.225}]],
           "0.9500000000000001`"],
          Annotation[#, 0.9500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 265], Rational[7, 80]}, {
             0.0037735849056603774`, 0.0875}]],
           "0.9750000000000001`"],
          Annotation[#, 0.9750000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "1.`"],
          Annotation[#, 1., "Tooltip"]& ]}, 
        {GrayLevel[0]}}},
      AspectRatio->1,
      Frame->True,
      FrameLabel->{
        FormBox[
         StyleBox[
         "\"FPR, false positive rate\"", Larger, Bold, StripOnInput -> False],
          TraditionalForm], 
        FormBox[
         StyleBox[
         "\"TPR, true positive rate\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm]},
      GridLines->Automatic,
      ImageSize->Small]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.93250933844629*^9},
 CellID->1648815420,ExpressionUUID->"d430589c-9202-4f92-9b24-cbd3bf6ee426"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7910204081632654`"}], ",", 
    RowBox[{"\<\"FalsePositiveRate\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"high\"\>", "\[Rule]", "0.057291666666666664`"}], ",", 
       RowBox[{"\<\"low\"\>", "\[Rule]", "0.7584905660377359`"}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\<\"Precision\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"high\"\>", "\[Rule]", "0.5378151260504201`"}], ",", 
       RowBox[{"\<\"low\"\>", "\[Rule]", "0.8182640144665461`"}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\<\"Recall\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"high\"\>", "\[Rule]", "0.24150943396226415`"}], ",", 
       RowBox[{"\<\"low\"\>", "\[Rule]", "0.9427083333333334`"}]}], 
      "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.9325093384825478`*^9},
 CellID->511783052,ExpressionUUID->"2111db4b-a8a6-47c4-bb37-d9f469c711c3"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"Info:\"\>",
   "EchoLabel"], "  ", 
  StyleBox["\<\"Recall for \\\"high\\\" not good enough... making a large \
random forest.\"\>",
   StripOnInput->False,
   LineColor->RGBColor[
     Rational[2, 3], 0, 0],
   FrontFaceColor->RGBColor[
     Rational[2, 3], 0, 0],
   BackFaceColor->RGBColor[
     Rational[2, 3], 0, 0],
   GraphicsColor->RGBColor[
     Rational[2, 3], 0, 0],
   FontColor->RGBColor[
     Rational[2, 3], 0, 0]]}]], "Echo",
 CellChangeTimes->{3.932509338487753*^9},
 CellID->865748729,ExpressionUUID->"769cc3ab-3bfc-4f60-931b-46c663e2a7ca"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"ROC plot(s):\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"high\"\>", "\[Rule]", 
     GraphicsBox[{
       {RGBColor[
         NCache[
          Rational[5, 9], 0.5555555555555556], 
         NCache[
          Rational[5, 9], 0.5555555555555556], 1], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           Rational[589, 960], Rational[256, 265]}, {
           Rational[403, 960], Rational[49, 53]}, {
           Rational[311, 960], Rational[228, 265]}, {
           Rational[227, 960], Rational[217, 265]}, {
           Rational[169, 960], Rational[198, 265]}, {
           Rational[127, 960], Rational[183, 265]}, {
           Rational[103, 960], Rational[168, 265]}, {
           Rational[19, 240], Rational[151, 265]}, {
           Rational[9, 160], Rational[28, 53]}, {
           Rational[11, 320], Rational[121, 265]}, {
           Rational[19, 960], Rational[103, 265]}, {
           Rational[1, 60], Rational[89, 265]}, {
           Rational[1, 80], Rational[77, 265]}, {
           Rational[1, 120], Rational[14, 53]}, {
           Rational[1, 192], Rational[58, 265]}, {
           Rational[1, 240], Rational[47, 265]}, {
           Rational[1, 960], Rational[38, 265]}, {
           Rational[1, 960], Rational[31, 265]}, {
           Rational[1, 960], Rational[5, 53]}, {
           Rational[1, 960], Rational[24, 265]}, {0, Rational[14, 265]}, {
           0, Rational[3, 265]}, {0, Rational[1, 265]}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           0.6135416666666667, 0.9660377358490566}, {0.4197916666666667, 
           0.9245283018867925}, {0.32395833333333335`, 0.8603773584905661}, {
           0.23645833333333333`, 0.8188679245283019}, {0.17604166666666668`, 
           0.7471698113207547}, {0.13229166666666667`, 0.690566037735849}, {
           0.10729166666666666`, 0.6339622641509434}, {0.07916666666666666, 
           0.569811320754717}, {0.05625, 0.5283018867924528}, {0.034375, 
           0.45660377358490567`}, {0.019791666666666666`, 
           0.3886792452830189}, {0.016666666666666666`, 
           0.33584905660377357`}, {0.0125, 0.29056603773584905`}, {
           0.008333333333333333, 0.2641509433962264}, {0.005208333333333333, 
           0.2188679245283019}, {0.004166666666666667, 
           0.17735849056603772`}, {0.0010416666666666667`, 
           0.14339622641509434`}, {0.0010416666666666667`, 
           0.1169811320754717}, {0.0010416666666666667`, 
           0.09433962264150944}, {0.0010416666666666667`, 
           0.09056603773584905}, {0, 0.052830188679245285`}, {
           0, 0.011320754716981131`}, {0, 0.0037735849056603774`}, {0, 0}, {0,
            0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}]]}, 
       {RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 
         NCache[
          Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           Rational[589, 960], Rational[256, 265]}, {
           Rational[403, 960], Rational[49, 53]}, {
           Rational[311, 960], Rational[228, 265]}, {
           Rational[227, 960], Rational[217, 265]}, {
           Rational[169, 960], Rational[198, 265]}, {
           Rational[127, 960], Rational[183, 265]}, {
           Rational[103, 960], Rational[168, 265]}, {
           Rational[19, 240], Rational[151, 265]}, {
           Rational[9, 160], Rational[28, 53]}, {
           Rational[11, 320], Rational[121, 265]}, {
           Rational[19, 960], Rational[103, 265]}, {
           Rational[1, 60], Rational[89, 265]}, {
           Rational[1, 80], Rational[77, 265]}, {
           Rational[1, 120], Rational[14, 53]}, {
           Rational[1, 192], Rational[58, 265]}, {
           Rational[1, 240], Rational[47, 265]}, {
           Rational[1, 960], Rational[38, 265]}, {
           Rational[1, 960], Rational[31, 265]}, {
           Rational[1, 960], Rational[5, 53]}, {
           Rational[1, 960], Rational[24, 265]}, {0, Rational[14, 265]}, {
           0, Rational[3, 265]}, {0, Rational[1, 265]}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           0.6135416666666667, 0.9660377358490566}, {0.4197916666666667, 
           0.9245283018867925}, {0.32395833333333335`, 0.8603773584905661}, {
           0.23645833333333333`, 0.8188679245283019}, {0.17604166666666668`, 
           0.7471698113207547}, {0.13229166666666667`, 0.690566037735849}, {
           0.10729166666666666`, 0.6339622641509434}, {0.07916666666666666, 
           0.569811320754717}, {0.05625, 0.5283018867924528}, {0.034375, 
           0.45660377358490567`}, {0.019791666666666666`, 
           0.3886792452830189}, {0.016666666666666666`, 
           0.33584905660377357`}, {0.0125, 0.29056603773584905`}, {
           0.008333333333333333, 0.2641509433962264}, {0.005208333333333333, 
           0.2188679245283019}, {0.004166666666666667, 
           0.17735849056603772`}, {0.0010416666666666667`, 
           0.14339622641509434`}, {0.0010416666666666667`, 
           0.1169811320754717}, {0.0010416666666666667`, 
           0.09433962264150944}, {0.0010416666666666667`, 
           0.09056603773584905}, {0, 0.052830188679245285`}, {
           0, 0.011320754716981131`}, {0, 0.0037735849056603774`}, {0, 0}, {0,
            0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}]], {
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.`"],
          Annotation[#, 0., "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.025`"],
          Annotation[#, 0.025, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.05`"],
          Annotation[#, 0.05, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.07500000000000001`"],
          Annotation[#, 0.07500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[589, 960], Rational[256, 265]}, {
             0.6135416666666667, 0.9660377358490566}]],
           "0.1`"],
          Annotation[#, 0.1, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[403, 960], Rational[49, 53]}, {
             0.4197916666666667, 0.9245283018867925}]],
           "0.125`"],
          Annotation[#, 0.125, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[311, 960], Rational[228, 265]}, {
             0.32395833333333335`, 0.8603773584905661}]],
           "0.15000000000000002`"],
          Annotation[#, 0.15000000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[227, 960], Rational[217, 265]}, {
             0.23645833333333333`, 0.8188679245283019}]],
           "0.17500000000000002`"],
          Annotation[#, 0.17500000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[169, 960], Rational[198, 265]}, {
             0.17604166666666668`, 0.7471698113207547}]],
           "0.2`"],
          Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[127, 960], Rational[183, 265]}, {
             0.13229166666666667`, 0.690566037735849}]],
           "0.225`"],
          Annotation[#, 0.225, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[103, 960], Rational[168, 265]}, {
             0.10729166666666666`, 0.6339622641509434}]],
           "0.25`"],
          Annotation[#, 0.25, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[19, 240], Rational[151, 265]}, {
             0.07916666666666666, 0.569811320754717}]],
           "0.275`"],
          Annotation[#, 0.275, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[9, 160], Rational[28, 53]}, {0.05625, 
             0.5283018867924528}]],
           "0.30000000000000004`"],
          Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[11, 320], Rational[121, 265]}, {0.034375, 
             0.45660377358490567`}]],
           "0.325`"],
          Annotation[#, 0.325, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[19, 960], Rational[103, 265]}, {
             0.019791666666666666`, 0.3886792452830189}]],
           "0.35000000000000003`"],
          Annotation[#, 0.35000000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 60], Rational[89, 265]}, {
             0.016666666666666666`, 0.33584905660377357`}]],
           "0.375`"],
          Annotation[#, 0.375, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 80], Rational[77, 265]}, {0.0125, 
             0.29056603773584905`}]],
           "0.4`"],
          Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 120], Rational[14, 53]}, {
             0.008333333333333333, 0.2641509433962264}]],
           "0.42500000000000004`"],
          Annotation[#, 0.42500000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 192], Rational[58, 265]}, {
             0.005208333333333333, 0.2188679245283019}]],
           "0.45`"],
          Annotation[#, 0.45, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 240], Rational[47, 265]}, {
             0.004166666666666667, 0.17735849056603772`}]],
           "0.47500000000000003`"],
          Annotation[#, 0.47500000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 960], Rational[38, 265]}, {
             0.0010416666666666667`, 0.14339622641509434`}]],
           "0.5`"],
          Annotation[#, 0.5, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 960], Rational[31, 265]}, {
             0.0010416666666666667`, 0.1169811320754717}]],
           "0.525`"],
          Annotation[#, 0.525, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 960], Rational[5, 53]}, {
             0.0010416666666666667`, 0.09433962264150944}]],
           "0.55`"],
          Annotation[#, 0.55, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 960], Rational[24, 265]}, {
             0.0010416666666666667`, 0.09056603773584905}]],
           "0.5750000000000001`"],
          Annotation[#, 0.5750000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{0, Rational[14, 265]}, {0, 0.052830188679245285`}]],
           "0.6000000000000001`"],
          Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{0, Rational[3, 265]}, {0, 0.011320754716981131`}]],
           "0.625`"],
          Annotation[#, 0.625, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{0, Rational[1, 265]}, {0, 0.0037735849056603774`}]],
           "0.65`"],
          Annotation[#, 0.65, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.675`"],
          Annotation[#, 0.675, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.7000000000000001`"],
          Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.7250000000000001`"],
          Annotation[#, 0.7250000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.75`"],
          Annotation[#, 0.75, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.775`"],
          Annotation[#, 0.775, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.8`"],
          Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.8250000000000001`"],
          Annotation[#, 0.8250000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.8500000000000001`"],
          Annotation[#, 0.8500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.875`"],
          Annotation[#, 0.875, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9`"],
          Annotation[#, 0.9, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.925`"],
          Annotation[#, 0.925, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9500000000000001`"],
          Annotation[#, 0.9500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9750000000000001`"],
          Annotation[#, 0.9750000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "1.`"],
          Annotation[#, 1., "Tooltip"]& ]}, 
        {GrayLevel[0]}}},
      AspectRatio->1,
      Frame->True,
      FrameLabel->{
        FormBox[
         StyleBox[
         "\"FPR, false positive rate\"", Larger, Bold, StripOnInput -> False],
          TraditionalForm], 
        FormBox[
         StyleBox[
         "\"TPR, true positive rate\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm]},
      GridLines->Automatic,
      ImageSize->Small]}], ",", 
    RowBox[{"\<\"low\"\>", "\[Rule]", 
     GraphicsBox[{
       {RGBColor[
         NCache[
          Rational[5, 9], 0.5555555555555556], 
         NCache[
          Rational[5, 9], 0.5555555555555556], 1], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 
           1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           Rational[264, 265], 1}, {Rational[262, 265], 1}, {
           Rational[251, 265], 1}, {Rational[241, 265], Rational[959, 960]}, {
           Rational[48, 53], Rational[959, 960]}, {
           Rational[234, 265], Rational[959, 960]}, {
           Rational[227, 265], Rational[959, 960]}, {
           Rational[218, 265], Rational[239, 240]}, {
           Rational[207, 265], Rational[191, 192]}, {
           Rational[39, 53], Rational[119, 120]}, {
           Rational[188, 265], Rational[79, 80]}, {
           Rational[176, 265], Rational[59, 60]}, {
           Rational[162, 265], Rational[941, 960]}, {
           Rational[144, 265], Rational[309, 320]}, {
           Rational[25, 53], Rational[151, 160]}, {
           Rational[114, 265], Rational[221, 240]}, {
           Rational[97, 265], Rational[857, 960]}, {
           Rational[82, 265], Rational[833, 960]}, {
           Rational[67, 265], Rational[791, 960]}, {
           Rational[48, 265], Rational[733, 960]}, {
           Rational[37, 265], Rational[649, 960]}, {
           Rational[4, 53], Rational[557, 960]}, {
           Rational[9, 265], Rational[371, 960]}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}}, {{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 
           1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           0.9962264150943396, 1}, {0.9886792452830189, 1}, {
           0.9471698113207547, 1}, {0.909433962264151, 0.9989583333333333}, {
           0.9056603773584906, 0.9989583333333333}, {0.8830188679245283, 
           0.9989583333333333}, {0.8566037735849057, 0.9989583333333333}, {
           0.8226415094339623, 0.9958333333333333}, {0.7811320754716982, 
           0.9947916666666666}, {0.7358490566037735, 0.9916666666666667}, {
           0.7094339622641509, 0.9875}, {0.6641509433962264, 
           0.9833333333333333}, {0.6113207547169811, 0.9802083333333333}, {
           0.5433962264150943, 0.965625}, {0.4716981132075472, 0.94375}, {
           0.43018867924528303`, 0.9208333333333333}, {0.3660377358490566, 
           0.8927083333333333}, {0.30943396226415093`, 0.8677083333333333}, {
           0.2528301886792453, 0.8239583333333333}, {0.1811320754716981, 
           0.7635416666666667}, {0.13962264150943396`, 0.6760416666666667}, {
           0.07547169811320754, 0.5802083333333333}, {0.033962264150943396`, 
           0.38645833333333335`}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}]]}, 
       {RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 
         NCache[
          Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 
           1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           Rational[264, 265], 1}, {Rational[262, 265], 1}, {
           Rational[251, 265], 1}, {Rational[241, 265], Rational[959, 960]}, {
           Rational[48, 53], Rational[959, 960]}, {
           Rational[234, 265], Rational[959, 960]}, {
           Rational[227, 265], Rational[959, 960]}, {
           Rational[218, 265], Rational[239, 240]}, {
           Rational[207, 265], Rational[191, 192]}, {
           Rational[39, 53], Rational[119, 120]}, {
           Rational[188, 265], Rational[79, 80]}, {
           Rational[176, 265], Rational[59, 60]}, {
           Rational[162, 265], Rational[941, 960]}, {
           Rational[144, 265], Rational[309, 320]}, {
           Rational[25, 53], Rational[151, 160]}, {
           Rational[114, 265], Rational[221, 240]}, {
           Rational[97, 265], Rational[857, 960]}, {
           Rational[82, 265], Rational[833, 960]}, {
           Rational[67, 265], Rational[791, 960]}, {
           Rational[48, 265], Rational[733, 960]}, {
           Rational[37, 265], Rational[649, 960]}, {
           Rational[4, 53], Rational[557, 960]}, {
           Rational[9, 265], Rational[371, 960]}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}}, {{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 
           1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           0.9962264150943396, 1}, {0.9886792452830189, 1}, {
           0.9471698113207547, 1}, {0.909433962264151, 0.9989583333333333}, {
           0.9056603773584906, 0.9989583333333333}, {0.8830188679245283, 
           0.9989583333333333}, {0.8566037735849057, 0.9989583333333333}, {
           0.8226415094339623, 0.9958333333333333}, {0.7811320754716982, 
           0.9947916666666666}, {0.7358490566037735, 0.9916666666666667}, {
           0.7094339622641509, 0.9875}, {0.6641509433962264, 
           0.9833333333333333}, {0.6113207547169811, 0.9802083333333333}, {
           0.5433962264150943, 0.965625}, {0.4716981132075472, 0.94375}, {
           0.43018867924528303`, 0.9208333333333333}, {0.3660377358490566, 
           0.8927083333333333}, {0.30943396226415093`, 0.8677083333333333}, {
           0.2528301886792453, 0.8239583333333333}, {0.1811320754716981, 
           0.7635416666666667}, {0.13962264150943396`, 0.6760416666666667}, {
           0.07547169811320754, 0.5802083333333333}, {0.033962264150943396`, 
           0.38645833333333335`}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}]], {
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.`"],
          Annotation[#, 0., "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.025`"],
          Annotation[#, 0.025, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.05`"],
          Annotation[#, 0.05, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.07500000000000001`"],
          Annotation[#, 0.07500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.1`"],
          Annotation[#, 0.1, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.125`"],
          Annotation[#, 0.125, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.15000000000000002`"],
          Annotation[#, 0.15000000000000002`, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.17500000000000002`"],
          Annotation[#, 0.17500000000000002`, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.2`"],
          Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.225`"],
          Annotation[#, 0.225, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.25`"],
          Annotation[#, 0.25, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.275`"],
          Annotation[#, 0.275, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.30000000000000004`"],
          Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.325`"],
          Annotation[#, 0.325, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[264, 265], 1}, {0.9962264150943396, 1}]],
           
           "0.35000000000000003`"],
          Annotation[#, 0.35000000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[262, 265], 1}, {0.9886792452830189, 1}]],
           
           "0.375`"],
          Annotation[#, 0.375, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[251, 265], 1}, {0.9471698113207547, 1}]],
           
           "0.4`"],
          Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[241, 265], Rational[959, 960]}, {
             0.909433962264151, 0.9989583333333333}]],
           "0.42500000000000004`"],
          Annotation[#, 0.42500000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[48, 53], Rational[959, 960]}, {
             0.9056603773584906, 0.9989583333333333}]],
           "0.45`"],
          Annotation[#, 0.45, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[234, 265], Rational[959, 960]}, {
             0.8830188679245283, 0.9989583333333333}]],
           "0.47500000000000003`"],
          Annotation[#, 0.47500000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[227, 265], Rational[959, 960]}, {
             0.8566037735849057, 0.9989583333333333}]],
           "0.5`"],
          Annotation[#, 0.5, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[218, 265], Rational[239, 240]}, {
             0.8226415094339623, 0.9958333333333333}]],
           "0.525`"],
          Annotation[#, 0.525, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[207, 265], Rational[191, 192]}, {
             0.7811320754716982, 0.9947916666666666}]],
           "0.55`"],
          Annotation[#, 0.55, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[39, 53], Rational[119, 120]}, {
             0.7358490566037735, 0.9916666666666667}]],
           "0.5750000000000001`"],
          Annotation[#, 0.5750000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[188, 265], Rational[79, 80]}, {
             0.7094339622641509, 0.9875}]],
           "0.6000000000000001`"],
          Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[176, 265], Rational[59, 60]}, {
             0.6641509433962264, 0.9833333333333333}]],
           "0.625`"],
          Annotation[#, 0.625, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[162, 265], Rational[941, 960]}, {
             0.6113207547169811, 0.9802083333333333}]],
           "0.65`"],
          Annotation[#, 0.65, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[144, 265], Rational[309, 320]}, {
             0.5433962264150943, 0.965625}]],
           "0.675`"],
          Annotation[#, 0.675, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[25, 53], Rational[151, 160]}, {
             0.4716981132075472, 0.94375}]],
           "0.7000000000000001`"],
          Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[114, 265], Rational[221, 240]}, {
             0.43018867924528303`, 0.9208333333333333}]],
           "0.7250000000000001`"],
          Annotation[#, 0.7250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[97, 265], Rational[857, 960]}, {
             0.3660377358490566, 0.8927083333333333}]],
           "0.75`"],
          Annotation[#, 0.75, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[82, 265], Rational[833, 960]}, {
             0.30943396226415093`, 0.8677083333333333}]],
           "0.775`"],
          Annotation[#, 0.775, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[67, 265], Rational[791, 960]}, {
             0.2528301886792453, 0.8239583333333333}]],
           "0.8`"],
          Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[48, 265], Rational[733, 960]}, {
             0.1811320754716981, 0.7635416666666667}]],
           "0.8250000000000001`"],
          Annotation[#, 0.8250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[37, 265], Rational[649, 960]}, {
             0.13962264150943396`, 0.6760416666666667}]],
           "0.8500000000000001`"],
          Annotation[#, 0.8500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[4, 53], Rational[557, 960]}, {
             0.07547169811320754, 0.5802083333333333}]],
           "0.875`"],
          Annotation[#, 0.875, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[9, 265], Rational[371, 960]}, {
             0.033962264150943396`, 0.38645833333333335`}]],
           "0.9`"],
          Annotation[#, 0.9, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.925`"],
          Annotation[#, 0.925, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9500000000000001`"],
          Annotation[#, 0.9500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9750000000000001`"],
          Annotation[#, 0.9750000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "1.`"],
          Annotation[#, 1., "Tooltip"]& ]}, 
        {GrayLevel[0]}}},
      AspectRatio->1,
      Frame->True,
      FrameLabel->{
        FormBox[
         StyleBox[
         "\"FPR, false positive rate\"", Larger, Bold, StripOnInput -> False],
          TraditionalForm], 
        FormBox[
         StyleBox[
         "\"TPR, true positive rate\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm]},
      GridLines->Automatic,
      ImageSize->Small]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.932509340697777*^9},
 CellID->1437179878,ExpressionUUID->"abdf9873-f5db-4f7b-b42b-f473d7534717"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.8138775510204082`"}], ",", 
    RowBox[{"\<\"FalsePositiveRate\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"high\"\>", "\[Rule]", "0.0010416666666666667`"}], ",", 
       RowBox[{"\<\"low\"\>", "\[Rule]", "0.8566037735849057`"}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\<\"Precision\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"high\"\>", "\[Rule]", "0.9743589743589743`"}], ",", 
       RowBox[{"\<\"low\"\>", "\[Rule]", "0.8086003372681282`"}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\<\"Recall\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"high\"\>", "\[Rule]", "0.14339622641509434`"}], ",", 
       RowBox[{"\<\"low\"\>", "\[Rule]", "0.9989583333333333`"}]}], 
      "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.932509340830735*^9},
 CellID->1933631737,ExpressionUUID->"31b58d42-4268-4fc5-ba48-f659cf725754"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["\<\
We can see that the recall with the more complicated is classifier is higher. \
Also the ROC plots of the second classifier are visibly closer to the ideal \
one. Still, the recall is not good enough, we have to find a threshold that \
is better that the default one. (See the next sub-section.)\
\>", "Text",
 CellChangeTimes->{{3.735278025619059*^9, 3.735278205230699*^9}, {
  3.7353326572356987`*^9, 3.7353326961161118`*^9}},
 CellID->809082115,ExpressionUUID->"817fda2b-9327-4046-9d12-4135bce8f7a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classification with custom thresholds", "Subsection",
 CellChangeTimes->{{3.735278209125037*^9, 3.73527821610781*^9}, {
  3.735278255172338*^9, 3.735278276071909*^9}},
 CellID->376654001,ExpressionUUID->"995e8fa1-5541-456c-99f4-c3f2a3b15673"],

Cell["\<\
(In this sub-section we use the monad from the previous sub-section.)\
\>", "Text",
 CellChangeTimes->{{3.735278452587811*^9, 3.735278561094783*^9}, {
  3.735332716682407*^9, 3.7353327173899593`*^9}},
 FontSlant->"Italic",
 CellID->1789487098,ExpressionUUID->"fc6859e6-90e1-4dc8-a5e0-45723732d0ca"],

Cell[CellGroupData[{

Cell[TextData[{
 "Here we compute classification measures using the threshold ",
 Cell[BoxData[
  FormBox["0.3", TraditionalForm]],ExpressionUUID->
  "12741b8e-652b-4f95-93af-d0d72fe8177b"],
 " for the important class label (\[OpenCurlyDoubleQuote]high\
\[CloseCurlyDoubleQuote]):"
}], "Text",
 CellChangeTimes->{{3.735278452587811*^9, 3.73527861717721*^9}},
 CellID->401179851,ExpressionUUID->"b09744df-c7ce-4bb2-82ce-dfdf31d9fc59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"res", "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  RowBox[{"ClConClassifierMeasurementsByThreshold", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<Accuracy\>\"", ",", "\"\<Precision\>\"", ",", "\"\<Recall\>\"", 
      ",", "\"\<FalsePositiveRate\>\""}], "}"}], ",", 
    RowBox[{"\"\<high\>\"", "\[Rule]", "0.3"}]}], "]"}], 
  "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
  "ClConTakeValue"}]], "Input",
 CellChangeTimes->{{3.735278618644926*^9, 3.735278651895784*^9}, {
  3.7352786945938473`*^9, 3.735278703939702*^9}, {3.7352791512132397`*^9, 
  3.735279162450099*^9}, {3.735279195698841*^9, 3.7352791962240667`*^9}, {
  3.7352794110138273`*^9, 3.73527942952984*^9}, {3.932507256350308*^9, 
  3.932507261717135*^9}},
 CellLabel->"In[95]:=",
 CellID->1678587824,ExpressionUUID->"ab855632-a5a7-4ba4-9d23-1c2f7b860696"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.8538775510204082`"}], ",", 
   RowBox[{"\<\"Precision\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"high\"\>", "\[Rule]", "0.7216494845360825`"}], ",", 
      RowBox[{"\<\"low\"\>", "\[Rule]", "0.8787584869059166`"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"Recall\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"high\"\>", "\[Rule]", "0.5283018867924528`"}], ",", 
      RowBox[{"\<\"low\"\>", "\[Rule]", "0.94375`"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"FalsePositiveRate\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"high\"\>", "\[Rule]", "0.05625`"}], ",", 
      RowBox[{"\<\"low\"\>", "\[Rule]", "0.4716981132075472`"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.735278653465111*^9, 3.735278705010447*^9, 3.735279163904525*^9, 
   3.735279196893091*^9, {3.7352794271022167`*^9, 3.735279430368506*^9}, 
   3.735332802569151*^9, 3.735343918475521*^9, 3.73537543663351*^9, 
   3.9325071774062233`*^9, {3.932507256842231*^9, 3.932507262564074*^9}, 
   3.932509211064248*^9, 3.932509340970821*^9},
 CellLabel->"Out[95]=",
 CellID->678573708,ExpressionUUID->"4e7086b2-da53-4bb9-af47-240b8eacf72b"]
}, Open  ]]
}, Open  ]],

Cell["\<\
We can see that the recall for \[OpenCurlyDoubleQuote]high\
\[CloseCurlyDoubleQuote] is fairly large and the rest of the measures have \
satisfactory values. (The accuracy did not drop that much, and the false \
positive rate is not that large.)\
\>", "Text",
 CellChangeTimes->{{3.7352793787844753`*^9, 3.7352794081435747`*^9}, {
  3.735279441937049*^9, 3.735279468749013*^9}, {3.7352795029836683`*^9, 
  3.735279584872473*^9}, {3.7353327600191183`*^9, 3.735332773303383*^9}},
 CellID->1230530513,ExpressionUUID->"340fb7f0-9470-4b8c-91b8-092e68b6812e"],

Cell[CellGroupData[{

Cell["Here we compute suggestions for the best thresholds:", "Text",
 CellChangeTimes->{{3.7352787250789213`*^9, 3.735278748276217*^9}},
 CellID->1258811381,ExpressionUUID->"1aed4f79-3aa0-4a71-8d61-0d63981d9920"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"res", 
   RowBox[{"(*", " ", 
    RowBox[{"start", " ", "with", " ", "a", " ", "previous", " ", "monad"}], 
    " ", "*)"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   RowBox[{"ClConROCPlot", "[", 
    RowBox[{"ImageSize", "\[Rule]", "300"}], "]"}], 
   RowBox[{"(*", " ", 
    RowBox[{"make", " ", "ROC", " ", "plots"}], " ", "*)"}], 
   "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   RowBox[{"ClConSuggestROCThresholds", "[", "3", "]"}], 
   RowBox[{"(*", " ", 
    RowBox[{
    "find", " ", "the", " ", "best", " ", "3", " ", "thresholds", " ", "per", 
     " ", "class", " ", "label"}], " ", "*)"}], "\[DoubleLongRightArrow]", 
   "\[IndentingNewLine]", "ClConEchoValue"}], 
  RowBox[{"(*", " ", 
   RowBox[{"echo", " ", "the", " ", "result"}], " ", "*)"}], ";"}]], "Input",
 CellChangeTimes->{{3.7352798971445103`*^9, 3.735280029423214*^9}, {
  3.735280068655188*^9, 3.73528008429452*^9}, {3.73533282941055*^9, 
  3.735332829757197*^9}},
 CellLabel->"In[96]:=",
 CellID->1981473870,ExpressionUUID->"2eb4af86-d803-42a2-9305-c6dbaf9627a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"ROC plot(s):\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"high\"\>", "\[Rule]", 
     GraphicsBox[{
       {RGBColor[
         NCache[
          Rational[5, 9], 0.5555555555555556], 
         NCache[
          Rational[5, 9], 0.5555555555555556], 1], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           Rational[589, 960], Rational[256, 265]}, {
           Rational[403, 960], Rational[49, 53]}, {
           Rational[311, 960], Rational[228, 265]}, {
           Rational[227, 960], Rational[217, 265]}, {
           Rational[169, 960], Rational[198, 265]}, {
           Rational[127, 960], Rational[183, 265]}, {
           Rational[103, 960], Rational[168, 265]}, {
           Rational[19, 240], Rational[151, 265]}, {
           Rational[9, 160], Rational[28, 53]}, {
           Rational[11, 320], Rational[121, 265]}, {
           Rational[19, 960], Rational[103, 265]}, {
           Rational[1, 60], Rational[89, 265]}, {
           Rational[1, 80], Rational[77, 265]}, {
           Rational[1, 120], Rational[14, 53]}, {
           Rational[1, 192], Rational[58, 265]}, {
           Rational[1, 240], Rational[47, 265]}, {
           Rational[1, 960], Rational[38, 265]}, {
           Rational[1, 960], Rational[31, 265]}, {
           Rational[1, 960], Rational[5, 53]}, {
           Rational[1, 960], Rational[24, 265]}, {0, Rational[14, 265]}, {
           0, Rational[3, 265]}, {0, Rational[1, 265]}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           0.6135416666666667, 0.9660377358490566}, {0.4197916666666667, 
           0.9245283018867925}, {0.32395833333333335`, 0.8603773584905661}, {
           0.23645833333333333`, 0.8188679245283019}, {0.17604166666666668`, 
           0.7471698113207547}, {0.13229166666666667`, 0.690566037735849}, {
           0.10729166666666666`, 0.6339622641509434}, {0.07916666666666666, 
           0.569811320754717}, {0.05625, 0.5283018867924528}, {0.034375, 
           0.45660377358490567`}, {0.019791666666666666`, 
           0.3886792452830189}, {0.016666666666666666`, 
           0.33584905660377357`}, {0.0125, 0.29056603773584905`}, {
           0.008333333333333333, 0.2641509433962264}, {0.005208333333333333, 
           0.2188679245283019}, {0.004166666666666667, 
           0.17735849056603772`}, {0.0010416666666666667`, 
           0.14339622641509434`}, {0.0010416666666666667`, 
           0.1169811320754717}, {0.0010416666666666667`, 
           0.09433962264150944}, {0.0010416666666666667`, 
           0.09056603773584905}, {0, 0.052830188679245285`}, {
           0, 0.011320754716981131`}, {0, 0.0037735849056603774`}, {0, 0}, {0,
            0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}]]}, 
       {RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 
         NCache[
          Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           Rational[589, 960], Rational[256, 265]}, {
           Rational[403, 960], Rational[49, 53]}, {
           Rational[311, 960], Rational[228, 265]}, {
           Rational[227, 960], Rational[217, 265]}, {
           Rational[169, 960], Rational[198, 265]}, {
           Rational[127, 960], Rational[183, 265]}, {
           Rational[103, 960], Rational[168, 265]}, {
           Rational[19, 240], Rational[151, 265]}, {
           Rational[9, 160], Rational[28, 53]}, {
           Rational[11, 320], Rational[121, 265]}, {
           Rational[19, 960], Rational[103, 265]}, {
           Rational[1, 60], Rational[89, 265]}, {
           Rational[1, 80], Rational[77, 265]}, {
           Rational[1, 120], Rational[14, 53]}, {
           Rational[1, 192], Rational[58, 265]}, {
           Rational[1, 240], Rational[47, 265]}, {
           Rational[1, 960], Rational[38, 265]}, {
           Rational[1, 960], Rational[31, 265]}, {
           Rational[1, 960], Rational[5, 53]}, {
           Rational[1, 960], Rational[24, 265]}, {0, Rational[14, 265]}, {
           0, Rational[3, 265]}, {0, Rational[1, 265]}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}}, {{1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           0.6135416666666667, 0.9660377358490566}, {0.4197916666666667, 
           0.9245283018867925}, {0.32395833333333335`, 0.8603773584905661}, {
           0.23645833333333333`, 0.8188679245283019}, {0.17604166666666668`, 
           0.7471698113207547}, {0.13229166666666667`, 0.690566037735849}, {
           0.10729166666666666`, 0.6339622641509434}, {0.07916666666666666, 
           0.569811320754717}, {0.05625, 0.5283018867924528}, {0.034375, 
           0.45660377358490567`}, {0.019791666666666666`, 
           0.3886792452830189}, {0.016666666666666666`, 
           0.33584905660377357`}, {0.0125, 0.29056603773584905`}, {
           0.008333333333333333, 0.2641509433962264}, {0.005208333333333333, 
           0.2188679245283019}, {0.004166666666666667, 
           0.17735849056603772`}, {0.0010416666666666667`, 
           0.14339622641509434`}, {0.0010416666666666667`, 
           0.1169811320754717}, {0.0010416666666666667`, 
           0.09433962264150944}, {0.0010416666666666667`, 
           0.09056603773584905}, {0, 0.052830188679245285`}, {
           0, 0.011320754716981131`}, {0, 0.0037735849056603774`}, {0, 0}, {0,
            0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}]], {
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.`"],
          Annotation[#, 0., "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.025`"],
          Annotation[#, 0.025, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.05`"],
          Annotation[#, 0.05, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.07500000000000001`"],
          Annotation[#, 0.07500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[589, 960], Rational[256, 265]}, {
             0.6135416666666667, 0.9660377358490566}]],
           "0.1`"],
          Annotation[#, 0.1, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[403, 960], Rational[49, 53]}, {
             0.4197916666666667, 0.9245283018867925}]],
           "0.125`"],
          Annotation[#, 0.125, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[311, 960], Rational[228, 265]}, {
             0.32395833333333335`, 0.8603773584905661}]],
           "0.15000000000000002`"],
          Annotation[#, 0.15000000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[227, 960], Rational[217, 265]}, {
             0.23645833333333333`, 0.8188679245283019}]],
           "0.17500000000000002`"],
          Annotation[#, 0.17500000000000002`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[169, 960], Rational[198, 265]}, {
             0.17604166666666668`, 0.7471698113207547}]],
           "0.2`"],
          Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[127, 960], Rational[183, 265]}, {
             0.13229166666666667`, 0.690566037735849}]],
           "0.225`"],
          Annotation[#, 0.225, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[103, 960], Rational[168, 265]}, {
             0.10729166666666666`, 0.6339622641509434}]],
           "0.25`"],
          Annotation[#, 0.25, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[19, 240], Rational[151, 265]}, {
             0.07916666666666666, 0.569811320754717}]],
           "0.275`"],
          Annotation[#, 0.275, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[9, 160], Rational[28, 53]}, {0.05625, 
             0.5283018867924528}]],
           "0.30000000000000004`"],
          Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[11, 320], Rational[121, 265]}, {0.034375, 
             0.45660377358490567`}]],
           "0.325`"],
          Annotation[#, 0.325, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[19, 960], Rational[103, 265]}, {
             0.019791666666666666`, 0.3886792452830189}]],
           "0.35000000000000003`"],
          Annotation[#, 0.35000000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 60], Rational[89, 265]}, {
             0.016666666666666666`, 0.33584905660377357`}]],
           "0.375`"],
          Annotation[#, 0.375, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 80], Rational[77, 265]}, {0.0125, 
             0.29056603773584905`}]],
           "0.4`"],
          Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 120], Rational[14, 53]}, {
             0.008333333333333333, 0.2641509433962264}]],
           "0.42500000000000004`"],
          Annotation[#, 0.42500000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 192], Rational[58, 265]}, {
             0.005208333333333333, 0.2188679245283019}]],
           "0.45`"],
          Annotation[#, 0.45, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 240], Rational[47, 265]}, {
             0.004166666666666667, 0.17735849056603772`}]],
           "0.47500000000000003`"],
          Annotation[#, 0.47500000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 960], Rational[38, 265]}, {
             0.0010416666666666667`, 0.14339622641509434`}]],
           "0.5`"],
          Annotation[#, 0.5, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 960], Rational[31, 265]}, {
             0.0010416666666666667`, 0.1169811320754717}]],
           "0.525`"],
          Annotation[#, 0.525, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 960], Rational[5, 53]}, {
             0.0010416666666666667`, 0.09433962264150944}]],
           "0.55`"],
          Annotation[#, 0.55, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[1, 960], Rational[24, 265]}, {
             0.0010416666666666667`, 0.09056603773584905}]],
           "0.5750000000000001`"],
          Annotation[#, 0.5750000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{0, Rational[14, 265]}, {0, 0.052830188679245285`}]],
           "0.6000000000000001`"],
          Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{0, Rational[3, 265]}, {0, 0.011320754716981131`}]],
           "0.625`"],
          Annotation[#, 0.625, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{0, Rational[1, 265]}, {0, 0.0037735849056603774`}]],
           "0.65`"],
          Annotation[#, 0.65, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.675`"],
          Annotation[#, 0.675, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.7000000000000001`"],
          Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.7250000000000001`"],
          Annotation[#, 0.7250000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.75`"],
          Annotation[#, 0.75, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.775`"],
          Annotation[#, 0.775, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.8`"],
          Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.8250000000000001`"],
          Annotation[#, 0.8250000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.8500000000000001`"],
          Annotation[#, 0.8500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.875`"],
          Annotation[#, 0.875, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9`"],
          Annotation[#, 0.9, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.925`"],
          Annotation[#, 0.925, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9500000000000001`"],
          Annotation[#, 0.9500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9750000000000001`"],
          Annotation[#, 0.9750000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "1.`"],
          Annotation[#, 1., "Tooltip"]& ]}, 
        {GrayLevel[0], 
         InsetBox["0.`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.025`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.05`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.07500000000000001`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.1`", 
          NCache[{Rational[589, 960], Rational[256, 265]}, {
           0.6135416666666667, 0.9660377358490566}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.125`", 
          NCache[{Rational[403, 960], Rational[49, 53]}, {0.4197916666666667, 
           0.9245283018867925}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.15000000000000002`", 
          NCache[{Rational[311, 960], Rational[228, 265]}, {
           0.32395833333333335`, 0.8603773584905661}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.17500000000000002`", 
          NCache[{Rational[227, 960], Rational[217, 265]}, {
           0.23645833333333333`, 0.8188679245283019}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.2`", 
          NCache[{Rational[169, 960], Rational[198, 265]}, {
           0.17604166666666668`, 0.7471698113207547}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.225`", 
          NCache[{Rational[127, 960], Rational[183, 265]}, {
           0.13229166666666667`, 0.690566037735849}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.25`", 
          NCache[{Rational[103, 960], Rational[168, 265]}, {
           0.10729166666666666`, 0.6339622641509434}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.275`", 
          NCache[{Rational[19, 240], Rational[151, 265]}, {
           0.07916666666666666, 0.569811320754717}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.30000000000000004`", 
          NCache[{Rational[9, 160], Rational[28, 53]}, {0.05625, 
           0.5283018867924528}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.325`", 
          NCache[{Rational[11, 320], Rational[121, 265]}, {0.034375, 
           0.45660377358490567`}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.35000000000000003`", 
          NCache[{Rational[19, 960], Rational[103, 265]}, {
           0.019791666666666666`, 0.3886792452830189}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.375`", 
          NCache[{Rational[1, 60], Rational[89, 265]}, {0.016666666666666666`,
            0.33584905660377357`}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.4`", 
          NCache[{Rational[1, 80], Rational[77, 265]}, {0.0125, 
           0.29056603773584905`}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.42500000000000004`", 
          NCache[{Rational[1, 120], Rational[14, 53]}, {0.008333333333333333, 
           0.2641509433962264}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.45`", 
          NCache[{Rational[1, 192], Rational[58, 265]}, {0.005208333333333333,
            0.2188679245283019}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.47500000000000003`", 
          NCache[{Rational[1, 240], Rational[47, 265]}, {0.004166666666666667,
            0.17735849056603772`}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.5`", 
          NCache[{Rational[1, 960], Rational[38, 265]}, {
           0.0010416666666666667`, 0.14339622641509434`}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.525`", 
          NCache[{Rational[1, 960], Rational[31, 265]}, {
           0.0010416666666666667`, 0.1169811320754717}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.55`", 
          NCache[{Rational[1, 960], Rational[5, 53]}, {0.0010416666666666667`,
            0.09433962264150944}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.5750000000000001`", 
          NCache[{Rational[1, 960], Rational[24, 265]}, {
           0.0010416666666666667`, 0.09056603773584905}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.6000000000000001`", 
          NCache[{0, Rational[14, 265]}, {0, 0.052830188679245285`}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.625`", 
          NCache[{0, Rational[3, 265]}, {0, 0.011320754716981131`}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.65`", 
          NCache[{0, Rational[1, 265]}, {0, 0.0037735849056603774`}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.675`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.7000000000000001`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.7250000000000001`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.75`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.775`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.8`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.8250000000000001`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.8500000000000001`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.875`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.9`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.925`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.9500000000000001`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.9750000000000001`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["1.`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]]}}},
      AspectRatio->1,
      Frame->True,
      FrameLabel->{
        FormBox[
         StyleBox[
         "\"FPR, false positive rate\"", Larger, Bold, StripOnInput -> False],
          TraditionalForm], 
        FormBox[
         StyleBox[
         "\"TPR, true positive rate\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm]},
      GridLines->Automatic,
      ImageSize->300]}], ",", 
    RowBox[{"\<\"low\"\>", "\[Rule]", 
     GraphicsBox[{
       {RGBColor[
         NCache[
          Rational[5, 9], 0.5555555555555556], 
         NCache[
          Rational[5, 9], 0.5555555555555556], 1], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 
           1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           Rational[264, 265], 1}, {Rational[262, 265], 1}, {
           Rational[251, 265], 1}, {Rational[241, 265], Rational[959, 960]}, {
           Rational[48, 53], Rational[959, 960]}, {
           Rational[234, 265], Rational[959, 960]}, {
           Rational[227, 265], Rational[959, 960]}, {
           Rational[218, 265], Rational[239, 240]}, {
           Rational[207, 265], Rational[191, 192]}, {
           Rational[39, 53], Rational[119, 120]}, {
           Rational[188, 265], Rational[79, 80]}, {
           Rational[176, 265], Rational[59, 60]}, {
           Rational[162, 265], Rational[941, 960]}, {
           Rational[144, 265], Rational[309, 320]}, {
           Rational[25, 53], Rational[151, 160]}, {
           Rational[114, 265], Rational[221, 240]}, {
           Rational[97, 265], Rational[857, 960]}, {
           Rational[82, 265], Rational[833, 960]}, {
           Rational[67, 265], Rational[791, 960]}, {
           Rational[48, 265], Rational[733, 960]}, {
           Rational[37, 265], Rational[649, 960]}, {
           Rational[4, 53], Rational[557, 960]}, {
           Rational[9, 265], Rational[371, 960]}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}}, {{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 
           1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           0.9962264150943396, 1}, {0.9886792452830189, 1}, {
           0.9471698113207547, 1}, {0.909433962264151, 0.9989583333333333}, {
           0.9056603773584906, 0.9989583333333333}, {0.8830188679245283, 
           0.9989583333333333}, {0.8566037735849057, 0.9989583333333333}, {
           0.8226415094339623, 0.9958333333333333}, {0.7811320754716982, 
           0.9947916666666666}, {0.7358490566037735, 0.9916666666666667}, {
           0.7094339622641509, 0.9875}, {0.6641509433962264, 
           0.9833333333333333}, {0.6113207547169811, 0.9802083333333333}, {
           0.5433962264150943, 0.965625}, {0.4716981132075472, 0.94375}, {
           0.43018867924528303`, 0.9208333333333333}, {0.3660377358490566, 
           0.8927083333333333}, {0.30943396226415093`, 0.8677083333333333}, {
           0.2528301886792453, 0.8239583333333333}, {0.1811320754716981, 
           0.7635416666666667}, {0.13962264150943396`, 0.6760416666666667}, {
           0.07547169811320754, 0.5802083333333333}, {0.033962264150943396`, 
           0.38645833333333335`}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}]]}, 
       {RGBColor[
         NCache[
          Rational[1, 3], 0.3333333333333333], 
         NCache[
          Rational[1, 3], 0.3333333333333333], 1], PointSize[0.02], 
        LineBox[NCache[{{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 
           1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           Rational[264, 265], 1}, {Rational[262, 265], 1}, {
           Rational[251, 265], 1}, {Rational[241, 265], Rational[959, 960]}, {
           Rational[48, 53], Rational[959, 960]}, {
           Rational[234, 265], Rational[959, 960]}, {
           Rational[227, 265], Rational[959, 960]}, {
           Rational[218, 265], Rational[239, 240]}, {
           Rational[207, 265], Rational[191, 192]}, {
           Rational[39, 53], Rational[119, 120]}, {
           Rational[188, 265], Rational[79, 80]}, {
           Rational[176, 265], Rational[59, 60]}, {
           Rational[162, 265], Rational[941, 960]}, {
           Rational[144, 265], Rational[309, 320]}, {
           Rational[25, 53], Rational[151, 160]}, {
           Rational[114, 265], Rational[221, 240]}, {
           Rational[97, 265], Rational[857, 960]}, {
           Rational[82, 265], Rational[833, 960]}, {
           Rational[67, 265], Rational[791, 960]}, {
           Rational[48, 265], Rational[733, 960]}, {
           Rational[37, 265], Rational[649, 960]}, {
           Rational[4, 53], Rational[557, 960]}, {
           Rational[9, 265], Rational[371, 960]}, {0, 0}, {0, 0}, {0, 0}, {0, 
           0}}, {{1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 
           1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {1, 1}, {
           0.9962264150943396, 1}, {0.9886792452830189, 1}, {
           0.9471698113207547, 1}, {0.909433962264151, 0.9989583333333333}, {
           0.9056603773584906, 0.9989583333333333}, {0.8830188679245283, 
           0.9989583333333333}, {0.8566037735849057, 0.9989583333333333}, {
           0.8226415094339623, 0.9958333333333333}, {0.7811320754716982, 
           0.9947916666666666}, {0.7358490566037735, 0.9916666666666667}, {
           0.7094339622641509, 0.9875}, {0.6641509433962264, 
           0.9833333333333333}, {0.6113207547169811, 0.9802083333333333}, {
           0.5433962264150943, 0.965625}, {0.4716981132075472, 0.94375}, {
           0.43018867924528303`, 0.9208333333333333}, {0.3660377358490566, 
           0.8927083333333333}, {0.30943396226415093`, 0.8677083333333333}, {
           0.2528301886792453, 0.8239583333333333}, {0.1811320754716981, 
           0.7635416666666667}, {0.13962264150943396`, 0.6760416666666667}, {
           0.07547169811320754, 0.5802083333333333}, {0.033962264150943396`, 
           0.38645833333333335`}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}]], {
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.`"],
          Annotation[#, 0., "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.025`"],
          Annotation[#, 0.025, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.05`"],
          Annotation[#, 0.05, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.07500000000000001`"],
          Annotation[#, 0.07500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.1`"],
          Annotation[#, 0.1, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.125`"],
          Annotation[#, 0.125, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.15000000000000002`"],
          Annotation[#, 0.15000000000000002`, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.17500000000000002`"],
          Annotation[#, 0.17500000000000002`, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.2`"],
          Annotation[#, 0.2, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.225`"],
          Annotation[#, 0.225, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.25`"],
          Annotation[#, 0.25, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.275`"],
          Annotation[#, 0.275, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.30000000000000004`"],
          Annotation[#, 0.30000000000000004`, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{1, 1}],
           "0.325`"],
          Annotation[#, 0.325, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[264, 265], 1}, {0.9962264150943396, 1}]],
           
           "0.35000000000000003`"],
          Annotation[#, 0.35000000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[262, 265], 1}, {0.9886792452830189, 1}]],
           
           "0.375`"],
          Annotation[#, 0.375, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[NCache[{Rational[251, 265], 1}, {0.9471698113207547, 1}]],
           
           "0.4`"],
          Annotation[#, 0.4, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[241, 265], Rational[959, 960]}, {
             0.909433962264151, 0.9989583333333333}]],
           "0.42500000000000004`"],
          Annotation[#, 0.42500000000000004`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[48, 53], Rational[959, 960]}, {
             0.9056603773584906, 0.9989583333333333}]],
           "0.45`"],
          Annotation[#, 0.45, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[234, 265], Rational[959, 960]}, {
             0.8830188679245283, 0.9989583333333333}]],
           "0.47500000000000003`"],
          Annotation[#, 0.47500000000000003`, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[227, 265], Rational[959, 960]}, {
             0.8566037735849057, 0.9989583333333333}]],
           "0.5`"],
          Annotation[#, 0.5, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[218, 265], Rational[239, 240]}, {
             0.8226415094339623, 0.9958333333333333}]],
           "0.525`"],
          Annotation[#, 0.525, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[207, 265], Rational[191, 192]}, {
             0.7811320754716982, 0.9947916666666666}]],
           "0.55`"],
          Annotation[#, 0.55, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[39, 53], Rational[119, 120]}, {
             0.7358490566037735, 0.9916666666666667}]],
           "0.5750000000000001`"],
          Annotation[#, 0.5750000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[188, 265], Rational[79, 80]}, {
             0.7094339622641509, 0.9875}]],
           "0.6000000000000001`"],
          Annotation[#, 0.6000000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           PointBox[
            NCache[{Rational[176, 265], Rational[59, 60]}, {
             0.6641509433962264, 0.9833333333333333}]],
           "0.625`"],
          Annotation[#, 0.625, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[162, 265], Rational[941, 960]}, {
             0.6113207547169811, 0.9802083333333333}]],
           "0.65`"],
          Annotation[#, 0.65, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[144, 265], Rational[309, 320]}, {
             0.5433962264150943, 0.965625}]],
           "0.675`"],
          Annotation[#, 0.675, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[25, 53], Rational[151, 160]}, {
             0.4716981132075472, 0.94375}]],
           "0.7000000000000001`"],
          Annotation[#, 0.7000000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[114, 265], Rational[221, 240]}, {
             0.43018867924528303`, 0.9208333333333333}]],
           "0.7250000000000001`"],
          Annotation[#, 0.7250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[97, 265], Rational[857, 960]}, {
             0.3660377358490566, 0.8927083333333333}]],
           "0.75`"],
          Annotation[#, 0.75, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[82, 265], Rational[833, 960]}, {
             0.30943396226415093`, 0.8677083333333333}]],
           "0.775`"],
          Annotation[#, 0.775, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[67, 265], Rational[791, 960]}, {
             0.2528301886792453, 0.8239583333333333}]],
           "0.8`"],
          Annotation[#, 0.8, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[48, 265], Rational[733, 960]}, {
             0.1811320754716981, 0.7635416666666667}]],
           "0.8250000000000001`"],
          Annotation[#, 0.8250000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[37, 265], Rational[649, 960]}, {
             0.13962264150943396`, 0.6760416666666667}]],
           "0.8500000000000001`"],
          Annotation[#, 0.8500000000000001, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[4, 53], Rational[557, 960]}, {
             0.07547169811320754, 0.5802083333333333}]],
           "0.875`"],
          Annotation[#, 0.875, "Tooltip"]& ], 
         TagBox[
          
          TooltipBox[
           PointBox[
            NCache[{Rational[9, 265], Rational[371, 960]}, {
             0.033962264150943396`, 0.38645833333333335`}]],
           "0.9`"],
          Annotation[#, 0.9, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.925`"],
          Annotation[#, 0.925, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9500000000000001`"],
          Annotation[#, 0.9500000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "0.9750000000000001`"],
          Annotation[#, 0.9750000000000001, "Tooltip"]& ], 
         TagBox[
          TooltipBox[PointBox[{0, 0}],
           "1.`"],
          Annotation[#, 1., "Tooltip"]& ]}, 
        {GrayLevel[0], 
         InsetBox["0.`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.025`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.05`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.07500000000000001`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.1`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.125`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.15000000000000002`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.17500000000000002`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.2`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.225`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.25`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.275`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.30000000000000004`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.325`", {1, 1}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.35000000000000003`", 
          NCache[{Rational[264, 265], 1}, {0.9962264150943396, 1}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.375`", 
          NCache[{Rational[262, 265], 1}, {0.9886792452830189, 1}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.4`", 
          NCache[{Rational[251, 265], 1}, {0.9471698113207547, 1}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.42500000000000004`", 
          NCache[{Rational[241, 265], Rational[959, 960]}, {0.909433962264151,
            0.9989583333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.45`", 
          NCache[{Rational[48, 53], Rational[959, 960]}, {0.9056603773584906, 
           0.9989583333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.47500000000000003`", 
          NCache[{Rational[234, 265], Rational[959, 960]}, {
           0.8830188679245283, 0.9989583333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.5`", 
          NCache[{Rational[227, 265], Rational[959, 960]}, {
           0.8566037735849057, 0.9989583333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.525`", 
          NCache[{Rational[218, 265], Rational[239, 240]}, {
           0.8226415094339623, 0.9958333333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.55`", 
          NCache[{Rational[207, 265], Rational[191, 192]}, {
           0.7811320754716982, 0.9947916666666666}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.5750000000000001`", 
          NCache[{Rational[39, 53], Rational[119, 120]}, {0.7358490566037735, 
           0.9916666666666667}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.6000000000000001`", 
          NCache[{Rational[188, 265], Rational[79, 80]}, {0.7094339622641509, 
           0.9875}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.625`", 
          NCache[{Rational[176, 265], Rational[59, 60]}, {0.6641509433962264, 
           0.9833333333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.65`", 
          NCache[{Rational[162, 265], Rational[941, 960]}, {
           0.6113207547169811, 0.9802083333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.675`", 
          NCache[{Rational[144, 265], Rational[309, 320]}, {
           0.5433962264150943, 0.965625}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.7000000000000001`", 
          NCache[{Rational[25, 53], Rational[151, 160]}, {0.4716981132075472, 
           0.94375}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.7250000000000001`", 
          NCache[{Rational[114, 265], Rational[221, 240]}, {
           0.43018867924528303`, 0.9208333333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.75`", 
          NCache[{Rational[97, 265], Rational[857, 960]}, {0.3660377358490566,
            0.8927083333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.775`", 
          NCache[{Rational[82, 265], Rational[833, 960]}, {
           0.30943396226415093`, 0.8677083333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.8`", 
          NCache[{Rational[67, 265], Rational[791, 960]}, {0.2528301886792453,
            0.8239583333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.8250000000000001`", 
          NCache[{Rational[48, 265], Rational[733, 960]}, {0.1811320754716981,
            0.7635416666666667}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.8500000000000001`", 
          NCache[{Rational[37, 265], Rational[649, 960]}, {
           0.13962264150943396`, 0.6760416666666667}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.875`", 
          NCache[{Rational[4, 53], Rational[557, 960]}, {0.07547169811320754, 
           0.5802083333333333}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.9`", 
          NCache[{Rational[9, 265], Rational[371, 960]}, {
           0.033962264150943396`, 0.38645833333333335`}], NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.925`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.9500000000000001`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["0.9750000000000001`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]], 
         InsetBox["1.`", {0, 0}, NCache[
          ImageScaled[{0, Rational[3, 2]}], ImageScaled[{0, 1.5}]]]}}},
      AspectRatio->1,
      Frame->True,
      FrameLabel->{
        FormBox[
         StyleBox[
         "\"FPR, false positive rate\"", Larger, Bold, StripOnInput -> False],
          TraditionalForm], 
        FormBox[
         StyleBox[
         "\"TPR, true positive rate\"", Larger, Bold, StripOnInput -> False], 
         TraditionalForm]},
      GridLines->Automatic,
      ImageSize->300]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.932509341018013*^9},
 CellID->1650144786,ExpressionUUID->"8d673ebf-645b-429e-b0e2-af2cc942f681"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"high\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0.17500000000000002`", ",", "0.2`", ",", "0.225`"}], "}"}]}], 
    ",", 
    RowBox[{"\<\"low\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0.8250000000000001`", ",", "0.8`", ",", "0.775`"}], "}"}]}]}], 
   "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.932509341030645*^9},
 CellID->1379600944,ExpressionUUID->"d8632bdd-09d8-4fc6-aec0-c43defab01c5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "The suggestions are the ROC points that closest to the point ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], TraditionalForm]],ExpressionUUID->
  "a5f6a88d-7db6-4e68-bb73-175bb214a3a4"],
 " (which corresponds to the ideal classifier.)"
}], "Text",
 CellChangeTimes->{{3.735279203074234*^9, 3.735279365470586*^9}},
 CellID->2066715463,ExpressionUUID->"6fccb484-fa14-49be-b5df-e1673e716664"],

Cell[CellGroupData[{

Cell["\<\
Here is a way to use threshold suggestions within the monad pipeline:\
\>", "Text",
 CellChangeTimes->{{3.735279748583866*^9, 3.7352797820647078`*^9}},
 CellID->1886280063,ExpressionUUID->"e77abbaf-ff51-4173-92b3-3fe07fd7cdf9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "res", "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   "ClConSuggestROCThresholds", "\[DoubleLongRightArrow]", 
   "\[IndentingNewLine]", "ClConEchoValue", "\[DoubleLongRightArrow]", 
   "\[IndentingNewLine]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"ClConUnit", "[", "##", "]"}], "\[DoubleLongRightArrow]", 
      RowBox[{"ClConClassifierMeasurementsByThreshold", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "\"\<Accuracy\>\"", ",", "\"\<Precision\>\"", ",", 
          "\"\<Recall\>\""}], "}"}], ",", 
        RowBox[{"\"\<high\>\"", "\[Rule]", 
         RowBox[{"First", "[", 
          RowBox[{"#1", "[", "\"\<high\>\"", "]"}], "]"}]}]}], "]"}]}], "&"}],
     ")"}], "\[DoubleLongRightArrow]", "\[IndentingNewLine]", 
   "ClConEchoValue"}], ";"}]], "Input",
 CellChangeTimes->{{3.73527978541855*^9, 3.7352797932583942`*^9}},
 CellLabel->"In[97]:=",
 CellID->1555421827,ExpressionUUID->"3e1686e1-88f0-46a1-be70-6ad00c09dfe7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"high\"\>", "\[Rule]", 
     RowBox[{"{", "0.17500000000000002`", "}"}]}], ",", 
    RowBox[{"\<\"low\"\>", "\[Rule]", 
     RowBox[{"{", "0.8250000000000001`", "}"}]}]}], 
   "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.932509341055313*^9},
 CellID->572129149,ExpressionUUID->"846bcc0a-dda4-405b-b574-6536cf85e7d2"],

Cell[BoxData[
 RowBox[{
  TagBox["\<\"value:\"\>",
   "EchoLabel"], "  ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.7755102040816327`"}], ",", 
    RowBox[{"\<\"Precision\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"high\"\>", "\[Rule]", "0.48873873873873874`"}], ",", 
       RowBox[{"\<\"low\"\>", "\[Rule]", "0.93854033290653`"}]}], 
      "\[RightAssociation]"}]}], ",", 
    RowBox[{"\<\"Recall\"\>", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"high\"\>", "\[Rule]", "0.8188679245283019`"}], ",", 
       RowBox[{"\<\"low\"\>", "\[Rule]", "0.7635416666666667`"}]}], 
      "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]], "Echo",
 CellChangeTimes->{3.93250934117206*^9},
 CellID->1490319624,ExpressionUUID->"a0ed5bbc-d7d0-42c1-8dbf-e5d61422c137"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Guides", "TutorialMoreAboutSection",
 CellChangeTimes->{{3.843042384656711*^9, 3.843042386024461*^9}},
 CellID->1506397430,ExpressionUUID->"3a52ce6e-3d01-40fe-aac3-ea1c14c3dd5c"],

Cell[TextData[ButtonBox["Classification pipeline functions",
 BaseStyle->"Link",
 ButtonData->
  "paclet:AntonAntonov/MonadicContextualClassification/guide/\
Classificationpipelinefunctions"]], "TutorialMoreAbout",
 CellChangeTimes->{{3.932506716775795*^9, 3.932506723690528*^9}},
 CellID->1336891527,ExpressionUUID->"16aea9b1-d3f5-4ffd-8c57-a7cab294926a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Related Tech Notes", "RelatedTutorialsSection",
 CellID->14495728,ExpressionUUID->"66be8181-1a8f-431a-8f84-f44e7e390806"],

Cell[TextData[ButtonBox["Classification of MNIST data",
 BaseStyle->"Link",
 ButtonData->
  "paclet:AntonAntonov/MonadicContextualClassification/tutorial/\
ClassificationofMNISTdata"]], "RelatedTutorials",
 CellChangeTimes->{{3.932506749715901*^9, 3.932506753887824*^9}},
 CellID->964048385,ExpressionUUID->"1d8caa01-5f6e-477d-935f-b15cd5a015b6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Metadata", "MetadataSection",
 CellID->2144573727,ExpressionUUID->"8dc2e718-5120-4c8b-a0c8-22bd85013572"],

Cell[TextData[{
 "New in: ",
 Cell["1.0.0", "HistoryData",
  CellTags->"New",ExpressionUUID->"8a61c53f-1d34-4853-9636-d5769b7e4718"],
 " | Modified in: ",
 Cell[" ", "HistoryData",
  CellTags->"Modified",ExpressionUUID->"5c080cc8-b2fc-4f93-9ed4-e494e71eda96"],
 " | Obsolete in: ",
 Cell[" ", "HistoryData",
  CellTags->"Obsolete",ExpressionUUID->
  "cba4dda7-c0e4-43e1-92db-09e05015c777"]
}], "History",
 CellChangeTimes->{{3.9325059467968063`*^9, 3.932505947786147*^9}},
 CellID->485098441,ExpressionUUID->"c8ff13a9-1f75-430d-b910-61c497fe4a05"],

Cell[CellGroupData[{

Cell["Categorization", "CategorizationSection",
 CellID->1201573875,ExpressionUUID->"85124a3c-59a7-4904-8fc8-4fd825eb83d0"],

Cell["Tech Note", "Categorization",
 CellLabel->"Entity Type",
 CellID->2063384384,ExpressionUUID->"899f02f0-67fd-4d58-a006-aa2076647030"],

Cell["AntonAntonov/MonadicContextualClassification", "Categorization",
 CellLabel->"Paclet Name",
 CellID->1735410132,ExpressionUUID->"5f3039a5-c4ee-4cd5-a0bc-9a97a18d8051"],

Cell["AntonAntonov`MonadicContextualClassification`", "Categorization",
 CellLabel->"Context",
 CellID->2062678617,ExpressionUUID->"3ce4d9b3-5e8b-40fd-886d-5df68262af48"],

Cell["\<\
AntonAntonov/MonadicContextualClassification/tutorial/\
Classificationworkflowsmonad\
\>", "Categorization",
 CellLabel->"URI",
 CellID->611002398,ExpressionUUID->"b9e04710-425c-40bc-b222-e9bc867707dd"]
}, Closed]],

Cell[CellGroupData[{

Cell["Keywords", "KeywordsSection",
 CellID->1997986879,ExpressionUUID->"7a7afe30-0165-4cb5-9f7e-a2898dfaec3b"],

Cell["Monad", "Keywords",
 CellChangeTimes->{{3.93250658208519*^9, 3.932506586746684*^9}},
 CellID->2111170861,ExpressionUUID->"e6df1895-f909-4f86-ae7f-d482d450f577"],

Cell["Pipeline", "Keywords",
 CellChangeTimes->{{3.93250658208519*^9, 3.932506591625827*^9}},
 CellID->585712724,ExpressionUUID->"7dc10080-132b-4db8-9753-6d056885fa82"],

Cell["Classification", "Keywords",
 CellChangeTimes->{{3.93250658208519*^9, 3.932506596015308*^9}},
 CellID->2059015497,ExpressionUUID->"82b68ea5-1561-4f4d-ab05-3f27026ed83f"],

Cell["Workflow", "Keywords",
 CellChangeTimes->{{3.93250658208519*^9, 3.932506598060974*^9}},
 CellID->1325098165,ExpressionUUID->"88e8545d-20c9-45cb-93d9-a1d03173e19d"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1523, 1353},
WindowMargins->{{Automatic, 773}, {Automatic, 0}},
TaggingRules-><|"Paclet" -> "AntonAntonov/MonadicContextualClassification"|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "TechNotePageStylesExt.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"12f0f6b9-755c-4ae5-830c-923f7ae1bd43"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "GenericPipeline"->{
  Cell[837212, 14601, 1384, 30, 80, "DisplayMath",ExpressionUUID->"bde03923-5c56-4173-b32e-8b0af6507e60",
   CellTags->"GenericPipeline",
   CellID->1933261122]},
 "Eq:ClConStateMonad"->{
  Cell[839828, 14666, 3967, 91, 118, "DisplayMath",ExpressionUUID->"1d25bbd8-6c99-46ad-8a26-7690bed20426",
   CellTags->"Eq:ClConStateMonad",
   CellID->1913527901]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"GenericPipeline", 2863536, 54106},
 {"Eq:ClConStateMonad", 2863724, 54110}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[576, 22, 122, 1, 140, "Title",ExpressionUUID->"9474c70f-ea41-4bab-915c-5703a8faaaec",
 CellID->165712792],
Cell[CellGroupData[{
Cell[723, 27, 175, 2, 55, "Section",ExpressionUUID->"f0f2ea4e-61df-4878-a7a6-aa4b79bab3ab",
 CellID->1984562501],
Cell[901, 31, 551, 9, 76, "Text",ExpressionUUID->"89c0e883-a178-4082-ba9c-85485d89c52c",
 CellID->1973432750],
Cell[1455, 42, 425, 7, 53, "Text",ExpressionUUID->"aaf144a9-49c9-4a59-97f8-a22ad1df81cb",
 CellID->1746784982],
Cell[1883, 51, 4566, 115, 99, "Text",ExpressionUUID->"0ef31b06-ff5d-46be-aadc-840234c18933",
 CellID->2113737984],
Cell[6452, 168, 1202, 26, 53, "Text",ExpressionUUID->"93ea4686-904b-4596-af32-e66e128edc2d",
 CellID->1919808414],
Cell[7657, 196, 992, 21, 76, "Text",ExpressionUUID->"a8c809b1-c9c1-424b-8150-11f14fa09af0",
 CellID->278217923],
Cell[CellGroupData[{
Cell[8674, 221, 317, 7, 30, "Text",ExpressionUUID->"cfb7fb14-0a42-4884-9d80-e9086b6b47c0",
 CellID->936732342],
Cell[8994, 230, 3606, 102, 215, "Output",ExpressionUUID->"a05d7dd5-7be7-492b-ab42-58f4d8f58a44",
 CellID->457855837],
Cell[12603, 334, 888, 20, 27, "Echo",ExpressionUUID->"5597764f-5a79-4882-bd3f-08c0e79f5fcd",
 CellID->749145258]
}, Open  ]],
Cell[13506, 357, 1202, 28, 53, "Text",ExpressionUUID->"6e88aadf-c525-4d29-ac12-c1b8ffbf3511",
 CellID->187728845],
Cell[14711, 387, 484, 10, 56, "Text",ExpressionUUID->"79ced15c-85d8-4a5e-afe3-992123d1944b",
 CellID->505220472]
}, Open  ]],
Cell[CellGroupData[{
Cell[15232, 402, 272, 4, 55, "Section",ExpressionUUID->"32aa507b-6103-40f5-b148-bdcf8d1110d3",
 CellID->90132666],
Cell[15507, 408, 1028, 19, 30, "Text",ExpressionUUID->"f7874c5c-d68b-4abe-ad9d-4410d01ebd1e",
 CellID->883746327],
Cell[CellGroupData[{
Cell[16560, 431, 182, 2, 44, "MathCaption",ExpressionUUID->"ae5b5193-8fce-4c74-8280-8c807e1b84f1",
 CellID->1788954511],
Cell[16745, 435, 278, 5, 32, "Input",ExpressionUUID->"449c599e-9c5d-4936-8a8b-05e37c7021d9",
 CellID->1836101776]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[17072, 446, 220, 3, 55, "Section",ExpressionUUID->"d7119f5c-9a3e-4ffa-907d-e801a2292568",
 CellID->812892736],
Cell[17295, 451, 618, 10, 53, "Text",ExpressionUUID->"a9f7f3be-b3e0-437e-be5c-1381365882cf",
 CellID->2144735385],
Cell[17916, 463, 285, 6, 30, "Text",ExpressionUUID->"a1786243-d9b8-4120-bff3-f9f8eac4c57f",
 CellID->1054600800],
Cell[18204, 471, 802, 19, 53, "Text",ExpressionUUID->"218a529c-1b5b-425f-9d70-d2e5fcd69e09",
 CellID->1493106909],
Cell[CellGroupData[{
Cell[19031, 494, 183, 2, 51, "Subsection",ExpressionUUID->"dafa2903-3cbf-4323-afdc-48578b7858b4",
 CellID->1301404368],
Cell[CellGroupData[{
Cell[19239, 500, 723, 16, 30, "Text",ExpressionUUID->"9f9d8d17-f071-4cf5-aedb-8346cf5d41c6",
 CellID->582268281],
Cell[19965, 518, 1632, 43, 221, "Input",ExpressionUUID->"f5d51a05-e5ea-4a3c-bb71-dbb0b5f6e801",
 CellID->100019388]
}, Open  ]],
Cell[CellGroupData[{
Cell[21634, 566, 203, 2, 30, "Text",ExpressionUUID->"d029c6c8-0dbd-42af-93ee-0adbc72efc41",
 CellID->1693642162],
Cell[CellGroupData[{
Cell[21862, 572, 954, 26, 103, "Input",ExpressionUUID->"490eda8c-cfab-4128-9eb4-d9b2e2cf1131",
 CellID->148075749],
Cell[22819, 600, 30507, 558, 146, "Output",ExpressionUUID->"21a2711d-0bc7-493b-a4cf-0a345da40d02",
 CellID->60020212]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[53375, 1164, 241, 6, 30, "Text",ExpressionUUID->"a025e85d-2b3d-4b70-9069-b20b0271e6f8",
 CellID->1076109769],
Cell[CellGroupData[{
Cell[53641, 1174, 495, 11, 32, "Input",ExpressionUUID->"d094a1e3-f196-4434-868f-da52f12e3cf0",
 CellID->69612549],
Cell[54139, 1187, 4266, 123, 160, "Echo",ExpressionUUID->"39163e5b-7f4c-466f-8671-a28ae4967561",
 CellID->1589872641]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[58454, 1316, 251, 6, 30, "Text",ExpressionUUID->"c26635c5-6794-4381-8c95-60e1fa1c7f1f",
 CellID->1551487741],
Cell[CellGroupData[{
Cell[58730, 1326, 483, 11, 32, "Input",ExpressionUUID->"011c9304-3635-41a6-910a-5936be9928c6",
 CellID->1108021113],
Cell[59216, 1339, 4339, 121, 260, "Echo",ExpressionUUID->"46ce4e71-10ae-49dd-a073-44e94515ab23",
 CellID->1997941313]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[63604, 1466, 255, 6, 30, "Text",ExpressionUUID->"65631125-c033-4b2d-ab40-6d309757b216",
 CellID->901834175],
Cell[CellGroupData[{
Cell[63884, 1476, 412, 10, 32, "Input",ExpressionUUID->"035b4718-48ae-488e-a089-984761b1a492",
 CellID->187398699],
Cell[64299, 1488, 4083, 114, 259, "Echo",ExpressionUUID->"fd59ae36-1848-454f-8324-f4d65aa09759",
 CellID->1345343099]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[68443, 1609, 218, 2, 51, "Subsection",ExpressionUUID->"909da40b-4fc5-4124-abe3-4bc98eee6a5e",
 CellID->788914581],
Cell[CellGroupData[{
Cell[68686, 1615, 372, 7, 30, "Text",ExpressionUUID->"f1dd0f81-7f56-4da2-bfc4-44be2797ca16",
 CellID->723326289],
Cell[CellGroupData[{
Cell[69083, 1626, 2313, 52, 244, "Input",ExpressionUUID->"68587907-f9fb-4959-9ca0-b39bbb4f5ed1",
 CellID->40013556],
Cell[71399, 1680, 4518, 89, 58, "Output",ExpressionUUID->"90f45692-99d5-4794-980d-c099dc59c70a",
 CellID->155282141],
Cell[75920, 1771, 239, 5, 31, "Output",ExpressionUUID->"405135c7-da4d-46aa-a13c-5b3519885504",
 CellID->634312682]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[76208, 1782, 187, 2, 30, "Text",ExpressionUUID->"575ae709-f0b8-4f92-912c-6970931a17c9",
 CellID->1400122226],
Cell[CellGroupData[{
Cell[76420, 1788, 285, 6, 32, "Input",ExpressionUUID->"ef527797-614c-4e6b-8051-feb6ba1ef224",
 CellID->1875932203],
Cell[76708, 1796, 40199, 759, 246, "Output",ExpressionUUID->"d6f5106e-ace1-4aa0-b1cf-a21a64c3de09",
 CellID->784422666]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[116956, 2561, 188, 2, 30, "Text",ExpressionUUID->"3c273c89-b0a5-4f1b-a6e0-18882fe65506",
 CellID->1479953663],
Cell[CellGroupData[{
Cell[117169, 2567, 856, 15, 32, "Input",ExpressionUUID->"2941dd7f-935b-47e8-90c2-a5b38c9fa856",
 CellID->1425614487],
Cell[118028, 2584, 4448, 129, 140, "Echo",ExpressionUUID->"cffb270d-e14c-40cf-8d6b-97d05658a4e5",
 CellID->389638529]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[122525, 2719, 249, 5, 30, "Text",ExpressionUUID->"323d8581-e140-45b5-b3fa-200bd6428740",
 CellID->783476391],
Cell[CellGroupData[{
Cell[122799, 2728, 532, 12, 56, "Input",ExpressionUUID->"8ead3f34-6c33-4806-a512-b3d08898dd8a",
 CellID->1665463780],
Cell[123334, 2742, 4605, 132, 140, "Echo",ExpressionUUID->"f5fc1f9a-f2a2-4d02-9d16-be6aa69b8882",
 CellID->977117200]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[127988, 2880, 307, 4, 30, "Text",ExpressionUUID->"5ae61193-f7a9-41cc-8f6b-bee6cb4a7eb5",
 CellID->1833428833],
Cell[128298, 2886, 340, 8, 32, "Input",ExpressionUUID->"4c005d67-7b2f-4b0c-96ad-f66ebbe36055",
 CellID->195545428]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[128699, 2901, 255, 3, 55, "Section",ExpressionUUID->"1505f505-dd39-4491-8065-3416e6932e9d",
 CellID->882028486],
Cell[128957, 2906, 397, 7, 30, "Text",ExpressionUUID->"d71dc80d-5a2f-4e09-91ad-6c69d36f7bae",
 CellID->173148961],
Cell[129357, 2915, 255, 3, 31, "ItemNumbered",ExpressionUUID->"240c6439-7812-4ce3-9034-04873b6c5506",
 CellID->274245842],
Cell[129615, 2920, 298, 4, 31, "ItemNumbered",ExpressionUUID->"22bdfd2a-a63c-4079-9fec-3d5c7caae4c5",
 CellID->749960032],
Cell[CellGroupData[{
Cell[129938, 2928, 206, 2, 31, "ItemNumbered",ExpressionUUID->"74515520-960c-47be-9e86-730a29805888",
 CellID->996733581],
Cell[130147, 2932, 293, 5, 42, "SubitemNumbered",ExpressionUUID->"23b517dc-c415-4273-b590-087c15af64ef",
 CellID->1728849267]
}, Open  ]],
Cell[130455, 2940, 260, 3, 42, "ItemNumbered",ExpressionUUID->"d14f81af-f989-466a-aefa-c19a5f4c8165",
 CellID->1315886559],
Cell[CellGroupData[{
Cell[130740, 2947, 258, 3, 31, "ItemNumbered",ExpressionUUID->"6ee529e7-2779-4a04-9c33-1c640c1d6476",
 CellID->1318800307],
Cell[131001, 2952, 269, 3, 42, "SubitemNumbered",ExpressionUUID->"6a52c352-408a-4798-955b-79d072cedbc4",
 CellID->898039062]
}, Open  ]],
Cell[131285, 2958, 299, 4, 30, "Text",ExpressionUUID->"70a4ea86-eb57-4e8b-8ce7-3b5f685e0bdf",
 CellID->827443918],
Cell[131587, 2964, 120642, 1984, 446, "Text",ExpressionUUID->"bf6ac28f-7650-47d2-b1b4-22240fff7412",
 CellID->1423964743],
Cell[CellGroupData[{
Cell[252254, 4952, 565, 9, 99, "Text",ExpressionUUID->"5c5d3e7b-1aec-4c83-9c9d-a75280021a34",
 CellID->741876774],
Cell[252822, 4963, 317677, 5213, 811, "Input",ExpressionUUID->"2a4f6b54-1019-4b46-86ba-613029a76a1f",
 Evaluatable->False,
 CellID->943267184]
}, Open  ]],
Cell[570514, 10179, 482, 8, 53, "Text",ExpressionUUID->"f12543ed-f8ed-45b4-9c80-5eaebe3e0303",
 CellID->37381487],
Cell[570999, 10189, 259552, 4261, 508, "Text",ExpressionUUID->"92eb7ef9-295e-492c-90fb-85b32b15e7c9",
 CellID->645188976],
Cell[830554, 14452, 322, 4, 30, "Text",ExpressionUUID->"7f2b0171-82ad-4eb5-a7c3-e94013940c84",
 CellID->1135513001],
Cell[830879, 14458, 420, 7, 26, "Item",ExpressionUUID->"fc7da13e-58c3-4fd2-af4f-4bb6bffa9091",
 CellID->2027320565],
Cell[831302, 14467, 390, 5, 26, "Item",ExpressionUUID->"5bca434f-a5f1-4384-a0df-83e5262f34c0",
 CellID->1201192653],
Cell[831695, 14474, 442, 6, 26, "Item",ExpressionUUID->"ddc56047-b6e8-4c72-ae36-742522942471",
 CellID->2098637171],
Cell[832140, 14482, 1464, 33, 53, "Text",ExpressionUUID->"db6f776b-5347-4740-a5b6-8ee6208b40df",
 CellID->1523514669],
Cell[833607, 14517, 707, 14, 53, "Text",ExpressionUUID->"5ec96df5-dcbf-4fe8-a8ea-ae42732e38ff",
 CellID->1263518702],
Cell[834317, 14533, 752, 11, 108, "ItemParagraph",ExpressionUUID->"89fb4f9b-6b03-440b-a4d4-212ec3167ad4",
 CellID->1640522978],
Cell[835072, 14546, 817, 18, 53, "Text",ExpressionUUID->"4a2f2b40-2d0a-4bee-8925-c3d671a5de57",
 CellID->727147413]
}, Open  ]],
Cell[CellGroupData[{
Cell[835926, 14569, 315, 4, 55, "Section",ExpressionUUID->"7e349abf-3823-428a-93e7-28357110e07f",
 CellID->1984618861],
Cell[836244, 14575, 678, 17, 53, "Text",ExpressionUUID->"4fc3582c-535b-4a47-8ca8-55c7144f9e9f",
 CellID->773191623],
Cell[836925, 14594, 284, 5, 30, "Text",ExpressionUUID->"5aa92d5e-2eaa-424e-bb04-98b49de9fb18",
 CellID->608059764],
Cell[837212, 14601, 1384, 30, 80, "DisplayMath",ExpressionUUID->"bde03923-5c56-4173-b32e-8b0af6507e60",
 CellTags->"GenericPipeline",
 CellID->1933261122],
Cell[838599, 14633, 1226, 31, 53, "Text",ExpressionUUID->"7fb91505-3f99-4283-921a-d768e91105d3",
 CellID->892098344],
Cell[839828, 14666, 3967, 91, 118, "DisplayMath",ExpressionUUID->"1d25bbd8-6c99-46ad-8a26-7690bed20426",
 CellTags->"Eq:ClConStateMonad",
 CellID->1913527901],
Cell[843798, 14759, 269, 5, 53, "Text",ExpressionUUID->"861466ef-6c24-48d8-b2f3-aad496a14f67",
 CellID->2095818282],
Cell[844070, 14766, 507, 10, 53, "Text",ExpressionUUID->"18bfa128-4a83-4013-abd2-b76590005beb",
 CellID->1391087480],
Cell[844580, 14778, 422, 5, 31, "ItemNumbered",ExpressionUUID->"aa2a584c-3557-4049-8ef9-1f8256b2dc56",
 CellID->352811471],
Cell[845005, 14785, 448, 6, 31, "ItemNumbered",ExpressionUUID->"34bf5e00-2244-42f8-9c09-5c3b289b1bab",
 CellID->500043730],
Cell[845456, 14793, 567, 7, 30, "Text",ExpressionUUID->"1a52b345-4535-4353-b5f4-56adb734182c",
 CellID->1131459399],
Cell[846026, 14802, 254, 3, 30, "Text",ExpressionUUID->"11b10add-53d4-4d2d-950d-a1acc9e2954f",
 CellID->470424808],
Cell[846283, 14807, 266, 3, 26, "Item",ExpressionUUID->"9a108706-792e-4156-ae28-ef73648eaa11",
 CellID->1542443449],
Cell[846552, 14812, 264, 5, 26, "Item",ExpressionUUID->"88835d35-28e9-477b-b6a5-1d224eabb326",
 CellID->1571944406],
Cell[846819, 14819, 411, 7, 46, "Item",ExpressionUUID->"897cd6c6-145c-4f15-b856-06abd2038418",
 CellID->1325806248],
Cell[847233, 14828, 346, 7, 26, "Item",ExpressionUUID->"bf524b0f-9497-4920-88d9-59ea4c37067b",
 CellID->535288864],
Cell[847582, 14837, 289, 5, 26, "Subitem",ExpressionUUID->"d767864f-72df-4164-9f06-9cee380581c5",
 CellID->790939965],
Cell[847874, 14844, 284, 5, 26, "Item",ExpressionUUID->"c63ef1c0-9ac8-49f7-8c5c-8b9e034a41f0",
 CellID->404216825],
Cell[848161, 14851, 306, 4, 26, "Subitem",ExpressionUUID->"4819d7f1-c831-47ef-bdf1-ffa844fbab75",
 CellID->1181402314],
Cell[848470, 14857, 367, 4, 26, "Item",ExpressionUUID->"f7016e91-b88e-4e2f-9923-9687c7bc66e3",
 CellID->194891236],
Cell[848840, 14863, 435, 7, 26, "Item",ExpressionUUID->"07132ad3-3665-40ad-bf9a-0b0810803ced",
 CellID->624441777],
Cell[849278, 14872, 508, 9, 26, "Item",ExpressionUUID->"7b153d42-f197-4461-b9be-05b26c8ec3d0",
 CellID->240363150],
Cell[849789, 14883, 415, 5, 26, "Item",ExpressionUUID->"51535d9c-a801-4f67-8e81-69bed7cd4edd",
 CellID->366722043],
Cell[CellGroupData[{
Cell[850229, 14892, 705, 12, 53, "Text",ExpressionUUID->"5cc4235e-d70e-4df5-8597-87348ab6ffc6",
 CellID->219309811],
Cell[850937, 14906, 194337, 3193, 653, "Input",ExpressionUUID->"316ba527-3fa3-4a31-a3f1-b0c1ba20f32d",
 Evaluatable->False,
 CellID->1035777944]
}, Open  ]],
Cell[1045289, 18102, 386, 7, 53, "Text",ExpressionUUID->"204e56e3-0549-4113-a29e-9a409f4450dd",
 CellID->861542183],
Cell[1045678, 18111, 460, 9, 30, "Text",ExpressionUUID->"523e5900-25b2-4494-887f-01ac10bbb32c",
 CellID->1604721607],
Cell[1046141, 18122, 317, 4, 26, "Item",ExpressionUUID->"d912bac6-0465-4dd6-9371-c15e0fbace1f",
 CellID->308926176],
Cell[1046461, 18128, 313, 4, 26, "Item",ExpressionUUID->"cc66421e-ba33-4966-88bf-981591a0c3fe",
 CellID->1654265233],
Cell[1046777, 18134, 322, 4, 26, "Item",ExpressionUUID->"a5365f4c-dd95-45d8-9a1d-3ef6ac4c13fb",
 CellID->1912476969],
Cell[1047102, 18140, 389, 6, 26, "Item",ExpressionUUID->"dc1e3b99-b5d3-4789-b80d-f5a37e7aba45",
 CellID->1612673334],
Cell[1047494, 18148, 312, 4, 26, "Item",ExpressionUUID->"1b71281d-271c-4775-9d4f-faf1fe2a61a6",
 CellID->809615751],
Cell[1047809, 18154, 322, 4, 26, "Item",ExpressionUUID->"495f9e54-b29a-48cc-8866-9c4ab17af8ab",
 CellID->755539665],
Cell[1048134, 18160, 610, 12, 56, "Text",ExpressionUUID->"aac1bfd6-577e-413d-8e47-17aa269d0607",
 CellID->284344944],
Cell[1048747, 18174, 1181, 26, 53, "Text",ExpressionUUID->"3717c458-e300-48db-829e-456e4bc3aa0b",
 CellID->834359233]
}, Open  ]],
Cell[CellGroupData[{
Cell[1049965, 18205, 318, 4, 55, "Section",ExpressionUUID->"8a12bdc2-46a0-43f2-8495-671a444c821e",
 CellID->7414121],
Cell[1050286, 18211, 505, 9, 53, "Text",ExpressionUUID->"c9a89993-43ea-47b8-b614-68eed4a7557c",
 CellID->55080121],
Cell[1050794, 18222, 746, 17, 81, "Text",ExpressionUUID->"d22e307a-fdcd-468c-b98a-a31ded87ddc2",
 CellID->166141790],
Cell[1051543, 18241, 395, 6, 30, "Text",ExpressionUUID->"1d2ba604-308c-49d8-a28c-5bb68bce476d",
 CellID->616323430],
Cell[1051941, 18249, 279898, 4596, 553, "Text",ExpressionUUID->"c612e99c-953e-4869-9349-526ca85b283c",
 CellID->817462226],
Cell[1331842, 22847, 332, 7, 30, "Text",ExpressionUUID->"171664dd-fee7-4a3b-925b-e6d0c6f219bb",
 CellID->1935952229],
Cell[CellGroupData[{
Cell[1332199, 22858, 488, 8, 53, "Text",ExpressionUUID->"2bb27078-089b-48b4-ad65-d8e31880d881",
 CellID->1024377106],
Cell[1332690, 22868, 9660, 272, 557, "Output",ExpressionUUID->"4d41a645-5162-429a-bf69-91067d55d11f",
 CellID->329622543]
}, Open  ]],
Cell[CellGroupData[{
Cell[1342387, 23145, 193, 2, 30, "Text",ExpressionUUID->"0fb5bcca-7cff-4221-b1e3-fe3e42377bc4",
 CellID->1605754588],
Cell[CellGroupData[{
Cell[1342605, 23151, 330, 8, 27, "Echo",ExpressionUUID->"bb6f7107-cce7-4233-9040-62eae5680dd8",
 CellID->490368667],
Cell[1342938, 23161, 47050, 1128, 332, "Echo",ExpressionUUID->"989fe400-b94c-4edd-90d7-d8281cd81ac3",
 CellID->1731432730]
}, Open  ]]
}, Open  ]],
Cell[1390015, 24293, 387, 7, 53, "Text",ExpressionUUID->"eb82122f-adca-4897-a112-4105746c57b4",
 CellID->1786476260],
Cell[1390405, 24302, 257, 6, 30, "Text",ExpressionUUID->"14b6d3b1-f0ad-4048-a8db-f267cb45029b",
 CellID->1337633113],
Cell[1390665, 24310, 169, 2, 26, "Item",ExpressionUUID->"20918151-4260-45fe-a5db-602209af42c6",
 CellID->1740913395],
Cell[1390837, 24314, 164, 2, 26, "Item",ExpressionUUID->"d5514269-fb9d-4582-9c9f-314cfa477cd6",
 CellID->66739390],
Cell[1391004, 24318, 164, 2, 26, "Item",ExpressionUUID->"6f93bb87-d7fc-4ab2-9620-09353cd1dc3f",
 CellID->702463996],
Cell[1391171, 24322, 188, 2, 26, "Item",ExpressionUUID->"822c45d2-824b-4542-8b24-73946ecec8c0",
 CellID->1594773213],
Cell[1391362, 24326, 490, 9, 56, "Text",ExpressionUUID->"fd4f6b83-68ee-4d57-a723-9def8fef911c",
 CellID->609992684]
}, Open  ]],
Cell[CellGroupData[{
Cell[1391889, 24340, 224, 3, 55, "Section",ExpressionUUID->"d39aae5d-6951-4898-95f7-ef2af435e7a6",
 CellID->1536322582],
Cell[1392116, 24345, 400, 8, 30, "Text",ExpressionUUID->"0e2c60fb-70d1-4b1a-a31c-f0971415835b",
 CellID->1777747793],
Cell[CellGroupData[{
Cell[1392541, 24357, 177, 2, 51, "Subsection",ExpressionUUID->"273198ac-dfb0-4b71-8aa4-6538bcb3d483",
 CellID->667176240],
Cell[CellGroupData[{
Cell[1392743, 24363, 586, 11, 56, "Text",ExpressionUUID->"611c4eb8-efe7-4ebe-8175-7a5170b5c24d",
 CellID->1218944693],
Cell[CellGroupData[{
Cell[1393354, 24378, 638, 17, 32, "Input",ExpressionUUID->"be8c59fe-6e75-41b6-a1fc-0a6f5ac62e8e",
 CellID->1956946518],
Cell[1393995, 24397, 2278, 67, 140, "Echo",ExpressionUUID->"813db96c-022f-46f4-84ec-fb0a3acbe9b1",
 CellID->601331791]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1396334, 24471, 239, 3, 51, "Subsection",ExpressionUUID->"87b1ec8c-8a92-4d94-a7c4-583ed38ec989",
 CellID->1056971830],
Cell[1396576, 24476, 298, 8, 30, "Text",ExpressionUUID->"a6142788-bc94-4059-9d60-7eb5b67c6691",
 CellID->540818826],
Cell[CellGroupData[{
Cell[1396899, 24488, 396, 7, 53, "Text",ExpressionUUID->"dd294405-2af1-4710-bdf3-282448f6c069",
 CellID->1391214478],
Cell[CellGroupData[{
Cell[1397320, 24499, 372, 8, 32, "Input",ExpressionUUID->"e2f78e27-7559-41da-bcf8-da5bc1931de4",
 CellID->339783210],
Cell[1397695, 24509, 4448, 129, 140, "Echo",ExpressionUUID->"ded6388e-a871-4b24-bfb5-d6da4bcf13e1",
 CellID->525368555]
}, Open  ]],
Cell[CellGroupData[{
Cell[1402180, 24643, 448, 9, 32, "Input",ExpressionUUID->"817561a5-ad67-45a0-950a-dbe7ac245f46",
 CellID->1914664133],
Cell[1402631, 24654, 4458, 129, 140, "Echo",ExpressionUUID->"c866b3fe-782d-4f9b-962b-dfcaaf430ba0",
 CellID->1564031068]
}, Open  ]]
}, Open  ]],
Cell[1407116, 24787, 504, 9, 30, "Text",ExpressionUUID->"c24b7acb-96fc-4d0a-940c-8653ef68d3c1",
 CellID->197295922],
Cell[1407623, 24798, 306, 5, 30, "Text",ExpressionUUID->"29291269-176b-4170-ac5e-bee39f7b3398",
 CellID->237810086],
Cell[1407932, 24805, 273, 4, 26, "Item",ExpressionUUID->"8f1679e1-1828-4e47-9aae-67afff6aa97e",
 CellID->407048335],
Cell[1408208, 24811, 272, 4, 26, "Item",ExpressionUUID->"1e4b49b9-af37-47c7-b91f-baf1f51f010d",
 CellID->1525950650],
Cell[1408483, 24817, 249, 3, 26, "Item",ExpressionUUID->"2d1f649d-aae0-4f78-b251-094e1759e738",
 CellID->1402862076],
Cell[CellGroupData[{
Cell[1408757, 24824, 522, 11, 53, "Text",ExpressionUUID->"b3b6cb9e-10ca-4d0e-9ab6-6007c6b2075f",
 CellID->679950919],
Cell[CellGroupData[{
Cell[1409304, 24839, 358, 8, 32, "Input",ExpressionUUID->"d4da1cd0-bca9-4d73-a5c5-2d80a1884f60",
 CellID->1174609946],
Cell[1409665, 24849, 2458, 80, 102, "Output",ExpressionUUID->"2b72b1f1-450d-463b-9f86-922f33aa1db9",
 CellID->1470320596]
}, Open  ]]
}, Open  ]],
Cell[1412150, 24933, 488, 8, 76, "Text",ExpressionUUID->"19d30db6-33c9-4714-968a-e0cbec63e8cf",
 CellID->489205236]
}, Open  ]],
Cell[CellGroupData[{
Cell[1412675, 24946, 227, 3, 51, "Subsection",ExpressionUUID->"d051e7b5-9e4d-4836-8581-4df31424d0c4",
 CellID->1505000736],
Cell[1412905, 24951, 1222, 21, 124, "Text",ExpressionUUID->"d6287112-5b08-426b-a3a4-adeedd6dfd4f",
 CellID->1484975586],
Cell[CellGroupData[{
Cell[1414152, 24976, 253, 6, 30, "Text",ExpressionUUID->"8d0a26ba-6d47-4a9f-b2f1-c7a3b7b4d3ed",
 CellID->2077212115],
Cell[CellGroupData[{
Cell[1414430, 24986, 232, 4, 32, "Input",ExpressionUUID->"0c2325dd-1696-4cb8-8496-2ce405d9f620",
 CellID->62367526],
Cell[1414665, 24992, 238, 5, 31, "Output",ExpressionUUID->"b2821d25-910e-4b13-b4ed-7d8ab9681c7f",
 CellID->583930943]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1414952, 25003, 638, 16, 56, "Text",ExpressionUUID->"05aa8897-7408-4d85-b374-8d61493096ff",
 CellID->906241132],
Cell[CellGroupData[{
Cell[1415615, 25023, 896, 17, 79, "Input",ExpressionUUID->"5f80e6ec-2fd4-4699-853d-4eb772b8706e",
 CellID->1240681000],
Cell[1416514, 25042, 469, 11, 31, "Output",ExpressionUUID->"d48ddcae-6c60-4f32-845d-a38c681cb86e",
 CellID->127092211],
Cell[1416986, 25055, 194, 3, 31, "Output",ExpressionUUID->"c4eb0053-05c7-4223-a6b6-18f7fe00f4e6",
 CellID->1440045159]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1417229, 25064, 483, 9, 30, "Text",ExpressionUUID->"9fe8fbad-4644-4984-bf19-bc8f47edcb31",
 CellID->1602572598],
Cell[CellGroupData[{
Cell[1417737, 25077, 1026, 21, 103, "Input",ExpressionUUID->"cc8b0e85-e6e3-49e1-a6d7-fd7cc2fda216",
 CellID->697753912],
Cell[1418766, 25100, 473, 11, 31, "Output",ExpressionUUID->"c3323e68-750f-4b8e-83ac-5bb911acaf08",
 CellID->698285623],
Cell[1419242, 25113, 194, 3, 31, "Output",ExpressionUUID->"00ba3849-cddb-4e04-aeeb-0624469eb266",
 CellID->88334906]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1419485, 25122, 962, 23, 76, "Text",ExpressionUUID->"e4af2c6d-6901-47d1-b9f6-9c81db296512",
 CellID->1051418433],
Cell[CellGroupData[{
Cell[1420472, 25149, 751, 16, 79, "Input",ExpressionUUID->"d2919d39-3cc0-4c33-953a-72bbd26b8ef2",
 CellID->1694155915],
Cell[1421226, 25167, 581, 14, 31, "Output",ExpressionUUID->"b520cace-0be1-4784-8928-aeb69ffca7a9",
 CellID->733565065],
Cell[1421810, 25183, 193, 3, 31, "Output",ExpressionUUID->"fadbe65e-8b15-4a2e-9e16-1222ccce34d1",
 CellID->324430028]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1422064, 25193, 232, 3, 51, "Subsection",ExpressionUUID->"fe80ff4f-90b8-41aa-945c-3776094018ca",
 CellID->4716573],
Cell[1422299, 25198, 1167, 31, 56, "Text",ExpressionUUID->"c043c679-1cf1-467b-80a1-39f291432d74",
 CellID->1962031119],
Cell[CellGroupData[{
Cell[1423491, 25233, 244, 3, 48, "Subsubsection",ExpressionUUID->"19ba1cee-2ad6-4f65-bf4d-580a7603c94f",
 CellID->1245617348],
Cell[CellGroupData[{
Cell[1423760, 25240, 486, 8, 53, "Text",ExpressionUUID->"9e6b4731-f01c-4e99-a960-5286c57e3b03",
 CellID->1420176880],
Cell[1424249, 25250, 689, 14, 126, "Input",ExpressionUUID->"60686a0e-b323-4283-9591-fc9fb6b1b696",
 CellID->1779569402]
}, Open  ]],
Cell[CellGroupData[{
Cell[1424975, 25269, 261, 3, 30, "Text",ExpressionUUID->"8e6b2915-1df5-4014-972f-a990a9aaa717",
 CellID->1218187645],
Cell[CellGroupData[{
Cell[1425261, 25276, 371, 7, 32, "Input",ExpressionUUID->"c84606cf-bb6f-48a1-90d0-61ce21f7873e",
 CellID->2118142664],
Cell[1425635, 25285, 265, 5, 31, "Output",ExpressionUUID->"93beb2de-0387-42c4-896d-14182fdcf157",
 CellID->623512196]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1425949, 25296, 461, 10, 53, "Text",ExpressionUUID->"2a7db967-10b2-4f58-86c7-f2d07ee21039",
 CellID->2135100736],
Cell[1426413, 25308, 829, 18, 126, "Input",ExpressionUUID->"818feef1-2fa8-4728-ac7e-79509eabcb30",
 CellID->186328582],
Cell[CellGroupData[{
Cell[1427267, 25330, 297, 6, 32, "Input",ExpressionUUID->"2ee98623-5b06-42be-b607-6bc3eee266f2",
 CellID->593320348],
Cell[1427567, 25338, 220, 4, 31, "Output",ExpressionUUID->"0af48ad6-a492-44d3-b668-8e1c8fdb551e",
 CellID->1796764459]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1427848, 25349, 243, 3, 52, "Subsubsection",ExpressionUUID->"3a2d8325-6112-4b4b-9867-a0e5822443c5",
 CellID->507350890],
Cell[CellGroupData[{
Cell[1428116, 25356, 736, 13, 76, "Text",ExpressionUUID->"d2ca8962-7bfe-4a66-9f62-b0f2c1f08757",
 CellID->1536329640],
Cell[1428855, 25371, 1014, 22, 150, "Input",ExpressionUUID->"76d30e94-30f3-4e92-84fc-3bb74b0adcc3",
 CellID->1896371599]
}, Open  ]],
Cell[CellGroupData[{
Cell[1429906, 25398, 360, 6, 53, "Text",ExpressionUUID->"eb51c456-19d8-456e-b4c1-0fde455e9154",
 CellID->1512659266],
Cell[CellGroupData[{
Cell[1430291, 25408, 134, 2, 32, "Input",ExpressionUUID->"9cdda323-8e55-4e04-8606-d346ef3c8fa1",
 CellID->1352870476],
Cell[1430428, 25412, 450674, 8085, 412, "Output",ExpressionUUID->"01859023-9f96-4b61-9cbf-b3f235a224d3",
 CellID->334395390]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1881151, 33503, 241, 4, 30, "Text",ExpressionUUID->"e85e7d32-c93a-4256-932e-019efe59f778",
 CellID->122905794],
Cell[CellGroupData[{
Cell[1881417, 33511, 337, 8, 32, "Input",ExpressionUUID->"726fafc0-b6b3-4f32-89ea-0e26bd526107",
 CellID->1945894991],
Cell[1881757, 33521, 506, 9, 51, "Message",ExpressionUUID->"8f9b5bbf-5cf4-49c6-b271-1d725ea65a27",
 CellID->218615531],
Cell[1882266, 33532, 1008, 20, 81, "Output",ExpressionUUID->"4d07c983-0820-4413-989a-fe373b8cf5b6",
 CellID->2074193147]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1883323, 33558, 350, 7, 30, "Text",ExpressionUUID->"223c84a8-d43f-4cd3-b51c-37581a13f82f",
 CellID->161074978],
Cell[1883676, 33567, 597, 12, 56, "Input",ExpressionUUID->"73c442aa-1ca6-4192-ada0-1b0278a44e7f",
 Evaluatable->False,
 CellID->1357760026]
}, Open  ]],
Cell[1884288, 33582, 537, 12, 56, "Text",ExpressionUUID->"7c5f3794-dfe8-4ea7-8114-cce0673f4bcd",
 CellID->711523960],
Cell[CellGroupData[{
Cell[1884850, 33598, 299, 6, 30, "Text",ExpressionUUID->"f1403f78-f911-48ee-82f7-1188d10e8d8b",
 CellID->1394249224],
Cell[1885152, 33606, 1574, 33, 221, "Input",ExpressionUUID->"64102b9a-d8c2-4307-b66d-345980e0b008",
 CellID->1952635351],
Cell[CellGroupData[{
Cell[1886751, 33643, 133, 2, 32, "Input",ExpressionUUID->"3183483c-98f9-476e-b3f7-7fc7aebc1f56",
 CellID->97250803],
Cell[1886887, 33647, 458176, 8240, 412, "Output",ExpressionUUID->"8bbf5c18-9a5b-4fe9-992a-dfb1d5672aba",
 CellID->1087194606]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2345136, 41895, 182, 2, 51, "Subsection",ExpressionUUID->"64301a50-4cfe-4606-ba65-2a5b231af549",
 CellID->1120485662],
Cell[2345321, 41899, 257, 5, 30, "Text",ExpressionUUID->"991a8bc6-4e8d-4191-ae01-586bb17409c3",
 CellID->718420691],
Cell[CellGroupData[{
Cell[2345603, 41908, 253, 5, 30, "Text",ExpressionUUID->"f8e0e716-5e13-4c66-b7ee-233d33c8d86d",
 CellID->1343490203],
Cell[2345859, 41915, 785, 16, 103, "Input",ExpressionUUID->"ce04c1d6-59d4-4f83-bc79-281fd88358b0",
 CellID->1396777263]
}, Open  ]],
Cell[CellGroupData[{
Cell[2346681, 41936, 261, 3, 30, "Text",ExpressionUUID->"4ced0cd9-f4df-4523-9faf-80393a658c94",
 CellID->1491713884],
Cell[CellGroupData[{
Cell[2346967, 41943, 657, 12, 103, "Input",ExpressionUUID->"2f710a71-3eee-462b-a331-aec99b74640f",
 CellID->1511153310],
Cell[2347627, 41957, 1148, 25, 78, "Output",ExpressionUUID->"f48407fe-77fa-4e37-b8aa-970757afa78b",
 CellID->1688874366]
}, Open  ]]
}, Open  ]],
Cell[2348802, 41986, 540, 13, 30, "Text",ExpressionUUID->"0b4fbb57-f5eb-4d44-9421-2eed7c940988",
 CellID->2024270529],
Cell[CellGroupData[{
Cell[2349367, 42003, 197, 2, 30, "Text",ExpressionUUID->"100ddd8b-2852-44e8-966a-37b6b7c5458f",
 CellID->1478845129],
Cell[CellGroupData[{
Cell[2349589, 42009, 436, 9, 32, "Input",ExpressionUUID->"96e4340d-27b5-4c1f-8d25-5d3b0ac79d53",
 CellID->2121836372],
Cell[2350028, 42020, 10924, 266, 234, "Echo",ExpressionUUID->"d112bdf5-5345-4433-bff9-5e6e60517818",
 CellID->1620106963]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2361001, 42292, 350, 7, 30, "Text",ExpressionUUID->"4adfb95b-3690-49b0-830f-d7653d4fb4e4",
 CellID->374951667],
Cell[CellGroupData[{
Cell[2361376, 42303, 846, 15, 56, "Input",ExpressionUUID->"f8c95842-8103-4285-8314-700f530794cd",
 CellID->1095646971],
Cell[2362225, 42320, 12821, 317, 243, "Echo",ExpressionUUID->"2c139ed6-c01f-40e5-b130-9b91a1f06056",
 CellID->1192566828]
}, Open  ]]
}, Open  ]],
Cell[2375073, 42641, 1095, 32, 30, "Text",ExpressionUUID->"60008e0b-5f4f-4709-8146-1f2867fbe0f4",
 CellID->324484366],
Cell[CellGroupData[{
Cell[2376193, 42677, 474, 12, 30, "Text",ExpressionUUID->"cceae96c-da92-4d18-80a0-a39b208f79d4",
 CellID->1147759629],
Cell[CellGroupData[{
Cell[2376692, 42693, 525, 12, 32, "Input",ExpressionUUID->"bf6bc578-a366-4b2a-b7f7-ee3b00e2c9e4",
 CellID->1697967249],
Cell[2377220, 42707, 58263, 1263, 185, "Echo",ExpressionUUID->"2bd86878-f766-4324-a31f-b285bbcd2671",
 CellID->1005800745]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2435532, 43976, 830, 14, 79, "Text",ExpressionUUID->"250b4170-0774-4e1f-bc43-6f64451b96f8",
 CellID->586256169],
Cell[CellGroupData[{
Cell[2436387, 43994, 1097, 21, 103, "Input",ExpressionUUID->"c6fa68fd-3b6c-4ca5-bfb5-8344a5cf34e0",
 CellID->552459947],
Cell[2437487, 44017, 28889, 632, 290, "Echo",ExpressionUUID->"a1150daa-8041-428f-9e6e-f84cf8b5a793",
 CellID->1649335678]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2466437, 44656, 193, 2, 51, "Subsection",ExpressionUUID->"b3dfda03-d114-4cae-b432-8168c2259b9f",
 CellID->1000879530],
Cell[CellGroupData[{
Cell[2466655, 44662, 730, 15, 53, "Text",ExpressionUUID->"a7c2ab41-d532-48fa-8e18-11cab24a753a",
 CellID->542853759],
Cell[CellGroupData[{
Cell[2467410, 44681, 395, 7, 79, "Input",ExpressionUUID->"d0627d9f-bc95-433f-8d6b-73f644182531",
 CellID->1232595057],
Cell[2467808, 44690, 576, 11, 54, "Output",ExpressionUUID->"0a8b9c95-820c-45f3-96fa-a55333d8f0af",
 CellID->665824670]
}, Open  ]]
}, Open  ]],
Cell[2468411, 44705, 806, 16, 53, "Text",ExpressionUUID->"7ad68b9a-517e-48c9-a78d-a8418bc7e414",
 CellID->1017864124],
Cell[CellGroupData[{
Cell[2469242, 44725, 336, 6, 30, "Text",ExpressionUUID->"50c8e640-2cfc-4bfb-9d6f-611fb04f7735",
 CellID->387600066],
Cell[CellGroupData[{
Cell[2469603, 44735, 532, 9, 79, "Input",ExpressionUUID->"ba3bb1d7-18c5-414b-b455-18087d43a779",
 CellID->1076407911],
Cell[2470138, 44746, 677, 15, 54, "Output",ExpressionUUID->"d4de8227-a7c9-4903-8f96-e6f30c653f78",
 CellID->2125427820]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2470876, 44768, 233, 3, 51, "Subsection",ExpressionUUID->"1a29cd40-f531-4628-8277-f920244be179",
 CellID->1616510034],
Cell[2471112, 44773, 557, 9, 53, "Text",ExpressionUUID->"8d018d49-6bef-4c3a-867b-4ecac182a64d",
 CellID->868523241],
Cell[CellGroupData[{
Cell[2471694, 44786, 171, 2, 30, "Text",ExpressionUUID->"fc0c30e7-4129-4ab9-8d3e-ecfb23ce62f3",
 CellID->823762828],
Cell[CellGroupData[{
Cell[2471890, 44792, 253, 4, 32, "Input",ExpressionUUID->"b8e02314-3bb9-4a46-89c1-8e6de51474e8",
 CellID->154777987],
Cell[2472146, 44798, 40239, 772, 62, "Output",ExpressionUUID->"940d9eaa-2f1c-4a0d-8cb8-259631e79bb2",
 CellID->822386542]
}, Open  ]],
Cell[CellGroupData[{
Cell[2512422, 45575, 372, 8, 32, "Input",ExpressionUUID->"341eea37-4a6b-453b-866e-d58cbd95f4f5",
 CellID->135789125],
Cell[2512797, 45585, 850, 19, 54, "Output",ExpressionUUID->"b9660073-088b-4388-a962-b5798a253ada",
 CellID->645859302]
}, Open  ]],
Cell[CellGroupData[{
Cell[2513684, 45609, 368, 8, 32, "Input",ExpressionUUID->"5c326328-af86-4206-a0d8-042e3e87175e",
 CellID->335857678],
Cell[2514055, 45619, 848, 19, 54, "Output",ExpressionUUID->"0aa64256-53ea-4766-8348-503373ba1a7e",
 CellID->1574936776]
}, Open  ]],
Cell[CellGroupData[{
Cell[2514940, 45643, 307, 6, 32, "Input",ExpressionUUID->"96d73838-5728-4b69-a171-cbfe37b655d3",
 CellID->1323477786],
Cell[2515250, 45651, 376, 8, 31, "Output",ExpressionUUID->"b40257a4-80ad-44e6-abd0-120458da60dc",
 CellID->78961310]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2515675, 45665, 426, 10, 56, "Text",ExpressionUUID->"68c412c6-cdd5-4cfc-b72d-97e26eeadacd",
 CellID->691926428],
Cell[2516104, 45677, 503, 14, 32, "Input",ExpressionUUID->"cab0c65d-d102-4c46-900c-827460b488a0",
 CellID->583526891],
Cell[CellGroupData[{
Cell[2516632, 45695, 418, 9, 32, "Input",ExpressionUUID->"8cd54c2a-1358-4d86-80a5-71f2b6e5f5e2",
 CellID->1926124835],
Cell[2517053, 45706, 417, 11, 31, "Output",ExpressionUUID->"bf30c76f-0b4d-48c5-8ba8-7d343d408093",
 CellID->2105326971]
}, Open  ]]
}, Open  ]],
Cell[2517497, 45721, 409, 8, 30, "Text",ExpressionUUID->"a16113d3-d005-4512-b758-15a7c3de0964",
 CellID->1038353515]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2517955, 45735, 351, 5, 55, "Section",ExpressionUUID->"c82637d4-7b57-448d-9178-ccfa190bd052",
 CellID->941339873],
Cell[CellGroupData[{
Cell[2518331, 45744, 246, 3, 51, "Subsection",ExpressionUUID->"78d2673a-6a04-43f1-9df0-3c4e3285a909",
 CellID->587218062],
Cell[CellGroupData[{
Cell[2518602, 45751, 566, 14, 30, "Text",ExpressionUUID->"34243a3b-2ceb-42d5-8476-bd083761909d",
 CellID->1686610069],
Cell[2519171, 45767, 435, 11, 32, "Input",ExpressionUUID->"b09279f3-e28d-40bd-b8ff-8f77e53dfb6b",
 CellID->71289283],
Cell[CellGroupData[{
Cell[2519631, 45782, 1255, 24, 197, "Input",ExpressionUUID->"d23bcff7-4a40-440b-acb0-9a31a7d0eafd",
 CellID->2010588002],
Cell[2520889, 45808, 4799, 95, 58, "Output",ExpressionUUID->"db84c901-0ee1-4ad0-8253-9153a8df2edc",
 CellID->1680963192],
Cell[CellGroupData[{
Cell[2525713, 45907, 13976, 327, 287, "Echo",ExpressionUUID->"e9cec85b-7a72-4773-8591-9d160da90767",
 CellID->1800991659],
Cell[2539692, 46236, 152964, 3749, 397, "Echo",ExpressionUUID->"44a67442-b8c3-4009-bd1d-376541c91dd6",
 CellID->484808348]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2692717, 49992, 207, 2, 30, "Text",ExpressionUUID->"e339de92-f602-499c-8fb5-983219b943f2",
 CellID->113125381],
Cell[CellGroupData[{
Cell[2692949, 49998, 443, 10, 32, "Input",ExpressionUUID->"37be80f3-7f4a-4e3a-882e-be65c2367582",
 CellID->775250872],
Cell[2693395, 50010, 27774, 598, 225, "Echo",ExpressionUUID->"f2f64a80-69bd-4d89-a975-9af2c566099b",
 CellID->620948118]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2721230, 50615, 192, 2, 51, "Subsection",ExpressionUUID->"ee821825-5b55-4010-8672-dc5629da8c31",
 CellID->2059309880],
Cell[2721425, 50619, 434, 8, 53, "Text",ExpressionUUID->"830f38a8-35c2-4386-8885-74dcf193e756",
 CellID->1974698108],
Cell[CellGroupData[{
Cell[2721884, 50631, 857, 14, 76, "Text",ExpressionUUID->"ae0c9890-af58-4ee5-8751-a04d7a701b71",
 CellID->1538820418],
Cell[CellGroupData[{
Cell[2722766, 50649, 5576, 113, 621, "Input",ExpressionUUID->"3c573b1c-fed5-4adf-81c5-f51bf51c9283",
 CellID->809204505],
Cell[CellGroupData[{
Cell[2728367, 50766, 10763, 303, 351, "Echo",ExpressionUUID->"c0357a39-8f11-4b14-b8b1-cebc19d7b630",
 CellID->1651978453],
Cell[2739133, 51071, 35233, 879, 227, "Echo",ExpressionUUID->"d430589c-9202-4f92-9b24-cbd3bf6ee426",
 CellID->1648815420],
Cell[2774369, 51952, 1183, 26, 49, "Echo",ExpressionUUID->"2111db4b-a8a6-47c4-bb37-d9f469c711c3",
 CellID->511783052],
Cell[2775555, 51980, 596, 18, 27, "Echo",ExpressionUUID->"769cc3ab-3bfc-4f60-931b-46c663e2a7ca",
 CellID->865748729],
Cell[2776154, 52000, 29094, 730, 227, "Echo",ExpressionUUID->"abdf9873-f5db-4f7b-b42b-f473d7534717",
 CellID->1437179878],
Cell[2805251, 52732, 1183, 26, 49, "Echo",ExpressionUUID->"31b58d42-4268-4fc5-ba48-f659cf725754",
 CellID->1933631737]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[2806473, 52763, 513, 8, 76, "Text",ExpressionUUID->"817fda2b-9327-4046-9d12-4135bce8f7a7",
 CellID->809082115]
}, Open  ]],
Cell[CellGroupData[{
Cell[2807023, 52776, 248, 3, 51, "Subsection",ExpressionUUID->"995e8fa1-5541-456c-99f4-c3f2a3b15673",
 CellID->376654001],
Cell[2807274, 52781, 308, 6, 30, "Text",ExpressionUUID->"fc6859e6-90e1-4dc8-a5e0-45723732d0ca",
 CellID->1789487098],
Cell[CellGroupData[{
Cell[2807607, 52791, 433, 9, 30, "Text",ExpressionUUID->"b09744df-c7ce-4bb2-82ce-dfdf31d9fc59",
 CellID->401179851],
Cell[CellGroupData[{
Cell[2808065, 52804, 870, 17, 103, "Input",ExpressionUUID->"ab855632-a5a7-4ba4-9d23-1c2f7b860696",
 CellID->1678587824],
Cell[2808938, 52823, 1410, 29, 78, "Output",ExpressionUUID->"4e7086b2-da53-4bb9-af47-240b8eacf72b",
 CellID->678573708]
}, Open  ]]
}, Open  ]],
Cell[2810375, 52856, 563, 9, 53, "Text",ExpressionUUID->"340fb7f0-9470-4b8c-91b8-092e68b6812e",
 CellID->1230530513],
Cell[CellGroupData[{
Cell[2810963, 52869, 212, 2, 30, "Text",ExpressionUUID->"1aed4f79-3aa0-4a71-8d61-0d63981d9920",
 CellID->1258811381],
Cell[CellGroupData[{
Cell[2811200, 52875, 1095, 23, 126, "Input",ExpressionUUID->"2eb4af86-d803-42a2-9305-c6dbaf9627a9",
 CellID->1981473870],
Cell[CellGroupData[{
Cell[2812320, 52902, 43367, 979, 355, "Echo",ExpressionUUID->"8d673ebf-645b-429e-b0e2-af2cc942f681",
 CellID->1650144786],
Cell[2855690, 53883, 560, 15, 27, "Echo",ExpressionUUID->"d8632bdd-09d8-4fc6-aec0-c43defab01c5",
 CellID->1379600944]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[2856289, 53903, 441, 10, 30, "Text",ExpressionUUID->"6fccb484-fa14-49be-b5df-e1673e716664",
 CellID->2066715463],
Cell[CellGroupData[{
Cell[2856755, 53917, 237, 4, 30, "Text",ExpressionUUID->"e77abbaf-ff51-4173-92b3-3fe07fd7cdf9",
 CellID->1886280063],
Cell[CellGroupData[{
Cell[2857017, 53925, 1017, 24, 150, "Input",ExpressionUUID->"3e1686e1-88f0-46a1-be70-6ad00c09dfe7",
 CellID->1555421827],
Cell[CellGroupData[{
Cell[2858059, 53953, 464, 12, 27, "Echo",ExpressionUUID->"846bcc0a-dda4-405b-b574-6536cf85e7d2",
 CellID->572129149],
Cell[2858526, 53967, 892, 20, 27, "Echo",ExpressionUUID->"a0ed5bbc-d7d0-42c1-8dbf-e5d61422c137",
 CellID->1490319624]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2859503, 53996, 192, 2, 91, "TutorialMoreAboutSection",ExpressionUUID->"3a52ce6e-3d01-40fe-aac3-ea1c14c3dd5c",
 CellID->1506397430],
Cell[2859698, 54000, 356, 6, 29, "TutorialMoreAbout",ExpressionUUID->"16aea9b1-d3f5-4ffd-8c57-a7cab294926a",
 CellID->1336891527]
}, Open  ]],
Cell[CellGroupData[{
Cell[2860091, 54011, 127, 1, 91, "RelatedTutorialsSection",ExpressionUUID->"66be8181-1a8f-431a-8f84-f44e7e390806",
 CellID->14495728],
Cell[2860221, 54014, 346, 6, 29, "RelatedTutorials",ExpressionUUID->"1d8caa01-5f6e-477d-935f-b15cd5a015b6",
 CellID->964048385]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2860616, 54026, 111, 1, 88, "MetadataSection",ExpressionUUID->"8dc2e718-5120-4c8b-a0c8-22bd85013572",
 CellID->2144573727],
Cell[2860730, 54029, 547, 13, 31, "History",ExpressionUUID->"c8ff13a9-1f75-430d-b910-61c497fe4a05",
 CellID->485098441],
Cell[CellGroupData[{
Cell[2861302, 54046, 123, 1, 25, "CategorizationSection",ExpressionUUID->"85124a3c-59a7-4904-8fc8-4fd825eb83d0",
 CellID->1201573875],
Cell[2861428, 54049, 138, 2, 87, "Categorization",ExpressionUUID->"899f02f0-67fd-4d58-a006-aa2076647030",
 CellID->2063384384],
Cell[2861569, 54053, 173, 2, 87, "Categorization",ExpressionUUID->"5f3039a5-c4ee-4cd5-a0bc-9a97a18d8051",
 CellID->1735410132],
Cell[2861745, 54057, 170, 2, 87, "Categorization",ExpressionUUID->"3ce4d9b3-5e8b-40fd-886d-5df68262af48",
 CellID->2062678617],
Cell[2861918, 54061, 212, 5, 87, "Categorization",ExpressionUUID->"b9e04710-425c-40bc-b222-e9bc867707dd",
 CellID->611002398]
}, Closed]],
Cell[CellGroupData[{
Cell[2862167, 54071, 111, 1, 24, "KeywordsSection",ExpressionUUID->"7a7afe30-0165-4cb5-9f7e-a2898dfaec3b",
 CellID->1997986879],
Cell[2862281, 54074, 166, 2, 23, "Keywords",ExpressionUUID->"e6df1895-f909-4f86-ae7f-d482d450f577",
 CellID->2111170861],
Cell[2862450, 54078, 168, 2, 23, "Keywords",ExpressionUUID->"7dc10080-132b-4db8-9753-6d056885fa82",
 CellID->585712724],
Cell[2862621, 54082, 175, 2, 23, "Keywords",ExpressionUUID->"82b68ea5-1561-4f4d-ab05-3f27026ed83f",
 CellID->2059015497],
Cell[2862799, 54086, 169, 2, 23, "Keywords",ExpressionUUID->"88e8545d-20c9-45cb-93d9-a1d03173e19d",
 CellID->1325098165]
}, Open  ]]
}, Open  ]]
}
]
*)

